;; -*-lisp-*-
(defpackage net.codemac.stumpwm
  (:use :cl :stumpwm))

(in-package :net.codemac.stumpwm)

(setf *config-path* (uiop:subpathname* (user-homedir-pathname) ".config/stumpwm/"))

;; We probably need to set this to something even shorter..
(set-prefix-key (kbd "s-t"))

(load (uiop:subpathname* *config-path* "modeline.lisp"))
(load (uiop:subpathname* *config-path* "window.lisp"))

;; run or rase defcommands (need to macro-it-tize this)
(defcommand run-or-raise-firefox () () (run-or-raise "firefox" '(:class "Firefox")))
(defcommand run-or-raise-chrome-debug () () (run-or-raise "chrome-debug" '(:class "Google-chrome")))
(defcommand run-or-raise-google-emacs () () (run-or-raise "google-emacs" '(:class "GoogleEmacs")))
(defcommand run-or-raise-google-emacs () () (run-or-raise "emacs" '(:class "Emacs")))
(defcommand run-or-raise-manatee () () (run-or-raise "term manatee" '(:class "UXTerm" :instance "manatee")))

(defcommand exec-screens-and-fix () ()
  (progn
    (run-commands "exec screens" "refresh-heads")
    (mapcar
     #'(lambda (h) (enable-mode-line (current-screen) h t))
     (screen-heads (current-screen)))))

; This doesn't work because you need to wait for display devices to settle for a hot moment :(
;
;(defun cm/new-head-hook (new-head current-screen)
;  (run-commands "exec-screens-and-fix"))
;
;(add-hook *new-head-hook* #'cm/new-head-hook)

(define-key *top-map* (kbd "s-n") "pull-hidden-next")
(define-key *root-map* (kbd "s-n") "pull-hidden-next")

(define-key *top-map* (kbd "s-p") "pull-hidden-previous")
(define-key *root-map* (kbd "s-p") "pull-hidden-previous")

(define-key *top-map* (kbd "s-.") "gnext")
(define-key *top-map* (kbd "s-,") "gprev")

(define-key *top-map* (kbd "s-l") "exec notion-lock")

(define-key *top-map* (kbd "s-L") "exec-screens-and-fix")

(define-key *top-map* (kbd "s-c") "exec org-capture")

(define-key *top-map* (kbd "s-f") "float-this")
(define-key *top-map* (kbd "s-u") "unfloat-this")

(define-key *top-map* (kbd "s-h") "exec emacsclient -e '(cm/emacs-expander-frame)'")

;; ion2/ion3/notion copy pasta
(define-key *top-map* (kbd "s-F2") "exec term")
(define-key *root-map* (kbd "c") "exec term")

(define-key *top-map* (kbd "s-F3") "exec")
(define-key *root-map* (kbd ".") "exec")

(define-key *top-map* (kbd "s-Up") "move-focus up")
(define-key *top-map* (kbd "s-Down") "move-focus down")
(define-key *top-map* (kbd "s-Left") "move-focus left")
(define-key *top-map* (kbd "s-Right") "move-focus right")

(define-key *top-map* (kbd "s-RET") "fullscreen")

;; backlight
(define-key *top-map* (kbd "XF86MonBrightnessUp") "exec backlight set +5%")
(define-key *top-map* (kbd "XF86MonBrightnessDown") "exec backlight set -5%")

(define-key *top-map* (kbd "s-XF86MonBrightnessUp") "exec backlight set +1%")
(define-key *top-map* (kbd "s-XF86MonBrightnessDown") "exec backlight set -1%")

;; volume
(define-key *top-map* (kbd "XF86AudioMute") "exec volume mute")
(define-key *top-map* (kbd "XF86AudioLowerVolume") "exec volume down")
(define-key *top-map* (kbd "XF86AudioRaiseVolume") "exec volume up")
(define-key *top-map* (kbd "s-XF86AudioLowerVolume") "exec volume down-small")
(define-key *top-map* (kbd "s-XF86AudioRaiseVolume") "exec volume up-small")
(define-key *top-map* (kbd "XF86AudioMicMute") "exec volume mic-mute")

;; launch that shit
(defvar *launch-shit-map*
  (let ((m (make-sparse-keymap)))
    (define-key m (kbd "f") "run-or-raise-firefox")
    (define-key m (kbd "c") "run-or-raise-chrome-debug")
    (define-key m (kbd "e") "run-or-raise-google-emacs")
    (define-key m (kbd "m") "run-or-raise-manatee")
    m))

(define-key *top-map* (kbd "s-g") '*launch-shit-map*)

;; need to define a "hidden group" that I can toggle on and off for
;; use with my normal scratch. the scratchpad implementation is a
;; little much.

(defvar *scratch-group-name* ".scratch")
(defvar *scratch-group-previous-group* nil)

(add-group (current-screen) *scratch-group-name* :background t)

(defcommand scratch-group-toggle () ()
  (let ((current (current-group)))
    (if (string= *scratch-group-name* (group-name current))
	(run-commands (format nil "gselect ~D" (group-number *scratch-group-previous-group*)))
	(progn
	  (setf *scratch-group-previous-group* current)
	  (run-commands (concatenate 'string "gselect " *scratch-group-name*))))))

(define-key *top-map* (kbd "s-SPC") "scratch-group-toggle")

(setf *normal-border-width* 1)
(setf *maxsize-border-width* 1)
(setf *transient-border-width* 1)
(setf *window-border-style* :tight)

;; Ugh the worst part of stumpwm. This somehow solves many tiny
;; nuanced bugs around dropdown menus in webpages. I have yet to
;; create a great repro of what is happening though, so it's hard to
;; track down.
(setf *mouse-focus-policy* :click)

(setf message-window-gravity :center)

(set-focus-color "yellow")
(set-unfocus-color "grey")
(set-float-focus-color "yellow")
(set-float-unfocus-color "grey")


;; see if appt is due to urgent?
(defun echo-urgent-window (target)
  (message "urgent: ~a" (window-title target)))

(add-hook *urgent-window-hook* 'echo-urgent-window)
