
(1 (zzz-to-char . [(20171231 2219) ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) "Fancy version of `zap-to-char' command" single]) (zygospore . [(20140703 152) nil "reversible C-x 1 (delete-other-windows)" single]) (zweilight-theme . [(20170112 2205) nil "A dark color theme for Emacs." single]) (ztree . [(20180512 1150) ((cl-lib (0))) "Text mode directory tree" tar]) (zpresent . [(20180604 2138) ((emacs (25 1)) (org-parser (0 4)) (dash (2 12 0)) (request (0 3 0))) "Simple presentation mode based on org files." single]) (zoutline . [(20180314 1059) nil "Simple outline library." single]) (zotxt . [(20180517 1847) ((request-deferred (0 2 0))) "Tools to integrate emacs with Zotero via the zotxt plugin." tar]) (zotelo . [(20160602 249) ((cl-lib (0 5))) "Manage Zotero collections from emacs" single]) (zossima . [(20121123 1635) ((inf-ruby (2 2 3))) "Ruby from Emacs" tar]) (zop-to-char . [(20160212 754) ((cl-lib (0 5))) "A replacement of zap-to-char." single]) (zoom-window . [(20170302 27) ((emacs (24 3))) "Zoom window like tmux" single]) (zoom . [(20180310 421) ((emacs (24 4))) "Fixed and automatic balanced window layout" single]) (zone-sl . [(20160201 410) ((emacs (24 3))) "Zone out with steam locomotives." single]) (zone-select . [(20160118 619) ((emacs (24 3)) (dash (2 8))) "Select zone programs." single]) (zone-rainbow . [(20160120 534) ((emacs (24 3))) "Zone out with rainbow." single]) (zone-nyan . [(20170818 944) ((esxml (0 3 1))) "Zone out with nyan cat" single]) (zombie-trellys-mode . [(20150304 648) ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5))) "A minor mode for interaction with Zombie Trellys" single]) (zombie . [(20141222 816) nil "major mode for editing ZOMBIE programs" single]) (znc . [(20160627 1332) ((cl-lib (0 2))) "ZNC + ERC" single]) (zlc . [(20151010 1857) nil "Provides zsh like completion system to Emacs" single]) (zig-mode . [(20180309 1458) ((emacs (24))) "A major mode for the Zig programming language" single]) (zerodark-theme . [(20180528 26) ((all-the-icons (2 0 0)) (magit (2 8 0)) (flycheck (29))) "A dark, medium contrast theme for Emacs" single]) (zephir-mode . [(20170917 2125) ((cl-lib (0 5)) (pkg-info (0 4)) (emacs (24 3))) "Major mode for editing Zephir code" single]) (zenity-color-picker . [(20160302 354) ((emacs (24 4))) "Insert and adjust colors using Zenity" single]) (zencoding-mode . [(20140213 22) nil "Unfold CSS-selector-like expressions to markup" single]) (zenburn-theme . [(20180531 902) nil "A low contrast color theme for Emacs." single]) (zen-and-art-theme . [(20120622 737) nil "zen and art color theme for GNU Emacs 24" single]) (zel . [(20171014 132) ((emacs (25)) (frecency (0 1))) "Access frecent files easily" single]) (zeal-at-point . [(20180131 1554) nil "Search the word at point with Zeal" single]) (z3-mode . [(20151120 1455) ((flycheck (0 23)) (emacs (24))) "A z3/SMTLIBv2 interactive development environment" single]) (youdao-dictionary . [(20180713 2114) ((popup (0 5 0)) (pos-tip (0 4 6)) (chinese-word-at-point (0 2)) (names (0 5)) (emacs (24))) "Youdao Dictionary interface for Emacs" single]) (yoshi-theme . [(20170330 0) nil "Theme named after my cat" single]) (yoficator . [(20180129 1252) nil "Interactively yoficate Russian texts" tar]) (yesql-ghosts . [(20150220 437) ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) "Display ghostly yesql defqueries inline" single]) (ydk-mode . [(20170113 121) nil "Language support for Yu-Gi-Oh! deck files" single]) (ycmd . [(20180520 353) ((emacs (24 4)) (dash (2 13 0)) (s (1 11 0)) (deferred (0 5 1)) (cl-lib (0 6 1)) (let-alist (1 0 5)) (request (0 3 0)) (request-deferred (0 3 0)) (pkg-info (0 6))) "emacs bindings to the ycmd completion server" tar]) (ycm . [(20150822 1136) nil "Emacs client for the YouCompleteMe auto-completion server." single]) (yaxception . [(20150105 652) nil "Provide framework about exception like Java for Elisp" single]) (yatex . [(20180601 2357) nil "Yet Another tex-mode for emacs //野鳥//" tar]) (yatemplate . [(20180617 252) ((yasnippet (0 8 1)) (emacs (24 3))) "File templates with yasnippet" tar]) (yasnippet-snippets . [(20180714 622) ((yasnippet (0 8 0))) "Collection of yasnippet snippets" tar]) (yasnippet . [(20180620 1750) ((cl-lib (0 5))) "Yet another snippet extension for Emacs." single]) (yascroll . [(20170315 1206) ((cl-lib (0 3))) "Yet Another Scroll Bar Mode" single]) (yarn-mode . [(20170709 1237) ((emacs (24 3))) "Major mode for yarn.lock files." single]) (yari . [(20151127 2339) nil "Yet Another RI interface for Emacs" single]) (yard-mode . [(20170817 537) nil "Minor mode for Ruby YARD comments" single]) (yara-mode . [(20170719 2351) ((emacs (24))) "Major mode for editing yara rule file" single]) (yapfify . [(20180105 1447) nil "(automatically) format python buffers using YAPF." single]) (yankpad . [(20180624 1615) ((emacs (24))) "Paste snippets from an org-mode file" single]) (yang-mode . [(20180306 407) nil "major mode for editing YANG files" single]) (yandex-weather . [(20160311 1237) nil "Fetch Yandex Weather forecasts." tar]) (yaml-tomato . [(20151122 2353) ((s (1 9))) "copy or show the yaml path currently under cursor." single]) (yaml-mode . [(20180408 2307) ((emacs (24 1))) "Major mode for editing YAML files" single]) (yalinum . [(20130217 243) nil "yet another display line numbers." single]) (yahtzee . [(20171022 712) ((emacs (24 3))) "The yahtzee game" single]) (yahoo-weather . [(20170822 1544) ((emacs (24))) "Displays weather information in mode-line" single]) (yagist . [(20160417 2208) ((cl-lib (0 3))) "Yet Another Emacs integration for gist.github.com" single]) (yafolding . [(20170304 1917) nil "Yet another folding extension for Emacs" single]) (yabin . [(20140205 1951) nil "Yet Another Bignum package (A thin wrapper of calc.el)." single]) (xwidgete . [(20171118 1316) ((emacs (25))) "enhances usability of current xwidget browser" single]) (xtest . [(20141214 906) ((cl-lib (0 5))) "Simple Testing with Emacs & ERT" single]) (xterm-keybinder . [(20160522 1756) ((emacs (24 3)) (cl-lib (0 5)) (let-alist (1 0 1))) "Let you extra keybinds in xterm/urxvt" tar]) (xterm-color . [(20180202 1518) ((cl-lib (0 5))) "ANSI & XTERM 256 color support" single]) (xresources-theme . [(20160331 702) nil "Use your .Xresources as your emacs theme" single]) (xref-js2 . [(20170530 126) ((emacs (25)) (js2-mode (20150909))) "Jump to references/definitions using ag & js2-mode's AST" single]) (xquery-tool . [(20170605 126) nil "A simple interface to saxonb's xquery." single]) (xquery-mode . [(20170214 319) ((cl-lib (0 5))) "A simple mode for editing xquery programs" single]) (xo . [(20160402 2346) nil "XO linter integration with compilation mode" single]) (xmlunicode . [(20160319 912) nil "Unicode support for XML" tar]) (xmlgen . [(20170411 617) nil "A DSL for generating XML." single]) (xml-rpc . [(20160430 1458) nil "An elisp implementation of clientside XML-RPC" single]) (xml-quotes . [(20151230 1449) nil "read quotations from an XML document" tar]) (xml+ . [(20170727 1651) ((emacs (24 4)) (dash (2 12 0))) "Utilities for xml and html trees" single]) (xkcd . [(20160419 430) ((json (1 3))) "View xkcd from Emacs" single]) (xcscope . [(20180426 12) nil "cscope interface for (X)Emacs" single]) (xcode-project . [(20180509 1218) ((emacs (25))) "A package for reading Xcode project files." tar]) (xcode-mode . [(20160907 508) ((emacs (24 4)) (s (1 10 0)) (dash (2 11 0)) (multiple-cursors (1 0 0))) "A minor mode for emacs to perform Xcode like actions." single]) (xbm-life . [(20160103 217) nil "A XBM version of Conway's Game of Life" single]) (xahk-mode . [(20170821 407) ((emacs (24 1))) "Major mode for editing AutoHotkey scripts." single]) (xah-replace-pairs . [(20180507 1949) ((emacs (24 1))) "emacs lisp functions for multi-pair find/replace." single]) (xah-reformat-code . [(20170821 411) nil "commands to reformat source code." single]) (xah-math-input . [(20180709 2228) ((emacs (24 1))) "a minor mode for inputting math and Unicode symbols." single]) (xah-lookup . [(20171108 241) ((emacs (24 1))) "look up word on internet." single]) (xah-get-thing . [(20170821 353) ((emacs (24 1))) "get thing or selection at point." single]) (xah-fly-keys . [(20180702 1521) ((emacs (24 1))) "ergonomic modal keybinding minor mode." single]) (xah-find . [(20180310 450) ((emacs (24 1))) "find replace in pure emacs lisp. Purpose similar to grep/sed." single]) (xah-elisp-mode . [(20180710 124) ((emacs (24 3))) "Major mode for editing emacs lisp." single]) (xah-css-mode . [(20180629 107) ((emacs (24 3))) "Major mode for editing CSS code." single]) (x86-lookup . [(20180528 935) ((emacs (24 3)) (cl-lib (0 3))) "jump to x86 instruction documentation" single]) (x509-mode . [(20180702 36) ((emacs (24 1)) (cl-lib (0 5))) "View certificates, CRLs and keys using OpenSSL." tar]) (x-path-walker . [(20160922 1135) ((helm-core (1 9 2))) "Navigation feature for JSON/XML/HTML based on path (imenu like)" tar]) (www-synonyms . [(20170128 1451) ((request (0 2 0)) (cl-lib (0 5))) "insert synonym for a word" single]) (wwtime . [(20151122 810) nil "Insert a time of day with appropriate world-wide localization" single]) (wttrin . [(20170614 506) ((emacs (24 4)) (xterm-color (1 0))) "Emacs frontend for weather web service wttr.in" single]) (wsd-mode . [(20170731 837) nil "Emacs major-mode for www.websequencediagrams.com" tar]) (ws-butler . [(20170111 1534) nil "Unobtrusively remove trailing whitespace." single]) (writeroom-mode . [(20170623 327) ((emacs (24 1)) (visual-fill-column (1 9))) "Minor mode for distraction-free writing" tar]) (writegood-mode . [(20180525 643) nil "Polish up poor writing on the fly" single]) (wrap-region . [(20140116 2320) ((dash (1 0 3))) "Wrap text with punctation or tag" single]) (wotd . [(20170328 1248) ((emacs (24 4)) (org (8 2 10))) "Fetch word-of-the-day from multiple online sources" single]) (world-time-mode . [(20140627 107) nil "show whole days of world-time diffs" single]) (workgroups2 . [(20141102 1122) ((cl-lib (0 4)) (dash (2 8 0)) (anaphora (1 0 0)) (f (0 17))) "New workspaces for Emacs" single]) (workgroups . [(20110726 941) nil "workgroups for windows (for Emacs)" single]) (worf . [(20180620 1011) ((swiper (0 7 0)) (ace-link (0 1 0)) (hydra (0 13 0)) (zoutline (0 1 0))) "A warrior does not press so many keys! (in org-mode)" tar]) (wordsmith-mode . [(20171025 730) nil "Syntax analysis and NLP text-processing in Emacs (OSX-only)" single]) (wordnut . [(20180312 2143) ((emacs (24 4))) "Major mode interface to WordNet" tar]) (wordgen . [(20170803 1120) ((emacs (24)) (cl-lib (0 5))) "Random word generator" single]) (wonderland . [(20130912 1819) ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) "declarative configuration for Emacsen" single]) (wolfram-mode . [(20180306 1613) ((emacs (24 3))) "Mathematica editing and inferior mode." single]) (wolfram . [(20170122 2356) nil "Wolfram Alpha Integration" single]) (wn-mode . [(20151109 2152) ((emacs (24))) "numeric window switching shortcuts" single]) (with-simulated-input . [(20170820 2317) ((emacs (24 4)) (seq (2 0)) (s (0))) "A macro to simulate user input non-interactively" single]) (with-namespace . [(20130407 1122) ((dash (1 1 0)) (loop (1 1))) "interoperable elisp namespaces" single]) (with-editor . [(20180618 1602) ((emacs (24 4)) (async (1 9))) "Use the Emacsclient as $EDITOR" tar]) (wispjs-mode . [(20170720 1219) ((clojure-mode (0))) "Major mode for Wisp code." single]) (wisp-mode . [(20180520 58) nil "Tools for wisp: the Whitespace-to-Lisp preprocessor" tar]) (winum . [(20171028 702) ((cl-lib (0 5)) (dash (2 13 0))) "Navigate windows and frames using numbers." single]) (winring . [(20180529 1718) nil "Window configuration rings" single]) (winpoint . [(20131023 1013) nil "Remember buffer positions per-window, not per buffer" single]) (winnow . [(20170903 506) ((emacs (24))) "winnow ag/grep results by matching/excluding lines" single]) (windwow . [(20170815 1848) ((dash (2 11 0)) (cl-lib (0 6 1)) (emacs (24))) "simple workspace management" single]) (windsize . [(20151121 540) nil "Simple, intuitive window resizing" single]) (window-purpose . [(20180531 1336) ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) "Purpose-based window management for Emacs" tar]) (window-numbering . [(20160809 1110) nil "Numbered window shortcuts" single]) (window-number . [(20170731 1851) nil "Select windows by numbers." single]) (window-layout . [(20170214 1633) nil "window layout manager" single]) (window-jump . [(20170809 1508) nil "Move left/right/up/down through your windows." single]) (window-end-visible . [(20140508 1341) nil "Find the last visible point in a window" single]) (windata . [(20090830 340) nil "convert window configuration to list" single]) (win-switch . [(20161009 927) nil "fast, dynamic bindings for window-switching/resizing" single]) (wilt . [(20180220 54) ((emacs (24 3)) (dash (2 12 0)) (s (1 10 0))) "An extensions for calculating WILT in a buffer." single]) (wiki-summary . [(20150408 1422) ((emacs (24))) "View Wikipedia summaries in Emacs easily." single]) (wiki-nav . [(20150223 554) ((button-lock (1 0 2)) (nav-flash (1 0 0))) "Simple file navigation using [[WikiStrings]]" single]) (widgetjs . [(20160719 804) ((makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1)) (s (1 9 0))) "Widgetjs mode" single]) (widget-mvc . [(20150101 2006) nil "MVC framework for the emacs widgets" single]) (wide-column . [(20170925 913) nil "Calls functions dependant on column position." single]) (whole-line-or-region . [(20180324 2119) nil "operate on current line if region undefined" single]) (whizzml-mode . [(20180711 910) ((emacs (24 4))) "Programming mode for editing WhizzML files" tar]) (whitespace-cleanup-mode . [(20170505 1923) nil "Intelligently call whitespace-cleanup on save" single]) (white-theme . [(20160917 1043) ((emacs (24))) "Minimalistic light color theme inspired by basic-theme" single]) (white-sand-theme . [(20151117 848) ((emacs (24))) "Emacs theme with a light background." single]) (whitaker . [(20150814 422) ((dash (2 10 0))) "Comint interface for Whitaker's Words" single]) (which-key . [(20180621 1238) ((emacs (24 4))) "Display available keybindings in popup" single]) (what-the-commit . [(20150901 616) nil "Random commit message generator" single]) (wgrep-pt . [(20140510 1531) ((wgrep (2 1 5))) "Writable pt buffer and apply the changes to files" single]) (wgrep-helm . [(20170510 1539) ((wgrep (2 1 1))) "Writable helm-grep-mode buffer and apply the changes to files" single]) (wgrep-ag . [(20160923 403) ((wgrep (2 1 5)) (cl-lib (0 5))) "Writable ag buffer and apply the changes to files" single]) (wgrep-ack . [(20141012 311) ((wgrep (2 1 1))) "Writable ack-and-a-half buffer and apply the changes to files" single]) (wgrep . [(20180710 2326) nil "Writable grep buffer and apply the changes to files" single]) (weibo . [(20150307 1442) ((cl-lib (0 5))) "Weibo client for Emacs" tar]) (weechat-alert . [(20160416 548) ((weechat (0 3 1)) (cl-lib (0 5)) (alert (1 2))) "Weechat notifier using alerts" single]) (weechat . [(20180513 310) ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) "Chat via WeeChat's relay protocol in Emacs" tar]) (wedge-ws . [(20140714 1449) nil "Wedge whitespace between columns in text" single]) (websocket . [(20180422 1716) ((cl-lib (0 5))) "Emacs WebSocket client and server" single]) (webpaste . [(20180127 1434) ((emacs (24 4)) (request (0 2 0)) (cl-lib (0 5))) "Paste to pastebin-like services" single]) (weblogger . [(20110926 918) ((xml-rpc (1 6 8))) "Weblog maintenance via XML-RPC APIs" single]) (webkit-color-picker . [(20180325 36) ((emacs (26 0)) (posframe (0 1 0))) "Insert and adjust colors using Webkit Widgets" tar]) (web-server . [(20140905 1706) ((emacs (24 3))) "Emacs Web Server" tar]) (web-search . [(20170911 1246) ((emacs (24 3))) "Open a web search" tar]) (web-narrow-mode . [(20170406 1910) ((web-mode (14 0 27))) "quick narrow code block in web-mode" single]) (web-mode-edit-element . [(20161114 954) ((emacs (24 4)) (web-mode (14))) "Helper-functions for attribute- and element-handling" tar]) (web-mode . [(20180628 422) ((emacs (23 1))) "major mode for editing web templates" single]) (web-completion-data . [(20160318 148) nil "Shared completion data for ac-html and company-web" tar]) (web-beautify . [(20161115 1447) nil "Format HTML, CSS and JavaScript/JSON" single]) (web . [(20141231 1201) ((dash (2 9 0)) (s (1 5 0))) "useful HTTP client" single]) (weather-metno . [(20150831 1807) ((emacs (24)) (cl-lib (0 3))) "Weather data from met.no in Emacs" tar]) (wcheck-mode . [(20180126 416) nil "General interface for text checkers" tar]) (wc-mode . [(20170126 2029) nil "Running word count with goals (minor mode)" single]) (wc-goal-mode . [(20140829 659) nil "Running word count with goals (minor mode)" single]) (wavefront-obj-mode . [(20170808 1016) nil "Major mode for Wavefront obj files" single]) (watch-buffer . [(20120331 1344) nil "run a shell command when saving a buffer" single]) (warm-night-theme . [(20161101 728) ((emacs (24))) "Emacs 24 theme with a dark background." single]) (wanderlust . [(20180605 631) ((semi (1 14 7))) "Yet Another Message Interface on Emacsen" tar]) (wandbox . [(20170603 531) ((emacs (24)) (request (0 3 0)) (s (1 10 0))) "Wandbox client" tar]) (wand . [(20180112 454) ((dash (20161121 55)) (s (20160928 636))) "Magic wand for Emacs - Select and execute" tar]) (wakib-keys . [(20180610 1952) ((emacs (24 4))) "Minor Mode for Modern Keybindings" single]) (wakatime-mode . [(20170517 2053) nil "Automatic time tracking extension for WakaTime" single]) (waher-theme . [(20141115 430) ((emacs (24 1))) "Emacs 24 theme based on waher for st2 by dduckster" single]) (waf-mode . [(20170403 1240) nil "Waf integration for Emacs" single]) (wacspace . [(20180311 1650) ((dash (1 2 0)) (cl-lib (0 2))) "The WACky WorkSPACE manager for emACS" tar]) (w3m . [(20180404 2220) nil "an Emacs interface to w3m" tar]) (w32-browser . [(20170101 1154) nil "Run Windows application associated with a file." single]) (vyper-mode . [(20180707 1235) ((emacs (24 3))) "Major mode for the Vyper programming language" single]) (vue-mode . [(20180515 2012) ((mmm-mode (0 5 5)) (vue-html-mode (0 2)) (ssass-mode (0 2)) (edit-indirect (0 1 4))) "Major mode for vue component based on mmm-mode" single]) (vue-html-mode . [(20180428 1335) nil "Major mode for editing Vue.js templates" single]) (volume . [(20150718 1309) nil "tweak your sound card volume from Emacs" single]) (volatile-highlights . [(20160611 1855) nil "Minor mode for visual feedback on some operations." single]) (voca-builder . [(20161101 945) ((popup (0 5 2))) "Helps you build up your vocabulary" single]) (vmd-mode . [(20180223 556) ((emacs (24 3))) "Fast Github-flavored Markdown preview using a vmd subprocess." single]) (vlf . [(20180201 1454) nil "View Large Files" tar]) (visual-regexp-steroids . [(20170221 1853) ((visual-regexp (1 1))) "Extends visual-regexp to support other regexp engines" tar]) (visual-regexp . [(20170228 1716) ((cl-lib (0 2))) "A regexp/replace command for Emacs with interactive visual feedback" single]) (visual-fill-column . [(20180511 211) ((emacs (24 3))) "fill-column for visual-line-mode" single]) (visual-ascii-mode . [(20150129 246) nil "Visualize ascii code (small integer) on buffer." single]) (visible-mark . [(20150623 2150) nil "Make marks visible." single]) (virtualenvwrapper . [(20180211 1744) ((dash (1 5 0)) (s (1 6 1))) "a featureful virtualenv tool for Emacs" single]) (virtualenv . [(20140220 1501) nil "Virtualenv for Python" single]) (vimrc-mode . [(20170814 1837) nil "Major mode for vimrc files" single]) (vimish-fold . [(20171231 2212) ((emacs (24 4)) (cl-lib (0 5)) (f (0 18 0))) "Fold text like in Vim" single]) (vim-region . [(20140329 924) ((expand-region (20140127))) "Select region as vim" single]) (vim-empty-lines-mode . [(20150110 2026) ((emacs (23))) "Vim-like empty line indicator at end of files." single]) (viking-mode . [(20160705 1327) nil "kill first, ask later" single]) (viewer . [(20170106 1802) nil "View-mode extension" single]) (vi-tilde-fringe . [(20141027 1942) ((emacs (24))) "Displays tildes in the fringe on empty lines a la Vi." single]) (vhdl-tools . [(20180610 958) ((ggtags (0 8 12)) (emacs (26 1)) (outshine (2 0)) (helm (2 9 6))) "Utilities for navigating vhdl sources." single]) (vhdl-capf . [(20160221 934) nil "Completion at point function (capf) for vhdl-mode." single]) (vertigo . [(20180408 920) ((dash (2 11 0))) "Jump across lines using the home row." single]) (vertica-snippets . [(20180208 154) ((yasnippet (0 6 1))) "Yasnippets for Vertica" tar]) (vertica . [(20131217 711) ((sql (3 0))) "Vertica SQL mode extension" single]) (verify-url . [(20160426 528) ((cl-lib (0 5))) "find out invalid urls in the buffer or region" single]) (vector-utils . [(20140508 1341) nil "Vector-manipulation utility functions" single]) (vdirel . [(20170605 43) ((emacs (24 4)) (org-vcard (0 1 0)) (helm (1 7 0)) (seq (1 11))) "Manipulate vdir (i.e., vCard) repositories" single]) (vdiff-magit . [(20170519 1407) ((emacs (24 4)) (vdiff (0 3)) (magit (2 10 0))) "magit integration for vdiff" single]) (vdiff . [(20180627 615) ((emacs (24 4)) (hydra (0 13 0))) "A diff tool similar to  vimdiff" single]) (vcomp . [(20140906 1508) nil "compare version strings" single]) (vcl-mode . [(20170119 1251) nil "Syntax highlighting for Varnish Command Language" single]) (vc-osc . [(20161119 1155) nil "non-resident support for osc version-control" single]) (vc-msg . [(20180604 1758) ((emacs (24 3)) (popup (0 5 0))) "Show commit information of current line" tar]) (vc-fossil . [(20180215 835) nil "VC backend for the fossil sofware configuraiton management system" tar]) (vc-darcs . [(20170904 2020) ((emacs (24))) "a VC backend for darcs" single]) (vc-check-status . [(20170107 534) nil "Warn you when quitting emacs and leaving repo dirty." tar]) (vc-auto-commit . [(20170107 533) nil "Auto-committing feature for your repository" tar]) (vbasense . [(20140221 1553) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a environment like Visual Basic Editor." tar]) (vala-snippets . [(20150428 2052) ((yasnippet (0 8 0))) "Yasnippets for Vala" tar]) (vala-mode . [(20150324 1525) nil "Vala mode derived mode" single]) (vagrant-tramp . [(20160427 1632) ((dash (2 12 0))) "Vagrant method for TRAMP" tar]) (vagrant . [(20170301 1406) nil "Manage a vagrant box from emacs" single]) (v2ex-mode . [(20160719 2045) ((cl-lib (0 5)) (request (0 2)) (let-alist (1 0 3))) "Major mode for visit http://v2ex.com/ site." single]) (uuidgen . [(20140918 1601) nil "Provides various UUID generating functions" single]) (uuid . [(20120910 151) nil "UUID's for EmacsLisp" single]) (utop . [(20180706 1549) ((emacs (24))) "Universal toplevel for OCaml" single]) (usql . [(20180305 1523) ((emacs (25 1))) "U-SQL support for sql-mode" single]) (use-ttf . [(20180608 2252) ((emacs (24 4)) (s (1 12 0))) "Use the same font cross OS." single]) (use-package-ensure-system-package . [(20180710 29) ((use-package (2 1)) (system-packages (1 0 4))) "auto install system packages" single]) (use-package-el-get . [(20180130 2105) ((use-package (1 0))) "el-get support for use package" single]) (use-package-chords . [(20180703 1258) ((use-package (2 1)) (bind-key (1 0)) (bind-chord (0 2)) (key-chord (0 6))) "key-chord keyword for use-package" single]) (use-package . [(20180715 1101) ((emacs (24 3)) (bind-key (2 4))) "A configuration macro for simplifying your .emacs" tar]) (usage-memo . [(20170925 1737) nil "integration of Emacs help system and memo" single]) (urlenc . [(20140116 656) nil "URL encoding/decoding utility for Emacs." single]) (url-shortener . [(20170804 1942) nil "shorten long url and expand tinyurl" single]) (uptimes . [(20180416 623) ((cl-lib (0 5)) (emacs (24))) "Track and display emacs session uptimes." single]) (upbo . [(20180422 122) ((dash (2 12 0)) (emacs (24 4))) "Karma Test Runner Integration" single]) (untitled-new-buffer . [(20161212 708) ((emacs (24 4)) (magic-filetype (0 2 0))) "Open untitled new buffer like other text editors." single]) (unkillable-scratch . [(20160504 1903) nil "Disallow buffers from being killed by regexp -- default is *scratch* buffer" single]) (universal-emotions-emoticons . [(20171209 1820) ((emacs (24 4))) "Emoticons For The Six Universal Expressions" single]) (unison-mode . [(20160513 801) nil "Syntax highlighting for unison file synchronization program" single]) (unison . [(20160704 40) ((emacs (24 1))) "sync with Unison" single]) (unipoint . [(20140113 1424) nil "a simple way to insert unicode characters by TeX name" single]) (unify-opening . [(20171122 1212) ((emacs (24 4))) "Unify the mechanism to open files" single]) (unidecode . [(20180312 1226) nil "Transliterate Unicode to ASCII" tar]) (unicode-whitespace . [(20140508 1341) ((ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "teach whitespace-mode about fancy characters" single]) (unicode-troll-stopper . [(20151023 1831) nil "Minor mode for Highlighting Unicode homoglyphs" single]) (unicode-progress-reporter . [(20140508 1341) ((emacs (24 1 0)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Progress-reporter with fancy characters" single]) (unicode-input . [(20141218 2320) nil "Support for unicode character input" single]) (unicode-fonts . [(20150826 1532) ((font-utils (0 7 8)) (ucs-utils (0 8 2)) (list-utils (0 4 2)) (persistent-soft (0 8 10)) (pcache (0 3 1))) "Configure Unicode fonts" single]) (unicode-escape . [(20160614 534) ((emacs (24)) (names (20151201 0)) (dash (2 12 1))) "Escape/Unescape unicode notations" single]) (unicode-enbox . [(20140508 1341) ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Surround a string with box-drawing characters" single]) (unicode-emoticons . [(20150204 308) nil "Shortcuts for common unicode emoticons" single]) (unfill . [(20170722 1846) nil "Unfill paragraphs or regions, and toggle between filled & unfilled" single]) (undohist . [(20150315 542) ((cl-lib (1 0))) "Persistent undo history for GNU Emacs" single]) (underwater-theme . [(20131117 1602) nil "A gentle, deep blue color theme" single]) (underline-with-char . [(20170814 223) ((emacs (24))) "Underline with a char" single]) (undercover . [(20180403 752) ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) "Test coverage library for Emacs Lisp" single]) (uncrustify-mode . [(20130707 659) nil "Minor mode to automatically uncrustify." single]) (ukrainian-holidays . [(20130720 649) nil "Ukrainian holidays for Emacs calendar." single]) (ujelly-theme . [(20180214 824) nil "Ujelly theme for GNU Emacs 24 (deftheme)" single]) (uimage . [(20160901 521) nil "An iimage like mode with the ability to display url images" single]) (ucs-utils . [(20150826 714) ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) "Utilities for Unicode characters" tar]) (ubuntu-theme . [(20150805 806) nil "A theme inspired by the default terminal colors in Ubuntu" single]) (typoscript-mode . [(20170126 112) ((emacs (24 4)) (use-package (0))) "mode for TypoScript files" single]) (typo . [(20171209 223) nil "Minor mode for typographic editing" single]) (typit . [(20180317 107) ((emacs (24 4)) (f (0 18)) (mmt (0 1 1))) "Typing game similar to tests on 10 fast fingers" tar]) (typing-game . [(20160426 520) nil "a simple typing game" single]) (typing . [(20171115 2331) nil "The Typing Of Emacs" single]) (typescript-mode . [(20180708 1003) nil "Major mode for editing typescript" single]) (typed-clojure-mode . [(20151003 1122) ((clojure-mode (2 1 1)) (cider (0 10 0 -4))) "Typed Clojure minor mode for Emacs" tar]) (twittering-mode . [(20180507 721) nil "Major mode for Twitter" single]) (twilight-theme . [(20120412 603) nil "Twilight theme for GNU Emacs 24 (deftheme)" single]) (twilight-bright-theme . [(20130605 143) nil "A Emacs 24 faces port of the TextMate theme" single]) (twilight-anti-bright-theme . [(20160622 148) nil "A soothing Emacs 24 light-on-dark theme" single]) (twig-mode . [(20130220 1050) nil "A major mode for twig" single]) (turnip . [(20150308 2329) ((dash (2 6 0)) (s (1 9 0))) "Interacting with tmux from Emacs" single]) (turkish . [(20170910 811) nil "Convert to Turkish characters on-the-fly" single]) (turing-machine . [(20180221 2038) ((emacs (24 4))) "Single-tape Turing machine simulator" single]) (tup-mode . [(20140410 914) nil "Major mode for editing files for Tup" single]) (tumblesocks . [(20140215 1247) ((htmlize (1 39)) (oauth (1 0 3)) (markdown-mode (1 8 1))) "An Emacs tumblr client." tar]) (tumble . [(20160111 2329) ((http-post-simple (0)) (cl-lib (0 5))) "an Tumblr mode for Emacs" single]) (tuareg . [(20180512 1306) ((caml (3 12 0 1))) "OCaml mode for Emacs." tar]) (ttl-mode . [(20160505 132) nil "mode for Turtle (and Notation 3)" single]) (tt-mode . [(20130804 410) nil "Emacs major mode for editing Template Toolkit files." single]) (tss . [(20150913 708) ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a interface for auto-complete.el/flymake.el on typescript-mode." tar]) (ts-comint . [(20171105 2247) nil "Run a Typescript interpreter in an inferior process window." single]) (try . [(20170226 805) ((emacs (24))) "Try out Emacs packages." single]) (truthy . [(20140508 1341) ((list-utils (0 4 2))) "Test the content of a value" single]) (trr . [(20170221 42) nil "a type-writing training program on GNU Emacs." tar]) (trident-mode . [(20130726 1207) ((emacs (24)) (slime (20130526)) (skewer-mode (1 5 0)) (dash (1 0 3))) "Live Parenscript interaction" single]) (treepy . [(20180717 2342) ((emacs (25 1))) "Generic tree traversal tools" single]) (treemacs-projectile . [(20180614 1021) ((projectile (0 14 0)) (treemacs (0))) "Projectile integration for treemacs" single]) (treemacs-evil . [(20180622 426) ((evil (1 2 12)) (treemacs (0))) "Evil mode integration for treemacs" single]) (treemacs . [(20180715 543) ((emacs (25 2)) (cl-lib (0 5)) (dash (2 11 0)) (s (1 10 0)) (f (0 11 0)) (ace-window (0 9 0)) (pfuture (1 2)) (hydra (0 13 2)) (ht (2 2))) "A tree style file explorer package" tar]) (tree-mode . [(20151104 531) nil "A mode to manage tree widgets" single]) (travis . [(20150825 438) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Travis" tar]) (transpose-mark . [(20150405 16) nil "Transpose data using the Emacs mark" single]) (transpose-frame . [(20151126 626) nil "Transpose windows arrangement in a frame" single]) (transmission . [(20180610 1653) ((emacs (24 4)) (let-alist (1 0 5))) "Interface to a Transmission session" single]) (transfer-sh . [(20180603 731) ((async (1 0))) "Simple interface for sending buffer contents to transfer.sh" single]) (tramp-term . [(20180223 727) nil "Automatic setup of directory tracking in ssh sessions." single]) (tramp-hdfs . [(20170821 620) ((emacs (24 4))) "Tramp extension to access hadoop/hdfs file system in Emacs" single]) (tracwiki-mode . [(20150119 821) ((xml-rpc (1 6 8))) "Emacs Major mode for working with Trac" single]) (tracking . [(20171210 1302) nil "Buffer modification tracking" tar]) (traad . [(20180716 604) ((dash (2 13 0)) (deferred (0 3 2)) (popup (0 5 0)) (request (0 2 0)) (request-deferred (0 2 0)) (virtualenvwrapper (20151123)) (f (0 20 0))) "emacs interface to the traad refactoring server." single]) (tql-mode . [(20170723 1954) ((emacs (24))) "TQL mode" single]) (toxi-theme . [(20160424 1426) ((emacs (24))) "A dark color theme by toxi" single]) (tox . [(20160810 855) nil "Launch current python test with tox" single]) (totd . [(20150519 740) ((s (1 9 0)) (cl-lib (0 5))) "Display a random daily emacs command." single]) (total-lines . [(20171227 439) ((emacs (24 3))) "Keep track of a buffer's total number of lines" single]) (tornado-template-mode . [(20141128 208) nil "A major mode for editing tornado templates" single]) (tommyh-theme . [(20131004 1630) nil "A bright, bold-colored theme for emacs" single]) (toml-mode . [(20161107 1000) ((emacs (24)) (cl-lib (0 5))) "Major mode for editing TOML files" single]) (toml . [(20130903 555) nil "TOML (Tom's Obvious, Minimal Language) parser" single]) (tomatinho . [(20180621 1048) nil "Simple and beautiful pomodoro timer" tar]) (toggle-window . [(20141207 748) nil "toggle current window size between half and full" single]) (toggle-test . [(20140722 2237) nil "Toggle between source and test files in various programming languages" single]) (toggle-quotes . [(20140710 226) nil "Toggle between single and double quoted string" single]) (toggle . [(20180315 1703) ((cl-lib (0 5))) "quickly open corresponding file (eg test vs impl)." single]) (togetherly . [(20170425 2316) ((cl-lib (0 3))) "allow multiple clients to edit a single buffer online" single]) (todotxt-mode . [(20150424 704) nil "Major mode for editing todo.txt files" single]) (todotxt . [(20180626 1530) nil "A major mode for editing todo.txt files" single]) (toc-org . [(20180613 840) nil "add table of contents to org-mode files (formerly, org-toc)" single]) (tmmofl . [(20121025 401) nil "Calls functions dependant on font lock highlighting at point" single]) (tldr . [(20180122 312) ((emacs (24 3))) "tldr client for Emacs" single]) (tj3-mode . [(20180519 528) nil "major mode for editing TaskJuggler 3 files" single]) (tinysegmenter . [(20141124 213) ((cl-lib (0 5))) "Super compact Japanese tokenizer in Javascript ported to emacs lisp" single]) (tiny-menu . [(20161213 435) ((emacs (24 4))) "Display tiny menus." single]) (tiny . [(20170903 249) nil "Quickly generate linear ranges in Emacs" single]) (tinkerer . [(20170906 524) ((s (1 2 0))) "Elisp wrapper for Tinkerer Blogging Engine." single]) (timp . [(20160618 103) ((emacs (24 4)) (cl-lib (0 5)) (fifo-class (1 0)) (signal (1 0))) "Multithreading library" tar]) (timonier . [(20170411 100) ((emacs (24 4)) (s (1 11 0)) (f (0 19 0)) (dash (2 12 0)) (pkg-info (0 5 0)) (hydra (0 13 6)) (request (0 2 0)) (all-the-icons (2 0 0))) "Manage Kubernetes Applications" tar]) (timesheet . [(20160530 1445) ((s (1)) (org (7)) (auctex (11))) "Timesheet management add-on for org-mode" tar]) (timer-revert . [(20150122 1232) nil "minor mode to revert buffer for a given time interval." tar]) (timecop . [(20160520 352) ((cl-lib (0 5)) (datetime-format (0 0 1))) "Freeze Time for testing" single]) (time-ext . [(20170126 415) nil "more function for time/date" single]) (tile . [(20161224 1957) ((emacs (25 1)) (s (1 9 0)) (dash (2 12 0)) (stream (2 2 3))) "Tile windows with layouts" single]) (tide . [(20180713 30) ((dash (2 10 0)) (s (1 11 0)) (flycheck (27)) (typescript-mode (0 1)) (cl-lib (0 5))) "Typescript Interactive Development Environment" tar]) (tidal . [(20180410 1245) ((haskell-mode (16)) (emacs (24))) "Interact with TidalCycles for live coding patterns" single]) (tickscript-mode . [(20171218 1803) ((emacs (24 1))) "A major mode for Tickscript files" single]) (thumb-through . [(20120118 2134) nil "Plain text reader of HTML documents" single]) (thrift . [(20140312 1348) nil "Major mode for Apache Thrift files" single]) (threes . [(20160820 542) ((emacs (24)) (seq (1 11))) "A clone of Threes (a tiny puzzle game)" single]) (thread-dump . [(20170816 1150) nil "Java thread dump viewer" single]) (thinks . [(20170802 428) ((cl-lib (0 5))) "Insert text in a think bubble." single]) (thingopt . [(20160520 1618) nil "Thing at Point optional utilities" single]) (therapy . [(20151113 1153) ((emacs (24))) "Hooks for managing multiple Python major versions" single]) (theme-looper . [(20170425 606) ((cl-lib (0 5))) "Loop thru the available color-themes" single]) (theme-changer . [(20171221 1127) nil "Sunrise/Sunset Theme Changer for Emacs" single]) (tfsmacs . [(20180629 1011) ((emacs (25)) (tablist (0 70))) "MS TFS source control interaction." single]) (tf2-conf-mode . [(20161209 820) nil "TF2 Configuration files syntax highlighting" single]) (textx-mode . [(20170516 211) ((emacs (24 3))) "Major mode for editing TextX files" single]) (textmate-to-yas . [(20160409 1008) nil "Import Textmate macros into yasnippet syntax" tar]) (textmate . [(20110816 1446) nil "TextMate minor mode for Emacs" single]) (textile-mode . [(20170304 916) nil "Textile markup editing major mode" single]) (texfrag . [(20180318 1647) ((emacs (25)) (auctex (11 90 2))) "preview LaTeX fragments in alien major modes" single]) (tex-smart-umlauts . [(20160427 58) nil "Smart umlaut conversion for TeX." single]) (test-simple . [(20170527 832) ((cl-lib (0))) "Simple Unit Test Framework for Emacs Lisp" single]) (test-kitchen . [(20171129 1235) nil "Run test-kitchen inside of emacs" single]) (test-case-mode . [(20130525 734) ((fringe-helper (0 1 1))) "unit test front-end" single]) (test-c . [(20180423 1020) ((emacs (24 3))) "quickly test c code" single]) (terraform-mode . [(20170111 2117) ((emacs (24 3)) (hcl-mode (0 3))) "Major mode for terraform configuration file" single]) (tern-django . [(20160221 1123) ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) "Create tern projects for django applications." tar]) (tern-context-coloring . [(20161217 2347) ((emacs (24 3)) (context-coloring (8 1 0)) (tern (0 0 1))) "Use Tern for context coloring" single]) (tern-auto-complete . [(20170521 1235) ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) "Tern Completion by auto-complete.el" single]) (tern . [(20170925 1333) ((json (1 2)) (cl-lib (0 5)) (emacs (24))) "Tern-powered JavaScript integration" single]) (terminal-here . [(20180513 133) ((emacs (24)) (cl-lib (0 5))) "Run an external terminal in current directory" single]) (termbright-theme . [(20151030 1935) ((emacs (24 1))) "a more usable theme for white-on-black terminals" single]) (term-run . [(20151228 105) nil "Run arbitrary command in terminal buffer" single]) (term-projectile . [(20170421 105) ((emacs (24)) (term-manager (0 1 0)) (projectile (0 13 0))) "projectile terminal management" single]) (term-manager . [(20171020 141) ((dash (2 12 0)) (emacs (24 4))) "Contextual terminal management" tar]) (term-cmd . [(20160517 345) ((emacs (24 0)) (dash (2 12 0)) (f (0 18 2))) "Send commands from programs running in term.el." tar]) (term-alert . [(20161119 145) ((emacs (24 0)) (term-cmd (1 1)) (alert (1 1)) (f (0 18 2))) "Notifications when commands complete in term.el." tar]) (term+mux . [(20140210 2349) ((term+ (0 1)) (tab-group (0 1))) "term+ terminal multiplexer and session management" single]) (term+key-intercept . [(20140210 2350) ((term+ (0 1)) (key-intercept (0 1))) "term+ intercept key mapping" single]) (term+ . [(20170508 1717) ((emacs (24)) (cl-lib (0 5))) "term-mode enhancement" tar]) (ten-hundred-mode . [(20161028 1536) ((cl-lib (0 5))) "use only the ten hundred most usual words" tar]) (temporary-persistent . [(20161210 333) ((emacs (24 3)) (names (20151201 0)) (dash (2 12 1)) (s (1 10 0))) "Keep temp notes buffers persistent -*- lexical-binding: t" single]) (template-overlays . [(20180706 432) ((emacs (24 4)) (ov (1 0 6))) "Display template regions using overlays" single]) (telephone-line . [(20180601 1943) ((emacs (24 4)) (cl-lib (0 5)) (cl-generic (0 2)) (seq (1 8))) "Rewrite of Powerline" tar]) (telepathy . [(20131209 458) nil "Access Telepathy from Emacs" single]) (tea-time . [(20120331 120) nil "Simple timer package, useful to make perfect tea." single]) (tdd-status-mode-line . [(20131123 916) nil "TDD status on the mode-line" single]) (tco . [(20160810 1712) ((dash (1 2 0)) (emacs (24))) "tail-call optimisation for Emacs lisp" single]) (tc . [(20180715 6) nil "a Japanese input method with T-Code on Emacs" tar]) (tbx2org . [(20140224 759) ((dash (2 5 0)) (s (1 8 0)) (cl-lib (0 4))) "Tinderbox to org-mode conversion" single]) (tblui . [(20161007 1212) ((dash (2 12 1)) (magit-popup (2 6 0)) (tablist (0 70)) (cl-lib (0 5))) "Define tabulated list UI easily" single]) (tawny-mode . [(20170422 1502) ((cider (0 12)) (emacs (25))) "Ontology Editing with Tawny-OWL" single]) (taskpaper-mode . [(20180710 158) nil "Major mode for working with TaskPaper files" tar]) (tao-theme . [(20171221 1001) nil "This package provides two parametrized uncoloured color themes for Emacs: tao-yin and tao-yang." tar]) (tangotango-theme . [(20170924 809) nil "Tango Palette color theme for Emacs 24." single]) (tango-plus-theme . [(20170214 908) nil "A color theme based on the tango palette" single]) (tango-2-theme . [(20120312 1325) nil "Tango 2 color theme for GNU Emacs 24" single]) (take-off . [(20140531 217) ((emacs (24 3)) (web-server (0 1 0))) "Emacs remote web access" tar]) (tagedit . [(20161121 55) ((s (1 3 1)) (dash (1 0 3))) "Some paredit-like features for html-mode" single]) (tabula-rasa . [(20141215 2147) ((emacs (24 4))) "Distraction free writing mode" single]) (tablist . [(20170219 1935) ((emacs (24 3))) "Extended tabulated-list-mode" tar]) (tabbar-ruler . [(20160801 2007) ((tabbar (2 0 1)) (powerline (2 3)) (mode-icons (0 4 0)) (cl-lib (0 5))) "Pretty tabbar, autohide, use both tabbar/ruler" tar]) (tabbar . [(20160524 1401) nil "Display a tab bar in the header line" tar]) (tab-jump-out . [(20151005 1830) ((dash (2 10)) (emacs (24 4))) "Use tab to jump out of delimiter pairs." single]) (tab-group . [(20140306 650) nil "Grouped tabs and their tabbar" single]) (ta . [(20160619 945) ((emacs (24 3)) (cl-lib (0 5))) "A tool to deal with Chinese homophonic characters" single]) (systemtap-mode . [(20151122 1140) nil "A mode for SystemTap" single]) (systemd . [(20180629 1406) ((emacs (24 4))) "Major mode for editing systemd units" tar]) (system-specific-settings . [(20140818 757) nil "Apply settings only on certain systems" single]) (system-packages . [(20180516 1450) ((emacs (24 3))) "functions to manage system packages" single]) (syntax-subword . [(20160519 1205) nil "make operations on words more fine-grained" single]) (syntactic-sugar . [(20140508 1341) nil "Effect-free forms such as if/then/else" single]) (syntactic-close . [(20180417 2339) ((emacs (24)) (cl-lib (0 5))) "Insert closing delimiter" single]) (synquid . [(20160930 850) ((flycheck (27)) (emacs (24 3))) "Major mode for editing Synquid files" single]) (synosaurus . [(20180125 1034) ((cl-lib (0 5))) "An extensible thesaurus supporting lookup and substitution." tar]) (synonymous . [(20180325 1117) ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) "A thesaurus at your fingertips" single]) (syndicate . [(20160603 823) ((evil (1 0))) "evil keybindings for org-mode" single]) (sync-recentf . [(20160326 1301) nil "Synchronize the recent files list between Emacs instances" single]) (symon-lingr . [(20150719 642) ((symon (1 1 2)) (cl-lib (0 5))) "A notification-based Lingr client powered by symon.el" single]) (symon . [(20170224 33) nil "tiny graphical system monitor" single]) (symbolword-mode . [(20180401 727) ((emacs (24)) (f (0 19 0))) "modify word split" single]) (symbol-overlay . [(20180412 339) ((emacs (24 3))) "Highlight symbols with keymap-enabled overlays" single]) (sx . [(20180606 36) ((emacs (24 1)) (cl-lib (0 5)) (json (1 3)) (markdown-mode (2 0)) (let-alist (1 0 3))) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes" tar]) (sws-mode . [(20150317 1245) nil "(S)ignificant (W)hite(S)pace mode" single]) (swoop . [(20160120 915) ((ht (2 0)) (pcre2el (1 5)) (async (1 1)) (emacs (24))) "Peculiar buffer navigation for Emacs" tar]) (switch-window . [(20180623 1115) ((emacs (24))) "A *visual* way to switch window" tar]) (switch-buffer-functions . [(20171011 1004) nil "Hook run when current buffer changed" single]) (swiper-helm . [(20180131 944) ((emacs (24 1)) (swiper (0 1 0)) (helm (1 5 3))) "Helm version of Swiper." single]) (swiper . [(20180713 946) ((emacs (24 1)) (ivy (0 9 0))) "Isearch with an overview. Oh, man!" single]) (swift3-mode . [(20160918 550) ((emacs (24 4))) "Major-mode for Apple's Swift programming language." tar]) (swift-mode . [(20180610 2154) ((emacs (24 4)) (seq (2 3))) "Major-mode for Apple's Swift programming language." tar]) (sweetgreen . [(20180604 2035) ((dash (2 12 1)) (helm (1 5 6)) (request (0 2 0)) (cl-lib (0 5))) "Order Salads from sweetgreen.com" single]) (swap-regions . [(20180116 253) ((emacs (24 3))) "Swap text in two regions" single]) (swap-buffers . [(20150506 1439) nil "The quickest way to swap buffers between windows. Based on switch-window package." single]) (swagger-to-org . [(20160610 1756) ((emacs (24)) (cl-lib (0 5)) (json (1 4))) "Convert a swagger.json file into an org-mode file" single]) (svnwrapper . [(20180414 1143) ((e2ansi (0 1 1))) "Highlighting and paging for shell command `svn'" tar]) (svg-mode-line-themes . [(20150425 1306) ((xmlgen (0 4))) "SVG-based themes for mode-line" tar]) (suscolors-theme . [(20161109 1215) nil "Colorful theme, inspired by Gruvbox." single]) (supergenpass . [(20130328 2248) nil "SuperGenPass for Emacs" single]) (super-save . [(20171008 3) ((emacs (24 4))) "Auto-save buffers, based on your activity." single]) (suomalainen-kalenteri . [(20170801 126) nil "Finnish national and Christian holidays for calendar" tar]) (sunshine . [(20180325 548) ((cl-lib (0 5))) "Provide weather and forecast information." single]) (sunny-day-theme . [(20140413 1425) nil "Emacs24 theme with a light background." single]) (sunburn-theme . [(20180602 1229) ((emacs (24))) "A low contrast color theme" single]) (suggestion-box . [(20170830 107) ((emacs (25 1)) (popup (0 5 3))) "show tooltip on the cursor" single]) (suggest . [(20180717 1311) ((emacs (24 4)) (loop (1 3)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2))) "suggest elisp functions that give the output requested" single]) (sudoku . [(20161110 2306) ((emacs (24 4))) "Simple sudoku game, can download puzzles" single]) (sudo-ext . [(20170126 414) nil "sudo support" single]) (sudo-edit . [(20180608 911) ((emacs (24)) (cl-lib (0 5))) "Open files as another user" single]) (sudden-death . [(20180216 1623) nil "Totsuzen-no-Shi" single]) (sublimity . [(20170820 827) ((cl-lib (0 3))) "smooth-scrolling, minimap and distraction-free mode" tar]) (sublime-themes . [(20170606 1144) nil "A collection of themes based on Sublime Text" tar]) (subemacs . [(20170401 234) nil "Evaluating expressions in a fresh Emacs subprocess" single]) (subatomic256-theme . [(20130620 1910) nil "Fork of subatomic-theme for terminals." single]) (subatomic-theme . [(20160126 738) nil "Low contrast bluish color theme" single]) (stylus-mode . [(20150313 812) ((sws-mode (0))) "Major mode for editing .jade files" single]) (stylefmt . [(20161025 124) nil "Stylefmt interface" single]) (stupid-indent-mode . [(20170525 417) nil "Plain stupid indentation minor mode" single]) (stumpwm-mode . [(20140130 1816) nil "special lisp mode for evaluating code into running stumpwm" single]) (stripe-buffer . [(20141208 708) ((cl-lib (1 0))) "Use a different background for even and odd lines" single]) (string-utils . [(20140508 1341) ((list-utils (0 4 2))) "String-manipulation utilities" single]) (string-inflection . [(20180518 1707) nil "underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names" single]) (string-edit . [(20160410 2356) ((dash (1 2 0))) "Avoid escape nightmares by editing string in separate buffer" single]) (strie . [(20160211 1422) ((cl-lib (0 5))) "A simple trie data structure implementation" single]) (strace-mode . [(20171116 1239) nil "strace output syntax highlighting" single]) (stock-ticker . [(20150204 252) ((s (1 9 0)) (request (0 2 0))) "Show stock prices in mode line" single]) (stickyfunc-enhance . [(20150429 1114) ((emacs (24 3))) "An enhancement to stock `semantic-stickyfunc-mode'" single]) (sticky . [(20170925 1736) nil "Sticky key for capital letters" single]) (stgit . [(20171130 759) nil "major mode for StGit interaction" single]) (stem-english . [(20180108 1958) ((emacs (24 3))) "- routines for stemming English word" single]) (stem . [(20131102 409) nil "Routines for stemming" single]) (steam . [(20171108 1613) ((cl-lib (0 5))) "Organize and launch Steam games" single]) (status . [(20151230 608) nil "This package adds support for status icons to Emacs." tar]) (state . [(20180627 1256) ((emacs (24))) "Quick navigation between workspaces" single]) (stash . [(20151117 627) nil "lightweight persistent caching" single]) (start-menu . [(20160426 525) ((cl-lib (0 5)) (config-parser (0 1))) "start-menu for executing external program like in windows" single]) (standoff-mode . [(20171115 931) nil "Create stand-off markup, also called external markup." tar]) (stan-snippets . [(20161023 1958) ((stan-mode (9 2 0)) (yasnippet (0 8 0))) "Yasnippets for Stan" tar]) (stan-mode . [(20180110 1441) nil "Major mode for editing Stan files" tar]) (stack-mode . [(20150923 823) ((haskell-mode (13 14)) (cl-lib (0 5)) (flycheck (0 23))) "A minor mode enabling various features based on stack-ide." tar]) (ssh-tunnels . [(20180703 1327) ((cl-lib (0 5)) (emacs (24))) "Manage SSH tunnels" single]) (ssh-deploy . [(20180713 650) ((emacs (24))) "Deployment via TRAMP, global or per directory." tar]) (ssh-config-mode . [(20180609 251) nil "Mode for fontification of ~/.ssh/config" tar]) (ssh-agency . [(20180507 1726) ((emacs (24 4)) (dash (2 10 0))) "manage ssh-agent from Emacs" single]) (ssh . [(20120904 1342) nil "Support for remote logins using ssh." single]) (ssass-mode . [(20180428 1339) ((emacs (24 3))) "Edit Sass without a Turing Machine" single]) (srefactor . [(20180703 1110) ((emacs (24 4))) "A refactoring tool based on Semantic parser framework" tar]) (srcery-theme . [(20180623 619) ((emacs (24))) "Dark color theme." single]) (sr-speedbar . [(20161025 131) nil "Same frame speedbar" single]) (sqlup-mode . [(20170610 837) nil "Upcase SQL words for you" single]) (sqlite . [(20180708 1011) nil "use sqlite via elisp" single]) (sql-indent . [(20170112 1507) nil "indentation of SQL statements" single]) (sql-impala . [(20160427 1658) nil "comint support for Cloudera Impala" single]) (sql-clickhouse . [(20180302 755) ((emacs (24))) "support ClickHouse as SQL interpreter" single]) (spu . [(20161213 1924) ((emacs (24 4)) (signal (1 0)) (timp (1 2 0))) "Silently upgrade package in the background" tar]) (sprunge . [(20160229 1843) ((request (0 2 0)) (cl-lib (0 5))) "Upload pastes to sprunge.us" single]) (sproto-mode . [(20151115 1005) nil "Major mode for editing sproto." single]) (sprintly-mode . [(20121005 2234) ((furl (0 0 2))) "Major mode for dealing with sprint.ly" single]) (springboard . [(20170105 2355) ((helm (1 6 9))) "Temporarily change default-directory for one command" single]) (spray . [(20160304 1420) nil "a speed reading mode" single]) (spotlight . [(20150929 55) ((emacs (24 1)) (swiper (0 6 0)) (counsel (0 6 0))) "search files with Mac OS X spotlight" single]) (spotify . [(20170302 2229) ((cl-lib (0 5))) "Control the spotify application from emacs" single]) (splitter . [(20170809 1508) nil "Manage window splits" single]) (splitjoin . [(20150505 732) ((cl-lib (0 5))) "Transition between multiline and single-line code" single]) (spiral . [(20180223 340) ((emacs (25 1)) (a (0 1 0 -3 4)) (avy (0 4 0)) (clojure-mode (5 6 0)) (highlight (0)) (treepy (1 0 0))) "Clojure IDE based on UNREPL" tar]) (spice-mode . [(20171027 2343) ((emacs (24 3))) "Major mode for SPICE" single]) (sphinx-mode . [(20180620 215) ((f (0 20 0)) (dash (2 14 1))) "Minor mode providing sphinx support." tar]) (sphinx-frontend . [(20161025 58) nil "Launch build process for rst documents via sphinx." single]) (sphinx-doc . [(20160116 317) ((s (1 9 0)) (cl-lib (0 5)) (dash (2 10 0))) "Sphinx friendly docstrings for Python functions" single]) (speeddating . [(20180319 23) ((emacs (25))) "Increase date and time at point" single]) (speed-type . [(20171230 847) ((emacs (24 3)) (cl-lib (0 3))) "Practice touch and speed typing" single]) (speechd-el . [(20180105 1217) nil "Client to speech synthesizers and Braille displays." tar]) (speech-tagger . [(20170728 1129) ((cl-lib (0 5))) "tag parts of speech using coreNLP" tar]) (sparql-mode . [(20180320 1102) ((cl-lib (0 5)) (emacs (24 3))) "Edit and interactively evaluate SPARQL queries." tar]) (sparkline . [(20150101 519) ((cl-lib (0 3))) "Make sparkline images from a list of numbers" single]) (spark . [(20160414 1901) ((emacs (24 3))) "sparkline generation" single]) (spaces . [(20170809 1508) nil "Create and switch between named window configurations." single]) (spacemacs-theme . [(20180618 1129) nil "Color theme with a dark and light versions" tar]) (spaceline-all-the-icons . [(20170829 120) ((emacs (24 4)) (all-the-icons (2 6 0)) (spaceline (2 0 0)) (memoize (1 0 1))) "A Spaceline theme using All The Icons" tar]) (spaceline . [(20180628 46) ((emacs (24 4)) (cl-lib (0 5)) (powerline (2 3)) (dash (2 11 0)) (s (1 10 0))) "Modeline configuration library for powerline" tar]) (spacegray-theme . [(20150719 1231) ((emacs (24 1))) "A Hyperminimal UI Theme" single]) (sourcetrail . [(20170410 1437) ((emacs (24 4))) "Communication with Sourcetrail" single]) (sourcerer-theme . [(20161014 925) nil "A version of sourcerer by xero" single]) (sourcemap . [(20161215 2140) ((emacs (24 3))) "Sourcemap parser" single]) (sourcekit . [(20180101 34) ((emacs (24 3)) (dash (2 12 1)) (dash-functional (1 2 0)) (request (0 2 0))) "Library to interact with sourcekittendaemon" single]) (soundklaus . [(20160314 531) ((dash (2 12 1)) (emacs (24)) (emms (4 0)) (s (1 11 0)) (pkg-info (0 4)) (cl-lib (0 5)) (request (0 2 0))) "Play music on SoundCloud with Emacs via EMMS" tar]) (soundcloud . [(20150501 2026) ((emms (20131016)) (json (1 2)) (deferred (0 3 1)) (string-utils (0 3 2)) (request (20140316 417)) (request-deferred (20130526 1015))) "a SoundCloud client for Emacs" single]) (sound-wav . [(20160725 724) ((deferred (0 3 1)) (cl-lib (0 5))) "Play wav file" single]) (sotlisp . [(20180706 1049) ((emacs (24 1))) "Write lisp at the speed of thought." single]) (sotclojure . [(20170921 1708) ((emacs (24 1)) (clojure-mode (4 0 0)) (cider (0 8)) (sotlisp (1 3))) "Write clojure at the speed of thought." tar]) (sos . [(20141214 2003) ((org (7))) "StackOverflow Search" single]) (sort-words . [(20160929 635) nil "Sort words in a selected region" single]) (soothe-theme . [(20141027 741) ((emacs (24 1))) "a dark colorful theme for Emacs24." single]) (sonic-pi . [(20171205 405) ((cl-lib (0 5)) (osc (0 1)) (dash (2 2 0)) (emacs (24)) (highlight (0))) "A Emacs client for SonicPi" tar]) (solidity-mode . [(20180429 1111) nil "Major mode for ethereum's solidity language" tar]) (solarized-theme . [(20180621 1407) ((emacs (24 1)) (cl-lib (0 5)) (dash (2 6 0))) "The Solarized color theme, ported to Emacs." tar]) (solaire-mode . [(20180521 235) ((emacs (24 4)) (cl-lib (0 5))) "make certain buffers grossly incandescent" single]) (soft-stone-theme . [(20140614 135) ((emacs (24))) "Emacs 24 theme with a light background." single]) (soft-morning-theme . [(20150918 1341) nil "Emacs24 theme with a light background." single]) (soft-charcoal-theme . [(20140420 943) nil "Dark charcoal theme with soft colors" single]) (socyl . [(20170211 2242) ((s (1 11 0)) (dash (2 12 0)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Frontend for several search tools" tar]) (snoopy . [(20171008 1304) ((emacs (24)) (cl-lib (0 6))) "minor mode for number row unshifted character insertion" single]) (snippet . [(20130210 1515) nil "Insert snippets of text into a buffer" single]) (snazzy-theme . [(20170823 1132) ((emacs (24)) (base16-theme (2 1))) "An elegant syntax theme with bright colors" single]) (snapshot-timemachine-rsnapshot . [(20170324 513) ((snapshot-timemachine (20160222 132)) (seq (2 19))) "rsnapshot backend for snapshot-timemachine" single]) (snapshot-timemachine . [(20161221 129) ((emacs (24 4))) "Step through (Btrfs, ZFS, ...) snapshots of files" single]) (snakemake-mode . [(20180519 1739) ((emacs (24)) (cl-lib (0 5)) (magit-popup (2 4 0))) "Major mode for editing Snakemake files" tar]) (smyx-theme . [(20141127 28) nil "smyx Color Theme" single]) (smtpmail-multi . [(20160218 1549) nil "Use different smtp servers for sending mail" single]) (smotitah . [(20150218 230) nil "Modular emacs configuration framework" tar]) (smooth-scrolling . [(20161002 1249) nil "Make emacs scroll smoothly" single]) (smooth-scroll . [(20130321 2114) nil "Minor mode for smooth scrolling and in-place scrolling." single]) (smmry . [(20161024 201) nil "SMMRY client" single]) (sml-modeline . [(20170614 1411) nil "Show position in a scrollbar like way in mode-line" single]) (smiles-mode . [(20160717 420) nil "Major mode for SMILES." single]) (smex . [(20151212 1409) ((emacs (24))) "M-x interface with Ido-style fuzzy matching." single]) (smeargle . [(20161212 1558) ((emacs (24 3))) "Highlighting region by last updated time" single]) (smblog . [(20170419 321) ((emacs (24 3))) "samba log viewer" single]) (smbc . [(20171229 1008) nil "View SMBC from Emacs" single]) (smarty-mode . [(20100703 458) nil "major mode for editing smarty templates" single]) (smartscan . [(20170211 1233) nil "Jumps between other symbols found at point" single]) (smartrep . [(20150508 1930) nil "Support sequential operation which omitted prefix keys." single]) (smartparens . [(20180717 335) ((dash (2 13 0)) (cl-lib (0 3))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar]) (smart-window . [(20160716 1830) ((cl-lib (0 5))) "vim-like window controlling plugin" single]) (smart-tabs-mode . [(20160629 752) nil "Intelligently indent with tabs, align with spaces!" single]) (smart-tab . [(20170902 1407) nil "Intelligent tab completion and indentation." single]) (smart-shift . [(20150202 2325) nil "Smart shift text left/right." single]) (smart-semicolon . [(20171007 1833) ((emacs (25))) "Insert semicolon smartly" single]) (smart-region . [(20150903 703) ((emacs (24 4)) (expand-region (0 10 0)) (multiple-cursors (1 3 0)) (cl-lib (0 5))) "Smartly select region, rectangle, multi cursors" single]) (smart-newline . [(20131207 1940) nil "Provide smart newline for one keybind." single]) (smart-mode-line-powerline-theme . [(20160705 1738) ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) "smart-mode-line theme that mimics the powerline appearance." tar]) (smart-mode-line . [(20180422 1459) ((emacs (24 3)) (rich-minority (0 1 1))) "A color coded smart mode-line." tar]) (smart-mark . [(20150911 1910) nil "Restore point after C-g when mark" single]) (smart-jump . [(20180709 2205) ((emacs (25 1)) (dumb-jump (0 5 1))) "Smart go to definition." tar]) (smart-indent-rigidly . [(20141205 1615) nil "Smart rigid indenting" single]) (smart-hungry-delete . [(20170412 643) ((emacs (24 3))) "smart hungry deletion of whitespace" single]) (smart-forward . [(20140430 13) ((expand-region (0 8 0))) "Semantic navigation" single]) (smart-dash . [(20110130 1916) nil "Smart-Dash minor mode" single]) (smart-cursor-color . [(20141124 919) nil "Change cursor color dynamically" single]) (smart-compile . [(20180315 2030) nil "an interface to `compile'" single]) (smart-comment . [(20160322 1139) nil "smarter commenting" single]) (smart-backspace . [(20171013 2226) nil "intellj like backspace" single]) (sly-repl-ansi-color . [(20171020 816) ((sly (0)) (cl-lib (0 5))) "Add ANSI colors support to the sly mrepl." single]) (sly-quicklisp . [(20170112 135) ((sly (1 0 0 -2 2))) "Quicklisp support for SLY" tar]) (sly-named-readtables . [(20150817 816) ((sly (1 0 0 -2 2))) "Support named readtables in Common Lisp files" tar]) (sly-macrostep . [(20160119 434) ((sly (1 0 0 -2 2)) (macrostep (0 9))) "fancy macro-expansion via macrostep.el" tar]) (sly-hello-world . [(20160119 636) ((sly (1 0 0 -2 2))) "A template SLY contrib" tar]) (sly . [(20180716 1617) ((emacs (24 3))) "Sylvester the Cat's Common Lisp IDE" tar]) (slstats . [(20170823 149) ((cl-lib (0 5)) (emacs (24))) "Acquire and display stats about Second Life" single]) (slovak-holidays . [(20150418 155) nil "Adds a list of slovak holidays to Emacs calendar" single]) (slirm . [(20160201 625) ((emacs (24 4))) "Systematic Literature Review Mode for Emacs." single]) (slime-volleyball . [(20140717 2141) nil "An SVG Slime Volleyball Game" tar]) (slime-theme . [(20170808 622) ((emacs (24 0))) "an Emacs 24 theme based on Slime (tmTheme)" single]) (slime-docker . [(20171004 1151) ((emacs (24)) (slime (2 16)) (docker-tramp (0 1)) (cl-lib (0 5))) "Integration of SLIME with Docker containers." tar]) (slime-company . [(20180119 1043) ((emacs (24 4)) (slime (2 13)) (company (0 9 0))) "slime completion backend for company mode" single]) (slime . [(20180717 1620) ((cl-lib (0 5)) (macrostep (0 9))) "Superior Lisp Interaction Mode for Emacs" tar]) (slim-mode . [(20170728 648) nil "Major mode for editing Slim files" single]) (slideview . [(20150324 1540) ((cl-lib (0 3))) "File slideshow" single]) (slack . [(20180712 2222) ((websocket (1 8)) (request (0 2 0)) (oauth2 (0 10)) (circe (2 2)) (alert (1 2)) (emojify (0 2))) "Slack client for Emacs" tar]) (sl . [(20161217 604) ((cl-lib (0 5))) "An Emacs clone of sl(1)" tar]) (skype . [(20160711 124) nil "skype UI for emacs users.." tar]) (skewer-reload-stylesheets . [(20160725 520) ((skewer-mode (1 5 3))) "live-edit CSS, SCSS, Less, and friends." tar]) (skewer-mode . [(20180706 1107) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar]) (skewer-less . [(20160828 1321) ((skewer-mode (1 5 3))) "Skewer support for live LESS stylesheet updates" single]) (skeletor . [(20170616 1746) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar]) (simplezen . [(20130421 300) ((s (1 4 0)) (dash (1 1 0))) "A simple subset of zencoding-mode for Emacs." single]) (simplenote2 . [(20171201 1806) ((request-deferred (0 2 0))) "Interact with app.simplenote.com" tar]) (simplenote . [(20141118 640) nil "Interact with simple-note.appspot.com" single]) (simpleclip . [(20170803 540) nil "Simplified access to the system clipboard" single]) (simple-screen . [(20161009 220) nil "Simple screen configuration manager" single]) (simple-rtm . [(20160222 734) ((rtm (0 1)) (dash (2 0 0))) "Interactive Emacs mode for Remember The Milk" single]) (simple-paren . [(20180427 218) ((emacs (24)) (cl-lib (0 5))) "Insert paired delimiter, wrap" single]) (simple-mpc . [(20180715 1829) ((s (1 10 0))) "provides a simple interface to mpc" tar]) (simple-httpd . [(20180528 903) ((cl-lib (0 3))) "pure elisp HTTP server" single]) (simple-call-tree . [(20180224 1256) ((emacs (24 3)) (anaphora (1 0 0))) "analyze source code based on font-lock text-properties" single]) (simple-bookmarks . [(20160804 701) ((cl-lib (0 5))) "Bookmark / functioncall manager" tar]) (simp . [(20180606 1954) nil "Simple project definition, chiefly for file finding, and grepping" tar]) (silkworm-theme . [(20180301 637) ((emacs (24))) "Light theme with pleasant, low contrast colors." single]) (signature . [(20140730 1249) nil "Signature Survey" tar]) (signal . [(20160816 738) ((emacs (24)) (cl-lib (0 5))) "Advanced hook" single]) (sift . [(20160107 215) nil "Front-end for sift, a fast and powerful grep alternative" single]) (side-notes . [(20180523 2328) ((emacs (24 5))) "Easy access to a directory notes file" single]) (sicp . [(20171028 1523) nil "Structure and Interpretation of Computer Programs in info format" tar]) (sibilant-mode . [(20151119 1345) nil "Support for the Sibilant programming language" single]) (shx . [(20180528 1408) ((emacs (24 4))) "\"Extras\" for the (comint-mode) shell" single]) (shut-up . [(20180628 1130) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" single]) (shrink-whitespace . [(20150916 1215) nil "Whitespace removal DWIM key" single]) (shrink-path . [(20170812 1947) ((emacs (24)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0))) "fish-style path" single]) (shr-tag-pre-highlight . [(20171113 114) ((emacs (25 1)) (language-detection (0 1 0))) "Syntax highlighting code block in HTML" single]) (shpec-mode . [(20150530 222) nil "Minor mode for shpec specification" single]) (showtip . [(20090830 340) nil "Show tip at cursor" single]) (show-marks . [(20130805 749) ((fm (1 0))) "Navigate and visualize the mark-ring" single]) (show-css . [(20160210 608) ((doom (1 3)) (s (1 10 0))) "Show the css of the html attribute the cursor is on" tar]) (shoulda . [(20140616 1133) ((cl-lib (0 5))) "Shoulda test support for ruby" single]) (shm . [(20180326 1757) nil "Structured Haskell Mode" tar]) (shimbun . [(20180325 2048) nil "interfacing with web newspapers" tar]) (shift-text . [(20130831 955) ((cl-lib (1 0)) (es-lib (0 3))) "Move the region in 4 directions, in a way similar to Eclipse's" single]) (shift-number . [(20170301 659) nil "Increase/decrease the number at point" single]) (shen-elisp . [(20170427 1502) ((emacs (24 4))) "Shen implementation in Elisp" tar]) (shelltest-mode . [(20180430 1841) nil "Major mode for shelltestrunner" single]) (shelldoc . [(20151114 1925) ((cl-lib (0 3)) (s (1 9 0))) "shell command editing support with man page." single]) (shell-toggle . [(20150226 611) nil "Toggle to and from the shell buffer" single]) (shell-switcher . [(20161028 2252) ((emacs (24))) "Provide fast switching between shell buffers." tar]) (shell-split-string . [(20151224 208) nil "Split strings using shell-like syntax" single]) (shell-pop . [(20170304 616) ((emacs (24)) (cl-lib (0 5))) "helps you to use shell easily on Emacs. Only one key action to work." single]) (shell-history . [(20100505 139) nil "integration with shell history" single]) (shell-here . [(20150728 1004) nil "Open a shell relative to the working directory" single]) (shell-current-directory . [(20140101 1554) nil "create new shell based on buffer directory" single]) (shell-command . [(20090830 340) nil "enables tab-completion for `shell-command'" single]) (shampoo . [(20131230 219) nil "A remote Smalltalk development mode" tar]) (shakespeare-mode . [(20180704 1438) nil "A major mode for editing Shakespearean templates." single]) (shader-mode . [(20180518 457) ((emacs (24))) "Major mode for shader" single]) (shadchen . [(20141102 1039) nil "pattern matching for elisp" single]) (shackle . [(20171209 1401) ((cl-lib (0 5))) "Enforce rules for popups" single]) (sexy-monochrome-theme . [(20180526 108) nil "A sexy dark Emacs >= 24 theme for your sexy code" single]) (sexp-move . [(20150915 1030) nil "Improved S-Expression Movement" single]) (seti-theme . [(20161208 836) nil "A dark colored theme, inspired by Seti Atom Theme" single]) (session . [(20120510 1700) nil "use variables, registers and buffer places across sessions" single]) (sesman . [(20180628 659) ((emacs (25))) "Generic Session Manager" single]) (services . [(20170802 430) ((cl-lib (0 5))) "Services database access functions." single]) (serverspec . [(20150623 455) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) "Serverspec minor mode" tar]) (servant . [(20140216 419) ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) "ELPA server written in Emacs Lisp" tar]) (sequential-command . [(20170925 1740) nil "Many commands into one command" tar]) (sequences . [(20170818 552) ((emacs (24))) "Ports of some Clojure sequence functions." single]) (seoul256-theme . [(20180505 57) ((emacs (24 3))) "Low-contrast color scheme based on Seoul Colors." single]) (sentence-navigation . [(20180408 919) ((ample-regexps (0 1)) (cl-lib (0 5)) (emacs (24 4))) "Commands to navigate one-spaced sentences." single]) (sensitive . [(20170818 551) ((emacs (24)) (sequences (0 1 0))) "A dead simple way to load sensitive information" single]) (sendto . [(20160425 550) ((emacs (24 4))) "send the region content to a function" single]) (semi . [(20180204 1448) ((flim (1 14 9))) "A library to provide MIME features." tar]) (selectric-mode . [(20170216 311) nil "IBM Selectric mode for Emacs" tar]) (selected . [(20170222 34) nil "Keymap for when region is active" single]) (select-themes . [(20160220 1706) nil "Color theme selection with completing-read" single]) (sekka . [(20170803 547) ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 2))) "A client for Sekka IME server" single]) (seethru . [(20150218 1029) ((shadchen (1 4))) "Easily change Emacs' transparency" single]) (seeing-is-believing . [(20170214 520) nil "minor mode for running the seeing-is-believing ruby gem" single]) (see-mode . [(20180510 1741) ((emacs (24 4)) (language-detection (0 1 0))) "Edit string  in a separate buffer" single]) (secretaria . [(20180104 720) ((emacs (24 4)) (alert (1 2)) (s (1 12)) (f (0 19 0))) "A personal assistant based on org-mode" tar]) (seclusion-mode . [(20121118 1553) nil "Edit in seclusion. A Dark Room mode." single]) (searchq . [(20150829 511) ((emacs (24 3))) "Framework of queued search tasks using GREP, ACK, AG and more." tar]) (search-web . [(20150312 403) nil "Post web search queries using `browse-url'." single]) (sdlang-mode . [(20161130 2311) ((emacs (24 3))) "Major mode for Simple Declarative Language files." single]) (sdcv . [(20180211 833) ((emacs (24 3)) (popup (0 5 3)) (showtip (0 1)) (pos-tip (0 4 6)) (cl-lib (0 3))) "Interface for sdcv (StartDict console version)." single]) (scss-mode . [(20180123 908) nil "Major mode for editing SCSS files" single]) (scrooge . [(20180630 322) ((emacs (24)) (cl-lib (0 5)) (dash (2 13 0)) (thrift (0 9 3))) "Major mode for Twitter Scrooge files" single]) (scribble-mode . [(20160124 1528) ((emacs (24))) "Major mode for editing Scribble documents" single]) (scratches . [(20151005 2116) ((dash (2 11 0)) (f (0 17 0))) "Multiple scratches in any language" single]) (scratch-pop . [(20170510 758) ((popwin (0 7 0 -3))) "Generate, popup (& optionally backup) scratch buffer(s)." single]) (scratch-palette . [(20150225 42) ((popwin (0 7 0 -3))) "make scratch buffer for each files" single]) (scratch-message . [(20170107 536) nil "Changing message in your scratch buffer" single]) (scratch-log . [(20141114 2343) nil "Utility for *scratch* buffer." single]) (scratch-ext . [(20140103 2116) nil "Extensions for *scratch*" single]) (scratch . [(20170614 1401) nil "Mode-specific scratch buffers" single]) (scpaste . [(20171101 922) ((htmlize (1 39))) "Paste to the web via scp." single]) (scp . [(20171203 1851) ((emacs (25 1)) (cl-lib (0 5))) "Use the SCP command to transfer files with the remote server" single]) (sclang-snippets . [(20130513 51) ((yasnippet (0 8 0))) "Snippets for the SuperCollider Emacs mode" tar]) (sclang-extensions . [(20160508 2038) ((auto-complete (1 4 0)) (s (1 3 1)) (dash (1 2 0)) (emacs (24 1))) "Extensions for the SuperCollider Emacs mode." tar]) (scion . [(20130315 555) nil "Haskell Minor Mode for Interacting with the Scion Library" single]) (schrute . [(20170521 1140) ((emacs (24 3))) "Help you remember there is a better way to do something." single]) (scheme-here . [(20141028 18) nil "cmuscheme extension for multiple inferior processes" single]) (scheme-complete . [(20170824 713) nil "Smart auto completion for Scheme in Emacs" single]) (scf-mode . [(20151121 1848) nil "shorten file-names in compilation type buffers" single]) (scala-mode . [(20170802 432) nil "Major mode for editing Scala" tar]) (scad-preview . [(20160206 536) ((scad-mode (91 0))) "Preview SCAD models in real-time within Emacs" single]) (scad-mode . [(20180108 1809) nil "A major mode for editing OpenSCAD code" single]) (sbt-mode . [(20180511 922) ((emacs (24 4))) "Interactive support for sbt projects" tar]) (sayid . [(20180404 1139) ((cider (0 14 0))) "sayid nREPL middleware client" single]) (say-what-im-doing . [(20160706 1231) nil "dictate what you're doing with text to speech" single]) (savekill . [(20140417 1929) nil "Save kill ring to disk" single]) (save-visited-files . [(20170228 2250) nil "save opened files across sessions" single]) (save-load-path . [(20140206 414) nil "save load-path and reuse it to test" single]) (sauron . [(20171105 247) nil "Track (erc/org/dbus/...) events and react to them." tar]) (sass-mode . [(20161006 2326) ((haml-mode (3 0 15)) (cl-lib (0 5))) "Major mode for editing Sass files" single]) (sane-term . [(20160620 647) ((emacs (24 1))) "Multi Term is crazy. This is not." single]) (salt-mode . [(20180118 1754) ((emacs (24 4)) (yaml-mode (0 0 12)) (mmm-mode (0 5 4)) (mmm-jinja2 (0 1))) "Major mode for Salt States" single]) (salesforce-utils . [(20160813 1854) ((cl-lib (0 5))) "simple utilities for Salesforce" single]) (sailfish-scratchbox . [(20171202 532) nil "Sailfish OS scratchbox inside the emacs." single]) (sage-shell-mode . [(20180215 35) ((cl-lib (0 6 1)) (emacs (24 4)) (let-alist (1 0 5)) (deferred (0 5 1))) "A front-end for Sage Math" tar]) (sackspace . [(20130719 256) nil "A better backspace" single]) (s3ed . [(20180204 549) ((emacs (24 4)) (seq (0)) (dash (0))) "Tramp-like access to s3" tar]) (s12cpuv2-mode . [(20171013 1351) ((emacs (24 3))) "Major-mode for S12CPUV2 assembly" single]) (s-buffer . [(20130605 1424) ((s (1 6 0)) (noflet (0 0 3))) "s operations for buffers" single]) (s . [(20180406 108) nil "The long lost Emacs string manipulation library." single]) (ryo-modal . [(20180331 118) ((emacs (24 4))) "Roll your own modal mode" single]) (rvm . [(20150402 742) nil "Emacs integration for rvm" single]) (rustic . [(20180716 426) ((emacs (25 1)) (xterm-color (1 6)) (dash (2 13 0)) (s (1 10 0)) (f (0 18 2))) "A major emacs mode for editing Rust source code" tar]) (rust-playground . [(20180507 1032) ((emacs (24 3)) (rust-mode (0 3 0))) "Local Rust playground for short code snippets." single]) (rust-mode . [(20180626 1512) ((emacs (24 0))) "A major emacs mode for editing Rust source code" single]) (russian-holidays . [(20170109 1340) nil "Russian holidays for the calendar" single]) (runtests . [(20150807 131) nil "Run unit tests from Emacs" single]) (runner . [(20160524 43) nil "Improved \"open with\" suggestions for dired" single]) (run-stuff . [(20180208 2348) ((emacs (24 4))) "context based command execution" single]) (rum-mode . [(20180126 1622) ((emacs (24))) "Major mode for Rum programming language" single]) (rufo . [(20170718 716) ((emacs (24 3))) "use rufo to automatically format ruby files" single]) (ruby-tools . [(20151209 815) nil "Collection of handy functions for ruby-mode." tar]) (ruby-test-mode . [(20171016 931) ((ruby-mode (1 0)) (pcre2el (1 8))) "Minor mode for Behaviour and Test Driven" single]) (ruby-refactor . [(20160214 850) ((ruby-mode (1 2))) "A minor mode which presents various Ruby refactoring helpers." single]) (ruby-interpolation . [(20131112 852) nil "Ruby string interpolation helpers" single]) (ruby-hash-syntax . [(20180323 1909) nil "Toggle ruby hash syntax between classic and 1.9 styles" single]) (ruby-factory . [(20160101 2321) ((inflections (1 1))) "Minor mode for Ruby test object generation libraries" tar]) (ruby-extra-highlight . [(20171106 1133) nil "Highlight Ruby parameters." single]) (ruby-end . [(20141215 423) nil "Automatic insertion of end blocks for Ruby" single]) (ruby-electric . [(20170810 430) nil "Minor mode for electrically editing ruby code" single]) (ruby-compilation . [(20150708 2340) ((inf-ruby (2 2 1))) "run a ruby process in a compilation buffer" single]) (ruby-additional . [(20180316 1937) ((emacs (24 3)) (ruby-mode (1 2))) "ruby-mode extensions yet to be merged into Emacs" tar]) (rubocopfmt . [(20180519 748) ((cl-lib (0 5))) "Minor-mode to format Ruby code with RuboCop on save" single]) (rubocop . [(20170311 2211) ((emacs (24))) "An Emacs interface for RuboCop" single]) (rubik . [(20180222 1214) ((cl-lib (1 0)) (emacs (25 3))) "Rubik's Cube" single]) (rtm . [(20180329 808) ((cl-lib (1 0))) "An elisp implementation of the Remember The Milk API" single]) (rtags . [(20180619 823) nil "A front-end for rtags" single]) (rspec-mode . [(20180614 448) ((ruby-mode (1 0)) (cl-lib (0 4))) "Enhance ruby-mode for RSpec" tar]) (rsense . [(20100510 2105) nil "RSense client for Emacs" single]) (rpn-calc . [(20170522 1842) ((popup (0 4))) "quick RPN calculator for hackers" single]) (rpm-spec-mode . [(20160710 436) nil "RPM spec file editing commands for Emacs/XEmacs" single]) (roy-mode . [(20121208 358) nil "Roy major mode" single]) (rotate . [(20160909 136) nil "Rotate the layout of emacs" single]) (rope-read-mode . [(20171003 719) nil "Rearrange lines to read text smoothly" single]) (roguel-ike . [(20160119 1902) ((popup (0 5 0))) "A coffee-break roguelike" tar]) (robots-txt-mode . [(20170908 642) nil "Major mode for editing robots.txt" single]) (robe . [(20171116 1249) ((inf-ruby (2 5 1)) (emacs (24 4))) "Code navigation, documentation lookup and completion for Ruby" tar]) (rjsx-mode . [(20180624 1758) ((emacs (24 4)) (js2-mode (20170504))) "Real support for JSX" single]) (riscv-mode . [(20170804 821) ((emacs (24 4))) "Major-mode for RISC V assembly" single]) (ripgrep . [(20180323 920) nil "Front-end for ripgrep, a command line search tool" single]) (rings . [(20160531 1327) nil "Buffer rings. Like tabs, but better." single]) (rinari . [(20150708 2340) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) "Rinari Is Not A Rails IDE" single]) (rimero-theme . [(20180630 515) ((emacs (24))) "Theme with a dark background suitable for UI and terminal usage." single]) (rigid-tabs . [(20170903 859) ((emacs (24 3))) "Fix TAB alignment in diff buffers" single]) (rich-minority . [(20170813 622) ((cl-lib (0 5))) "Clean-up and Beautify the list of minor-modes." single]) (rib-mode . [(20170726 748) ((emacs (24))) "RenderMan® Interface Bytestream (RIB) Major Mode" single]) (rhtml-mode . [(20130422 611) nil "major mode for editing RHTML files" tar]) (rg . [(20180626 1041) ((cl-lib (0 5)) (emacs (24 3)) (s (1 10 0))) "A search tool based on ripgrep." tar]) (reykjavik-theme . [(20160109 0) ((emacs (24))) "Theme with a dark background." single]) (review-mode . [(20180312 535) nil "major mode for ReVIEW" single]) (reverse-theme . [(20141204 1745) nil "Reverse theme for Emacs" single]) (reverse-im . [(20180213 525) ((emacs (24 4))) "Reverse mapping for keyboard layouts other than english." single]) (reveal-in-osx-finder . [(20150802 957) nil "Reveal file associated with buffer in OS X Finder" single]) (restclient-test . [(20180106 1246) ((emacs (24 4)) (restclient (0))) "Run tests with restclient.el" single]) (restclient-helm . [(20170314 854) ((restclient (0)) (helm (1 9 4))) "helm interface for restclient.el" single]) (restclient . [(20180316 851) nil "An interactive HTTP client for Emacs" single]) (restart-emacs . [(20180601 331) nil "Restart emacs from within emacs" single]) (resize-window . [(20170704 2212) ((emacs (24)) (cl-lib (0 5))) "easily resize windows" single]) (requirejs-mode . [(20130215 1304) nil "Improved AMD module management" single]) (requirejs . [(20151203 2319) ((js2-mode (20150713)) (popup (0 5 3)) (s (1 9 0)) (cl-lib (0 5)) (yasnippet (20151011 1823))) "Requirejs import manipulation and source traversal." tar]) (request-deferred . [(20160419 1605) ((deferred (0 3 1)) (request (0 2 0))) "Wrap request.el by deferred" single]) (request . [(20170131 1747) ((emacs (24 4))) "Compatible layer for URL request in Emacs" single]) (req-package . [(20180506 2350) ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0)) (ht (0))) "A use-package wrapper for package runtime dependencies management" tar]) (repo . [(20170213 139) ((emacs (24 3))) "Running repo from Emacs" single]) (replace-with-inflections . [(20170911 245) ((cl-lib (0 5)) (string-inflection (1 0 5)) (inflections (1 1))) "Inflection aware `query-replace'" single]) (replace-symbol . [(20160517 1712) nil "Rename symbols in expressions or buffers" single]) (replace-pairs . [(20160207 451) ((emacs (24 4))) "Query-replace pairs of things" single]) (replace-from-region . [(20170227 1516) nil "Replace commands whose query is from region" single]) (repl-toggle . [(20180501 328) ((fullframe (0 0 5))) "Switch to/from repl buffer for current major-mode" single]) (repeater . [(20180418 512) ((emacs (24 4))) "Repeat recent repeated commands" single]) (repeatable-motion . [(20170620 1148) ((emacs (24))) "Make repeatable versions of motions" tar]) (remember-last-theme . [(20170619 1433) ((emacs (24 4))) "Remember the last used theme between sessions." single]) (remark-mode . [(20171217 2356) ((emacs (25 1)) (markdown-mode (2 0))) "Major mode for the remark slideshow tool" tar]) (relax . [(20131029 1434) ((json (1 2))) "For browsing and interacting with CouchDB" single]) (relative-buffers . [(20160221 1123) ((cl-lib (0 5)) (dash (2 6 0)) (s (1 9 0)) (f (0 16 2))) "Emacs buffers naming convention" single]) (related . [(20161002 2310) ((cl-lib (0 5))) "Switch back and forth between similarly named buffers." single]) (register-channel . [(20150513 2059) nil "Jump around fast using registers" single]) (region-state . [(20151128 238) nil "Show the number of chars/lines or rows/columns in the region" single]) (region-convert . [(20161118 1859) nil "Convert string in region by Lisp function" single]) (region-bindings-mode . [(20140407 1514) nil "Enable custom bindings when mark is active." single]) (regex-tool . [(20170104 1118) nil "A regular expression evaluation tool for programmers" single]) (regex-dsl . [(20100124 228) nil "lisp syntax for regexps" single]) (refine . [(20180315 1528) ((emacs (24 3)) (s (1 11 0)) (dash (2 12 0)) (list-utils (0 4 4)) (loop (1 2))) "interactive value editing" single]) (redtick . [(20180424 1436) ((emacs (24 4))) "Smallest pomodoro timer (1 char)" tar]) (redshank . [(20180128 1348) ((paredit (21))) "Common Lisp Editing Extensions" tar]) (redprl . [(20180418 734) ((emacs (24 3))) "Major mode for editing RedPRL proofs and interacting with RedPRL" single]) (redpen-paragraph . [(20160625 350) ((emacs (24)) (cl-lib (0 5)) (json (1 4))) "RedPen interface." single]) (redis . [(20150531 1248) ((emacs (24)) (cl-lib (0 5))) "Redis integration" single]) (recursive-narrow . [(20140902 1027) nil "narrow-to-region that operates recursively" single]) (rectangle-utils . [(20160914 2108) ((emacs (24)) (cl-lib (0 5))) "Some useful rectangle functions." single]) (rect+ . [(20150620 1744) nil "Extensions to rect.el" single]) (recover-buffers . [(20171008 2137) nil "revisit all buffers from an auto-save file" tar]) (recompile-on-save . [(20151126 646) ((dash (1 1 0)) (cl-lib (0 5))) "Trigger recompilation on file save." single]) (recentf-remove-sudo-tramp-prefix . [(20180204 2156) ((emacs (24 4))) "Normalise recentf history" single]) (recentf-ext . [(20170925 1735) nil "Recentf extensions" single]) (rebox2 . [(20121113 500) nil "Handling of comment boxes in various styles." single]) (rebecca-theme . [(20180324 121) ((emacs (24))) "Rebecca Purple Theme" single]) (reason-mode . [(20180505 1330) ((emacs (24 3))) "A major mode for editing ReasonML" tar]) (realgud-rdb2 . [(20160303 43) ((realgud (1 3))) "realgud front-end for interacting with Ruby debugger2" tar]) (realgud-pry . [(20160805 745) ((realgud (1 4 3)) (cl-lib (0 5)) (emacs (24))) "realgud front-end to the Ruby pry debugger" tar]) (realgud-old-debuggers . [(20170316 31) ((realgud (1 4 3)) (cl-lib (0 5)) (emacs (24))) "realgud front-end to older lesser-used debuggers" tar]) (realgud-byebug . [(20180308 1923) ((realgud (1 4 3)) (cl-lib (0 5)) (emacs (24))) "realgud front-end to the Ruby byebug debugger" tar]) (realgud . [(20180710 1953) ((load-relative (1 2)) (loc-changes (1 2)) (test-simple (1 2 0)) (cl-lib (0 5)) (emacs (24))) "A modular front-end for interacting with external debuggers" tar]) (real-auto-save . [(20180107 1850) nil "Automatically save your all your buffers/files at regular intervals." single]) (readline-complete . [(20150708 737) nil "offers completions in shell mode" single]) (readability . [(20140715 1727) ((oauth (1 4)) (ov (1 0)) (emacs (24 3))) "Read articles from Readability in Emacs" single]) (read-aloud . [(20160922 2200) ((emacs (24 4))) "A simple interface to TTS engines" single]) (react-snippets . [(20170803 1550) ((yasnippet (0 7 0))) "Yasnippets for React" tar]) (rdxmk . [(20170629 1834) nil "A small set of tools for redox developments" tar]) (rdp . [(20120928 1854) nil "Recursive Descent Parser library" single]) (rdf-prefix . [(20180127 1006) nil "Prefix lookup for RDF" single]) (rcirc-styles . [(20160206 1850) ((cl-lib (0 5))) "support mIRC-style color and attribute codes" single]) (rcirc-notify . [(20150219 1404) nil "libnotify popups" single]) (rcirc-groups . [(20170731 1401) nil "an emacs buffer in rcirc-groups major mode" single]) (rcirc-alertify . [(20140406 1819) ((alert (20140406 1353))) "Cross platform notifications for rcirc" single]) (rcirc-alert . [(20141127 247) nil "Configurable alert messages on top of RCIRC" tar]) (rc-mode . [(20160913 1218) nil "Major mode for the Plan9 rc shell" single]) (rbt . [(20170202 1502) ((popup (0 5 3)) (magit (20160128 1201))) "Integrate reviewboard with emacs." single]) (rbenv . [(20141119 2349) nil "Emacs integration for rbenv" single]) (rats . [(20170818 313) ((s (1 10 0)) (go-mode (1 3 1)) (cl-lib (0 5))) "Rapid testing suite for Go" single]) (rase . [(20120928 1345) nil "Run At Sun Event daemon" single]) (ranger . [(20170817 857) ((emacs (24 4))) "Make dired more like ranger" single]) (random-splash-image . [(20151002 1830) nil "Randomly sets splash image to *GNU Emacs* buffer on startup." single]) (rand-theme . [(20151219 1535) ((cl-lib (0 5))) "Random Emacs theme at start-up!" single]) (rally-mode . [(20161113 1954) ((popwin (1 0 0))) "a mode to interact with the Rally Software web site." single]) (rake . [(20180212 208) ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5))) "Run rake commands" single]) (rainbow-identifiers . [(20141102 726) ((emacs (24))) "Highlight identifiers according to their names" single]) (rainbow-delimiters . [(20170929 432) nil "Highlight brackets according to their depth" single]) (rainbow-blocks . [(20171025 738) nil "Block syntax highlighting for lisp code" single]) (railscasts-theme . [(20150219 725) nil "Railscasts color theme for GNU Emacs." single]) (railscasts-reloaded-theme . [(20180131 2246) nil "Railscasts Reloaded color theme" single]) (rails-log-mode . [(20140407 2125) nil "Major mode for viewing Rails log files" single]) (racket-mode . [(20180717 1653) ((emacs (24 3)) (faceup (0 0 2)) (s (1 9 0))) "Major mode for Racket language." tar]) (racer . [(20180708 2325) ((emacs (24 3)) (rust-mode (0 2 0)) (dash (2 13 0)) (s (1 10 0)) (f (0 18 2)) (pos-tip (0 4 6))) "code completion, goto-definition and docs browsing for Rust via racer" single]) (r-autoyas . [(20140101 710) ((ess (0)) (yasnippet (0 8 0))) "Provides automatically created yasnippets for R function argument lists." tar]) (quiz . [(20170818 415) ((cl-lib (0 5)) (emacs (25))) "Multiple choice quiz game" single]) (quiet . [(20160508 556) nil "disconnect from the online world for a while" single]) (quickrun . [(20170222 1715) ((emacs (24 3))) "Run commands quickly" single]) (quickref . [(20170817 532) ((dash (1 0 3)) (s (1 0 0))) "Display relevant notes-to-self in the echo area" single]) (quick-shell-keybind . [(20171022 2313) ((emacs (24))) "Interactively bind a key to shell commands" single]) (quick-preview . [(20150828 2139) nil "quick preview using GNOME sushi, gloobus or quick look" single]) (quick-peek . [(20180525 711) ((emacs (24 3))) "Inline quick-peek windows" single]) (quick-buffer-switch . [(20151007 1508) nil "Quick switch to file or dir buffers." single]) (quelpa-use-package . [(20180617 2356) ((emacs (24 3)) (quelpa (0)) (use-package (2))) "quelpa handler for use-package" single]) (quelpa . [(20180711 1338) ((emacs (24 3))) "Emacs Lisp packages built directly from source" tar]) (quasi-monochrome-theme . [(20180516 813) nil "Quasi Monochrome theme" tar]) (qt-pro-mode . [(20170604 1141) ((emacs (24))) "Qt Pro/Pri major mode" single]) (qml-mode . [(20161015 1731) nil "Major mode for editing QT Declarative (QML) code." single]) (ql . [(20180418 1320) ((emacs (24))) "Control Quod Libet" single]) (qiita . [(20140118 44) ((helm (1 5 9)) (markdown-mode (2 0))) "Qiita API Library for emacs" single]) (pyvenv . [(20180629 514) nil "Python virtual environment interface" single]) (pythonic . [(20180624 2212) ((emacs (25)) (s (1 9)) (f (0 17 2))) "Utility functions for writing pythonic emacs package." single]) (python-x . [(20180218 1447) ((python (0 24)) (folding (0)) (cl-lib (0 5))) "python.el extras for interactive evaluation" tar]) (python-test . [(20171112 2137) ((emacs (25 1))) "Python testing integration" single]) (python-switch-quotes . [(20161228 9) ((emacs (24 3))) "cycle between ' and \" quotes in python strings" single]) (python-pytest . [(20180614 253) ((emacs (24 4)) (dash (2 12 0)) (dash-functional (2 12 0)) (magit-popup (2 12 0)) (projectile (0 14 0)) (s (1 12 0))) "helpers to run pytest" single]) (python-mode . [(20180718 613) nil "Python major mode" tar]) (python-info . [(20151228 1052) nil "Python info manual for Emacs" tar]) (python-environment . [(20150310 153) ((deferred (0 3 1))) "virtualenv API for Emacs Lisp" tar]) (python-docstring . [(20170508 156) nil "Smart Python docstring formatting" tar]) (python-django . [(20150821 2104) nil "A Jazzy package for managing Django projects" single]) (python-cell . [(20131029 1616) nil "Support for MATLAB-like cells in python mode" single]) (pytest . [(20170614 745) ((s (1 9 0))) "Easy Python test running in Emacs" single]) (pyramid . [(20180630 1446) ((emacs (25 2)) (pythonic (0 1 1)) (tablist (0 70))) "Minor mode for working with pyramid projects" tar]) (pynt . [(20180710 26) ((emacs (24 4)) (ein (0 13 1)) (epc (0 1 1)) (deferred (0 5 1))) "Generate and scroll EIN buffers from python code" single]) (pylint . [(20170402 555) nil "minor mode for running `pylint'" single]) (pyimpsort . [(20160129 2053) ((emacs (24 3))) "Sort python imports." tar]) (pyimport . [(20180308 952) ((dash (2 8 0)) (s (1 9 0)) (shut-up (0 3 2))) "Manage Python imports!" single]) (pyim-wbdict . [(20170724 1527) ((pyim (1 0))) "Some wubi dicts for pyim" tar]) (pyim-cangjie5dict . [(20170729 1946) ((pyim (1 0))) "Some cangjie5 dicts for pyim" tar]) (pyim-basedict . [(20170726 1959) nil "The default pinyin dict of pyim" tar]) (pyim . [(20180712 640) ((emacs (24 4)) (popup (0 1)) (async (1 6)) (pyim-basedict (0 1))) "A Chinese input method support quanpin, shuangpin, wubi and cangjie." tar]) (pygen . [(20161120 2106) ((elpy (1 12 0)) (python-mode (6 2 2)) (dash (2 13 0))) "Python code generation using Elpy and Python-mode." single]) (pyfmt . [(20150521 1356) nil "Emacs interface to pyfmt" single]) (pyenv-mode-auto . [(20180620 552) ((pyenv-mode (0 1 0)) (s (1 11 0)) (f (0 17 0))) "Automatically activates pyenv version if .python-version file exists." single]) (pyenv-mode . [(20170801 1648) ((pythonic (0 1 0))) "Integrate pyenv with python-mode" single]) (pydoc-info . [(20110301 34) nil "Better Python support for info-lookup-symbol." tar]) (pydoc . [(20180509 1519) nil "functional, syntax highlighted pydoc navigation" single]) (pycoverage . [(20160324 1812) ((emacs (24 3))) "Support for coverage stats on Python 2.X and 3" tar]) (pycarddavel . [(20150831 516) ((helm (1 7 0)) (emacs (24 0))) "Integrate pycarddav" single]) (py-yapf . [(20160925 422) nil "Use yapf to beautify a Python buffer" single]) (py-test . [(20151116 2222) ((dash (2 9 0)) (f (0 17)) (emacs (24 4))) "A test runner for Python code." single]) (py-smart-operator . [(20170531 509) ((s (1 9 0))) "smart-operator for python-mode" single]) (py-isort . [(20160925 318) nil "Use isort to sort the imports in a Python buffer" single]) (py-import-check . [(20130802 411) nil "Finds the unused python imports using importchecker" single]) (py-gnitset . [(20170821 1032) nil "Run your Python tests any way you'd like" single]) (py-autopep8 . [(20160925 352) nil "Use autopep8 to beautify a Python buffer" single]) (px . [(20170317 1630) nil "preview inline latex in any mode" single]) (pushover . [(20170818 1403) ((cl-lib (0 5))) "Pushover API Access" single]) (pushbullet . [(20140809 532) ((grapnel (0 5 2)) (json (1 2))) "Emacs client for the PushBullet Android app" single]) (purty-mode . [(20131004 1559) nil "Safely pretty-print greek letters, mathematical symbols, or anything else." single]) (purple-haze-theme . [(20141014 1929) ((emacs (24 0))) "an overtly purple color theme for Emacs24." single]) (purescript-mode . [(20180120 709) nil "A PureScript editing mode" tar]) (puppet-mode . [(20171220 2249) ((emacs (24 1)) (pkg-info (0 4))) "Major mode for Puppet manifests" single]) (punpun-theme . [(20161103 147) nil "A bleak theme" tar]) (pungi . [(20150222 446) ((jedi (0 2 0 -3 2)) (pyvenv (1 5))) "Integrates jedi with virtualenv and buildout python environments" single]) (punctuality-logger . [(20141120 1231) nil "Punctuality logger for Emacs" single]) (pulseaudio-control . [(20180627 450) nil "Use `pactl' to manage PulseAudio volumes." single]) (pug-mode . [(20180513 1426) ((emacs (24 4)) (cl-lib (0 5))) "Major mode for jade/pug template files" single]) (pt . [(20161226 1159) nil "A front-end for pt, The Platinum Searcher." single]) (psysh . [(20171022 2229) ((emacs (24 3)) (s (1 9 0)) (f (0 17))) "PsySH, PHP interactive shell (REPL)" single]) (psession . [(20180423 2159) ((emacs (24)) (cl-lib (0 5)) (async (1 9 3))) "Persistent save of elisp objects." single]) (psci . [(20180418 533) ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1))) "Major mode for purescript repl psci" tar]) (psc-ide . [(20180605 302) ((dash (2 13 0)) (dash-functional (1 2 0)) (company (0 8 7)) (cl-lib (0 5)) (s (1 10 0)) (emacs (24 4)) (flycheck (0 24)) (let-alist (1 0 4)) (seq (1 11))) "Minor mode for PureScript's psc-ide tool." tar]) (proxy-mode . [(20180520 2030) ((emacs (25))) "A minor mode to toggle proxy." single]) (protocols . [(20170802 432) ((cl-lib (0 5))) "Protocol database access functions." single]) (protobuf-mode . [(20170526 950) nil "major mode for editing protocol buffers." single]) (prosjekt . [(20151127 616) ((dash (2 8 0))) "a software project tool for emacs" tar]) (proportional . [(20171025 1637) ((emacs (25 1))) "use a proportional font everywhere" single]) (propfont-mixed . [(20150113 1411) ((emacs (24)) (cl-lib (0 5))) "Use proportional fonts with space-based indentation." single]) (prop-menu . [(20150728 418) ((emacs (24 3)) (cl-lib (0 5))) "Create and display a context menu based on text and overlay properties" single]) (prompts . [(20160916 341) ((dash (2 13 0))) "utilities for working with text prompts." single]) (prompt-text . [(20160106 609) nil "Various information in minibuffer prompt" single]) (promise . [(20180409 252) ((emacs (25)) (async (1 9))) "Promises/A+" tar]) (projmake-mode . [(20161031 1015) ((dash (20150611 922)) (indicators (20130217 1405))) "Project oriented automatic builder and error highlighter, flymake for projects" tar]) (projekt . [(20150324 148) ((emacs (24))) "some kind of staging for CVS" single]) (projector . [(20180712 1549) ((alert (1 1)) (projectile (0 11 0)) (cl-lib (0 5))) "Lightweight library for managing project-aware shell and command buffers" single]) (projectile-variable . [(20170208 918) ((emacs (24)) (cl-lib (0 5))) "Store project local variables." single]) (projectile-trailblazer . [(20170928 924) ((emacs (24 4)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects using trailblazer" single]) (projectile-speedbar . [(20170516 1943) ((projectile (0 11 0)) (sr-speedbar (0))) "projectile integration for speedbar" single]) (projectile-sift . [(20160107 215) ((sift (0 2 0)) (projectile (0 13 0))) "Run a sift with Projectile" single]) (projectile-ripgrep . [(20180301 651) ((ripgrep (0 3 0)) (projectile (0 14 0))) "Run ripgrep with Projectile" single]) (projectile-rails . [(20180718 55) ((emacs (24 3)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects based on projectile-mode" single]) (projectile-hanami . [(20160505 611) ((emacs (24 3)) (projectile (0 12 0)) (rake (0 3 2)) (inf-ruby (2 2 6))) "Minor mode for Hanami projects based on projectile" single]) (projectile-git-autofetch . [(20180418 1636) ((projectile (0 14 0)) (alert (1 2))) "automatically fetch git repositories" single]) (projectile-direnv . [(20160305 1738) ((emacs (24)) (s (1 11 0)) (dash (2 12 0)) (projectile (0 13 0))) "Set environment variables from .envrc" single]) (projectile-codesearch . [(20180508 822) ((codesearch (20171122 431)) (projectile (20150405 126))) "Integration of codesearch into projectile" single]) (projectile . [(20180711 102) ((emacs (25 1)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single]) (project-shells . [(20171107 51) ((emacs (24 3)) (seq (2 19))) "Manage the shell buffers of each project" single]) (project-root . [(20110206 1230) nil "Define a project root and take actions based upon it." single]) (project-persist-drawer . [(20151108 422) ((project-persist (0 3))) "Use a project drawer with project-persist." tar]) (project-persist . [(20150519 1324) nil "A minor mode to allow loading and saving of project settings." tar]) (project-explorer . [(20150503 1714) ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) "A project explorer sidebar" single]) (project-abbrev . [(20180705 1954) ((emacs (24 4))) "Customize abbreviation expansion in the project." single]) (programmer-dvorak . [(20150426 1837) nil "Input method for Programmer Dvorak." single]) (prognth . [(20130920 1059) nil "Extend prog1 to arbitrary index" single]) (prog-fill . [(20180606 1832) ((emacs (25 1)) (cl-lib (0 6 1))) "Smartly format lines to use vertical space." single]) (professional-theme . [(20150315 400) nil "Emacs port of Vim's professional theme" single]) (prodigy . [(20180511 238) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) "Manage external services from within Emacs" single]) (processing-snippets . [(20140426 728) ((yasnippet (0 8 0))) "Snippets for processing-mode" tar]) (processing-mode . [(20171022 1602) nil "Major mode for Processing 2.0" single]) (proc-net . [(20130321 1712) nil "network process tools" single]) (private-diary . [(20151216 857) ((emacs (24 0))) "maintain a private diary in Emacs" single]) (private . [(20150121 1757) ((aes (0 6))) "take care of your private configuration files." single]) (pretty-symbols . [(20140814 259) nil "Draw tokens as Unicode glyphs." single]) (pretty-sha-path . [(20141105 1026) nil "Prettify Guix/Nix store paths" single]) (pretty-mode . [(20160614 1146) nil "Redisplay parts of the buffer as pretty Unicode symbols." single]) (prettify-greek . [(20160603 208) nil "Greek letters for prettify-symbols" single]) (prettier-js . [(20180108 2326) nil "Minor mode to format JS code on file save" single]) (presentation . [(20180426 1924) ((emacs (24 4)) (cl-lib (0 5))) "Display large character for presentation" single]) (preseed-generic-mode . [(20180209 2100) nil "Debian preseed file major mode" single]) (prescient . [(20180702 1140) ((emacs (25 1))) "Better sorting and filtering." single]) (preproc-font-lock . [(20151107 1218) nil "Highlight C-style preprocessor directives." single]) (prassee-theme . [(20180709 304) ((emacs (24))) "A high contrast color theme for Emacs." single]) (ppd-sr-speedbar . [(20151108 424) ((sr-speedbar (20140914 2339)) (project-persist-drawer (0 0 4))) "Sr Speedbar adaptor for project-persist-drawer." tar]) (powerthesaurus . [(20180612 447) ((emacs (24)) (request (0 3 0)) (s (1 12 0))) "Powerthesaurus integration" single]) (powershell . [(20180616 2328) ((emacs (24))) "Mode for editing Powershell scripts" single]) (powerline-evil . [(20151112 710) ((evil (1 0 8)) (powerline (2 3))) "Utilities for better Evil support for Powerline" tar]) (powerline . [(20180321 1948) ((cl-lib (0 2))) "Rewrite of Powerline" tar]) (pow . [(20140420 106) ((emacs (24)) (cl-lib (0 5))) "pow (http://pow.cx/) manager for emacs" tar]) (pov-mode . [(20161114 2343) nil "Major mode for editing POV-Ray scene files." tar]) (postcss-sorting . [(20180211 156) ((emacs (24))) "postcss-sorting interface" single]) (posframe . [(20180708 702) ((emacs (26))) "Pop a posframe (just a frame) at point" single]) (pos-tip . [(20150318 813) nil "Show tooltip at point" single]) (portage-navi . [(20141208 555) ((concurrent (0 3 1)) (ctable (0 1 2))) "portage viewer" single]) (popwin . [(20150315 600) nil "Popup Window Manager." single]) (popup-switcher . [(20171205 51) ((cl-lib (0 3)) (popup (0 5 3))) "switch to other buffers and files via popup." single]) (popup-kill-ring . [(20131020 1154) ((popup (0 4)) (pos-tip (0 4))) "interactively insert item from kill-ring" single]) (popup-imenu . [(20170326 340) ((dash (2 12 1)) (popup (0 5 3)) (flx-ido (0 6 1))) "imenu index popup" single]) (popup-edit-menu . [(20170404 725) ((emacs (24))) "a popup context edit menu package" single]) (popup-complete . [(20141108 1908) ((popup (0 5 0))) "completion with popup" single]) (popup . [(20160709 729) ((cl-lib (0 5))) "Visual Popup User Interface" single]) (poporg . [(20170403 51) nil "Pop a comment or string to an empty buffer for text editing" single]) (pophint . [(20170917 1948) ((log4e (0 2 0)) (yaxception (0 3))) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" tar]) (ponylang-mode . [(20171028 1356) ((dash (2 10 0))) "Major mode for Pony code" single]) (pony-snippets . [(20160204 2011) ((yasnippet (0 8 0))) "Yasnippets for Pony" tar]) (pony-mode . [(20170807 822) nil "Minor mode for working with Django Projects" tar]) (pomodoro . [(20150716 1046) nil "A timer for the Pomodoro Technique" single]) (pomidor . [(20180614 128) ((emacs (24 3)) (alert (1 2))) "Simple and cool pomodoro timer" tar]) (polymode . [(20170307 322) ((emacs (24))) "Versatile multiple modes with extensive literate programming support" tar]) (poly-ruby . [(20170802 648) ((emacs (24 3)) (polymode (1 0))) "Provides poly-ruby-mode" single]) (pollen-mode . [(20180404 612) ((emacs (24 3)) (cl-lib (0 5))) "major mode for editing pollen files" single]) (pointback . [(20100210 752) nil "Restore window points when returning to buffers" single]) (point-stack . [(20170808 958) nil "Back and forward navigation through buffer locations" single]) (point-pos . [(20170421 932) nil "Save and restore point positions" single]) (poet-theme . [(20180603 1523) nil "A prose friendly theme." single]) (podcaster . [(20161020 835) ((cl-lib (0 5))) "Podcast client" single]) (pocket-reader . [(20180709 130) ((emacs (25 1)) (dash (2 13 0)) (kv (0 0 19)) (pocket-lib (0 1)) (s (1 10)) (ov (1 0 6)) (rainbow-identifiers (0 2 2)) (org-web-tools (0 1)) (ht (2 2))) "Client for Pocket reading list" single]) (pocket-mode . [(20171201 515) ((emacs (24 4)) (pocket-api (0 1))) "Manage your pocket" single]) (pocket-lib . [(20180711 1723) ((emacs (25 1)) (request (0 2)) (dash (2 13 0)) (kv (0 0 19)) (s (1 12 0))) "Library for accessing getpocket.com API" single]) (pocket-api . [(20180402 1809) ((emacs (24 4)) (request (0 2))) "another pocket api" single]) (po-mode . [(20180505 415) nil "major mode for GNU gettext PO files" single]) (pmdm . [(20151109 1036) nil "poor man's desktop-mode alternative." single]) (plur . [(20160504 224) ((emacs (24 4))) "Easily search and replace multiple variants of a word" single]) (plsense-direx . [(20140520 1308) ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perl Package Explorer" single]) (plsense . [(20151104 645) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) "provide interface for PlSense that is a development tool for Perl." single]) (plim-mode . [(20140812 1713) nil "Major mode for editing Plim files" single]) (plenv . [(20130706 2316) nil "A plenv wrapper for Emacs" single]) (playground . [(20180623 2026) ((emacs (24 4))) "Manage sandboxes for alternative configurations" single]) (playerctl . [(20180301 554) nil "Control your music player (e.g. Spotify) with playerctl" single]) (play-routes-mode . [(20170426 33) nil "Play Framework Routes File Support" single]) (play-crystal . [(20180114 224) ((emacs (24 4)) (dash (2 12 0)) (request (0 2 0))) "https://play.crystal-lang.org integration." single]) (platformio-mode . [(20161210 539) ((projectile (0 13 0))) "PlatformIO integration" single]) (plaster . [(20180127 1250) ((emacs (24 3))) "Pasting to a plaster host with buffers." single]) (plantuml-mode . [(20170819 1033) nil "Major mode for PlantUML" single]) (planet-theme . [(20161030 1917) ((emacs (24))) "A dark theme inspired by Gmail's 'Planets' theme of yore" single]) (plan9-theme . [(20180606 2035) nil "A color theme for Emacs based on Plan9" single]) (plain-theme . [(20171123 2010) ((emacs (24))) "Plain theme without syntax highlighting" single]) (pkgbuild-mode . [(20180609 931) ((emacs (25 1))) "Interface to the ArchLinux package manager" single]) (pkg-info . [(20150517 443) ((epl (0 8))) "Information about packages" single]) (pixiv-novel-mode . [(20160220 621) nil "Major mode for pixiv novel" single]) (pixie-mode . [(20180625 2241) ((clojure-mode (3 0 1)) (inf-clojure (1 0 0))) "Major mode for Pixie-lang" single]) (pivotal-tracker . [(20170720 816) nil "Interact with Pivotal Tracker through its API" single]) (pippel . [(20180710 156) ((emacs (25 1)) (s (1 11 0)) (dash (2 12 0))) "Frontend to python package manager pip" tar]) (pipenv . [(20180626 2323) ((emacs (25 1)) (f (0 19 0)) (s (1 12 0))) "A Pipenv porcelain." single]) (pip-requirements . [(20180602 1034) ((dash (2 8 0))) "A major mode for editing pip requirements files." single]) (pinyinlib . [(20170827 1442) nil "Convert first letter of Pinyin to Simplified/Traditional Chinese characters" single]) (pinyin-search . [(20160514 2058) ((pinyinlib (0 1 0))) "Search Chinese by Pinyin" single]) (pinyin . [(20180620 541) ((cl-lib (0 5)) (emacs (24))) "Convert Hanzi to Pinyin (汉字转拼音)" tar]) (pinot . [(20140211 1226) nil "Emacs interface to pinot-search" tar]) (pinboard-popular . [(20180511 1026) ((loop (1 4))) "Displays links from the pinboard.in popular page." single]) (pinboard-api . [(20140324 448) nil "Rudimentary http://pinboard.in integration" single]) (pillar . [(20141112 1011) ((makey (0 3))) "Major mode for editing Pillar files" tar]) (pig-snippets . [(20130912 2324) ((yasnippet (0 8 0))) "Snippets for pig-mode" tar]) (pig-mode . [(20180520 700) nil "Major mode for Pig files" single]) (picpocket . [(20180610 359) ((emacs (24 4))) "Image viewer" single]) (picolisp-mode . [(20150516 155) nil "Major mode for PicoLisp programming." single]) (pickle . [(20180627 1937) ((emacs (25 1)) (cl-lib (0 6 1))) "Major mode for editing cucumber gherkin files." single]) (pianobar . [(20180416 1804) nil "thin wrapper for Pianobar, a Pandora Radio client" single]) (phpunit . [(20171127 301) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5)) (cl-lib (0 5)) (emacs (24 3))) "Launch PHP unit tests using phpunit" tar]) (phpstan . [(20180502 2006) ((emacs (24 3))) "Interface to PHPStan." single]) (phpcbf . [(20180519 138) ((s (1 9 0))) "Format PHP code in Emacs using PHP_CodeSniffer's phpcbf" single]) (phpactor . [(20180602 554) ((emacs (24 3)) (cl-lib (0 5)) (f (0 17))) "Interface to Phpactor" tar]) (php-scratch . [(20161103 1517) ((emacs (24 3)) (s (1 11 0)) (php-mode (1 17 0))) "A scratch buffer to interactively evaluate php code" single]) (php-runtime . [(20180110 934) ((emacs (25)) (cl-lib (0 5))) "Language binding bridge to PHP" single]) (php-refactor-mode . [(20171123 2235) nil "Minor mode to quickly and safely perform common refactorings" single]) (php-mode . [(20180608 250) ((emacs (24 3)) (cl-lib (0 5))) "Major mode for editing PHP code" tar]) (php-eldoc . [(20140202 1141) nil "eldoc backend for php" tar]) (php-cs-fixer . [(20170506 1133) ((cl-lib (0 5))) "php-cs-fixer wrapper." single]) (php-boris-minor-mode . [(20140209 1035) ((php-boris (0 0 1)) (highlight (0))) "a minor mode to evaluate PHP code in the Boris repl" single]) (php-boris . [(20130527 121) nil "Run boris php REPL" single]) (php-auto-yasnippets . [(20170330 1814) ((php-mode (1 11)) (yasnippet (0 8 0))) "Creates snippets for PHP functions" tar]) (phoenix-dark-pink-theme . [(20170729 703) nil "Originally a port of the Sublime Text 2 theme" single]) (phoenix-dark-mono-theme . [(20170729 706) nil "Monochromatic version of the Phoenix theme" single]) (phi-search-migemo . [(20170618 221) ((phi-search (2 2 0)) (migemo (1 9 1))) "migemo extension for phi-search" single]) (phi-search-mc . [(20160324 803) ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) "multiple-cursors extension for phi-search" single]) (phi-search-dired . [(20150405 14) ((phi-search (2 2 0))) "interactive filtering for dired powered by phi-search" single]) (phi-search . [(20180321 1829) nil "another incremental search & replace, compatible with \"multiple-cursors\"" tar]) (phi-rectangle . [(20151207 2254) nil "another rectangle-mark command (rewrite of rect-mark)" single]) (phi-grep . [(20170606 107) ((cl-lib (0 1))) "Interactively-editable recursive grep implementation in elisp" single]) (phi-autopair . [(20170216 1953) ((paredit (20))) "another simple-minded autopair implementation" single]) (phan . [(20180527 2039) ((emacs (24)) (composer (0 0 8)) (f (0 17))) "Utility functions for Phan (PHP static analizer)" single]) (phabricator . [(20160510 725) ((emacs (24 4)) (dash (1 0)) (projectile (0 13 0)) (s (1 10 0)) (f (0 17 2))) "Phabricator/Arcanist helpers for Emacs." single]) (ph . [(20161029 822) ((emacs (24 3))) "A global minor mode for managing multiple projects." tar]) (pgdevenv . [(20150105 1436) nil "Manage your PostgreSQL development envs" tar]) (pg . [(20130731 1442) nil "Emacs Lisp interface to the PostgreSQL RDBMS" single]) (pfuture . [(20180715 524) ((emacs (25 2))) "a simple wrapper around asynchronous processes" single]) (perspeen . [(20171203 221) ((emacs (25 0)) (powerline (2 4))) "An package for multi-workspace" tar]) (perspective . [(20180717 1403) ((cl-lib (0 5))) "switch between named \"perspectives\" of the editor" single]) (persp-projectile . [(20180616 1244) ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) "Perspective integration with Projectile" single]) (persp-mode-projectile-bridge . [(20170315 420) ((persp-mode (2 9)) (projectile (0 13 0)) (cl-lib (0 5))) "persp-mode + projectile integration." single]) (persp-mode . [(20180604 1018) nil "windows/buffers sets shared among frames + save/load." single]) (persp-fr . [(20180103 642) ((emacs (25 0)) (persp-mode (2 9 6)) (dash (2 13 0))) "In persp-mode, show perspective list in the GUI window title" single]) (persistent-soft . [(20150223 1053) ((pcache (0 3 1)) (list-utils (0 4 2))) "Persistent storage, returning nil on failure" single]) (persistent-scratch . [(20180425 1811) ((emacs (24))) "Preserve the scratch buffer across Emacs sessions" single]) (persistent-overlays . [(20161127 2300) nil "Minor mode to store selected overlays to be loaded later" tar]) (perlbrew . [(20161108 2309) nil "A perlbrew wrapper for Emacs" single]) (perl6-mode . [(20180619 459) ((emacs (24 4)) (pkg-info (0 1))) "Major mode for editing Perl 6 code" tar]) (per-buffer-theme . [(20160318 1501) ((cl-lib (0 5))) "Change theme according to buffer name or major mode." single]) (pelican-mode . [(20180604 1507) ((emacs (25))) "Minor mode for editing Pelican sites" single]) (peg . [(20150707 2341) nil "Parsing Expression Grammars in Emacs Lisp" single]) (peep-dired . [(20160321 1537) nil "Peep at files in another window from dired buffers" single]) (peek-mode . [(20130620 1246) ((elnode (0 9 8 1))) "Serve buffers live over HTTP with elnode backend" tar]) (peacock-theme . [(20170808 620) ((emacs (24 0))) "an Emacs 24 theme based on Peacock (tmTheme)" single]) (pdf-tools . [(20180428 827) ((emacs (24 3)) (tablist (0 70)) (let-alist (1 0 4))) "Support library for PDF documents." tar]) (pdb-mode . [(20150128 951) nil "Major mode for editing Protein Data Bank files" single]) (pcsv . [(20150220 331) nil "Parser of csv" single]) (pcre2el . [(20161120 1303) ((emacs (24)) (cl-lib (0 3))) "regexp syntax converter" single]) (pcomplete-extension . [(20180706 2155) ((emacs (24)) (cl-lib (0 5))) "additional completion for pcomplete" single]) (pcmpl-pip . [(20171201 33) ((s (1 12 0)) (f (0 19 0)) (seq (2 15))) "pcomplete for pip" single]) (pcmpl-homebrew . [(20170110 1609) nil "pcomplete for homebrew" single]) (pcmpl-git . [(20170120 1659) nil "pcomplete for git" tar]) (pcmpl-args . [(20120911 2224) nil "Enhanced shell command completion" single]) (pcap-mode . [(20161025 748) ((emacs (24 3))) "Major mode for working with PCAP files" single]) (pcache . [(20170105 1414) ((eieio (1 3))) "persistent caching for Emacs." single]) (pc-bufsw . [(20180107 1040) nil "PC style quick buffer switcher" single]) (pbcopy . [(20150224 2059) nil "Emacs Interface to pbcopy" single]) (paxedit . [(20160730 1027) ((cl-lib (0 5)) (paredit (23))) "Structured, Context Driven LISP Editing and Refactoring" single]) (pathify . [(20160423 146) nil "Symlink your scripts into a PATH directory" single]) (path-headerline-mode . [(20140423 632) nil "Displaying file path on headerline." single]) (pastery . [(20171113 1949) ((emacs (24 4)) (request (0 2 0))) "paste snippets to pastery.net." tar]) (pastelmac-theme . [(20151030 1936) ((emacs (24 1))) "a soothing theme with a pastel color palette" single]) (pastehub . [(20140614 2320) nil "A client for the PasteHub cloud service" single]) (pastebin . [(20101125 1202) nil "A simple interface to the www.pastebin.com webservice" single]) (paste-of-code . [(20170709 1655) ((emacs (24 3)) (request (0 2 0))) "paste code on https://paste.ofcode.org" single]) (password-vault . [(20160126 1020) ((cl-lib (0 2)) (emacs (24))) "A Password manager for Emacs." single]) (password-store-otp . [(20170928 18) ((emacs (25)) (s (1 9 0)) (password-store (0 1))) "Password store (pass) OTP extension support" single]) (password-store . [(20170829 1633) ((emacs (24)) (f (0 11 0)) (s (1 9 0)) (with-editor (2 5 11))) "Password store (pass) support" single]) (password-mode . [(20170411 2329) nil "Hide password text using overlays" single]) (password-generator . [(20150222 1240) nil "Password generator for humans. Good, Bad, Phonetic passwords included." single]) (passthword . [(20141201 123) ((cl-lib (0 5))) "Simple password manager" single]) (passmm . [(20180622 1626) ((emacs (24 4)) (password-store (0))) "A minor mode for pass (Password Store)." single]) (pass . [(20180201 451) ((emacs (24 3)) (password-store (0 1)) (password-store-otp (0 1 5)) (f (0 17))) "Major mode for password-store.el" single]) (pasp-mode . [(20180404 1000) ((emacs (24 3))) "- A major mode for editing Answer Set Programs." single]) (parseclj . [(20180602 1306) ((emacs (25)) (a (0 1 0 -3 4))) "Clojure/EDN parser" tar]) (parsec . [(20171202 2031) ((emacs (24)) (cl-lib (0 5))) "Parser combinator library" single]) (parsebib . [(20180116 627) ((emacs (24 3))) "A library for parsing bib files" single]) (parse-csv . [(20160512 1023) nil "Parse strings with CSV fields into s-expressions" single]) (parinfer . [(20180718 16) ((dash (2 13 0)) (cl-lib (0 5))) "Simpler Lisp editing" tar]) (parent-mode . [(20150824 1600) nil "get major mode's parent modes" single]) (paren-face . [(20180318 1325) nil "a face for parentheses in lisp modes" single]) (paren-completer . [(20160501 352) ((emacs (24 3))) "Automatically, language agnostically, fill in delimiters." single]) (paredit-menu . [(20160128 933) ((paredit (25))) "Adds a menu to paredit.el as memory aid" single]) (paredit-everywhere . [(20180506 149) ((paredit (22))) "Enable some paredit features in non-lisp buffers" single]) (paredit . [(20171126 1805) nil "minor mode for editing parentheses" single]) (paradox . [(20180216 334) ((emacs (24 4)) (seq (1 7)) (let-alist (1 0 3)) (spinner (1 7 3)) (hydra (0 13 2))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar]) (paperless . [(20180224 445) ((emacs (24 4)) (f (0 11 0)) (s (1 10 0)) (cl-lib (0 6 1))) "A major mode for sorting and filing PDF documents." tar]) (paper-theme . [(20180429 1515) ((emacs (24))) "A minimal Emacs colour theme." single]) (pangu-spacing . [(20170317 157) nil "Minor-mode to add space between Chinese and English characters." single]) (pandoc-mode . [(20180710 746) ((hydra (0 10 0)) (dash (2 10 0))) "Minor mode for interacting with Pandoc" tar]) (pandoc . [(20161128 357) ((emacs (24 4))) "Pandoc interface" single]) (panda-theme . [(20180203 2318) ((emacs (24))) "Panda Theme" single]) (pamparam . [(20180415 48) ((emacs (24 3)) (lispy (0 26 0)) (worf (0 1 0)) (hydra (0 13 4))) "Simple and fast flashcards." single]) (pallet . [(20150512 2) ((dash (2 10 0)) (s (1 9 0)) (f (0 17 1)) (cask (0 7))) "A package management tool for Emacs, using Cask." tar]) (palimpsest . [(20170119 1232) nil "Various deletion strategies when editing" single]) (pager-default-keybindings . [(20130719 1357) ((pager (1 0))) "Add the default keybindings suggested for pager.el" single]) (pager . [(20151201 1720) nil "windows-scroll commands" single]) (page-break-lines . [(20171210 31) ((emacs (24 4))) "Display ^L page breaks as tidy horizontal lines" single]) (paganini-theme . [(20180710 821) ((emacs (24 0))) "A colorful, dark and warm theme." single]) (pacmacs . [(20160131 32) ((emacs (24 4)) (dash (2 11 0)) (dash-functional (1 2 0)) (cl-lib (0 5)) (f (0 18 0))) "Pacman for Emacs" tar]) (packed . [(20180318 1029) ((emacs (24 3))) "package manager agnostic Emacs Lisp package utilities" single]) (package-utils . [(20180514 715) ((restart-emacs (0 1 1))) "Extensions for package.el" single]) (package-safe-delete . [(20150116 807) ((emacs (24)) (epl (0 7 -4))) "Safely delete package.el packages" single]) (package-lint . [(20180608 2119) ((cl-lib (0 5)) (emacs (24))) "A linting library for elisp package authors" tar]) (package-filter . [(20161121 2319) nil "package archive whitelist and blacklist" single]) (package-build . [(20180628 2221) ((cl-lib (0 5))) "Tools for assembling a package archive" tar]) (package+ . [(20170815 1956) nil "Extensions for the package library." single]) (pabbrev . [(20160320 1401) nil "Predictive abbreviation expansion" single]) (p4 . [(20150721 1237) nil "Simple Perforce-Emacs Integration" single]) (ox-twiki . [(20170803 1339) ((org (8)) (cl-lib (0 5))) "org Twiki and Foswiki export" single]) (ox-twbs . [(20161103 1316) nil "Bootstrap compatible HTML Back-End for Org" single]) (ox-tufte . [(20160926 907) ((org (8 2)) (emacs (24))) "Tufte HTML org-mode export backend" single]) (ox-trac . [(20171026 1123) ((org (9 0))) "Org Export Backend to Trac WikiFormat" single]) (ox-tiddly . [(20180626 1352) ((org (8)) (cl-lib (0 5))) "org TiddlyWiki exporter" single]) (ox-textile . [(20180502 247) ((org (8 1))) "Textile Back-End for Org Export Engine" single]) (ox-rst . [(20180314 1713) ((emacs (24 4)) (org (8 2 4))) "Export reStructuredText using org-mode." single]) (ox-reveal . [(20161027 226) ((org (20150330))) "reveal.js Presentation Back-End for Org Export Engine" single]) (ox-qmd . [(20170402 957) ((org (8 0))) "Qiita Markdown Back-End for Org Export Engine" single]) (ox-pukiwiki . [(20150124 916) ((org (8 1))) "Pukiwiki Back-End for Org Export Engine" single]) (ox-pandoc . [(20180510 638) ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0)) (cl-lib (0 5))) "org exporter for pandoc." single]) (ox-nikola . [(20151114 316) ((emacs (24 4)) (org (8 2 4)) (ox-rst (0 2))) "Export Nikola articles using org-mode." single]) (ox-minutes . [(20180202 934) ((emacs (24 4))) "Plain text backend for Org for Meeting Minutes" single]) (ox-mediawiki . [(20180105 1354) ((cl-lib (0 5)) (s (1 9 0))) "Mediawiki Back-End for Org Export Engine" single]) (ox-jira . [(20171001 216) ((org (8 3))) "JIRA Backend for Org Export Engine" single]) (ox-ioslide . [(20161015 638) ((emacs (24 1)) (org (8 0)) (cl-lib (0 5)) (f (0 17 2)) (makey (0 3))) "Export org-mode to Google I/O HTML5 slide." tar]) (ox-impress-js . [(20150412 1016) ((org (8))) "impress.js Back-End for Org Export Engine" tar]) (ox-hugo . [(20180710 755) ((emacs (24 4)) (org (9 0))) "Hugo Markdown Back-End for Org Export Engine" tar]) (ox-html5slide . [(20131227 2206) ((org (8 0))) "Export org-mode to HTML5 slide." single]) (ox-gfm . [(20170628 1402) nil "Github Flavored Markdown Back-End for Org Export Engine" single]) (ox-epub . [(20171202 1713) ((emacs (24 3)) (org (9))) "Export org mode projects to EPUB" single]) (ox-clip . [(20180305 1940) ((org (8 2)) (htmlize (0))) "Cross-platform formatted copying for org-mode" single]) (ox-bibtex-chinese . [(20170722 2009) ((emacs (24 4))) "Let ox-bibtex work well for Chinese users" tar]) (ox-asciidoc . [(20171111 354) ((org (8 1))) "AsciiDoc Back-End for Org Export Engine" single]) (owdriver . [(20170401 612) ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) "Quickly perform various actions on other windows" single]) (overseer . [(20180225 2219) ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4)) (f (0 18 1))) "Ert-runner Integration Into Emacs" single]) (overcast-theme . [(20180315 1243) ((emacs (24))) "A dark but vibrant color theme for Emacs" single]) (ov . [(20150311 2228) ((emacs (24 3))) "Overlay library for Emacs Lisp" single]) (outshine . [(20180625 1259) ((outorg (2 0)) (cl-lib (0 5))) "outline with outshine outshines outline" tar]) (outrespace . [(20180711 732) ((emacs (24 4))) "c++ namespace utility functions" single]) (outorg . [(20170414 1215) ((emacs (24 4))) "Org-style comment editing" single]) (outlook . [(20180428 730) ((emacs (24 4))) "send emails in MS Outlook style" tar]) (outlined-elisp-mode . [(20131108 327) nil "outline-minor-mode settings for emacs lisp" single]) (outline-toc . [(20170730 430) nil "Sidebar showing a \"table of contents\"." single]) (outline-magic . [(20180619 1119) nil "outline mode extensions for Emacs" single]) (other-emacs-eval . [(20180408 648) ((emacs (25 1)) (async (1 9 2))) "Evaluate the Emacs Lisp expression in other Emacs" single]) (otama . [(20160404 332) nil "Org-table Manipulator" single]) (osx-trash . [(20160520 600) ((emacs (24 1))) "System trash for OS X" tar]) (osx-pseudo-daemon . [(20170721 2307) nil "Daemon mode that plays nice with OSX." single]) (osx-org-clock-menubar . [(20150205 1311) nil "simple menubar integration for org-clock" tar]) (osx-location . [(20150613 217) nil "Watch and respond to changes in geographical location on OS X" tar]) (osx-lib . [(20160919 1700) ((emacs (24 4))) "Basic function for Apple/OSX." single]) (osx-dictionary . [(20171026 34) ((cl-lib (0 5))) "Interface for OSX Dictionary.app" tar]) (osx-clipboard . [(20141012 17) nil "Use the OS X clipboard from terminal Emacs" single]) (osx-browse . [(20140508 1341) ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) "Web browsing helpers for OS X" single]) (origami . [(20180101 753) ((s (1 9 0)) (dash (2 5 0)) (emacs (24)) (cl-lib (0 5))) "Flexible text folding" tar]) (orgtbl-show-header . [(20141023 137) nil "Show the header of the current column in the minibuffer" single]) (orgtbl-join . [(20150121 1446) ((cl-lib (0 5))) "join columns from another table" tar]) (orgtbl-ascii-plot . [(20151215 1351) nil "ascii-art bar plots in org-mode tables" single]) (orgtbl-aggregate . [(20180620 1043) nil "Create an aggregated Org table from another one" tar]) (orgnav . [(20170608 1013) ((helm (2 7 0)) (s (1 11 0)) (dash (1 11 0)) (emacs (24))) "Org tree navigation using helm" tar]) (orglue . [(20171220 426) ((org (8 1)) (epic (0 2))) "more functionality to org-mode." tar]) (orglink . [(20180318 1323) ((emacs (24 3)) (dash (2 12 1)) (org (8 3))) "use Org Mode links in other modes" single]) (orgit . [(20180318 1301) ((emacs (24 4)) (dash (2 13 0)) (magit (2 10 0)) (org (8 3 3))) "support for Org links to Magit buffers" single]) (orgbox . [(20140528 1826) ((org (8 0)) (cl-lib (0 5))) "Mailbox-like task scheduling Org." single]) (organize-imports-java . [(20180623 1209) ((emacs (26)) (f (0 20 0)) (s (1 12 0)) (cl-lib (0 6))) "Mimic Eclipse's Organize Imports functionality." single]) (organic-green-theme . [(20180522 920) nil "Low-contrast green color theme." single]) (org2web . [(20171005 1617) ((cl-lib (1 0)) (ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (el2org (0 10)) (simple-httpd (0 1))) "A static site generator based on org mode." tar]) (org2jekyll . [(20170225 115) ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1)) (kv (0 0 19))) "Minor mode to publish org-mode post to jekyll without specific yaml" tar]) (org2issue . [(20160426 1818) ((org (8 0)) (emacs (24 4)) (ox-gfm (0 1)) (gh (0 1)) (s (20160405 920))) "export org to github issue" single]) (org2elcomment . [(20170324 245) ((org (8 3 4))) "Convert Org file to Elisp comments" single]) (org2ctex . [(20171016 2343) ((emacs (24 4))) "Export org to ctex (a latex macro for Chinese)" single]) (org2blog . [(20171218 1911) ((org (8 3)) (xml-rpc (1 6 12)) (metaweblog (1 0 1)) (htmlize (1 51))) "Blog from Org mode to wordpress" tar]) (org-wunderlist . [(20150817 1913) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4)) (s (1 9 0))) "Org sync with Wunderlist" single]) (org-wild-notifier . [(20180221 2025) ((alert (1 2)) (dash (2 13 0)) (emacs (24 4))) "Customizable org-agenda notifications" single]) (org-web-tools . [(20180531 1808) ((emacs (25 1)) (org (9 0)) (dash (2 12)) (esxml (0 3 4)) (s (1 10 0))) "Display and capture web content with Org-mode" single]) (org-wc . [(20180609 1953) nil "Count words in org mode trees." single]) (org-vcard . [(20170929 410) nil "org-mode support for vCard export and import." tar]) (org-variable-pitch . [(20180429 1515) ((emacs (25))) "Minor mode for variable pitch text in org mode." single]) (org-trello . [(20180330 2331) ((request-deferred (0 2 0)) (deferred (0 4 0)) (s (1 11 0)) (dash-functional (2 12 1)) (dash (2 12 1))) "Minor mode to synchronize org-mode buffer and trello board" tar]) (org-tree-slide . [(20180424 1636) nil "A presentation tool for org-mode" single]) (org-transform-tree-table . [(20150110 633) ((dash (2 10 0)) (s (1 3 0))) "Transform org-mode tree with properties to a table, and the other way around" single]) (org-tracktable . [(20161118 529) ((emacs (24)) (cl-lib (0 5))) "Track your writing progress in an org-table" single]) (org-toodledo . [(20150301 313) ((request-deferred (0 2 0)) (emacs (24)) (cl-lib (0 5))) "Toodledo integration for Emacs Org mode" tar]) (org-time-budgets . [(20151111 1) ((alert (0 5 10)) (cl-lib (0 5))) "Define time budgets and display clocked time." single]) (org-themis . [(20160121 2004) ((cl-lib (0 4))) "Experimental project management mode for org-mode" single]) (org-tfl . [(20170923 518) ((org (0 16 2)) (cl-lib (0 5)) (emacs (24 1))) "Transport for London meets Orgmode" tar]) (org-table-sticky-header . [(20170408 1814) ((org (8 2 10)) (emacs (24 4))) "Sticky header for org-mode tables" single]) (org-table-comment . [(20120209 1051) nil "Org table comment modes." single]) (org-sync-snippets . [(20170824 1128) ((org (8 3 5)) (emacs (24 3)) (f (0 17 3))) "Export snippets to org-mode and vice versa" single]) (org-sync . [(20180221 1127) ((cl-lib (0 5)) (org (8 2)) (emacs (24))) "Synchronize Org documents with External Issue Trackers" tar]) (org-super-agenda . [(20180714 1348) ((emacs (25 1)) (s (1 10 0)) (dash (2 13)) (org (9 0)) (ht (2 2))) "Supercharge your agenda" single]) (org-sticky-header . [(20170422 2135) ((emacs (24 4)) (org (8 3 5))) "Show off-screen Org heading at top of window" single]) (org-static-blog . [(20180527 2348) ((emacs (24 3))) "a simple org-mode based static blog generator" single]) (org-send-ebook . [(20180401 1015) ((emacs (25)) (cl-lib (0 5)) (seq (2 20))) "Send org link file to ebook reader." single]) (org-seek . [(20161216 2102) ((emacs (24 3)) (ag (0 48))) "Searching Org-mode files with search tools." single]) (org-rtm . [(20160214 436) ((rtm (0 1))) "Simple import/export from rememberthemilk to org-mode" single]) (org-rich-yank . [(20180430 644) ((emacs (24 4))) "paste with org-mode markup and link to source" single]) (org-review . [(20160906 2237) nil "schedule reviews for Org entries" single]) (org-repo-todo . [(20171227 1719) nil "Simple repository todo management with org-mode" single]) (org-ref . [(20180706 614) ((dash (2 11 0)) (htmlize (1 51)) (helm (1 5 5)) (helm-bibtex (2 0 0)) (ivy (0 8 0)) (hydra (0 13 2)) (key-chord (0)) (s (1 10 0)) (f (0 18 0)) (emacs (24 4)) (pdf-tools (0 7))) "citations, cross-references and bibliographies in org-mode" tar]) (org-redmine . [(20160711 414) nil "Redmine tools using Emacs OrgMode" single]) (org-recent-headings . [(20170907 2129) ((emacs (25 1)) (org (9 0 5)) (dash (2 13 0)) (frecency (0 1))) "Jump to recently used Org headings" single]) (org-readme . [(20151204 417) ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0)) (cl-lib (0 5))) "Integrates Readme.org and Commentary/Change-logs." tar]) (org-randomnote . [(20171210 557) ((f (0 19 0)) (dash (2 12 0))) "Find a random note in your Org-Mode files" single]) (org-random-todo . [(20180312 104) ((emacs (24 3)) (alert (1 2))) "show a random TODO (with alert) every so often" single]) (org-radiobutton . [(20180612 328) ((dash (2 13 0)) (emacs (24))) "Radiobutton for org-mode lists." single]) (org-protocol-jekyll . [(20170328 939) ((cl-lib (0 5))) "Jekyll's handler for org-protocol" single]) (org-projectile-helm . [(20180601 1122) ((org-projectile (1 0 0)) (helm (2 3 1)) (emacs (25))) "helm functions for org-projectile" single]) (org-projectile . [(20180531 1942) ((projectile (0 11 0)) (dash (2 10 0)) (emacs (24)) (s (1 9 0)) (org-category-capture (0 0 0))) "Repository todo management for org-mode" single]) (org-preview-html . [(20180624 2319) ((org (8 0)) (emacs (24 4))) "automatically use eww to preview the current org file on save" single]) (org-present . [(20180303 1530) ((org (7))) "Minimalist presentation minor-mode for Emacs org-mode." single]) (org-pomodoro . [(20171108 1314) ((alert (0 5 10)) (cl-lib (0 5))) "Pomodoro implementation for org-mode." tar]) (org-pdfview . [(20180225 206) ((org (8 2 10)) (pdf-tools (0 80))) "Support for links to documents in pdfview mode" single]) (org-password-manager . [(20180227 1010) ((org (8 2 10)) (s (1 9 0)) (dash (2 13 0))) "Password manager for Org Mode." single]) (org-parser . [(20171002 2136) ((emacs (25 1)) (dash (2 12 0)) (ht (2 1))) "parse org files into structured datatypes." single]) (org-page . [(20170806 1924) ((ht (1 5)) (simple-httpd (1 4 6)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (cl-lib (0 5)) (git (0 1 1))) "a static site generator based on org mode" tar]) (org-outlook . [(20160705 638) nil "Outlook org" tar]) (org-outline-numbering . [(20180705 801) ((emacs (24)) (org (8 3)) (cl-lib (0 6)) (ov (1 0 6))) "Show outline numbering as overlays in org-mode" single]) (org-onenote . [(20171007 2200) ((oauth2 (0 11)) (request (0 2 0)) (org (8 2 10))) "export org-mode document to onenote." single]) (org-octopress . [(20170820 2115) ((org (9 0)) (orglue (0 1)) (ctable (0 1 1))) "Compose octopress articles using org-mode." tar]) (org-noter . [(20180708 1429) ((emacs (24 4)) (cl-lib (0 6)) (org (9 0))) "A synchronized, Org-mode, document annotator" single]) (org-notebook . [(20170321 2152) ((emacs (24)) (org (8)) (cl-lib (0 5))) "Ease the use of org-mode as a notebook" single]) (org-multiple-keymap . [(20150328 1806) ((org (8 2 4)) (emacs (24)) (cl-lib (0 5))) "Set keymap to elements, such as timestamp and priority." single]) (org-mru-clock . [(20180419 606) ((emacs (24 3))) "clock in/out of tasks with completion and persistent history" single]) (org-mobile-sync . [(20180605 2224) ((emacs (24 3 50)) (org (8 0))) "automatically sync org-mobile on changes" single]) (org-mind-map . [(20180614 1352) ((emacs (24)) (dash (1 8 0)) (org (8 2 10))) "Creates a directed graph from org-mode files" single]) (org-mime . [(20180607 2350) ((emacs (24 4)) (cl-lib (0 5))) "org html export for text/html MIME emails" single]) (org-make-toc . [(20180614 1959) ((emacs (25 1)) (dash (2 12)) (s (1 10 0)) (org (9 0))) "Automatic tables of contents for Org files" single]) (org-listcruncher . [(20180630 1326) ((cl-lib (0 5)) (seq (2 3)) (emacs (24 4))) "Parse Org mode list contents into table" single]) (org-linkany . [(20160206 2011) ((log4e (0 2 0)) (yaxception (0 1))) "Insert link using anything.el/helm.el on org-mode" single]) (org-link-travis . [(20140405 1627) ((org (7))) "Insert/Export the link of Travis CI on org-mode" single]) (org-link-minor-mode . [(20170805 1152) ((org (8))) "Enable org-mode links in non-org modes" single]) (org-kanban . [(20180717 712) ((dash (2 13 0)) (emacs (24 4)) (org (9 1))) "kanban dynamic block for org-mode." single]) (org-journal . [(20180603 102) ((emacs (25 1))) "a simple org-mode based journaling mode" single]) (org-jira . [(20180625 2111) ((emacs (24 5)) (cl-lib (0 5)) (request (0 2 0)) (s (0 0 0))) "Syncing between Jira and Org-mode." tar]) (org-iv . [(20171001 322) ((impatient-mode (1 0 0)) (org (8 0)) (cl-lib (0 5))) "a tool used to view html (in browser) generated by org-file once the org-file changes" tar]) (org-index . [(20180519 725) ((emacs (24 4))) "A personal adaptive index for org" single]) (org-if . [(20150920 813) nil "Interactive Fiction Authoring System for Org-Mode." tar]) (org-grep . [(20151202 429) ((cl-lib (0 5))) "Kind of M-x rgrep adapted for Org mode." single]) (org-gnome . [(20150614 757) ((alert (1 2)) (telepathy (0 1)) (gnome-calendar (0 1))) "Orgmode integration with the GNOME desktop" single]) (org-gcal . [(20170420 1401) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) "Org sync with Google Calendar" single]) (org-fancy-priorities . [(20180328 1631) nil "Display org priorities as custom strings" single]) (org-evil . [(20180620 817) ((dash (2 13 0)) (evil (0)) (monitor (0)) (org (0))) "Evil extensions for Org." tar]) (org-elisp-help . [(20161121 1655) ((cl-lib (0 5)) (org (9 0))) "org links to emacs-lisp documentation" single]) (org-ehtml . [(20150506 1658) ((web-server (20140109 2200)) (emacs (24 3))) "Export Org-mode files as editable web pages" tar]) (org-edit-latex . [(20170908 822) ((emacs (24 4)) (auctex (11 90))) "Edit embedded LaTeX in a dedicated buffer" single]) (org-easy-img-insert . [(20160915 1308) ((emacs (24 4))) "An easier way to add images from the web in org mode" single]) (org-dropbox . [(20150113 2109) ((dash (2 2)) (names (20150000)) (emacs (24))) "move Dropbox notes from phone into org-mode datetree" single]) (org-drill-table . [(20180115 209) ((s (1 7 0)) (dash (2 2 0)) (cl-lib (0 3)) (org (8 2)) (emacs (24 1))) "Generate drill cards from org tables" single]) (org-dp . [(20180311 123) ((cl-lib (0 5))) "Declarative Local Programming with Org Elements" tar]) (org-download . [(20180625 842) ((async (1 2))) "Image drag-and-drop for Emacs org-mode" single]) (org-dotemacs . [(20151119 1022) ((org (7 9 3)) (cl-lib (1 0))) "Store your emacs config as an org file, and choose which bits to load." single]) (org-doing . [(20161017 920) nil "Keep track of what you're doing" tar]) (org-dashboard . [(20171223 1124) ((cl-lib (0 5))) "Visually summarize progress in org files" single]) (org-cua-dwim . [(20120202 2134) nil "Org-mode and Cua mode compatibility layer" single]) (org-context . [(20170107 537) nil "Contextual capture and agenda commands for Org-mode" single]) (org-commentary . [(20160801 2337) ((dash (2 0)) (emacs (24 4)) (org (8 0))) "generate or update conventional library headers using Org mode files" tar]) (org-clock-today . [(20161014 220) ((emacs (25))) "Show the total clocked time of the current day in the mode line" single]) (org-clock-csv . [(20180313 1957) ((org (8 3)) (s (1 0))) "Export `org-mode' clock entries to CSV format." single]) (org-clock-convenience . [(20160830 1156) ((cl-lib (0 5)) (org (8)) (emacs (24 3))) "convenience functions for org time tracking" single]) (org-cliplink . [(20180717 408) ((emacs (24 4))) "insert org-mode links from the clipboard" tar]) (org-chef . [(20180706 1835) ((org (0)) (emacs (24))) "Cookbook and recipe management with org-mode." tar]) (org-category-capture . [(20180531 1942) ((org (9 0 0)) (emacs (24))) "Contextualy capture of org-mode TODOs." single]) (org-capture-pop-frame . [(20160518 308) ((emacs (24 4))) "Run org-capture in a new pop frame" single]) (org-caldav . [(20180403 1336) ((org (7))) "Sync org files with external calendar through CalDAV" single]) (org-bullets . [(20171127 526) nil "Show bullets in org-mode as UTF-8 characters" single]) (org-brain . [(20180712 1410) ((emacs (25)) (org (9))) "Org-mode concept mapping" single]) (org-bookmark-heading . [(20170510 1008) ((emacs (24 4))) "Emacs bookmark support for org-mode" single]) (org-board . [(20180530 1120) nil "bookmarking and web archival system for Org mode." single]) (org-beautify-theme . [(20170908 1518) nil "A sub-theme to make org-mode more beautiful." single]) (org-babel-eval-in-repl . [(20170511 514) ((eval-in-repl (0 9 2)) (matlab-mode (3 3 6)) (ess (16 10)) (emacs (24))) "Eval org-mode babel code blocks in various REPLs." tar]) (org-autolist . [(20170924 1201) nil "Improved list management in org-mode" single]) (org-attach-screenshot . [(20180419 2225) nil "screenshots integrated with org attachment dirs" single]) (org-alert . [(20180523 1833) ((s (1 10 0)) (dash (2 11 0)) (alert (1 2))) "Notify org deadlines via notify-send" single]) (org-agenda-property . [(20140626 1416) ((emacs (24 2))) "Display org properties in the agenda buffer." single]) (org-ac . [(20170401 607) ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) "Some auto-complete sources for org-mode" single]) (orca . [(20171030 1216) ((emacs (24 3))) "Org Capture" single]) (operate-on-number . [(20150706 2323) nil "Operate on number at point with arithmetic functions" single]) (openwith . [(20120531 1436) nil "Open files with external programs" single]) (openstack-cgit-browse-file . [(20130819 227) nil "Browse the current file in OpenStack cgit" single]) (opensource . [(20160926 916) ((s (1 11 0)) (dash (2 12 1)) (pkg-info (0 6 0)) (request (0 2 0))) "Client for Opensource API" tar]) (opener . [(20161207 1010) ((request (0 2 0)) (emacs (24)) (cl-lib (0 5))) "opening urls as buffers" tar]) (opencl-mode . [(20170816 549) nil "Syntax coloring for opencl kernels" single]) (opencc . [(20170722 116) ((emacs (24 4))) "中文简繁转换 <-> 中文簡繁轉換 (Convert Chinese with OpenCC)" single]) (open-junk-file . [(20161210 314) nil "Open a junk (memo) file to try-and-error" single]) (open-in-msvs . [(20170123 1428) nil "Open current file:line:column in Microsoft Visual Studio" tar]) (opam . [(20150719 520) ((emacs (24 1))) "OPAM tools" single]) (one-time-pad-encrypt . [(20160329 813) nil "One time pad encryption within file" single]) (one-themes . [(20180507 1008) ((emacs (24))) "One Colorscheme" tar]) (on-screen . [(20160302 150) ((cl-lib (0))) "guide your eyes while scrolling" single]) (on-parens . [(20180202 1441) ((dash (2 10 0)) (emacs (24)) (evil (1 1 6)) (smartparens (1 6 3))) "smartparens wrapper to fit with evil-mode/vim normal-state" single]) (omtose-phellack-theme . [(20161111 1320) nil "A dark theme, with cold bluish touch." tar]) (omnisharp . [(20180606 318) ((emacs (24 4)) (flycheck (30)) (dash (2 12 0)) (auto-complete (1 4)) (popup (0 5 1)) (csharp-mode (0 8 7)) (cl-lib (0 5)) (s (1 10 0)) (shut-up (0 3 2)) (f (0 19 0))) "Omnicompletion (intellisense) and more for C#" tar]) (omnibox . [(20180422 1749) ((emacs (26 1)) (dash (2 13)) (frame-local (0 0 1))) "Selection package" single]) (omni-tags . [(20170426 1409) ((pcre2el (1 7)) (cl-lib (0 5))) "Highlight and Actions for 'Tags'" tar]) (omni-scratch . [(20171009 1451) nil "Easy and mode-specific draft buffers" single]) (omni-quotes . [(20170425 1132) ((dash (2 8)) (omni-log (0 3 3)) (f (0 19 0)) (s (1 11 0)) (ht (2 1))) "Random quotes displayer" tar]) (omni-log . [(20170930 535) ((emacs (24)) (ht (2 0)) (s (1 6 1)) (dash (2 13 0))) "Logging utilities" tar]) (omni-kill . [(20171016 1440) nil "Kill all the things" single]) (om-mode . [(20140915 1410) nil "Insert Om component template with life cycle." single]) (olivetti . [(20180531 37) ((emacs (24 4))) "Minor mode for a nice writing environment" single]) (oldlace-theme . [(20150705 600) ((emacs (24))) "Emacs 24 theme with an 'oldlace' background." single]) (old-norse-input . [(20170816 1142) ((emacs (24))) "An input method for Old Norse" single]) (offlineimap . [(20150916 458) nil "Run OfflineIMAP from Emacs" single]) (octopress . [(20170813 615) nil "A lightweight wrapper for Jekyll and Octopress." tar]) (octo-mode . [(20161008 529) ((emacs (24))) "Major mode for Octo assembly language" single]) (octicons . [(20151031 2040) ((cl-lib (0 5))) "octicons utility" tar]) (ocp-indent . [(20180417 849) nil "automatic indentation with ocp-indent" single]) (ocodo-svg-modelines . [(20150516 719) ((svg-mode-line-themes (0))) "A collection of beautiful SVG modelines" tar]) (oceanic-theme . [(20161015 119) nil "Oceanic theme." single]) (occur-x . [(20130610 643) nil "Extra functionality for occur" single]) (occur-context-resize . [(20170904 1609) nil "dynamically resize context around matches in occur-mode" single]) (occidental-theme . [(20130312 1258) nil "Custom theme for faces based on Adwaita" single]) (obsidian-theme . [(20170719 248) nil "port of the eclipse obsidian theme" single]) (objc-font-lock . [(20141021 1122) nil "Highlight Objective-C method calls." single]) (obfusurl . [(20170809 824) ((cl-lib (0 5))) "Obfuscate URLs so they aren't spoilers" single]) (oberon . [(20120715 209) nil "Major mode for editing Oberon/Oberon-2 program texts" single]) (ob-uart . [(20170521 158) nil "org-babel support for UART communication" single]) (ob-typescript . [(20150804 530) ((emacs (24)) (org (8 0))) "org-babel functions for typescript evaluation" single]) (ob-translate . [(20170720 1219) ((google-translate (0 11)) (org (8))) "Translation of text blocks in org-mode." single]) (ob-swift . [(20170921 625) ((org (8))) "org-babel functions for swift evaluation" single]) (ob-sql-mode . [(20180426 1211) ((emacs (24 4))) "SQL code blocks evaluated by sql-mode" single]) (ob-sml . [(20130829 1143) ((sml-mode (6 4))) "org-babel functions for template evaluation" single]) (ob-sagemath . [(20170130 1833) ((sage-shell-mode (0 0 8)) (s (1 8 0)) (emacs (24))) "org-babel functions for SageMath evaluation" tar]) (ob-rust . [(20180606 1646) nil "Org-babel functions for Rust" tar]) (ob-restclient . [(20180703 902) ((restclient (0))) "org-babel functions for restclient-mode" single]) (ob-prolog . [(20180328 1034) nil "org-babel functions for prolog evaluation." single]) (ob-nim . [(20170809 1130) ((cl-lib (0 5))) "Babel Functions for nim" single]) (ob-mongo . [(20170720 1219) ((org (8))) "Execute mongodb queries within org-mode blocks." single]) (ob-ml-marklogic . [(20170622 1133) nil "org-babel functions for MarkLogic evaluation" tar]) (ob-mermaid . [(20180522 959) nil "org-babel support for mermaid evaluation" single]) (ob-lfe . [(20170725 720) ((org (8))) "org-babel functions for lfe evaluation" single]) (ob-kotlin . [(20170725 718) ((org (8))) "org-babel functions for kotlin evaluation" single]) (ob-ipython . [(20180224 153) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "org-babel functions for IPython evaluation" tar]) (ob-hy . [(20180701 2240) ((emacs (24 4))) "org-babel functions for Hy-lang evaluation" tar]) (ob-http . [(20180707 748) ((s (1 9 0)) (cl-lib (0 5))) "http request in org-mode babel" tar]) (ob-go . [(20170731 1057) nil "org-babel functions for go evaluation" tar]) (ob-fsharp . [(20170618 729) ((emacs (25)) (fsharp-mode (1 9 8))) "Org-Babel F#" single]) (ob-elvish . [(20180427 1200) nil "org-babel functions for Elvish shell" single]) (ob-elixir . [(20170725 719) ((org (8))) "org-babel functions for elixir evaluation" single]) (ob-diagrams . [(20160407 537) nil "org-babel functions for diagrams evaluation" single]) (ob-dart . [(20170106 824) nil "org-babel functions for Dart evaluation" single]) (ob-dao . [(20170816 858) ((org (8))) "Org Babel Functions for Dao" single]) (ob-cypher . [(20170725 720) ((s (1 9 0)) (cypher-mode (0 0 6)) (dash (2 10 0)) (dash-functional (1 2 0))) "query neo4j using cypher in org-mode blocks" single]) (ob-crystal . [(20180125 2318) ((emacs (24 3))) "org-babel functions for Crystal evaluation" tar]) (ob-coffeescript . [(20180125 2319) ((emacs (24 4))) "org-babel functions for coffee-script evaluation, and fully implementation!" single]) (ob-coffee . [(20170725 724) ((org (8))) "org-babel functions for coffee-script evaluation" tar]) (ob-clojurescript . [(20180406 1128) ((emacs (24 4)) (org (9 0))) "org-babel functions for ClojureScript evaluation" single]) (ob-cfengine3 . [(20180102 1012) nil "Org Babel functions for CFEngine 3" single]) (ob-browser . [(20170720 1218) ((org (8))) "Render HTML in org-mode blocks." tar]) (ob-blockdiag . [(20170727 1801) nil "org-babel functions for blockdiag evaluation" single]) (ob-axiom . [(20171103 1548) ((emacs (24 2)) (axiom-environment (20171021))) "An org-babel backend for the axiom-environment system" single]) (ob-async . [(20180624 1553) ((async (1 9)) (org (9 0 1)) (emacs (24 4)) (dash (2 14 1))) "Asynchronous org-babel src block execution" single]) (ob-applescript . [(20160914 1327) nil "org-babel functions for template evaluation" single]) (oauth . [(20130127 1751) nil "Oauth library." tar]) (o-blog . [(20151202 1539) nil "Standalone orgmode blog exporter" tar]) (nyx-theme . [(20170910 607) ((emacs (24))) "Dark theme" single]) (nyan-mode . [(20170423 40) nil "Nyan Cat shows position in current buffer in mode-line." tar]) (nvm . [(20171217 836) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (dash-functional (2 4 0))) "Manage Node versions within Emacs" single]) (nv-delete-back . [(20170224 449) ((emacs (24))) "backward delete like modern text editors" single]) (nummm-mode . [(20131117 214) nil "Display the number of minor modes instead of their names" single]) (numbers . [(20170802 434) ((emacs (24))) "Display information and trivia about numbers" single]) (number-lock . [(20160829 1900) nil "Enter symbols on your number keys without pressing shift" single]) (number . [(20170901 612) nil "Working with numbers at point." single]) (nubox . [(20170619 210) nil "Nubox color theme (dark, light and tty versions)" tar]) (nu-mode . [(20180619 1428) ((undo-tree (0 6 5)) (ace-window (0)) (avy (0)) (which-key (0)) (transpose-frame (0))) "Modern Emacs Prompts Based Keybinding." tar]) (nsis-mode . [(20180523 649) nil "NSIS-mode" tar]) (nrepl-sync . [(20140807 854) ((cider (0 6))) "connect to nrepl port and eval .sync.clj." single]) (nrepl-eval-sexp-fu . [(20140311 341) ((highlight (0 0 0)) (smartparens (0 0 0)) (thingatpt (0 0 0))) "Tiny functionality enhancements for evaluating sexps." single]) (npm-mode . [(20171103 1135) ((emacs (24 1))) "minor mode for working with npm projects" single]) (noxml-fold . [(20170823 657) nil "Fold away XML things." single]) (nova-theme . [(20180530 801) ((emacs (24 3))) "A dark, pastel color theme" single]) (nov . [(20180617 1444) ((dash (2 12 0)) (esxml (0 3 3)) (emacs (24 4))) "Featureful EPUB reader mode" single]) (notmuch-labeler . [(20131230 919) ((notmuch (0))) "Improve notmuch way of displaying labels" tar]) (notmuch . [(20180503 1659) nil "run notmuch within emacs" tar]) (nose . [(20140520 948) nil "Easy Python test running in Emacs" single]) (northcode-theme . [(20180423 949) ((emacs (24))) "A dark theme focused on blue and orange colors." single]) (nordless-theme . [(20180613 50) nil "A mostly colorless theme" single]) (nord-theme . [(20180102 1001) ((emacs (24))) "An arctic, north-bluish clean and elegant theme" single]) (nofrils-acme-theme . [(20180620 548) ((emacs (24))) "Port of \"No Frils Acme\" Vim theme." tar]) (noflet . [(20141102 654) nil "locally override functions" single]) (nodemcu-mode . [(20180501 1525) ((emacs (25))) "Minor mode for NodeMCU" single]) (nodejs-repl . [(20170722 443) nil "Run Node.js REPL" single]) (node-resolver . [(20140930 1023) ((cl-lib (0 5))) "hook to install node modules in background" single]) (noctilux-theme . [(20161113 642) ((emacs (24))) "Dark theme inspired by LightTable" single]) (nocomments-mode . [(20170213 1237) nil "Minor mode that makes comments invisible." single]) (noccur . [(20150514 1420) nil "Run multi-occur on project/dired files" single]) (noaa . [(20180419 1133) ((request (0 2 0)) (cl-lib (0 5)) (emacs (24))) "Get NOAA weather data" single]) (no-littering . [(20180620 600) ((cl-lib (0 5))) "help keeping ~/.emacs.d clean" single]) (no-emoji . [(20180515 1137) ((emacs (24))) "Show :emoji-name: instead of emoji characters" single]) (nnir-est . [(20180710 1403) nil "Gnus nnir interface for HyperEstraier" single]) (nm . [(20151110 1110) ((notmuch (0 21)) (peg (0 6)) (company (0)) (emacs (24 3))) "NEVERMORE: an email interface for Notmuch" tar]) (nlinum-relative . [(20160526 8) ((emacs (24 4)) (nlinum (1 5))) "Relative line number with nlinum" single]) (nlinum-hl . [(20170613 1748) ((emacs (24 4)) (nlinum (1 7)) (cl-lib (0 5))) "heal nlinum's line numbers" single]) (nixos-options . [(20160209 1041) ((emacs (24))) "Interface for browsing and completing NixOS options." single]) (nix-update . [(20180424 1748) ((emacs (25))) "Update \"fetch\" blocks in .nix expressions" single]) (nix-sandbox . [(20171004 1006) ((dash (2 12 1)) (s (1 10 0))) "Utility functions to work with nix-shell sandboxes" single]) (nix-mode . [(20180629 1501) ((emacs (24 3))) "Major mode for editing .nix files" tar]) (nix-buffer . [(20180212 718) ((f (0 17 3)) (emacs (24 4))) "Set up buffer environments with nix" single]) (ninja-mode . [(20141203 2159) ((emacs (24))) "Major mode for editing .ninja files" single]) (nimbus-theme . [(20180606 1936) nil "An awesome dark theme" single]) (nim-mode . [(20180516 1309) ((emacs (24 4)) (epc (0 1 1)) (let-alist (1 0 1)) (commenter (0 5 1)) (flycheck-nimsuggest (0 8 1))) "A major mode for the Nim programming language" tar]) (nikola . [(20170703 1321) ((async (1 5)) (emacs (24 3))) "Simple wrapper for nikola" single]) (night-owl-theme . [(20180630 1431) ((emacs (24))) "A color theme for the night owls out there" single]) (niconama . [(20170910 801) ((emacs (24)) (request (20170131 1747)) (cl-lib (0 5))) "Tools for Niconico Live Broadcast" single]) (niceify-info . [(20160416 544) nil "improve usability of Info pages" single]) (nginx-mode . [(20170611 2137) nil "major mode for editing nginx config files" single]) (ng2-mode . [(20180520 1731) ((typescript-mode (0 1))) "Major modes for editing Angular 2" tar]) (nexus . [(20140114 505) nil "REST Client for Nexus Maven Repository servers" tar]) (newlisp-mode . [(20160226 745) nil "newLISP editing mode for Emacs" single]) (never-comment . [(20140104 1407) nil "Never blocks are comment" single]) (network-watch . [(20171123 346) ((emacs (24 3))) "Support for intermittent network connectivity" single]) (netrunner . [(20160910 1632) ((popup (0 5 3)) (company (0 9 0)) (helm (1 9 5))) "Create Android: Netrunner decklists using Company, Helm and org-mode" single]) (netherlands-holidays . [(20150202 817) nil "Netherlands holidays for Emacs calendar." single]) (netease-music . [(20180429 1822) ((names (0 5)) (emacs (25))) "listen netease music" single]) (nerdtab . [(20180527 408) ((emacs (24 5))) "Keyboard-oriented tabs" single]) (neotree . [(20180616 903) ((cl-lib (0 5))) "A tree plugin like NerdTree for Vim" tar]) (neon-mode . [(20180406 456) nil "Simple major mode for editing neon files" single]) (nemerle . [(20161029 1323) nil "major mode for editing nemerle programs" single]) (neato-graph-bar . [(20171230 1753) ((emacs (24 3))) "Neat-o graph bars CPU/memory etc." single]) (nclip . [(20130617 1315) nil "Network (HTTP) Clipboard" tar]) (ncl-mode . [(20180128 2303) ((emacs (24))) "Major Mode for editing NCL scripts and other goodies" tar]) (navorski . [(20141203 1024) ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) "Helping you live in the terminal, like Viktor did." single]) (navi2ch . [(20150329 1916) nil "Navigator for 2ch for Emacsen" tar]) (navi-mode . [(20180515 1948) ((outshine (2 0)) (outorg (2 0))) "major-mode for easy buffer-navigation" single]) (nav-flash . [(20140508 1341) nil "Briefly highlight the current line" single]) (nav . [(20120507 7) nil "Emacs mode for filesystem navigation" tar]) (nasm-mode . [(20180711 1209) ((emacs (24 3))) "NASM x86 assembly major mode" single]) (nash-mode . [(20160830 512) nil "Nash major mode" single]) (narrowed-page-navigation . [(20150108 2119) ((emacs (24)) (cl-lib (0 5))) "A minor mode for showing one page at a time" single]) (narrow-reindent . [(20150722 1206) ((emacs (24 4))) "Defines a minor mode to left-align narrowed regions." single]) (naquadah-theme . [(20180212 440) nil "A theme based on Tango color set" single]) (nanowrimo . [(20151104 1828) nil "Track progress for nanowrimo" single]) (nand2tetris-assembler . [(20171201 1013) ((nand2tetris (1 1 0))) "Assembler For the Nand2tetris Course" single]) (nand2tetris . [(20171201 1013) ((emacs (24))) "Major mode for HDL files in the nand2tetris course" tar]) (namespaces . [(20130326 1550) nil "An implementation of namespaces for Elisp, with an emphasis on immutabilty." single]) (names . [(20180321 455) ((emacs (24 1)) (cl-lib (0 5))) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." tar]) (nameless . [(20180215 1421) ((emacs (24 4))) "Hide package namespace in your emacs-lisp code" single]) (nameframe-projectile . [(20160927 2103) ((nameframe (0 4 1 -2)) (projectile (0 13 0))) "Nameframe integration with Projectile" single]) (nameframe-perspective . [(20170405 1819) ((nameframe (0 4 1 -2)) (perspective (1 12))) "Nameframe integration with perspective.el" single]) (nameframe . [(20171106 1656) nil "Manage frames by name." single]) (name-this-color . [(20151014 1330) ((emacs (24)) (cl-lib (0 5)) (dash (2 11 0))) "Match RGB codes to names easily and precisely" single]) (n4js . [(20150713 1931) ((emacs (24)) (cypher-mode (0))) "Neo4j Shell" single]) (myterminal-controls . [(20170425 1936) ((emacs (24)) (cl-lib (0 5))) "Quick toggle controls at a key-stroke" single]) (mysql2sqlite . [(20170725 1516) nil "Convert mysql databases into sqlite databases." single]) (mysql-to-org . [(20180123 714) ((emacs (24 3)) (s (1 11 0))) "Minor mode to output the results of mysql queries to org tables" single]) (mynt-mode . [(20150512 1349) ((virtualenvwrapper (20131514))) "Minor mode to work with the mynt static site generator" single]) (mykie . [(20150808 1505) ((emacs (24 3)) (cl-lib (0 5))) "Command multiplexer: Register multiple functions to a keybind" tar]) (myanmar-input-methods . [(20160106 737) nil "Emacs Input Method for Myanmar" single]) (mxf-view . [(20180501 40) ((emacs (25))) "Simple MXF viewer" single]) (mwim . [(20180227 852) nil "Switch between the beginning/end of line or code" single]) (mw-thesaurus . [(20180628 2225) ((emacs (25))) "Merriam-Webster Thesaurus" single]) (mvn . [(20160211 743) nil "helpers for compiling with maven" single]) (mutant . [(20160124 553) ((emacs (24 4)) (dash (2 1 0))) "An interface for the Mutant testing tool" single]) (mustard-theme . [(20170808 619) ((emacs (24 0))) "an Emacs 24 theme based on Mustard (tmTheme)" single]) (mustang-theme . [(20170719 246) nil "port of vim's mustang theme" single]) (mustache-mode . [(20141024 732) nil "A major mode for editing Mustache files." single]) (mustache . [(20170923 533) ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) "a mustache templating library in emacs lisp" tar]) (multitran . [(20180320 956) ((emacs (24)) (cl-lib (0 5))) "Interface to multitran" single]) (multiple-cursors . [(20180615 518) ((cl-lib (0 5))) "Multiple cursors for Emacs." tar]) (multifiles . [(20130615 1433) nil "View and edit parts of multiple files in one buffer" single]) (multicolumn . [(20150202 1451) nil "Creating and managing multiple side-by-side windows." single]) (multi-web-mode . [(20130823 2054) nil "multiple major mode support for web editing" tar]) (multi-term . [(20160619 233) nil "Managing multiple terminal buffers in Emacs." single]) (multi-run . [(20180122 709) ((emacs (24)) (window-layout (1 4))) "Manage multiple terminals and run commands on them" single]) (multi-project . [(20171217 1211) ((emacs (25))) "Find files, compile, search, and switch between" single]) (multi-line . [(20170821 1926) ((emacs (24 3)) (s (1 9 0)) (cl-lib (0 5)) (dash (2 12 0)) (shut-up (0 3 2))) "multi-line statements" tar]) (multi-compile . [(20160306 1423) ((emacs (24)) (dash (2 12 1))) "Multi target interface to compile." single]) (multi . [(20131013 844) ((emacs (24))) "Clojure-style multi-methods for emacs lisp" single]) (muban . [(20180415 519) ((emacs (25))) "Lightweight template expansion tool" single]) (mu4e-query-fragments . [(20170923 622) ((emacs (24 4))) "mu4e query fragments extension" single]) (mu4e-maildirs-extension . [(20180606 112) ((dash (0 0 0))) "Show mu4e maildirs summary in mu4e-main-view" single]) (mu4e-jump-to-list . [(20180425 1132) ((emacs (24 4)) (cl-lib (0 5))) "mu4e jump-to-list extension" single]) (mu4e-conversation . [(20180718 223) ((emacs (25 1))) "Show a complete thread in a single buffer" single]) (mu4e-alert . [(20180304 2246) ((alert (1 2)) (s (1 10 0)) (ht (2 0)) (emacs (24 3))) "Desktop notification for mu4e" single]) (mu-cite . [(20160130 300) ((flim (1 14 9))) "A library to provide MIME features." tar]) (mtg-deck-mode . [(20180613 1310) ((emacs (25 1))) "Major mode to edit MTG decks" tar]) (msvc . [(20171225 738) ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (2 0 0))) "Microsoft Visual C/C++ mode" tar]) (mqtt-mode . [(20180605 1031) ((emacs (25)) (dash (2 12 0))) "client for interaction with MQTT servers" single]) (mqr . [(20180527 504) ((emacs (24 4))) "Multi-dimensional query and replace" single]) (mpv . [(20180602 314) ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (org (8 0))) "control mpv for easy note-taking" single]) (mpmc-queue . [(20180303 1229) ((emacs (26 0)) (queue (0 2 0))) "a multiple-producer-multiple-consumer queue" single]) (mpdel . [(20180606 512) ((emacs (25 1)) (libmpdel (0 7 0))) "Play and control your MPD music" tar]) (mpages . [(20150710 704) nil "An Emacs buffer for quickly writing your Morning Pages" single]) (mozc-temp . [(20160228 40) ((emacs (24)) (dash (2 10 0)) (mozc (0))) "Use mozc temporarily" single]) (mozc-popup . [(20150223 1634) ((popup (0 5 2)) (mozc (0))) "Mozc with popup" single]) (mozc-im . [(20160411 1722) ((mozc (0))) "Mozc with input-method-function interface." single]) (mozc . [(20180101 0) nil "minor mode to input Japanese with Mozc" single]) (moz-controller . [(20151208 1806) ((moz (0))) "Control Firefox from Emacs" single]) (moz . [(20150805 1006) nil "Lets current buffer interact with inferior mozilla." single]) (mowedline . [(20161121 1835) nil "elisp utilities for using mowedline" single]) (move-text . [(20170908 2030) nil "Move current line or region with M-up or M-down." single]) (move-dup . [(20180531 537) nil "Eclipse-like moving and duplicating lines or rectangles." single]) (mouse-slider-mode . [(20161021 1214) ((emacs (24 3)) (cl-lib (0 3))) "scale numbers dragged under the mouse" single]) (motion-mode . [(20140919 1856) ((flymake-easy (0 7)) (flymake-cursor (1 0 2))) "major mode for RubyMotion enviroment" tar]) (mote-mode . [(20160122 1629) ((ruby-mode (1 1))) "Mote minor mode" single]) (mosey . [(20180614 949) ((emacs (24 4))) "Mosey around your buffers" single]) (morlock . [(20180318 1323) nil "more font-lock keywords for elisp" single]) (morganey-mode . [(20170118 134) ((emacs (24 4))) "Major mode for editing Morganey files" single]) (moonscript . [(20170831 1526) ((cl-lib (0 5)) (emacs (24))) "Major mode for editing MoonScript code" tar]) (moom . [(20180618 1245) ((emacs (25 1))) "Commands to control frame position and size" tar]) (moody . [(20180403 549) ((emacs (25 3))) "Tabs and ribbons for the mode line" single]) (monroe . [(20180703 1046) nil "Yet another client for nREPL" single]) (monotropic-theme . [(20180218 357) ((emacs (24))) "Monotropic Theme" single]) (monokai-theme . [(20180402 221) nil "A fruity color theme for Emacs." single]) (monokai-alt-theme . [(20170630 1348) ((emacs (24))) "Theme with a dark background. Based on sublime monokai theme." single]) (monochrome-theme . [(20140326 350) nil "A dark Emacs 24 theme for your focused hacking sessions" tar]) (monky . [(20180716 720) nil "Control Hg from Emacs." tar]) (monitor . [(20161018 444) ((dash (2 13 0))) "Utilities for monitoring expressions." tar]) (mongo . [(20150315 519) nil "MongoDB driver for Emacs Lisp" tar]) (molokai-theme . [(20151016 845) nil "molokai theme with Emacs theme engine" single]) (molecule . [(20180527 43) ((emacs (25 1))) "Simple wrapper for molecule" single]) (moe-theme . [(20180616 1900) nil "A colorful eye-candy theme. Moe, moe, kyun!" tar]) (modtime-skip-mode . [(20140128 1401) nil "Minor mode for disabling modtime and supersession checks on files." single]) (modern-cpp-font-lock . [(20180110 1231) nil "Font-locking for \"Modern C++\"" single]) (mode-line-debug . [(20180318 1525) nil "show status of `debug-on-error' in the mode-line" single]) (mode-line-bell . [(20171231 1939) nil "Flash the mode line instead of ringing the bell" single]) (mode-icons . [(20170216 620) ((emacs (24)) (cl-lib (0 5))) "Show icons for modes" tar]) (modalka . [(20171231 2213) ((emacs (24 4))) "Easily introduce native modal editing of your own design" single]) (mocker . [(20150916 1854) ((eieio (1 3)) (el-x (0 2 4))) "mocking framework for emacs" single]) (mocha-snippets . [(20170103 2127) ((yasnippet (0 8 0))) "Yasnippets for the Mocha JS Testing Framework" tar]) (mocha . [(20180321 1622) ((js2-mode (20150909)) (f (0 18))) "Run Mocha or Jasmine tests" single]) (mobdebug-mode . [(20140109 1946) ((lua-mode (20130419)) (emacs (24))) "Major mode for MobDebug" single]) (mo-vi-ment-mode . [(20131028 2333) nil "Provide vi-like cursor movement that's easy on the fingers" single]) (mo-git-blame . [(20160129 959) nil "An interactive, iterative 'git blame' mode for Emacs" single]) (mmt . [(20171231 2219) ((emacs (24 1)) (cl-lib (0 3))) "Missing macro tools for Emacs Lisp" single]) (mmm-mako . [(20121019 2351) ((mmm-mode (0 4 8))) "MMM submode class for Mako Templates" single]) (mmm-jinja2 . [(20170313 720) ((mmm-mode (0 5 4))) "MMM submode class for Jinja2 Templates" single]) (mkdown . [(20140517 718) ((markdown-mode (2 0))) "Pretty Markdown previews based on mkdown.com" tar]) (mixed-pitch . [(20180410 917) ((emacs (24 3))) "Use a variable pitch, keeping fixed pitch where it's sensible" single]) (mips-mode . [(20180502 757) nil "Major-mode for MIPS assembly" single]) (mip-mode . [(20151126 2217) nil "virtual projects for emacs." single]) (minor-mode-hack . [(20170925 1734) nil "Change priority of minor-mode keymaps" single]) (minizinc-mode . [(20180201 650) ((emacs (24 1))) "Major mode for MiniZinc code" single]) (minitest . [(20160628 1120) ((dash (1 0 0))) "An Emacs mode for ruby minitest files" tar]) (minions . [(20180709 1012) ((emacs (25 3)) (dash (2 13 0))) "A minor-mode menu for the mode line" single]) (minimal-theme . [(20160608 322) nil "A light/dark minimalistic Emacs 24 theme." tar]) (minimal-session-saver . [(20140508 1341) nil "Very lean session saver" single]) (miniedit . [(20100419 1045) nil "Enhanced editing for minibuffer fields." single]) (minibuffer-cua . [(20130906 434) nil "Make CUA mode's S-up/S-down work in minibuffer" single]) (minibuffer-complete-cycle . [(20130813 945) nil "Cycle through the *Completions* buffer" single]) (minibuf-isearch . [(20151226 1143) nil "incremental search on minibuffer history" single]) (mini-header-line . [(20170621 521) ((emacs (24 4))) "a minimal header-line" single]) (mingus . [(20180712 2336) ((libmpdee (2 1))) "MPD Interface" tar]) (minesweeper . [(20150413 2222) nil "play minesweeper in Emacs" single]) (milkode . [(20140926 2229) nil "Command line search and direct jump with Milkode" single]) (migemo . [(20160924 741) ((cl-lib (0 5))) "Japanese incremental search through dynamic pattern expansion" single]) (midje-mode . [(20170808 2103) ((cider (0 1 4)) (clojure-mode (1 0))) "Minor mode for running Midje tests in emacs" tar]) (micgoline . [(20160414 2026) ((emacs (24 3)) (powerline (2 3))) "powerline mode, color schemes from microsoft and google's logo." single]) (mic-paren . [(20170731 1207) nil "advanced highlighting of matching parentheses" single]) (mhc . [(20180717 2009) ((calfw (20150703))) "Message Harmonized Calendaring system." tar]) (mgmtconfig-mode . [(20180222 1257) ((emacs (24 3))) "mgmt configuration management language" single]) (mexican-holidays . [(20160109 1342) nil "Mexico holidays for Emacs calendar." single]) (mew . [(20180709 1817) nil "Messaging in the Emacs World" tar]) (metaweblog . [(20171216 1840) ((xml-rpc (1 6 8))) "An emacs library to access metaweblog based weblogs" tar]) (metascript-mode . [(20150708 1757) ((emacs (24 3))) "Major mode for the Metascript programming language" single]) (metalheart-theme . [(20160709 2341) ((emacs (24))) "Low-contrast theme with a dark blue-green background." single]) (meta-presenter . [(20170425 1934) nil "A simple multi-file presentation tool for Emacs" single]) (messages-are-flowing . [(20170218 1720) nil "visible indication when composing \"flowed\" emails" single]) (meson-mode . [(20170901 1135) ((emacs (24 3))) "Major mode for the Meson build system files" single]) (merlin-eldoc . [(20180630 1026) ((emacs (24 4)) (merlin (3 0))) "eldoc for OCaml and Reason" single]) (merlin . [(20180214 242) nil "Mode for Merlin, an assistant for OCaml." tar]) (mentor . [(20170105 221) ((xml-rpc (1 6 9)) (seq (1 11)) (cl-lib (0 5))) "Frontend for the rTorrent bittorrent client" tar]) (memolist . [(20150804 1021) ((markdown-mode (22 0)) (ag (0 45))) "memolist.el is Emacs port of memolist.vim." single]) (memoize . [(20180614 1230) nil "Memoization functions" single]) (melpa-upstream-visit . [(20130720 333) ((s (1 6 0))) "A set of kludges to visit a melpa-hosted package's homepage" single]) (mellow-theme . [(20170808 617) ((emacs (24 0))) "an Emacs 24 theme based on Mellow (tmTheme)" single]) (melancholy-theme . [(20170220 1248) nil "A dark theme for dark minds" single]) (meghanada . [(20180717 1810) ((emacs (24 3)) (yasnippet (0 6 1)) (company (0 9 0)) (flycheck (0 23))) "A better java development mode" tar]) (mediawiki . [(20170812 2255) nil "mediawiki frontend" single]) (md4rd . [(20180625 2236) ((emacs (25 1)) (hierarchy (0 7 0)) (request (0 3 0)) (cl-lib (0 6 1)) (dash (2 12 0)) (s (1 12 0)) (tree-mode (1 0 0))) "Mode for reddit (browse it)." single]) (md-readme . [(20160811 946) nil "Markdown-formatted READMEs for your ELisp" tar]) (mc-extras . [(20180519 2139) ((multiple-cursors (1 2 1))) "Extra functions for multiple-cursors mode." tar]) (mbsync . [(20180530 33) nil "run mbsync to fetch mails" single]) (mbo70s-theme . [(20170808 615) ((emacs (24 0))) "70s style palette, with similarities to mbo theme" single]) (mbe . [(20151126 334) ((emacs (24)) (cl-lib (0 5))) "Macros by Example" single]) (mb-url . [(20161224 1806) ((cl-lib (0))) "Multiple Backends for Emacs URL package." tar]) (maxframe . [(20170120 905) nil "maximize the emacs frame based on display size" single]) (maven-test-mode . [(20141219 2157) ((s (1 9)) (emacs (24))) "Utilities for navigating test files and running maven test tasks." single]) (maude-mode . [(20160222 807) nil "Emacs mode for the programming language Maude" single]) (matlab-mode . [(20180125 1010) nil "Major mode for MATLAB(R) dot-m files" tar]) (math-symbols . [(20170818 759) ((helm (1 0))) "Math Symbol Input methods and conversion tools" tar]) (math-symbol-lists . [(20170221 553) nil "Lists of Unicode math symbols and latex commands" tar]) (material-theme . [(20171123 1040) ((emacs (24 1))) "A Theme based on the colors of the Google Material Design" tar]) (mastodon . [(20180305 1909) ((emacs (24 4))) "Client for Mastodon" tar]) (maruo-macro-mode . [(20160616 649) ((emacs (24 3))) "Major mode for editing Hidemaru/Maruo macro script" single]) (marshal . [(20180124 439) ((eieio (1 4)) (json (1 3)) (ht (2 1))) "eieio extension for automatic (un)marshalling" single]) (marmalade-client . [(20141231 1207) ((web (0 5 2)) (kv (0 0 19)) (gh (0 8 0))) "client for marmalade API from emacs" tar]) (markup-faces . [(20141110 17) nil "collection of faces for markup language modes" single]) (markup . [(20170420 429) ((cl-lib (0 5))) "Simple markup generation helpers." single]) (markdownfmt . [(20160609 541) ((emacs (24))) "Format markdown using markdownfmt" single]) (markdown-toc . [(20170711 1249) ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 1))) "A simple TOC generator for markdown file" tar]) (markdown-preview-mode . [(20171121 2323) ((emacs (24 3)) (websocket (1 6)) (markdown-mode (2 0)) (cl-lib (0 5)) (web-server (0 1 1)) (uuidgen (0 3))) "markdown realtime preview minor mode." tar]) (markdown-preview-eww . [(20160111 702) ((emacs (24 4))) "Realtime preview by eww" single]) (markdown-mode . [(20180707 555) ((emacs (24 4)) (cl-lib (0 5))) "Major mode for Markdown-formatted text" single]) (markdown-mode+ . [(20170320 1404) ((markdown-mode (20111229))) "extra functions for markdown-mode" tar]) (mark-tools . [(20130614 325) nil "Some simple tools to access the mark-ring in Emacs" single]) (mark-multiple . [(20121118 754) nil "Sorta lets you mark several regions at once." tar]) (marcopolo . [(20160421 304) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client to the Docker HUB/Registry API" tar]) (map-regexp . [(20130522 1403) ((cl-lib (0 2))) "map over matches of a regular expression" single]) (map-progress . [(20140310 1432) nil "mapping macros that report progress" single]) (mandoku-tls . [(20171117 1840) ((emacs (24 4)) (mandoku (20170301)) (github-clone (0 2)) (hydra (0 13 6)) (helm (1 7 0)) (org (9 0)) (helm-charinfo (20170601))) "A tool to access the TLS database" single]) (mandoku . [(20180403 406) ((org (8 0)) (magit (20151028)) (github-clone (20150705)) (git (20140128))) "A tool to access repositories of premodern Chinese texts" tar]) (mandm-theme . [(20170925 321) nil "An M&M color theme." single]) (manage-minor-mode . [(20140310 900) ((emacs (24 3))) "Manage your minor-modes easily" single]) (man-commands . [(20151221 1421) ((cl-lib (0 5))) "Add interactive commands for every manpages installed in your computer." single]) (malyon . [(20161208 1325) ((cl-lib (0 5))) "mode to execute Z-code files version 3, 5, 8" single]) (mallard-snippets . [(20131023 1151) ((yasnippet (0 8 0)) (mallard-mode (0 1 1))) "Yasnippets for Mallard" tar]) (mallard-mode . [(20131203 2025) nil "Major mode for editing Mallard files" tar]) (malinka . [(20171202 221) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) "A C/C++ project configuration package for Emacs" single]) (makey . [(20131231 630) ((cl-lib (0 2))) "interactive commandline mode" single]) (makefile-executor . [(20180410 30) ((emacs (24 3)) (dash (2 11 0)) (f (0 11 0)) (s (1 10 0))) "Commands for conveniently running makefile targets" single]) (make-it-so . [(20180128 1307) ((swiper (0 8 0)) (emacs (24))) "Transform files with Makefile recipes." tar]) (make-color . [(20140625 450) nil "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" single]) (major-mode-icons . [(20170228 2314) ((emacs (24 3)) (powerline (2 4)) (all-the-icons (2 3 0))) "display icon for major-mode on mode-line." tar]) (majapahit-theme . [(20160817 1148) nil "Color theme with a dark and light versions" tar]) (magnatune . [(20151030 1235) ((dash (2 9 0)) (s (1 9 0))) "browse magnatune's music catalog" tar]) (magma-mode . [(20180413 727) ((cl-lib (0 3)) (dash (2 6 0)) (f (0 17 1))) "Magma mode for Emacs" tar]) (magithub . [(20180625 2104) ((emacs (25)) (magit (2 12)) (s (1 12 0)) (ghub+ (0 3)) (git-commit (2 12)) (markdown-mode (2 3))) "Magit interfaces for GitHub" tar]) (magit-topgit . [(20160313 1254) ((emacs (24 4)) (magit (2 1 0))) "TopGit extension for Magit" single]) (magit-todos . [(20180716 2339) ((emacs (25 2)) (a (0 1 0)) (anaphora (1 0 0)) (async (1 9 2)) (dash (2 13 0)) (f (0 17 2)) (hl-todo (1 9 0)) (magit (2 13 0)) (pcre2el (1 8)) (s (1 12 0))) "Show source file TODOs in Magit" single]) (magit-tbdiff . [(20180527 652) ((emacs (24 4)) (magit (2 10 0))) "Magit extension for git-tbdiff" single]) (magit-svn . [(20170213 433) ((emacs (24 4)) (magit (2 1 0))) "Git-Svn extension for Magit" single]) (magit-stgit . [(20180522 542) ((emacs (24 4)) (magit (2 1 0))) "StGit extension for Magit" single]) (magit-popup . [(20180618 1602) ((emacs (24 4)) (async (1 9 2)) (dash (2 13 0))) "Define prefix-infix-suffix command combos" tar]) (magit-p4 . [(20170414 546) ((magit (2 1)) (magit-popup (2 1)) (p4 (12 0)) (cl-lib (0 5))) "git-p4 plug-in for Magit" single]) (magit-org-todos . [(20180709 1250) ((magit (2 0 0)) (emacs (24))) "Add local todo items to the magit status buffer" single]) (magit-lfs . [(20170312 1524) ((emacs (24 4)) (magit (2 10 3)) (dash (2 13 0))) "Magit plugin for Git LFS" single]) (magit-imerge . [(20180609 858) ((emacs (24 4)) (magit (2 10 0))) "Magit extension for git-imerge" single]) (magit-gitflow . [(20170929 124) ((magit (2 1 0)) (magit-popup (2 2 0))) "gitflow extension for magit" single]) (magit-gh-pulls . [(20180716 936) ((emacs (24 4)) (gh (0 9 1)) (magit (2 12 0)) (pcache (0 2 3)) (s (1 6 1))) "GitHub pull requests extension for Magit" single]) (magit-gerrit . [(20160226 130) ((magit (2 3 1))) "Magit plugin for Gerrit Code Review" single]) (magit-find-file . [(20150702 130) ((magit (2 1 0)) (dash (2 8 0))) "completing-read over all files in Git" single]) (magit-filenotify . [(20151116 1540) ((magit (1 3 0)) (emacs (24 4))) "Refresh status buffer when git tree changes" single]) (magit-annex . [(20180715 1812) ((cl-lib (0 3)) (magit (2 12 0))) "Control git-annex from Magit" single]) (magit . [(20180718 1139) ((emacs (25 1)) (async (20180527)) (dash (20180413)) (ghub (20180417)) (git-commit (20180602)) (magit-popup (20180509)) (with-editor (20180414))) "A Git porcelain inside Emacs." tar]) (magic-latex-buffer . [(20170530 1705) ((cl-lib (0 5)) (emacs (24 3))) "Magically enhance LaTeX-mode font-locking for semi-WYSIWYG editing" single]) (magic-filetype . [(20180219 752) ((emacs (24)) (s (1 9 0))) "Enhance filetype major mode" single]) (mag-menu . [(20150505 1150) ((splitter (0 1 0))) "Intuitive keyboard-centric menu system" single]) (madhat2r-theme . [(20170202 1630) ((emacs (24))) "dark color theme that is easy on the eyes" single]) (macrostep . [(20161120 1306) ((cl-lib (0 5))) "interactive macro expander" tar]) (macro-math . [(20130328 904) nil "in-buffer mathematical operations" single]) (maces-game . [(20170903 851) ((dash (2 12 0)) (cl-lib (0 5)) (emacs (24))) "another anagram game." tar]) (mac-pseudo-daemon . [(20170728 1240) ((cl-lib (0 1))) "Daemon mode that plays nice with Mac OS." single]) (m-buffer . [(20170407 1441) ((seq (2 14))) "List-Oriented, Functional Buffer Manipulation" tar]) (lyrics . [(20180123 2004) ((emacs (25 1)) (seq (2 15))) "Show lyrics" single]) (lxc-tramp . [(20180523 1324) ((emacs (24)) (cl-lib (0 6))) "TRAMP integration for LXC containers" single]) (lxc . [(20140410 1322) nil "lxc integration with Emacs" single]) (lv . [(20160912 756) nil "Other echo area" single]) (lusty-explorer . [(20180628 646) nil "Dynamic filesystem explorer and buffer switcher" single]) (lush-theme . [(20141107 806) ((emacs (24))) "A dark theme with strong colors" single]) (luarocks . [(20170430 1605) ((emacs (24)) (cl-lib (0 5))) "luarocks tools" single]) (lua-mode . [(20180323 321) nil "a major-mode for editing Lua scripts" tar]) (lsp-vue . [(20180628 15) ((emacs (25 1)) (lsp-mode (3 0))) "Vue support for lsp-mode" single]) (lsp-ui . [(20180618 1951) ((emacs (25 1)) (dash (2 13)) (dash-functional (1 2 0)) (flycheck (31)) (lsp-mode (4 0)) (markdown-mode (2 3))) "UI modules for lsp-mode" tar]) (lsp-typescript . [(20180614 1311) ((lsp-mode (3 0)) (typescript-mode (0 1)) (emacs (25 1))) "Javascript/Typescript support for lsp-mode" single]) (lsp-rust . [(20180305 508) ((emacs (25)) (lsp-mode (3 0)) (rust-mode (0 3 0)) (dash (1 0)) (markdown-mode (2 3))) "Rust support for lsp-mode" single]) (lsp-python . [(20180609 16) ((lsp-mode (3 0))) "Python support for lsp-mode" single]) (lsp-php . [(20180331 944) ((emacs (25 1)) (lsp-mode (3 4))) "PHP support for lsp-mode" single]) (lsp-ocaml . [(20180610 1154) ((emacs (25 1)) (lsp-mode (3 0))) "OCaml support for lsp-mode" single]) (lsp-mode . [(20180708 1914) ((emacs (25 1))) "Minor mode for interacting with Language Servers" tar]) (lsp-javascript-typescript . [(20180614 1311) ((lsp-mode (3 0)) (typescript-mode (0 1)) (emacs (25 1))) "Javascript/Typescript support for lsp-mode" single]) (lsp-javascript-flow . [(20180612 2208) ((lsp-mode (3 0)) (emacs (25 1))) "Javascript/Flow support for lsp-mode" single]) (lsp-javacomp . [(20180218 2334) ((emacs (25 1)) (lsp-mode (3 0)) (s (1 2 0))) "Provide Java IDE features powered by JavaComp." single]) (lsp-java . [(20180701 111) ((emacs (25 1)) (lsp-mode (3 0))) "Java support for lsp-mode" single]) (lsp-intellij . [(20180621 1131) ((emacs (25 1)) (lsp-mode (4 1))) "intellij lsp client" single]) (lsp-html . [(20180629 25) ((lsp-mode (4 2))) "HTML support for lsp-mode" single]) (lsp-haskell . [(20180131 459) ((lsp-mode (3 0)) (haskell-mode (1 0))) "Haskell support for lsp-mode" single]) (lsp-hack . [(20180703 1837) ((lsp-mode (4 2))) "lsp-mode client for hacklang" single]) (lsp-go . [(20180630 1101) ((lsp-mode (3 0))) "Go support for lsp-mode" single]) (lsp-css . [(20180627 1251) ((lsp-mode (3 0)) (emacs (25 1))) "CSS/LESS/SASS support for lsp-mode" single]) (lsp-clangd . [(20180630 1834) ((lsp-mode (3 0)) (emacs (24 3))) "clangd support for lsp-mode" single]) (love-minor-mode . [(20170726 2236) ((lua-mode (20130419))) "Minor mode for working on LÖVE projects" single]) (lorem-ipsum . [(20140911 1408) nil "Insert dummy pseudo Latin text." single]) (loop . [(20160813 707) nil "friendly imperative loop structures" single]) (look-mode . [(20151211 1026) nil "quick file viewer for image and text file browsing" single]) (look-dired . [(20160729 1623) ((look-mode (1 0))) "Extensions to look-mode for dired buffers" single]) (lolcode-mode . [(20111002 147) nil "Major mode for editing LOLCODE" single]) (logview . [(20180522 1054) ((emacs (24 4)) (datetime (0 3))) "Major mode for viewing log files" single]) (logstash-conf . [(20170524 1229) nil "basic mode for editing logstash configuration" single]) (logpad . [(20180607 1215) nil "Simulate Windows Notepad for logging." single]) (lognav-mode . [(20180708 322) ((emacs (24 3))) "Navigate Log Error Messages" single]) (logito . [(20120225 1255) ((eieio (1 3))) "logging library for Emacs" single]) (logalimacs . [(20131021 1129) ((popwin (0 6 2)) (popup (0 5 0)) (stem (20130120))) "Front-end to logaling-command for Ruby gems" single]) (log4j-mode . [(20160108 1118) nil "major mode for viewing log files" single]) (log4e . [(20170401 604) nil "provide logging framework for elisp" single]) (lodgeit . [(20150312 649) nil "Paste to a lodgeit powered pastebin" single]) (lockfile-mode . [(20170624 2207) nil "Major mode for .lock files" single]) (loccur . [(20161227 251) ((emacs (24 3))) "Perform an occur-like folding in current buffer" single]) (loc-changes . [(20160801 1008) nil "keep track of positions even after buffer changes" single]) (load-theme-buffer-local . [(20120702 1336) nil "Install emacs24 color themes by buffer." single]) (load-relative . [(20170526 310) nil "relative file load (within a multi-file Emacs package)" tar]) (load-env-vars . [(20180511 1510) ((emacs (24))) "Load environment variables from files" single]) (lms . [(20170804 922) ((emacs (25 1))) "Squeezebox / Logitech Media Server frontend" single]) (livid-mode . [(20131116 544) ((skewer-mode (1 5 3)) (s (1 8 0))) "Live browser eval of JavaScript every time a buffer changes" single]) (livescript-mode . [(20140612 2121) nil "Major mode for editing LiveScript files" single]) (livereload . [(20170628 2350) ((emacs (25)) (websocket (1 8))) "Livereload server" tar]) (lively . [(20171005 54) nil "interactively updating text" single]) (live-py-mode . [(20180330 1758) ((emacs (24 3))) "Live Coding in Python" tar]) (live-code-talks . [(20150115 1423) ((emacs (24)) (cl-lib (0 5)) (narrowed-page-navigation (0 1))) "Support for slides with live code in them" single]) (literate-starter-kit . [(20150730 1154) ((emacs (24 3))) "A literate starter kit to configure Emacs using Org-mode files." tar]) (literate-coffee-mode . [(20170211 715) ((coffee-mode (0 5 0))) "major-mode for Literate CoffeeScript" single]) (literal-string . [(20170301 730) ((markdown-mode (2 0)) (emacs (25))) "edit string literals in a dedicated buffer" single]) (litecoin-ticker . [(20160611 1711) ((json (1 2))) "litecoin price in modeline" single]) (litable . [(20160922 859) ((dash (2 6 0))) "dynamic evaluation replacement with emacs" single]) (lit-mode . [(20141123 936) nil "Major mode for lit" single]) (list-utils . [(20160414 702) nil "List-manipulation utility functions" single]) (list-unicode-display . [(20150219 101) ((cl-lib (0 5))) "Search for and list unicode characters by name" single]) (list-packages-ext . [(20151115 916) ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6))) "Extras for list-packages" single]) (list-environment . [(20151226 1856) nil "A tabulated process environment editor" single]) (lispyville . [(20180704 458) ((lispy (0)) (evil (1 2 12)) (cl-lib (0 5)) (emacs (24 4))) "A minor mode for integrating evil with lispy." single]) (lispyscript-mode . [(20170720 1217) nil "Major mode for LispyScript code." single]) (lispy . [(20180716 839) ((emacs (24 1)) (ace-window (0 9 0)) (iedit (0 9 9)) (swiper (0 7 0)) (hydra (0 13 4)) (zoutline (0 1 0))) "vi-like Paredit" tar]) (lispxmp . [(20170925 1723) nil "Automagic emacs lisp code annotation" single]) (lisp-extra-font-lock . [(20160930 1227) nil "Highlight bound variables and quoted exprs." single]) (liso-theme . [(20160410 1329) nil "Eclectic Dark Theme for GNU Emacs" single]) (liquid-types . [(20151201 2335) ((flycheck (0 13)) (dash (1 2)) (emacs (24 1)) (popup (0 5 2)) (pos-tip (0 5 0)) (flycheck-liquidhs (0 0 1)) (button-lock (1 0 2))) "show inferred liquid-types" single]) (linum-relative . [(20180124 247) nil "display relative line number in emacs." single]) (linum-off . [(20160217 1337) nil "Provides an interface for turning line-numbering off" single]) (linphone . [(20130524 409) nil "Emacs interface to Linphone" tar]) (link-hint . [(20180519 1430) ((avy (0 4 0)) (emacs (24 1)) (cl-lib (0 5))) "Use avy to open, copy, etc. visible links." single]) (link . [(20140717 2029) nil "Hypertext links in text buffers" single]) (lingr . [(20100807 1031) nil "Lingr Client for GNU Emacs" single]) (lines-at-once . [(20180421 1947) ((emacs (25))) "Insert and edit multiple lines at once" single]) (line-up-words . [(20180219 224) nil "Align words in an intelligent way" single]) (line-reminder . [(20180602 2252) ((emacs (24 4)) (cl-lib (0 6))) "Remind current line status by current buffer." single]) (light-soap-theme . [(20150607 745) ((emacs (24))) "Emacs 24 theme with a light background." single]) (lice . [(20170220 143) nil "License And Header Template" tar]) (libmpdel . [(20180606 453) ((emacs (25 1))) "Communication with an MPD server" single]) (libmpdee . [(20160117 1501) nil "Client end library for mpd, a music playing daemon" single]) (libgit . [(20180624 2359) ((emacs (25 1))) "Thin bindings to libgit2." tar]) (libelcouch . [(20180604 53) ((emacs (25 1)) (request (0 3 0))) "Communication with CouchDB" single]) (lfe-mode . [(20170121 454) nil "Lisp Flavoured Erlang mode" tar]) (lexbind-mode . [(20141027 729) nil "Puts the value of lexical-binding in the mode line" single]) (levenshtein . [(20090830 340) nil "Edit distance between two strings." single]) (leuven-theme . [(20170919 252) nil "Awesome Emacs color theme on white background" tar]) (letterbox-mode . [(20170701 1825) ((emacs (24 3))) "hide sensitive text on a buffer" single]) (letcheck . [(20160202 1148) nil "Check the erroneous assignments in let forms" single]) (less-css-mode . [(20160930 2153) nil "Major mode for editing LESS CSS files (lesscss.org)" single]) (lentic-server . [(20160717 1352) ((lentic (0 8)) (web-server (0 1 1))) "Web Server for Emacs Literate Source" single]) (lentic . [(20161202 1352) ((emacs (24 4)) (m-buffer (0 13)) (dash (2 5 0)) (f (0 17 2)) (s (1 9 0))) "One buffer as a view of another" tar]) (lenlen-theme . [(20170328 1945) ((color-theme-solarized (20150110))) "a solarized-based kawaii light theme" single]) (lemon-mode . [(20130216 504) nil "A major mode for editing lemon grammar files" single]) (legalese . [(20150820 1024) nil "Add legalese to your program files" single]) (leerzeichen . [(20170422 613) nil "Minor mode to display whitespace characters." single]) (ledger-mode . [(20180705 138) ((emacs (24 3))) "Helper code for use with the \"ledger\" command-line tool" tar]) (leanote . [(20161222 1739) ((emacs (24 4)) (cl-lib (0 5)) (request (0 2)) (let-alist (1 0 3)) (pcache (0 4 0)) (s (1 10 0)) (async (1 9))) "A minor mode writing markdown leanote" single]) (lean-mode . [(20180712 57) ((emacs (24 3)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 10 0)) (f (0 19 0)) (flycheck (30))) "A major mode for the Lean language" tar]) (lcr . [(20180414 1256) ((dash (2 12 0)) (emacs (25 1))) "lightweight coroutines" single]) (lcb-mode . [(20160815 2240) ((emacs (24))) "LiveCode Builder major mode" single]) (lavender-theme . [(20170808 613) ((emacs (24 0))) "an Emacs 24 theme based on Lavender (tmTheme)" single]) (launchctl . [(20150518 609) ((emacs (24 1))) "Interface to launchctl on Mac OS X." single]) (launch-mode . [(20170105 2112) ((emacs (24 4))) "Major mode for launch-formatted text" tar]) (launch . [(20130619 1504) nil "launch files with OS-standard associated applications." single]) (latexdiff . [(20180521 1532) ((emacs (24 4))) "Latexdiff integration in Emacs" single]) (latex-unicode-math-mode . [(20170123 1016) nil "Input method for Unicode math symbols" tar]) (latex-preview-pane . [(20180222 951) nil "Makes LaTeX editing less painful by providing a updatable preview pane" tar]) (latex-pretty-symbols . [(20151112 244) nil "Display many latex symbols as their unicode counterparts" single]) (latex-math-preview . [(20170522 1455) nil "preview LaTeX mathematical expressions." single]) (latex-extra . [(20170816 1847) ((auctex (11 86 1)) (cl-lib (0 5))) "Adds several useful functionalities to LaTeX-mode." single]) (lastpass . [(20171208 216) ((emacs (24 4)) (seq (1 9)) (cl-lib (0 5))) "LastPass command wrapper" single]) (language-detection . [(20161123 1013) ((emacs (24)) (cl-lib (0 5))) "Automatic language detection from code snippets" single]) (langtool . [(20180409 316) ((cl-lib (0 3))) "Grammar check utility using LanguageTool" single]) (langdoc . [(20150217 2245) ((cl-lib (0 2))) "Help to define help document mode for various languages" single]) (lang-refactor-perl . [(20131122 1327) nil "Simple refactorings, primarily for Perl" single]) (labburn-theme . [(20170502 207) nil "A lab color space zenburn theme." single]) (kwin . [(20150308 1112) nil "communicatewith the KWin window manager" single]) (kv . [(20140108 734) nil "key/value data structure functions" single]) (kurecolor . [(20180401 521) ((emacs (24 1)) (s (1 0))) "color editing goodies for Emacs" single]) (kubernetes-tramp . [(20171026 922) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for kubernetes containers" single]) (kubernetes-evil . [(20171122 1819) ((kubernetes (0 12 0)) (evil (1 2 12))) "Kubernetes keybindings for evil-mode." single]) (kubernetes . [(20180706 520) ((emacs (25 1)) (dash (2 12 0)) (magit (2 8 0))) "Magit-like porcelain for Kubernetes." tar]) (ksp-cfg-mode . [(20180608 2247) ((cl-lib (0 5))) "major mode for editing KSP CFG files" single]) (kroman . [(20150827 1640) nil "Korean hangul romanization" single]) (kpm-list . [(20170924 652) nil "An emacs buffer list that tries to intelligently group together buffers." single]) (kotlin-mode . [(20180219 853) ((emacs (24 3))) "Major mode for kotlin" single]) (kosmos-theme . [(20170502 1150) ((emacs (24))) "Black and lightgray theme with not so much syntax highlighting." single]) (korean-holidays . [(20170228 2045) nil "Korean holidays for calendar." single]) (kooten-theme . [(20161023 205) ((emacs (24 1))) "Dark color theme" single]) (kolon-mode . [(20140122 334) nil "Syntax highlighting for Text::Xslate's Kolon syntax" single]) (kodi-remote . [(20180609 1654) ((request (0 2 0)) (let-alist (1 0 4)) (json (1 4)) (elnode (20140203 1506))) "Remote Control for Kodi" single]) (know-your-http-well . [(20160208 1504) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar]) (klere-theme . [(20180415 1123) ((emacs (24))) "A dark theme with lambent color highlights and incremental grays" single]) (kixtart-mode . [(20150611 904) ((emacs (24))) "major mode for Kixtart scripting files" single]) (kiwix . [(20170927 120) ((emacs (24 4)) (cl-lib (0 5))) "Kiwix interface and support." single]) (kivy-mode . [(20180702 1329) nil "Emacs major mode for editing Kivy files" single]) (kite-mini . [(20160508 406) ((dash (2 11 0)) (websocket (1 5))) "Remotely evaluate JavaScript in the WebKit debugger" tar]) (kite . [(20130201 1138) ((json (1 2)) (websocket (0 93 1))) "WebKit inspector front-end" tar]) (killer . [(20120808 422) nil "kill and delete text" single]) (kill-ring-search . [(20140422 855) nil "incremental search for the kill ring" single]) (kill-or-bury-alive . [(20171231 2218) ((emacs (24 4)) (cl-lib (0 5))) "Precise control over buffer killing in Emacs" single]) (kibit-helper . [(20150508 833) ((s (0 8)) (emacs (24))) "Conveniently use the Kibit Leiningen plugin from Emacs" single]) (keyword-search . [(20180424 402) nil "browser keyword search from Emacs" tar]) (keyswap . [(20160813 257) ((emacs (24 3))) "swap bindings between key pairs" single]) (keyset . [(20150219 2130) ((dash (2 8 0)) (cl-lib (0 5))) "A small library for structuring key bindings." single]) (keymap-utils . [(20180318 1537) ((cl-lib (0 3))) "keymap utilities" single]) (keyfreq . [(20160516 716) ((cl-lib (0 5))) "track command frequencies" single]) (keydef . [(20090428 1231) nil "a simpler way to define keys, with kbd syntax" single]) (keychain-environment . [(20180318 1523) nil "load keychain environment variables" single]) (keycast . [(20180318 1321) ((emacs (25 3))) "Show current command and its key in the mode line" single]) (key-seq . [(20150907 56) ((key-chord (0 6))) "map pairs of sequentially pressed keys to commands" single]) (key-leap . [(20160831 747) ((emacs (24 3))) "Leap between lines by typing keywords" single]) (key-intercept . [(20140210 2349) nil "Intercept prefix keys" single]) (key-combo . [(20150324 739) nil "map key sequence to commands" single]) (key-chord . [(20160227 438) nil "map pairs of simultaneously pressed keys to commands" single]) (kerl . [(20150424 1305) nil "Emacs integration for kerl" single]) (kdeconnect . [(20180126 1540) nil "An interface for KDE Connect" single]) (karma . [(20160220 445) ((pkg-info (0 4)) (emacs (24))) "Karma Test Runner Emacs Integration" single]) (kaomoji . [(20171226 2040) ((emacs (24 3)) (helm-core (1 9 1))) "Input kaomoji superb easily" tar]) (kaolin-themes . [(20180718 727) ((emacs (25 1)) (autothemer (0 2 2)) (cl-lib (0 6))) "A set of eye pleasing themes" tar]) (kanji-mode . [(20160826 439) nil "View stroke order for kanji characters at cursor" tar]) (kanban . [(20170418 110) nil "Parse org-todo headlines to use org-tables as Kanban tables" single]) (kaleidoscope-evil-state-flash . [(20170728 320) ((evil (1 2 12)) (kaleidoscope (0 1 0)) (s (1 11 0))) "Flash keyboard LEDs when changing Evil state" single]) (kaleidoscope . [(20170808 117) ((s (1 11 0))) "Controlling Kaleidoscope-powered devices." single]) (kakapo-mode . [(20171003 2151) ((cl-lib (0 5))) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." single]) (kaesar-mode . [(20160128 208) ((kaesar (0 1 4)) (cl-lib (0 3))) "Encrypt/Decrypt buffer by AES with password." single]) (kaesar-file . [(20160128 208) ((kaesar (0 1 1))) "Encrypt/Decrypt file by AES with password." single]) (kaesar . [(20160128 208) ((cl-lib (0 3))) "Another AES algorithm encrypt/decrypt string with password." single]) (jvm-mode . [(20150422 8) ((dash (2 6 0)) (emacs (24))) "Monitor and manage your JVMs" single]) (jumplist . [(20151119 1945) ((cl-lib (0 5))) "Jump like vim jumplist or ex jumplist" single]) (jump-tree . [(20171014 851) nil "Treat position history as a tree" tar]) (jump-to-line . [(20130122 853) nil "Jump to line number at point." single]) (jump-char . [(20180601 648) nil "navigation by char" single]) (jump . [(20161126 1728) ((findr (0 7)) (inflections (2 4)) (cl-lib (0 5))) "build functions which contextually jump between files" single]) (jumblr . [(20170727 1343) ((s (1 8 0)) (dash (2 2 0))) "an anagram game for emacs" tar]) (julia-shell . [(20161125 1110) ((julia-mode (0 3))) "Major mode for an inferior Julia shell" tar]) (julia-repl . [(20171116 46) ((emacs (25))) "A minor mode for a Julia REPL" single]) (julia-mode . [(20171116 642) nil "Major mode for editing Julia source code" single]) (jtags . [(20160211 1229) nil "enhanced tags functionality for Java development" tar]) (jsx-mode . [(20130908 1024) nil "major mode for JSX" single]) (jst . [(20150604 438) ((s (1 9)) (f (0 17)) (dash (2 10)) (pcache (0 3)) (emacs (24 4))) "JS test mode" single]) (jss . [(20130508 723) ((emacs (24 1)) (websocket (0)) (js2-mode (0))) "An emacs interface to webkit and mozilla debuggers" tar]) (jsonnet-mode . [(20180310 2256) ((emacs (24))) "Major mode for editing jsonnet files" single]) (json-snatcher . [(20150511 2047) ((emacs (24))) "Grabs the path to JSON values in a JSON file" single]) (json-rpc . [(20180104 728) ((emacs (24 1)) (cl-lib (0 5))) "JSON-RPC library" single]) (json-reformat . [(20160212 53) nil "Reformatting tool for JSON" single]) (json-navigator . [(20171220 19) ((emacs (24 3)) (hierarchy (0 6 0))) "View and navigate JSON structures" single]) (json-mode . [(20180718 109) ((json-reformat (0 0 5)) (json-snatcher (1 0 0))) "Major mode for editing JSON files." single]) (jsfmt . [(20150727 1525) nil "Interface to jsfmt command for javascript files" single]) (jscs . [(20151015 1049) ((emacs (24 1)) (cl-lib (0 5))) "Consistent JavaScript editing using JSCS" single]) (js3-mode . [(20160515 850) nil "An improved JavaScript editing mode" tar]) (js2-refactor . [(20180502 342) ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) "A JavaScript refactoring library for emacs." tar]) (js2-mode . [(20180627 744) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar]) (js2-highlight-vars . [(20170418 1129) ((emacs (24 4)) (js2-mode (20150908))) "highlight occurrences of the variable under cursor" single]) (js2-closure . [(20170816 1218) ((js2-mode (20150909))) "Google Closure dependency manager" single]) (js-import . [(20170115 853) ((emacs (24 4)) (f (0 19 0)) (projectile (0 14 0)) (dash (2 13 0))) "Import Javascript files from your current project or dependencies" single]) (js-format . [(20170118 1702) ((emacs (24 1)) (js2-mode (20101228))) "Format or transform code style using NodeJS server with different javascript formatter" tar]) (js-doc . [(20160714 2134) nil "Insert JsDoc style comment easily" single]) (js-comint . [(20171129 2056) ((emacs (24 3))) "JavaScript interpreter in window." single]) (js-codemod . [(20171104 454) ((emacs (24 4))) "Run js-codemod on current line or selected region" tar]) (js-auto-format-mode . [(20180123 830) ((emacs (24))) "Minor mode for auto-formatting JavaScript code" single]) (js-auto-beautify . [(20161030 2209) ((web-beautify (0 3 1)) (web-mode (14 0 27))) "auto format you js/jsx file" single]) (jquery-doc . [(20150812 58) nil "jQuery api documentation interface for emacs" tar]) (jq-mode . [(20180407 1048) ((emacs (25 1))) "Edit jq scripts." tar]) (jpop . [(20170410 550) ((emacs (24)) (dash (2 11 0)) (cl-lib (0 5))) "Lightweight project caching and navigation framework" tar]) (jonprl-mode . [(20160818 1759) ((emacs (24 3)) (cl-lib (0 5)) (yasnippet (0 8 0))) "A major mode for editing JonPRL files" tar]) (jknav . [(20121006 1325) nil "Automatically enable j/k keys for line-based navigation" single]) (jist . [(20161229 921) ((emacs (24 4)) (dash (2 12 0)) (seq (1 11)) (let-alist (1 0 4)) (magit (2 1 0)) (request (0 2 0))) "Gist integration" single]) (jira-markup-mode . [(20150601 1409) nil "Emacs Major mode for JIRA-markup-formatted text files" single]) (jinja2-mode . [(20141128 207) nil "A major mode for jinja2" single]) (jg-quicknav . [(20170808 1830) ((s (1 9 0)) (cl-lib (0 5))) "Quickly navigate the file system to find a file." single]) (jetbrains . [(20180228 2102) ((emacs (24 3)) (cl-lib (0 5)) (f (0 17))) "JetBrains IDE bridge" single]) (jenkins-watch . [(20121004 1626) nil "Watch continuous integration build status" single]) (jenkins . [(20170721 236) ((dash (2 12)) (emacs (24 3)) (json (1 4))) "Minimalistic Jenkins client for Emacs" single]) (jemdoc-mode . [(20170704 1327) ((emacs (24 3))) "Major mode for editing jemdoc files" single]) (jekyll-modes . [(20141117 514) ((polymode (0 2))) "Major modes (markdown and HTML) for authoring Jekyll content" single]) (jedi-direx . [(20140310 236) ((jedi (0 1 2)) (direx (0 1 -3))) "Tree style source code viewer for Python buffer" single]) (jedi-core . [(20170121 610) ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) "Common code of jedi.el and company-jedi.el" tar]) (jedi . [(20160425 2156) ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) "a Python auto-completion for Emacs" single]) (jdee . [(20180711 1336) ((emacs (24 3)) (flycheck (30)) (memoize (1 0 1)) (dash (2 13 0)) (s (1 12 0))) "Java Development Environment for Emacs" tar]) (jdecomp . [(20170224 1400) ((emacs (24 5))) "Interface to Java decompilers" single]) (jbeans-theme . [(20180309 825) ((emacs (24))) "Jbeans theme for GNU Emacs 24 (deftheme)" single]) (jazz-theme . [(20170411 711) nil "A warm color theme for Emacs 24+." single]) (jaword . [(20170425 2327) ((tinysegmenter (0 1))) "Minor-mode for handling Japanese words better" single]) (javap-mode . [(20120223 1408) nil "Javap major mode" single]) (javadoc-lookup . [(20160213 1631) ((cl-lib (0 3))) "Javadoc Emacs integration with Maven" tar]) (java-snippets . [(20160626 1952) ((yasnippet (0 8 0))) "Yasnippets for Java" tar]) (java-imports . [(20170913 710) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Java imports" single]) (jastadd-ast-mode . [(20161219 126) ((emacs (24))) "Major mode for editing JastAdd AST files" single]) (jasminejs-mode . [(20150526 1705) nil "A minor mode for manipulating jasmine test files" tar]) (jar-manifest-mode . [(20160430 1726) nil "Major mode to edit JAR manifest files" single]) (jape-mode . [(20140903 806) nil "An Emacs editing mode mode for GATE's JAPE files" single]) (japanlaw . [(20160129 20) ((cl-lib (0 5))) "Japan law from law.e-gov.go.jp" single]) (japanese-holidays . [(20160927 2318) ((cl-lib (0 3))) "calendar functions for the Japanese calendar" single]) (jammer . [(20160310 59) nil "Punish yourself for using Emacs inefficiently" single]) (jade-mode . [(20160525 741) nil "Major mode for editing .jade files" single]) (jack-connect . [(20141207 407) nil "Manage jack connections within Emacs" single]) (jabber-otr . [(20150918 444) ((emacs (24)) (jabber (0 8 92))) "Off-The-Record messaging for jabber.el" tar]) (jabber . [(20170423 513) ((fsm (0 2))) "A Jabber client for Emacs." tar]) (j-mode . [(20171224 1056) nil "Major mode for editing J programs" tar]) (iy-go-to-char . [(20141029 846) nil "Go to next CHAR which is similar to \"f\" and \"t\" in vim" single]) (ix . [(20131027 929) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single]) (ivy-youtube . [(20171112 732) ((request (0 2 0)) (ivy (0 8 0)) (cl-lib (0 5))) "Query YouTube and play videos in your browser" single]) (ivy-yasnippet . [(20180620 2336) ((emacs (24)) (ivy (0 10 0)) (yasnippet (0 12 2)) (dash (2 14 1))) "Preview yasnippets with ivy" single]) (ivy-xref . [(20180701 2117) ((emacs (25 1)) (ivy (0 10 0))) "Ivy interface for xref results" single]) (ivy-xcdoc . [(20160917 355) ((ivy (0 8 0)) (emacs (24 4))) "Search Xcode documents with ivy interface." single]) (ivy-todo . [(20171208 809) ((ivy (0 8 0)) (emacs (24 3))) "Manage org-mode TODOs with ivy" single]) (ivy-rtags . [(20170522 2154) ((ivy (0 7 0)) (rtags (2 10))) "RTags completion back-end for ivy" single]) (ivy-rich . [(20180704 1845) ((emacs (24 4)) (ivy (0 8 0))) "More friendly display transformer for ivy." single]) (ivy-purpose . [(20160724 303) ((emacs (24)) (ivy (0 8)) (window-purpose (1 5))) "Ivy Interface for Purpose" single]) (ivy-prescient . [(20180716 907) ((emacs (25 1)) (prescient (2 0)) (ivy (0 10 0))) "prescient.el + Ivy" single]) (ivy-posframe . [(20180707 2016) ((emacs (26 0)) (posframe (0 1 0)) (ivy (0 10 0))) "Using posframe to show Ivy" single]) (ivy-phpunit . [(20180219 115) ((ivy (0 10 0)) (phpunit (0 7 0)) (emacs (25))) "Ivy integration for phpunit.el" single]) (ivy-pass . [(20170812 1255) ((emacs (24)) (ivy (0 8 0)) (password-store (1 6 5))) "ivy interface for pass" single]) (ivy-pages . [(20160728 1220) ((emacs (24 1)) (ivy (0 8 0))) "Complete current buffer's pages with Ivy" single]) (ivy-mpdel . [(20180502 1148) ((emacs (25 1)) (ivy (0 10 0)) (libmpdel (0 5 0)) (mpdel (0 4 0))) "Ivy interface to navigate MPD" single]) (ivy-lobsters . [(20171202 1241) ((ivy (0 8 0)) (cl-lib (0 5))) "Browse lobste.rs stories with ivy." single]) (ivy-hydra . [(20180614 1500) ((emacs (24 1)) (ivy (0 9 0)) (hydra (0 13 4))) "Additional key bindings for Ivy" single]) (ivy-historian . [(20170715 2120) ((emacs (24 4)) (historian (20170111)) (ivy (0 8 0)) (flx (0 6 1))) "Persistently store selected minibuffer candidates" single]) (ivy-gitlab . [(20180312 947) ((s (1 9 0)) (dash (2 9 0)) (ivy (0 8 0)) (gitlab (0 8))) "Ivy interface to Gitlab" single]) (ivy-feedwrangler . [(20180618 822) nil "No description available." single]) (ivy-erlang-complete . [(20180715 2144) ((async (1 9)) (counsel (0 8 0)) (ivy (0 8 0)) (erlang (19 2)) (emacs (24 4))) "Erlang context sensitive completion at point using ivy. It also support xref and eldoc." tar]) (ivy-dired-history . [(20170625 2256) ((ivy (0 9 0)) (counsel (0 9 0)) (cl-lib (0 5))) "use ivy to open recent directories" single]) (ivy-bibtex . [(20180612 619) ((swiper (0 7 0)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A bibliography manager based on Ivy" tar]) (ivy . [(20180717 843) ((emacs (24 1))) "Incremental Vertical completYon" tar]) (ivs-edit . [(20170818 741) ((emacs (24 3)) (dash (2 6 0)) (cl-lib (1 0))) "IVS (Ideographic Variation Sequence) editing tool" tar]) (ivariants . [(20170822 1924) ((emacs (24 3)) (ivs-edit (1 0))) "Ideographic variants editor and browser" tar]) (iterator . [(20170207 38) ((emacs (24)) (cl-lib (0 5))) "A library to create and use elisp iterators objects." single]) (iter2 . [(20180510 633) ((emacs (25 1))) "Reimplementation of Elisp generators" single]) (itasca . [(20170601 922) ((emacs (24 3))) "Major modes for Itasca software data files." tar]) (itail . [(20171112 4) nil "An interactive tail mode" single]) (iss-mode . [(20141001 1213) nil "Mode for InnoSetup install scripts" single]) (isortify . [(20180612 622) ((emacs (25)) (pythonic (0 1 0))) "(automatically) format python buffers using isort." single]) (isgd . [(20150414 236) nil "Shorten URLs using the isgd.com shortener service" single]) (isend-mode . [(20171118 745) nil "Interactively send parts of an Emacs buffer to an interpreter" single]) (isearch-symbol-at-point . [(20130728 1521) nil "Use isearch to search for the symbol at point" single]) (isearch-dabbrev . [(20141223 2222) ((cl-lib (0 5))) "Use dabbrev in isearch" single]) (irony-eldoc . [(20170502 1208) ((emacs (24)) (cl-lib (0 5)) (irony (0 1))) "irony-mode support for eldoc-mode" single]) (irony . [(20180703 1040) ((cl-lib (0 5)) (json (1 2))) "C/C++ minor mode powered by libclang" tar]) (iregister . [(20150515 1407) nil "Interactive register commands for Emacs." tar]) (ir-black-theme . [(20130302 2355) nil "Port of ir-black theme" single]) (iqa . [(20170722 834) ((emacs (24 3))) "Init file(and directory) Quick Access." single]) (ipython-shell-send . [(20171212 318) ((emacs (24))) "Send code (including magics) to ipython shell" single]) (ipretty . [(20180605 2222) nil "Interactive Emacs Lisp pretty-printing" single]) (iplayer . [(20161120 1320) nil "Browse and download BBC TV/radio shows" single]) (ipcalc . [(20170926 105) ((cl-lib (0 5))) "IP subnet calculator" single]) (iodine-theme . [(20151031 939) ((emacs (24))) "A light emacs color theme" single]) (ioccur . [(20130821 2248) nil "Incremental occur" single]) (io-mode-inf . [(20140128 1134) nil "Interaction with an Io interpreter." single]) (io-mode . [(20161004 56) nil "Major mode to edit Io language files in Emacs" single]) (inverse-acme-theme . [(20170822 1954) ((autothemer (0 2)) (cl-lib (0 5))) "A theme that looks like an inverse of Acme's color scheme." single]) (interval-tree . [(20130325 707) ((dash (1 1 0))) "Interval tree data structure for 1D range queries" single]) (interval-list . [(20150327 1018) ((dash (2 4 0)) (cl-lib (0 5)) (emacs (24 4))) "Interval list data structure for 1D selections" single]) (intero . [(20180703 18) ((flycheck (0 25)) (company (0 8)) (emacs (24 4)) (haskell-mode (13 0))) "Complete development mode for Haskell" single]) (interleave . [(20171003 2324) nil "Interleaving text books since 2015" single]) (interaction-log . [(20160305 501) ((cl-lib (0))) "exhaustive log of interactions with Emacs" single]) (intellij-theme . [(20171017 715) nil "Inspired by IntelliJ's default theme" single]) (intel-hex-mode . [(20180422 1731) nil "Mode for Intel Hex files." single]) (instapaper . [(20130104 621) nil "add URLs to instapaper from emacs" single]) (insfactor . [(20141116 1602) nil "Client for a Clojure project with insfactor in it" single]) (insert-shebang . [(20180403 514) nil "Insert shebang line automatically." single]) (inlineR . [(20120520 732) nil "insert Tag for inline image of R graphics" single]) (inline-docs . [(20170522 2150) ((emacs (24 3))) "Show inline contextual docs." single]) (inline-crypt . [(20170824 200) nil "Simple inline encryption via openssl" tar]) (inkpot-theme . [(20171217 144) nil "port of vim's inkpot theme" single]) (ink-mode . [(20160814 416) ((emacs (24 3))) "Major mode for writing interactive fiction in Ink" single]) (initsplit . [(20160919 1118) nil "code to split customizations into different files" single]) (init-open-recentf . [(20161206 645) ((emacs (24 4))) "Open recentf immediately after Emacs is started" single]) (init-loader . [(20160528 615) nil "Loader for configuration files" single]) (ini-mode . [(20170424 209) nil "Major mode for Windows-style ini files." single]) (inherit-local . [(20170409 949) ((emacs (24 3))) "Inherited buffer-local variables" single]) (info-colors . [(20180205 350) ((emacs (24)) (cl-lib (0 5))) "Extra colors for Info-mode" single]) (info-buffer . [(20170112 622) nil "Display info topics in separate buffers" single]) (info-beamer . [(20180604 1422) ((emacs (24 4))) "Utilities for working with info-beamer" single]) (inflections . [(20170913 216) ((cl-lib (0 5)) (emacs (24))) "convert english words between singular and plural" single]) (inferior-spim . [(20160826 646) nil "inferior mode for spim." single]) (inf-ruby . [(20180521 648) nil "Run a Ruby process in a buffer" single]) (inf-mongo . [(20180408 638) nil "Run a MongoDB shell process in a buffer" single]) (inf-crystal . [(20180118 1811) ((emacs (24 3)) (crystal-mode (0 1 0))) "Run a Inferior-Crystal process in a buffer" single]) (inf-clojure . [(20180402 1403) ((emacs (24 4)) (clojure-mode (5 6))) "Run an external Clojure process in an Emacs buffer" single]) (indy . [(20150610 1006) nil "A minor mode and EDSL to manage your mode's indentation rules." single]) (indium . [(20180521 1355) ((emacs (25)) (seq (2 16)) (js2-mode (20140114)) (company (0 9 0)) (websocket (1 6))) "JavaScript Awesome Development Environment" tar]) (indicators . [(20161211 326) ((dash (2 13 0)) (cl-lib (0 5 0))) "Display the buffer relative location of line in the fringe." single]) (indent-tools . [(20180124 408) ((s (0)) (hydra (0)) (yafolding (0))) "Indent, navigate (and more) by blocks of indentation: yaml, python etc." tar]) (indent-info . [(20180423 1212) nil "show indentation information in status bar" single]) (indent-guide . [(20170221 327) nil "show vertical lines to guide indentation" single]) (importmagic . [(20180519 2003) ((f (0 11 0)) (epc (0 1 0)) (emacs (24 3))) "Fix Python imports using importmagic." tar]) (import-popwin . [(20170218 607) ((emacs (24 3)) (popwin (0 6))) "popwin buffer near by import statements with popwin" single]) (import-js . [(20180709 1133) ((grizzl (0 1 0)) (emacs (24))) "Import Javascript dependencies" single]) (impatient-mode . [(20180528 916) ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) "Serve buffers live over HTTP" tar]) (immutant-server . [(20140311 1508) nil "Run your Immutant server in Emacs" single]) (immortal-scratch . [(20160517 1418) nil "respawn the scratch buffer when it's killed" single]) (imgbb . [(20180609 949) ((emacs (24)) (request (0 3 0))) "Simple image upload client for imgbb.com" single]) (imenus . [(20180505 1017) ((cl-lib (0 5))) "Imenu for multiple buffers and without subgroups" single]) (imenu-list . [(20180601 702) ((cl-lib (0 5))) "Show imenu entries in a separate buffer" single]) (imenu-anywhere . [(20170805 1155) ((cl-lib (0 5))) "ido/ivy/helm imenu across same mode/project/etc buffers" single]) (imapfilter . [(20180318 1327) nil "run the imapfilter executable" single]) (imake . [(20180318 1559) ((emacs (24 3))) "Simple, opinionated make target runner" single]) (imakado . [(20141024 223) nil "imakado's usefull macros and functions" single]) (image-dired+ . [(20150429 2244) ((cl-lib (0 3))) "Image-dired extensions" single]) (image-archive . [(20150620 1832) ((emacs (24)) (cl-lib (0 5))) "Image thumbnails in archive file with non-blocking" single]) (image+ . [(20150707 916) ((cl-lib (0 3))) "Image manipulate extensions for Emacs" single]) (igv . [(20141210 427) nil "Control Integrative Genomic Viewer within Emacs" single]) (ignoramus . [(20160414 709) nil "Ignore backups, build files, et al." single]) (iflipb . [(20171113 1244) nil "interactively flip between recently visited buffers" single]) (ietf-docs . [(20150928 257) nil "Fetch, Cache and Load IETF documents" single]) (iedit . [(20180207 219) nil "Edit multiple regions in the same way simultaneously." tar]) (ids-edit . [(20170818 802) ((emacs (24 3))) "IDS (Ideographic Description Sequence) editing tool" tar]) (idris-mode . [(20180416 2245) ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5))) "Major mode for editing Idris code" tar]) (idomenu . [(20141123 1320) nil "imenu tag selection a la ido" single]) (ido-yes-or-no . [(20161108 1551) ((ido-completing-read+ (0))) "Use Ido to answer yes-or-no questions" single]) (ido-vertical-mode . [(20180618 1401) nil "Makes ido-mode display vertically." single]) (ido-springboard . [(20170105 2355) nil "Temporarily change default-directory for one command" single]) (ido-sort-mtime . [(20171121 59) nil "Sort Ido's file list by modification time" single]) (ido-skk . [(20151111 150) ((emacs (24 4)) (ddskk (20150912 1820))) "ido interface for skk henkan" single]) (ido-select-window . [(20131220 1247) ((emacs (24 1))) "Select a window using ido and buffer names" single]) (ido-occur . [(20160820 740) ((dash (2 13 0))) "Yet another `occur' with `ido'." single]) (ido-occasional . [(20150214 448) ((emacs (24 1))) "Use ido where you choose." single]) (ido-migemo . [(20150921 1544) ((migemo (1 9 1))) "Migemo plug-in for Ido" single]) (ido-load-library . [(20140611 900) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Load-library alternative using ido-completing-read" single]) (ido-hacks . [(20150331 1209) nil "Put more IDO in your IDO" single]) (ido-grid-mode . [(20160122 339) ((emacs (24 4))) "Display ido-prospects in the minibuffer in a grid." single]) (ido-gnus . [(20140216 846) ((gnus (5 13))) "Access gnus groups or servers using ido" single]) (ido-flex-with-migemo . [(20180323 456) ((flx-ido (0 6 1)) (migemo (1 9 1)) (emacs (24 4))) "use ido with flex and migemo" single]) (ido-exit-target . [(20170717 1151) ((emacs (24 4))) "Commands and keys for selecting other window and frame targets within ido" single]) (ido-describe-bindings . [(20161023 402) ((dash (2 13 0))) "Yet another `describe-bindings' with `ido'." single]) (ido-completing-read+ . [(20180627 1944) ((emacs (24 4)) (cl-lib (0 5)) (s (0 1)) (memoize (1 1))) "A completing-read-function using ido" single]) (ido-complete-space-or-hyphen . [(20130228 208) nil "Complete SPACE or HYPHEN when type SPACE in ido" single]) (ido-clever-match . [(20151011 1026) ((emacs (24 4)) (cl-lib (0 5))) "Alternative matcher for ido." single]) (ido-at-point . [(20151021 57) ((emacs (24))) "ido-style completion-at-point" single]) (idle-require . [(20090715 1503) nil "load elisp libraries while Emacs is idle" single]) (idle-highlight-mode . [(20120920 948) nil "highlight the word the point is on" single]) (identica-mode . [(20130204 1453) nil "Major mode API client for status.net open microblogging" tar]) (idea-darkula-theme . [(20160416 1603) ((emacs (24 1))) "Color theme based on IntelliJ IDEA Darkula color theme" single]) (id-manager . [(20170320 546) nil "id-password management" single]) (ibuffer-vc . [(20171106 2341) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single]) (ibuffer-tramp . [(20151118 939) nil "Group ibuffer's list by TRAMP connection" single]) (ibuffer-sidebar . [(20180218 1731) ((emacs (25 1))) "Sidebar for `ibuffer'" single]) (ibuffer-rcirc . [(20150215 1318) ((cl-lib (0 2))) "Ibuffer integration for rcirc" single]) (ibuffer-projectile . [(20180324 2025) ((projectile (0 11 0))) "Group ibuffer's list by projectile root" single]) (ibuffer-git . [(20110508 31) nil "show git status in ibuffer column" single]) (iasm-mode . [(20171023 722) nil "interactive assembly major mode." single]) (ialign . [(20180705 453) ((emacs (24 4))) "visual align-regexp" single]) (i3wm . [(20170822 738) nil "i3wm integration library" single]) (i2b2-mode . [(20140709 1804) nil "Highlights corresponding PHI data in the text portion of an i2b2 XML Document." single]) (hydra . [(20180703 802) ((cl-lib (0 5))) "Make bindings that stick around." tar]) (hyde . [(20160507 2008) nil "Major mode to help create and manage Jekyll blogs" tar]) (hydandata-light-theme . [(20160815 2118) nil "A light color theme that is easy on your eyes" single]) (hyai . [(20170301 647) ((cl-lib (0 5)) (emacs (24))) "Haskell Yet Another Indentation" single]) (hy-mode . [(20180702 1240) ((dash (2 13 0)) (dash-functional (1 2 0)) (s (1 11 0)) (emacs (24))) "Major mode for Hylang" single]) (hungry-delete . [(20170411 1802) nil "hungry delete minor mode" single]) (hungarian-holidays . [(20161020 438) nil "Adds a list of Hungarian public holidays to Emacs calendar" single]) (hugsql-ghosts . [(20180425 429) ((s (1 9 0)) (dash (2 10 0)) (cider (0 14 0))) "Display hugsql defqueries in clojure code as an overlay." single]) (httprepl . [(20141101 1034) ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) "An HTTP REPL" single]) (httpcode . [(20121001 2045) nil "explains the meaning of an HTTP status code" single]) (http-twiddle . [(20160801 1211) nil "send & twiddle & resend HTTP requests" single]) (http-post-simple . [(20170715 240) nil "HTTP POST requests using the url library" single]) (http . [(20170906 1111) ((emacs (24 4)) (request (0 2 0)) (edit-indirect (0 1 4))) "Yet another HTTP client" single]) (htmlize . [(20180412 1244) nil "Convert buffer text and decorations to HTML." single]) (html2org . [(20170417 2201) ((emacs (24 4))) "Convert html to org format text" single]) (html-to-markdown . [(20151105 40) ((cl-lib (0 5))) "HTML to Markdown converter written in Emacs-lisp." single]) (html-to-hiccup . [(20161028 701) ((emacs (25 1)) (dash (2 13 0)) (s (1 10 0))) "Convert HTML to Hiccup syntax" single]) (html-script-src . [(20120403 1115) nil "Insert <script src=\"..\"> for popular JavaScript libraries" single]) (html-check-frag . [(20160130 2135) ((emacs (24 3))) "Check html-fragments" single]) (ht . [(20180129 1434) ((dash (2 12 0))) "The missing hash table library for Emacs" single]) (howm . [(20180225 205) ((cl-lib (0 5))) "Wiki-like note-taking tool" tar]) (howdoi . [(20150203 1643) nil "Instant coding answers via Emacs." tar]) (how-many-lines-in-project . [(20140806 2142) nil "Calculate how many lines are there in your project." single]) (hound . [(20170627 1259) ((request (0 2 0)) (cl-lib (0 5))) "Display hound search results in a compilation window" single]) (horoscope . [(20180408 2341) ((emacs (24))) "generate horoscopes." single]) (hookify . [(20141216 1409) ((s (1 9 0)) (dash (1 5 0))) "Interactive commands to create temporary hooks" single]) (honcho . [(20180706 1724) ((emacs (25 1)) (sudo-edit (0 1))) "Run and manage long-running services" single]) (homebrew-mode . [(20160615 620) ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) "minor mode for editing Homebrew formulae" single]) (holiday-pascha-etc . [(20160821 1758) nil "Eastern Christian analog to holiday-easter-etc" single]) (hoa-pp-mode . [(20151027 36) ((emacs (24 1)) (names (20150723 0))) "Major mode for Hoa PP grammars" single]) (hoa-mode . [(20151203 850) nil "Major mode for the Hanoi Omega Automata format" single]) (hmac . [(20180429 1310) ((cl-lib (0 5)) (emacs (25))) "hash-based message authentication code" single]) (hlinum . [(20180421 2112) ((cl-lib (0 2))) "Extension for linum.el to highlight current line number" single]) (hlint-refactor . [(20170817 2148) nil "Apply HLint suggestions" single]) (hledger-mode . [(20171201 1156) ((emacs (24 4)) (popup (0 5 3)) (async (1 9)) (htmlize (1 47))) "A mode for writing journal entries for hledger." tar]) (hl-todo . [(20180709 2155) nil "highlight TODO and similar keywords" single]) (hl-sentence . [(20171018 819) nil "highlight a sentence based on customizable face" single]) (hl-indent . [(20170429 1404) ((emacs (24)) (cl-lib (0 5))) "Highlight irregular indentation." single]) (hl-anything . [(20160422 1008) ((emacs (24 3))) "Highlight symbols, selections, enclosing parens and more." tar]) (hiwin . [(20150825 127) nil "Visible active window mode." single]) (hive . [(20131217 712) ((sql (3 0))) "Hive SQL mode extension" single]) (historyf . [(20151123 1759) nil "file history library like browser" single]) (history . [(20160821 902) ((emacs (24 3))) "History utility for source code navigation" tar]) (historian . [(20180619 1223) ((emacs (24 4))) "Persistently store selected minibuffer candidates" single]) (hippie-namespace . [(20140508 1341) nil "Special treatment for namespace prefixes in hippie-expand" single]) (hippie-expand-slime . [(20170722 1846) nil "Hook slime's completion into hippie-expand" single]) (hippie-exp-ext . [(20160502 1626) nil "Extension of hippie-expand" single]) (hindent . [(20180518 202) ((cl-lib (0 5))) "Indent haskell code using the \"hindent\" program" single]) (himp . [(20170814 1215) ((emacs (24 3)) (vimish-fold (0 1 0))) "Automatically hide imports/documentation" single]) (highlight2clipboard . [(20151020 1140) ((htmlize (1 47))) "Copy text to clipboard with highlighting." tar]) (highlight-unique-symbol . [(20130611 2242) ((deferred (0 3 2))) "highlight symbols which not appear in the repository" single]) (highlight-thing . [(20170919 704) nil "Minimalistic minor mode to highlight current thing under point." single]) (highlight-symbol . [(20160102 1209) nil "automatic and manual symbol highlighting" single]) (highlight-stages . [(20161212 657) nil "highlight staged (quasi-quoted) expressions" single]) (highlight-refontification . [(20170211 1224) nil "Visualize font-lock refontification." single]) (highlight-quoted . [(20140916 1122) ((emacs (24))) "Highlight Lisp quotes and quoted symbols" single]) (highlight-parentheses . [(20180704 402) nil "highlight surrounding parentheses" single]) (highlight-operators . [(20170213 1420) nil "a face for operators in programming modes" single]) (highlight-numbers . [(20170905 342) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single]) (highlight-leading-spaces . [(20151216 422) ((emacs (24 4))) "Highlight leading spaces" single]) (highlight-indentation . [(20171218 137) nil "Minor modes for highlighting indentation" single]) (highlight-indent-guides . [(20180529 1039) ((emacs (24))) "Minor mode to highlight indentation" single]) (highlight-function-calls . [(20170907 2200) ((emacs (24 4))) "Highlight function/macro calls" single]) (highlight-escape-sequences . [(20171117 437) nil "Highlight escape sequences" single]) (highlight-defined . [(20141225 730) ((emacs (24))) "Syntax highlighting of known Elisp symbols" single]) (highlight-context-line . [(20170319 1442) nil "Improve orientation when scrolling" single]) (highlight-blocks . [(20151201 815) ((emacs (24))) "Highlight the blocks point is in" single]) (highlight . [(20180604 2335) nil "Highlighting commands." single]) (hierarchy . [(20171221 351) ((emacs (25 1))) "Library to create and display hierarchy structures" single]) (hideshow-org . [(20120223 1450) nil "Provides org-mode like hide and show for hideshow.el" single]) (hide-mode-line . [(20180302 1110) ((emacs (24 4))) "minor mode that hides/masks your modeline" single]) (hide-lines . [(20151127 1040) nil "Commands for hiding lines based on a regexp" single]) (hi2 . [(20141005 1231) nil "indentation module for Haskell Mode" single]) (hgrc-mode . [(20150409 1343) nil "major mode for editing hgrc files" single]) (hgignore-mode . [(20160430 1707) nil "a major mode for editing hgignore files" single]) (hfst-mode . [(20160708 502) nil "major mode for editing HFST files" single]) (hexo . [(20180223 1944) ((emacs (24 3))) "Major mode & tools for Hexo" single]) (heroku-theme . [(20150522 1919) nil "Heroku color theme" single]) (heroku . [(20120629 1113) nil "Interface to Heroku apps." single]) (hemisu-theme . [(20130508 1144) nil "Hemisu for Emacs." tar]) (hemera-theme . [(20170910 603) ((emacs (24))) "Light theme" single]) (helpful . [(20180708 1356) ((emacs (25 1)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 11 0)) (f (0 20 0)) (elisp-refs (1 2)) (shut-up (0 3))) "a better *help* buffer" single]) (helm-zhihu-daily . [(20160625 445) ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm interface for 知乎日报 (http://daily.zhihu.com)" single]) (helm-z . [(20171203 1925) ((helm (1 0))) "Show z directory list with helm.el support." single]) (helm-youtube . [(20161113 1848) ((request (0 2 0)) (helm (2 3 1)) (cl-lib (0 5))) "Query YouTube and play videos in your browser" single]) (helm-xref . [(20180528 816) ((emacs (25 1)) (helm (1 9 4))) "Helm interface for xref results" single]) (helm-xcdoc . [(20160116 218) ((helm (1 5)) (emacs (24 4))) "Search Xcode Document by docsetutil and eww with helm interface" single]) (helm-wordnet . [(20160128 707) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "Helm interface to local wordnet dictionary" single]) (helm-w3m . [(20171102 216) ((helm (1 5)) (w3m (0 0)) (cl-lib (0 5)) (emacs (24 1))) "W3m bookmark - helm interface." single]) (helm-w32-launcher . [(20141223 1214) ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) "Start Menu entry launcher using Helm" tar]) (helm-unicode . [(20180608 707) ((helm (1 9 8)) (emacs (24 4))) "Helm command for unicode characters." single]) (helm-tramp . [(20180610 717) ((emacs (24 3)) (helm (2 0))) "Tramp helm interface for ssh, docker, vagrant" single]) (helm-themes . [(20160917 2245) ((helm-core (2 0)) (emacs (24 4))) "Color theme selection with helm interface" single]) (helm-tail . [(20180624 203) ((emacs (25 1)) (helm (2 7 0))) "Read recent output from various sources" single]) (helm-systemd . [(20180130 2034) ((emacs (24 4)) (helm (1 9 2)) (with-editor (2 5 0))) "helm's systemd interface" single]) (helm-system-packages . [(20180628 1131) ((emacs (24 4)) (helm (2 8 6)) (seq (1 8))) "Helm UI wrapper for system package managers." tar]) (helm-swoop . [(20180215 354) ((helm (1 0)) (emacs (24 3))) "Efficiently hopping squeezed lines powered by helm interface" single]) (helm-sql-connect . [(20170319 551) ((helm (0 0 0))) "Choose a database to connect to via Helm." single]) (helm-spotify-plus . [(20180107 338) ((emacs (24 4)) (helm (2 0 0)) (multi (2 0 1))) "Control Spotify search and select music with Helm." single]) (helm-spotify . [(20160905 1447) ((helm (0 0 0)) (multi (2 0 0))) "Control Spotify with Helm." single]) (helm-spaces . [(20161001 709) ((helm-core (2 2)) (spaces (0 1 0))) "helm sources for spaces" single]) (helm-smex . [(20171004 1308) ((emacs (24)) (smex (3 0)) (helm (1 7 7))) "Helm interface for smex" single]) (helm-sheet . [(20130630 539) ((helm (1 0))) "helm sources for sheet" single]) (helm-selected . [(20171222 1810) ((emacs (24 4)) (helm (2 8 6)) (selected (1 1))) "helm extension for selected.el" single]) (helm-sage . [(20160514 45) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 1 0))) "A helm extension for sage-shell-mode." single]) (helm-safari . [(20160403 2024) ((helm (1 9 1)) (emacs (24))) "Browse your Safari bookmarks and history" single]) (helm-rubygems-org . [(20140826 456) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) "Use helm to search rubygems.org" single]) (helm-rubygems-local . [(20130711 1811) ((helm (1 5 3))) "Installed local rubygems find-file for helm" single]) (helm-rtags . [(20170812 2111) ((helm (2 0)) (rtags (2 10))) "A front-end for rtags" single]) (helm-ros . [(20160812 1052) ((helm (1 9 9)) (xterm-color (1 0)) (cl-lib (0 5))) "Interfaces ROS with helm" single]) (helm-robe . [(20151208 1955) ((helm (1 7 7))) "completing read function for robe" single]) (helm-rhythmbox . [(20160524 458) ((helm (1 5 0)) (cl-lib (0 5))) "control Rhythmbox's play queue via Helm" single]) (helm-rg . [(20180629 220) ((emacs (25)) (cl-lib (0 5)) (dash (2 13 0)) (helm (2 8 8))) "a helm interface to ripgrep" single]) (helm-recoll . [(20160731 221) ((helm (1 9 9))) "helm interface for the recoll desktop search tool." single]) (helm-rdefs . [(20161129 2136) ((emacs (24)) (helm (1 6 4))) "rdefs with helm interface" single]) (helm-rb . [(20131123 839) ((helm (1 0)) (helm-ag-r (20131123))) "Search Ruby's method by ag and display helm" tar]) (helm-rails . [(20130424 819) ((helm (1 5 1)) (inflections (1 1))) "Helm extension for Rails projects." single]) (helm-rage . [(20180118 732) ((helm (1 9 8)) (emacs (24 4)) (dash (2 13 0)) (s (1 11 0))) "Helm command for rage characters." tar]) (helm-qiita . [(20180301 635) ((helm (2 8 2))) "Qiita with helm interface" single]) (helm-pydoc . [(20160917 2242) ((helm-core (2 0)) (emacs (24 4))) "pydoc with helm interface" tar]) (helm-purpose . [(20170114 836) ((emacs (24)) (helm (1 9 2)) (window-purpose (1 4))) "Helm Interface for Purpose" single]) (helm-pt . [(20160214 1542) ((helm (1 5 6))) "Helm interface to the platinum searcher" tar]) (helm-prosjekt . [(20140128 2317) ((prosjekt (0 3)) (helm (1 5 9))) "Helm integration for prosjekt." single]) (helm-projectile . [(20180620 935) ((helm (1 9 9)) (projectile (0 14 0)) (cl-lib (0 3))) "Helm integration for Projectile" single]) (helm-project-persist . [(20151210 743) ((helm (1 5 2)) (project-persist (0 1 4))) "Helm integration for project-persist package" single]) (helm-proc . [(20161005 2005) ((helm (1 6 0))) "Helm interface for managing system processes" tar]) (helm-posframe . [(20180610 1048) ((emacs (26 0)) (posframe (0 1 0)) (helm (0 1))) "Using posframe to show helm window" single]) (helm-phpunit . [(20160513 153) ((helm (1 9 5)) (phpunit (0 7 0))) "Helm integration for phpunit.el" single]) (helm-perspeen . [(20170228 545) ((perspeen (0 1 0)) (helm (2 5 0))) "Helm interface for perspeen." single]) (helm-perldoc . [(20160917 2256) ((helm-core (2 0)) (deferred (0 3 1)) (emacs (24 4))) "perldoc with helm interface" tar]) (helm-pass . [(20180607 1648) ((emacs (25)) (helm (0)) (password-store (0)) (auth-source-pass (4 0 0))) "helm interface of pass, the standard Unix password manager" single]) (helm-pages . [(20161120 1826) ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) "Pages in current buffer as Helm datasource" single]) (helm-orgcard . [(20151001 824) ((helm-core (1 7 7))) "browse the orgcard by helm" single]) (helm-org-rifle . [(20180712 1545) ((emacs (24 4)) (dash (2 12)) (f (0 18 1)) (helm (1 9 4)) (s (1 10 0))) "Rifle through your Org files" single]) (helm-open-github . [(20170219 1759) ((emacs (24 4)) (helm-core (1 7 7)) (gh (0 8 2))) "Utilities of Opening Github Page" single]) (helm-notmuch . [(20180521 407) ((helm (1 9 3)) (notmuch (0 21))) "Search emails with Notmuch and Helm" single]) (helm-nixos-options . [(20151013 1609) ((nixos-options (0 0 1)) (helm (1 5 6))) "Helm Interface for nixos-options" single]) (helm-navi . [(20170402 752) ((emacs (24 4)) (helm (1 9 4)) (navi-mode (2 0)) (s (1 10 0))) "Helm for navi-mode" single]) (helm-mu . [(20180513 221) ((helm (1 5 5))) "Helm sources for searching emails and contacts" single]) (helm-mt . [(20160917 2152) ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) "helm multi-term management" single]) (helm-mode-manager . [(20151124 138) ((helm (1 5 3))) "Select and toggle major and minor modes with helm" single]) (helm-migemo . [(20151009 2056) ((emacs (24 4)) (helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) "Migemo plug-in for helm" single]) (helm-make . [(20180602 653) ((helm (1 5 3)) (projectile (0 11 0))) "Select a Makefile target with helm" single]) (helm-ls-svn . [(20150717 39) ((emacs (24 1)) (helm (1 7 0)) (cl-lib (0 5))) "helm extension to list svn files" single]) (helm-ls-hg . [(20150908 2243) ((helm (1 7 8))) "List hg files in hg project." single]) (helm-ls-git . [(20180711 223) ((helm (1 7 8))) "list git files." single]) (helm-lobsters . [(20150213 746) ((helm (1 0)) (cl-lib (0 5))) "helm front-end for lobste.rs" single]) (helm-lines . [(20180601 1333) ((emacs (24 4)) (helm (1 9 8))) "A helm interface for completing by lines" single]) (helm-lib-babel . [(20180510 624) ((cl-lib (0 5)) (helm (1 9 2)) (emacs (24 4))) "helm insertion of babel function references" single]) (helm-lean . [(20171102 754) ((emacs (24 3)) (dash (2 12 0)) (helm (2 8 0)) (lean-mode (3 3 0))) "Helm interfaces for lean-mode" single]) (helm-lastpass . [(20180430 1012) ((emacs (25 1)) (helm (2 0)) (csv (2 1))) "Helm interface of LastPass" single]) (helm-kythe . [(20170709 26) ((emacs (25)) (dash (2 12 0)) (helm (2 0))) "Google Kythe helm interface" single]) (helm-jstack . [(20150602 2122) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "Helm interface to Jps & Jstack for Java/JVM processes" single]) (helm-js-codemod . [(20171106 244) ((emacs (24 4)) (helm-core (1 9 8)) (js-codemod (1 0 0))) "A helm interface for running js-codemods" single]) (helm-j-cheatsheet . [(20170217 29) ((helm (1 5 3))) "Quick J reference for Emacs" single]) (helm-itunes . [(20151012 2348) ((helm (1 6 1))) "Play local iTunes and Spotify tracks" single]) (helm-ispell . [(20151231 53) ((helm-core (1 7 7))) "ispell-complete-word with helm interface" single]) (helm-img-tiqav . [(20151224 1522) ((helm-img (0 0 1))) "An helm-source for joking." single]) (helm-img . [(20151224 1521) ((helm (1 7 7)) (cl-lib (0 5))) "Utilities for making image sources for helm." tar]) (helm-idris . [(20141202 957) ((helm (0 0 0)) (idris-mode (0 9 14))) "A Helm datasource for Idris documentation, queried from the compiler" single]) (helm-hunks . [(20171217 1133) ((emacs (24 4)) (helm (1 9 8))) "A helm interface for git hunks - browsing, staging, unstaging and killing" single]) (helm-hoogle . [(20161026 2234) ((helm (1 6 2)) (emacs (24 4))) "Use helm to navigate query results from Hoogle" single]) (helm-helm-commands . [(20130902 1048) ((helm (1 5 4))) "List all helm commands with helm" single]) (helm-hayoo . [(20151013 2351) ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) "Source and configured helm for searching hayoo" single]) (helm-hatena-bookmark . [(20170821 646) ((helm (2 8 2))) "Hatena::Bookmark with helm interface" single]) (helm-gtags . [(20170115 2129) ((emacs (24 4)) (helm (2 0))) "GNU GLOBAL helm interface" single]) (helm-growthforecast . [(20140119 1944) ((helm (1 5 9))) "helm extensions for growthforecast." single]) (helm-grepint . [(20161001 713) ((helm (1 0)) (emacs (24))) "Generic helm interface to grep" single]) (helm-google . [(20180605 2220) ((helm (0))) "Emacs Helm Interface for quick Google searches" single]) (helm-go-package . [(20161102 1853) ((emacs (24 4)) (helm-core (2 2 1)) (go-mode (1 4 0)) (deferred (0 4 0))) "helm sources for Go programming language's package" single]) (helm-gitlab . [(20180312 947) ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0 8 0))) "Helm interface to Gitlab" single]) (helm-gitignore . [(20170210 1608) ((gitignore-mode (1 1 0)) (helm (1 7 0)) (request (0 1 0)) (cl-lib (0 5))) "Generate .gitignore files with gitignore.io." single]) (helm-github-stars . [(20180717 1811) ((helm (1 6 8)) (emacs (24 4))) "Helm integration for your starred repositories on github" single]) (helm-git-grep . [(20170614 711) ((helm-core (2 2 0))) "helm for git grep, an incremental git-grep(1)" single]) (helm-git-files . [(20141212 517) ((helm (1 5 9))) "helm for git files" single]) (helm-git . [(20120630 1403) nil "Helm extension for Git." single]) (helm-ghs . [(20170714 2241) ((emacs (24)) (helm (2 2 0))) "ghs with helm interface" single]) (helm-ghq . [(20161015 117) ((helm (2 2 0))) "ghq with helm interface" single]) (helm-ghc . [(20141105 659) ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) "A Helm datasource for ghc-mod errors" single]) (helm-fuzzy-find . [(20171105 2000) ((emacs (24 1)) (helm (1 7 0))) "Find file using Fuzzy Search" single]) (helm-fuzzier . [(20160605 1445) ((emacs (24 3)) (helm (1 7 0))) "Better fuzzy matching for Helm" single]) (helm-frame . [(20170515 1250) ((emacs (24 4))) "open helm buffers in a dedicated frame" single]) (helm-flyspell . [(20170210 1101) ((helm (1 6 5))) "Helm extension for correcting words with flyspell" single]) (helm-flymake . [(20160609 1702) ((helm (1 0))) "helm interface for flymake" single]) (helm-flycheck . [(20160710 129) ((dash (2 12 1)) (flycheck (28)) (helm-core (1 9 8))) "Show flycheck errors with helm" single]) (helm-flx . [(20180102 2116) ((emacs (24 4)) (helm (1 7 9)) (flx (0 5))) "Sort helm candidates by flx score" single]) (helm-firefox . [(20161202 517) ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) "Firefox bookmarks" single]) (helm-filesets . [(20140929 1135) ((helm (1 6 3)) (filesets+ (0))) "A helm source for emacs filesets" single]) (helm-exwm . [(20180703 919) ((emacs (25 2)) (helm (2 8 5)) (exwm (0 15))) "Helm for EXWM buffers" single]) (helm-ext . [(20180525 2050) ((emacs (24 4)) (helm (2 5 3))) "A few extensions to Helm" tar]) (helm-eww . [(20180511 618) ((emacs (24 4)) (helm (2 8 6)) (seq (1 8))) "Helm UI wrapper for EWW." single]) (helm-etags-plus . [(20170113 614) ((helm (1 7 8))) "Another Etags helm.el interface" single]) (helm-emms . [(20180405 2228) ((helm (1 5)) (emms (0 0)) (cl-lib (0 5)) (emacs (24 1))) "Emms for Helm." single]) (helm-emmet . [(20160713 531) ((helm (1 0)) (emmet-mode (1 0 2))) "helm sources for emmet-mode's snippets" single]) (helm-elscreen . [(20170709 214) ((helm (2 8 0)) (elscreen (0)) (cl-lib (0 5)) (emacs (24 1))) "Elscreen with helm interface" single]) (helm-dirset . [(20151208 1612) ((f (0 16 2)) (helm (1 6 1)) (s (1 9 0)) (cl-lib (0 5))) "helm sources for multi directories" single]) (helm-dired-recent-dirs . [(20131228 614) ((helm (1 0))) "Show recent dirs with helm.el support." single]) (helm-dired-history . [(20170524 346) ((helm (1 9 8)) (cl-lib (0 5))) "Show dired history with helm.el support." single]) (helm-directory . [(20170705 2102) ((emacs (24 4)) (helm (2 0))) "selecting directory before select the file" single]) (helm-dictionary . [(20160817 1333) ((helm (1 5 5))) "Helm source for looking up dictionaries" single]) (helm-describe-modes . [(20160211 2118) ((helm (1 9)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface to major and minor modes." single]) (helm-descbinds . [(20180429 756) ((helm (1 5))) "A convenient `describe-bindings' with `helm'" single]) (helm-dash . [(20180503 218) ((helm (1 9 2)) (cl-lib (0 5))) "Offline documentation browser for +150 APIs using Dash docsets." single]) (helm-ctest . [(20180125 2058) ((s (1 9 0)) (dash (2 11 0)) (helm-core (1 7 4))) "Run ctest from within emacs" single]) (helm-css-scss . [(20140626 1725) ((helm (1 0)) (emacs (24))) "CSS/SCSS/LESS Selectors with helm interface" single]) (helm-cscope . [(20170326 22) ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface for xcscope.el." single]) (helm-core . [(20180712 137) ((emacs (24 4)) (async (1 9 3))) "Development files for Helm" tar]) (helm-company . [(20180213 1405) ((helm (1 5 9)) (company (0 6 13))) "Helm interface for company-mode" single]) (helm-commandlinefu . [(20150610 2245) ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) "Search and browse commandlinefu.com from helm" single]) (helm-codesearch . [(20180203 2033) ((s (1 10 0)) (dash (2 12 0)) (helm (1 7 7)) (cl-lib (0 5))) "helm interface for codesearch" single]) (helm-cmd-t . [(20170125 659) nil "cmd-t style completion" tar]) (helm-clojuredocs . [(20160405 23) ((edn (1 1 2)) (helm (1 5 7))) "search for help in clojuredocs.org" single]) (helm-circe . [(20160206 2252) ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) "helm circe buffer management." single]) (helm-cider-history . [(20150719 1420) ((helm (1 4 0)) (cider (0 9 0))) "Helm interface for cider history" single]) (helm-cider . [(20180306 2058) ((emacs (24 4)) (cider (0 16)) (helm-core (2 8))) "Helm interface to CIDER" tar]) (helm-chronos . [(20150528 1336) ((chronos (1 2)) (helm (1 7 1))) "helm interface for chronos timers" tar]) (helm-chrome . [(20160718 2220) ((helm (1 5)) (cl-lib (0 3)) (emacs (24))) "Helm interface for Chrome bookmarks" single]) (helm-charinfo . [(20170810 531) ((emacs (24)) (helm (1 7 0)) (cl-lib (0 5))) "A helm source for character information" single]) (helm-c-yasnippet . [(20170128 742) ((helm (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single]) (helm-c-moccur . [(20151230 124) ((helm (20120811)) (color-moccur (2 71))) "helm source for color-moccur.el" single]) (helm-bundle-show . [(20151221 430) ((helm (1 8 0))) "bundle show with helm interface" single]) (helm-books . [(20170324 2331) ((helm (1 7 7))) "Helm interface for searching books" single]) (helm-bm . [(20160321 631) ((bm (1 0)) (cl-lib (0 5)) (helm (1 9 3)) (s (1 11 0))) "helm sources for bm.el" single]) (helm-bind-key . [(20141108 2115) ((bind-key (1 0)) (helm (1 6 4))) "helm-source for for bind-key." single]) (helm-bibtexkey . [(20140214 704) ((helm (1 5 8))) "Bibtexkey source for helm" tar]) (helm-bibtex . [(20180612 619) ((helm (1 5 5)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A bibliography manager based on Helm" tar]) (helm-bbdb . [(20180505 808) ((helm (1 5)) (bbdb (3 1 2))) "Helm interface for bbdb" single]) (helm-backup . [(20171204 2357) ((helm (1 5 5)) (s (1 8 0)) (cl-lib (0))) "Backup each file change using git" single]) (helm-aws . [(20180514 332) ((helm (1 5 3)) (cl-lib (0 5)) (s (1 9 0))) "Manage AWS EC2 server instances directly from Emacs" single]) (helm-ag-r . [(20131123 731) ((helm (1 0))) "Search something by ag and display by helm" single]) (helm-ag . [(20170209 745) ((emacs (24 4)) (helm (2 0))) "the silver searcher with helm interface" single]) (helm-addressbook . [(20170903 28) ((helm (2 8 2)) (addressbook-bookmark (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm for addressbook bookmarks." single]) (helm-ad . [(20151209 215) ((dash (2 8 0)) (helm (1 6 2))) "helm source for Active Directory" single]) (helm-ack . [(20141030 526) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single]) (helm-R . [(20120819 1714) ((helm (20120517)) (ess (20120509))) "helm-sources and some utilities for GNU R." single]) (helm . [(20180716 322) ((emacs (24 4)) (async (1 9 3)) (popup (0 5 3)) (helm-core (2 9 8))) "Helm is an Emacs incremental and narrowing framework" tar]) (heaven-and-hell . [(20180421 221) ((emacs (24 4))) "easy toggle light/dark themes" single]) (headlong . [(20150417 826) nil "reckless completion" single]) (hcl-mode . [(20170107 27) ((emacs (24 3))) "Major mode for Hashicorp" single]) (hc-zenburn-theme . [(20150928 933) nil "An higher contrast version of the Zenburn theme." single]) (hayoo . [(20140831 521) ((emacs (24)) (json (1 3))) "Query hayoo and show results in a tabulated buffer." single]) (haxor-mode . [(20160618 429) ((emacs (24 0))) "Major mode for editing Haxor Assembly Files" single]) (haxe-mode . [(20131004 142) nil "An Emacs major mode for Haxe" single]) (haxe-imports . [(20170330 1604) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 1))) "Code for dealing with Haxe imports" single]) (haste . [(20141030 1334) ((json (1 2))) "Emacs client for hastebin (http://hastebin.com/about.md)" single]) (hasky-stack . [(20180331 208) ((emacs (24 4)) (f (0 18 0)) (magit-popup (2 10))) "Interface to the Stack Haskell development tool" single]) (hasky-extensions . [(20180107 2112) ((emacs (24 4)) (avy-menu (0 2))) "Toggle Haskell language extensions" single]) (haskell-tab-indent . [(20170701 258) nil "tab-based indentation for haskell-mode" single]) (haskell-snippets . [(20160918 1722) ((cl-lib (0 5)) (yasnippet (0 8 0))) "Yasnippets for Haskell" tar]) (haskell-mode . [(20180601 143) ((emacs (24 3))) "A Haskell editing mode" tar]) (haskell-emacs-text . [(20150713 716) ((haskell-emacs (2 4 0))) "Haskell functions from Data.Text" tar]) (haskell-emacs-base . [(20150714 859) ((haskell-emacs (2 4 0))) "Haskell functions from Prelude" tar]) (haskell-emacs . [(20160904 1326) nil "Write emacs extensions in haskell" tar]) (harvest . [(20170822 1046) ((swiper (0 7 0)) (hydra (0 13 0)) (s (1 11 0))) "Harvest integration" single]) (hardhat . [(20160414 713) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" single]) (hardcore-mode . [(20151113 2301) nil "Disable arrow keys + optionally backspace and return" single]) (handoff . [(20150916 2300) nil "Get your hand off that mouse, damn it!" single]) (handlebars-sgml-mode . [(20130623 1633) nil "Add Handlebars contextual indenting support to sgml-mode" single]) (handlebars-mode . [(20150211 949) nil "A major mode for editing Handlebars files." single]) (hamlet-mode . [(20131207 2324) ((cl-lib (0 3)) (dash (2 3 0)) (s (1 7 0))) "Hamlet editing mode" single]) (haml-mode . [(20170923 2153) ((emacs (24)) (cl-lib (0 5))) "Major mode for editing Haml files" single]) (hamburger-menu . [(20160825 1331) ((emacs (24 5))) "Mode line hamburger menu" single]) (hamburg-theme . [(20160122 2340) ((emacs (24))) "Color Theme with a dark blue background." single]) (ham-mode . [(20150811 606) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown" single]) (hal-mode . [(20160704 1046) nil "Major mode for editing HAL files" single]) (hackernews . [(20180220 419) ((json (1 2))) "Access the Hacker News aggregator from Emacs" tar]) (hacker-typer . [(20170206 720) ((emacs (24))) "Pretend to write code like a pro" tar]) (hack-time-mode . [(20170527 910) ((emacs (24 4))) "Forge time" single]) (habitica . [(20171022 1922) ((org (8 3 5)) (emacs (24 3))) "Interface for habitica.com" single]) (habamax-theme . [(20180702 958) ((emacs (24))) "Boring white background color that gets the job done." single]) (gxref . [(20170411 1053) ((emacs (25))) "xref backend using GNU Global." single]) (gvpr-mode . [(20131208 918) nil "A major mode offering basic syntax coloring for gvpr scripts." single]) (guru-mode . [(20170730 31) nil "Become an Emacs guru" single]) (gulp-task-runner . [(20170718 1341) nil "Gulp task runner" single]) (guix . [(20180705 315) ((emacs (24 3)) (dash (2 11 0)) (geiser (0 8)) (bui (1 1 0)) (magit-popup (2 1 0)) (edit-indirect (0 1 4))) "Interface for GNU Guix" tar]) (guide-key-tip . [(20161011 123) ((guide-key (1 2 3)) (pos-tip (0 4 5))) "Show guide-key.el hints using pos-tip.el" single]) (guide-key . [(20150107 2235) ((dash (2 10 0)) (popwin (0 3 0)) (s (1 9 0))) "Guide the following key bindings automatically and dynamically" single]) (guess-language . [(20170620 308) ((cl-lib (0 5)) (emacs (24))) "Robust automatic language detection" tar]) (gtk-pomodoro-indicator . [(20171230 840) nil "A pomodoro indicator for the GTK tray" tar]) (gscholar-bibtex . [(20170913 1457) nil "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" single]) (gs-mode . [(20151202 206) nil "Major mode for editing GrADS script files" single]) (gruvbox-theme . [(20180623 2009) ((autothemer (0 2))) "A retro-groove colour theme for Emacs" tar]) (grunt . [(20160316 828) ((dash (2 9 0)) (ansi-color (3 4 2)) (emacs (24 3))) "Some glue to stick Emacs and Gruntfiles together" single]) (gruber-darker-theme . [(20180529 12) nil "Gruber Darker color theme for Emacs 24." single]) (groovy-mode . [(20180601 738) ((s (1 12 0)) (emacs (24 3)) (dash (2 13 0))) "Major mode for Groovy source files" tar]) (groovy-imports . [(20161003 151) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Groovy imports" single]) (grizzl . [(20160818 37) ((cl-lib (0 5)) (emacs (24 3))) "Fast fuzzy search index for Emacs." single]) (grin . [(20110805 2358) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single]) (greymatters-theme . [(20150621 423) ((emacs (24))) "Emacs 24 theme with a light background." single]) (grep-context . [(20180415 435) ((emacs (24 4)) (dash (2 12 0)) (cl-lib (0 5 0))) "Increase context in compilation and grep buffers" single]) (grep-a-lot . [(20131006 647) nil "manages multiple search results buffers for grep.el" single]) (gregorio-mode . [(20170705 751) nil "Gregorio Mode for .gabc files" single]) (green-screen-theme . [(20171130 234) nil "A nice color theme for those who miss green CRTs" single]) (green-phosphor-theme . [(20150515 747) nil "A light color theme with muted, autumnal colors." single]) (green-is-the-new-black-theme . [(20180322 1903) nil "A cool and minimalist green blackened theme engine" single]) (grayscale-theme . [(20171005 102) nil "A simple grayscale theme" single]) (grass-mode . [(20170503 800) ((cl-lib (0 2)) (dash (2 8 0))) "Provides Emacs modes for interacting with the GRASS GIS program" single]) (grapnel . [(20131001 834) nil "HTTP request lib with flexible callback dispatch" single]) (graphviz-dot-mode . [(20171103 127) nil "Mode for the dot-language used by graphviz (att)." single]) (graphql-mode . [(20180303 1558) ((emacs (24 3))) "Major mode for editing GraphQL schemas" single]) (graphene-meta-theme . [(20161204 807) nil "Integrated theming for common packages" single]) (graphene . [(20180529 412) ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 6)) (sr-speedbar (20140505)) (ido-completing-read+ (4 3)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 8 0)) (graphene-meta-theme (0 0 2)) (flycheck (0 23)) (company (0 8 12))) "Friendly Emacs defaults" tar]) (grandshell-theme . [(20180605 2217) nil "Dark color theme for Emacs > 24 with intensive colors." tar]) (grails-projectile-mode . [(20160327 624) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." tar]) (grails-mode . [(20160504 211) nil "minor-mode that adds some Grails project management to a grails project" single]) (grails . [(20160416 2336) ((emacs (24))) "Minor mode for Grails projects" single]) (gradle-mode . [(20150313 1205) ((s (1 8 0))) "Gradle integration with Emacs' compile" single]) (grab-x-link . [(20180205 346) ((emacs (24)) (cl-lib (0 5))) "Grab links from X11 apps and insert into Emacs" single]) (grab-mac-link . [(20180328 745) ((emacs (24))) "Grab link from Mac Apps and insert it into Emacs" single]) (gpastel . [(20180419 2350) ((emacs (24 3))) "Integrates GPaste with the kill-ring" single]) (govet . [(20170808 1024) nil "linter/problem finder for the Go source code" single]) (govc . [(20180524 1323) ((emacs (24 3)) (dash (1 5 0)) (s (1 9 0)) (magit-popup (2 0 50)) (json-mode (1 6 0))) "Interface to govc for managing VMware ESXi and vCenter" single]) (goto-last-change . [(20150109 1023) nil "Move point through buffer-undo-list positions" single]) (goto-gem . [(20140729 1145) ((s (1 9 0))) "Open dired in gem directory" single]) (goto-chg . [(20180105 1033) nil "goto last change" single]) (gotham-theme . [(20171013 1216) nil "A very dark Emacs color theme." single]) (gotest . [(20180617 633) ((emacs (24 3)) (s (1 11 0)) (f (0 19 0)) (go-mode (1 5 0))) "Launch GO unit tests" single]) (gorepl-mode . [(20170905 245) ((emacs (24)) (s (1 11 0)) (f (0 19 0)) (hydra (0 13 0))) "Go REPL Interactive Development in top of Gore" single]) (gore-mode . [(20151123 1127) ((go-mode (1 0 0))) "Simple mode for gore, a command-line evaluator for golang." single]) (goose-theme . [(20160828 545) ((emacs (24 1))) "A gray color theme" single]) (google-translate . [(20170713 119) nil "Emacs interface to Google Translate." tar]) (google-this . [(20170810 515) ((emacs (24 1))) "A set of functions and bindings to google under point." single]) (google-maps . [(20171002 734) ((emacs (24 3))) "Access Google Maps from Emacs" tar]) (google-contacts . [(20171027 1033) ((oauth2 (0 10)) (cl-lib (0 5))) "Support for Google Contacts in Emacs" tar]) (google-c-style . [(20180130 936) nil "Google's C/C++ style for c-mode" single]) (google . [(20140416 1048) nil "Emacs interface to the Google API" single]) (gom-mode . [(20131007 1953) nil "Major mode for Gomfile" single]) (golint . [(20180221 1215) nil "lint for the Go source code" single]) (goldendict . [(20180121 120) ((emacs (24 4)) (cl-lib (0 5))) "query word smartly with goldendict.el" single]) (golden-ratio-scroll-screen . [(20170223 1829) nil "Scroll half screen down or up, and highlight current line" single]) (golden-ratio . [(20150819 420) nil "Automatic resizing of Emacs windows to the golden ratio" single]) (gold-mode . [(20140606 1906) ((sws-mode (0))) "Major mode for editing .gold files" single]) (godoctor . [(20180710 1452) nil "Frontend for godoctor" single]) (god-mode . [(20180117 334) nil "God-like command entering minor mode" tar]) (gobgen . [(20161020 823) ((emacs (24 4))) "Generate GObject descendants using a detailed form" single]) (go-tag . [(20180226 2011) ((emacs (24 0)) (go-mode (1 5 0))) "Edit Golang struct field tag" single]) (go-stacktracer . [(20150430 1442) nil "parse Go stack traces" single]) (go-snippets . [(20180112 2211) ((yasnippet (0 8 0))) "Yasnippets for go" tar]) (go-scratch . [(20150809 2140) ((go-mode (1 3 1)) (emacs (24))) "*scratch* buffer for Go" single]) (go-rename . [(20180626 2348) ((go-mode (1 3 1))) "Integration of the 'gorename' tool into Emacs." single]) (go-projectile . [(20170302 1705) ((projectile (0 10 0)) (go-mode (0)) (go-eldoc (0 16)) (go-rename (0)) (go-guru (0))) "Go add-ons for Projectile" single]) (go-playground-cli . [(20160503 214) ((emacs (24)) (request (0 2 0)) (deferred (0 3 2)) (names (20151201 404)) (s (1 10 0)) (f (0 17 2)) (let-alist (1 0 4)) (cl-lib (0 5))) "Go Playground client tool" single]) (go-playground . [(20170226 43) ((emacs (24)) (go-mode (1 4 0)) (gotest (0 13 0))) "Local Golang playground for short snippets." single]) (go-mode . [(20180327 830) nil "Major mode for the Go programming language" single]) (go-imports . [(20180709 2228) nil "Insert go import statement given package name" tar]) (go-impl . [(20170125 752) ((emacs (24 3)) (go-mode (1 3 0))) "impl integration for go-mode" single]) (go-guru . [(20180628 310) ((go-mode (1 3 1)) (cl-lib (0 5))) "Integration of the Go 'guru' analysis tool into Emacs." single]) (go-gopath . [(20160705 334) ((cl-lib (0 5))) "Will guess GOPATH using gb and projectile." single]) (go-gen-test . [(20171022 2058) ((emacs (24 3)) (s (1 12))) "Generate tests for go code with gotests" single]) (go-fill-struct . [(20171224 1931) ((emacs (24))) "Fill struct for golang." single]) (go-errcheck . [(20160722 1743) nil "errcheck integration for go-mode" single]) (go-eldoc . [(20170305 627) ((emacs (24 3)) (go-mode (1 0 0))) "eldoc for go-mode" single]) (go-dlv . [(20160517 1346) ((go-mode (1 3 1))) "Go Delve - Debug Go programs interactively with the GUD." single]) (go-direx . [(20150315 1843) ((direx (1 0 0)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single]) (go-complete . [(20151015 228) ((go-mode (0)) (cl-lib (0 5))) "Native code completion for Go" single]) (go-autocomplete . [(20170626 323) ((auto-complete (1 4 0))) "auto-complete-mode backend for go-mode" single]) (go-add-tags . [(20161123 427) ((emacs (24 3)) (s (1 11 0))) "Add field tags for struct fields" single]) (go . [(20161110 1849) ((emacs (24))) "Play GO, translate and transfer between GO back ends" tar]) (gnus-x-gm-raw . [(20140610 31) ((log4e (0 2 0)) (yaxception (0 1))) "Search mail of Gmail using X-GM-RAW as web interface" single]) (gnus-summary-ext . [(20180113 516) nil "Extra limit and process mark commands for the gnus summary buffer" single]) (gnus-select-account . [(20170721 2211) nil "Select an account before writing a mail in gnus" single]) (gnus-desktop-notify . [(20180623 838) ((gnus (1 0))) "Gnus Desktop Notification global minor mode" single]) (gnus-alias . [(20150315 1742) nil "an alternative to gnus-posting-styles" single]) (gnuplot-mode . [(20171013 916) nil "Major mode for editing gnuplot scripts" single]) (gnuplot . [(20141231 1337) nil "drive gnuplot from within emacs" tar]) (gnu-apl-mode . [(20180129 2300) ((emacs (24))) "Integrate GNU APL with Emacs" tar]) (gntp . [(20141024 1950) nil "Growl Notification Protocol for Emacs" single]) (gnomenm . [(20150316 1218) ((s (1 9 0)) (dash (2 3 0)) (kv (0 0 19))) "Emacs interface to Gnome nmcli command" single]) (gnome-calendar . [(20161110 456) nil "Integration with the GNOME Shell calendar" single]) (gmpl-mode . [(20171031 1354) ((emacs (24))) "Major mode for editing GMPL(MathProg) files" single]) (gmail2bbdb . [(20170423 444) nil "import email and name into bbdb from vcard." single]) (gmail-message-mode . [(20160627 1147) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single]) (glsl-mode . [(20170927 736) nil "major mode for Open GLSL shader files" single]) (glab . [(20180419 308) ((emacs (24 4)) (ghub (2 0))) "minuscule client library for the Gitlab API" single]) (gl-conf-mode . [(20170714 610) ((emacs (24 3))) "Mode for editing gitolite config files" single]) (gitter . [(20180122 56) ((emacs (24 4)) (let-alist (1 0 4))) "An Emacs Gitter client" single]) (gitpatch . [(20170721 2110) ((emacs (24 3))) "Git-format patch toolkit" single]) (gitolite-clone . [(20160609 1655) ((dash (2 10 0)) (s (1 9 0)) (pcache (0 3 1)) (emacs (24))) "Clone gitolite repositories from a completing list" single]) (gitlab-ci-mode-flycheck . [(20180604 1504) ((emacs (25)) (flycheck (31)) (gitlab-ci-mode (1))) "Flycheck support for ‘gitlab-ci-mode’" single]) (gitlab-ci-mode . [(20180604 1503) ((emacs (25)) (yaml-mode (0 0 12))) "mode for editing GitLab CI files" single]) (gitlab . [(20180312 947) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Gitlab" tar]) (gitignore-templates . [(20180327 626) ((emacs (24 3))) "Access GitHub .gitignore templates" single]) (gitignore-mode . [(20180318 1256) nil "Major mode for editing .gitignore files" single]) (github-theme . [(20170630 1501) nil "The GitHub color theme for Emacs." single]) (github-stars . [(20180328 433) ((emacs (25 1)) (ghub (2 0 0))) "Browse your Github Stars" single]) (github-search . [(20170823 2023) ((magit (0 8 1)) (gh (1 0 0))) "Clone repositories by searching github" single]) (github-pullrequest . [(20170115 2216) ((emacs (24 4)) (request (0 2 0)) (dash (2 11 0)) (magit (2 10 0))) "Create and fetch Github Pull requests with ease" single]) (github-notifier . [(20180420 2016) ((emacs (24))) "Displays your GitHub notifications unread count in mode-line" single]) (github-modern-theme . [(20171109 451) nil "The GitHub color theme for Emacs." single]) (github-issues . [(20160616 1141) ((emacs (24))) "Functions and modes for managing GitHub projects' issues" single]) (github-elpa . [(20180704 2247) ((package-build (1 0)) (commander (0 7 0)) (git (0 1 1))) "Build and publish ELPA repositories with GitHub Pages" tar]) (github-clone . [(20160622 2010) ((gh (0 7 2)) (magit (2 1 0)) (emacs (24 4))) "Fork and clone github repos" single]) (github-browse-file . [(20160205 627) ((cl-lib (0 5))) "View the file you're editing on GitHub" single]) (gitconfig-mode . [(20180318 1256) nil "Major mode for editing .gitconfig files" single]) (gitconfig . [(20130718 235) nil "Emacs lisp interface to work with git-config variables" single]) (gitattributes-mode . [(20180318 1256) nil "Major mode for editing .gitattributes files" single]) (git-wip-timemachine . [(20150408 306) ((s (1 9 0))) "Walk through git-wip revisions of a file" single]) (git-timemachine . [(20180607 120) ((emacs (24 3))) "Walk through git revisions of a file" single]) (git-ps1-mode . [(20180413 247) nil "Global minor-mode to print __git_ps1" single]) (git-msg-prefix . [(20180118 646) ((emacs (24)) (s (1 10 0)) (dash (2 9 0))) "Insert commit message prefix (issue number)" single]) (git-messenger . [(20170101 2040) ((emacs (24 3)) (popup (0 5 0))) "Pop up last commit information of current line" single]) (git-link . [(20180708 943) ((emacs (24 3))) "Get the GitHub/Bitbucket/GitLab URL for a buffer location" single]) (git-lens . [(20180328 717) ((emacs (24 4))) "Show new, deleted or modified files in branch" single]) (git-io . [(20180317 1052) ((emacs (24 4))) "git.io integration" single]) (git-gutter-fringe . [(20170112 2133) ((git-gutter (0 88)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single]) (git-gutter-fringe+ . [(20140729 403) ((git-gutter+ (0 1)) (fringe-helper (1 0 1))) "Fringe version of git-gutter+.el" single]) (git-gutter . [(20161105 656) ((emacs (24 3))) "Port of Sublime Text plugin GitGutter" single]) (git-gutter+ . [(20151204 923) ((git-commit (0)) (dash (0))) "Manage Git hunks straight from the buffer" single]) (git-dwim . [(20170126 414) nil "Context-aware git commands such as branch handling" single]) (git-commit-insert-issue . [(20171102 1141) ((projectile (0)) (s (0)) (github-issues (0)) (gitlab (0)) (bitbucket (0))) "Get issues list when typing \"Fixes #\"" single]) (git-commit . [(20180713 1444) ((emacs (25 1)) (dash (20180413)) (with-editor (20180414))) "Edit Git commit messages" single]) (git-command . [(20160111 503) ((term-run (0 1 4)) (with-editor (2 3 1))) "Yet another Git interface" single]) (git-blamed . [(20161028 1226) nil "Minor mode for incremental blame for Git" single]) (git-auto-commit-mode . [(20161229 817) nil "Emacs Minor mode to automatically commit and push" single]) (git-attr . [(20180204 15) ((emacs (24 3))) "Git attributes of buffer file" tar]) (git-annex . [(20180427 856) nil "Mode for easy editing of git-annex'd files" single]) (git . [(20140128 241) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single]) (gist . [(20171127 2006) ((emacs (24 1)) (gh (0 10 0))) "Emacs integration for gist.github.com" single]) (gildas-mode . [(20150919 1501) ((polymode (0)) (emacs (24 3))) "Major mode for Gildas" single]) (gift-mode . [(20180530 535) nil "major mode for editing GIFT format quizzes" single]) (gif-screencast . [(20180616 1230) ((emacs (25 1))) "One-frame-per-action GIF recording" single]) (ghub . [(20180715 1159) ((emacs (24 4)) (let-alist (1 0 5))) "minuscule client library for the Github API" tar]) (ghub+ . [(20180602 1545) ((emacs (25)) (ghub (2 0)) (apiwrap (0 5))) "a thick GitHub API client built on ghub" single]) (ghq . [(20160803 857) nil "Ghq interface for emacs" single]) (ghost-blog . [(20171023 42) ((markdown-mode (1 0))) "A package to manage Ghost blog" single]) (gherkin-mode . [(20171224 553) nil "An emacs major mode for editing gherkin files." single]) (ghci-completion . [(20151125 457) ((emacs (24 1)) (cl-lib (0 5))) "Completion for GHCi commands in inferior-haskell buffers" single]) (ghc-imported-from . [(20141124 1132) ((emacs (24 1))) "Haskell documentation lookup with ghc-imported-from" single]) (ghc . [(20180121 418) ((haskell-mode (13 0))) "Sub mode for Haskell mode" tar]) (gh-md . [(20151207 940) ((emacs (24))) "Render markdown using the Github api" single]) (gh . [(20180308 1338) ((emacs (24 3)) (pcache (0 4 1)) (logito (0 1)) (marshal (0 6 3))) "A GitHub library for Emacs" tar]) (ggtags . [(20180418 657) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single]) (ggo-mode . [(20130524 443) nil "Gengetopt major mode" single]) (gf . [(20180606 1455) ((s (1 0)) (ht (2 0))) "Major mode for editing GF code" single]) (gerrit-download . [(20150714 708) ((emacs (24 0)) (magit (2 1 0))) "Show gerrit reviews in a diff buffer." single]) (german-holidays . [(20161011 13) nil "German holidays for Emacs calendar" single]) (genrnc . [(20140612 537) ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar]) (general . [(20180628 1112) ((emacs (24 4)) (cl-lib (0 5))) "Convenience wrappers for keybindings." single]) (geiser . [(20180626 440) nil "GNU Emacs and Scheme talk to each other" tar]) (geeknote . [(20160717 549) ((emacs (24))) "Use Evernote in Emacs through geeknote" single]) (geben-helm-projectile . [(20160610 1759) ((emacs (24)) (geben (0 26)) (helm-projectile (0 13 0))) "Integrate helm-projectile with geben" single]) (geben . [(20170801 551) ((emacs (24 3)) (cl-lib (0 5))) "DBGp protocol frontend, a script debugger" tar]) (gdscript-mode . [(20180117 2056) ((emacs (24 3))) "Major mode for editing Godot GDScript files" single]) (gather . [(20141230 538) nil "Gather string in buffer." single]) (gap-mode . [(20160204 736) nil "Major mode for editing files in the GAP programing language." tar]) (gandalf-theme . [(20130809 247) nil "Gandalf color theme" single]) (gams-mode . [(20180416 206) ((emacs (24 3))) "Major mode for General Algebraic Modeling System (GAMS)." single]) (gams-ac . [(20180423 226) ((emacs (24)) (auto-complete (1 0)) (gams-mode (4 0))) "auto-complete source file for GAMS mode" single]) (fzf . [(20180618 1845) ((emacs (24 4))) "A front-end for fzf." single]) (fyure . [(20130216 514) nil "An interface to fix Japanese hyoki-yure" tar]) (fxrd-mode . [(20170728 1101) ((s (1 2))) "Major mode for editing fixed field width files" tar]) (fwb-cmds . [(20180318 1519) nil "misc frame, window and buffer commands" single]) (fvwm-mode . [(20160411 438) nil "A major mode for editing Fvwm configuration files" single]) (fuzzy . [(20150729 2037) nil "Fuzzy Matching" single]) (futhark-mode . [(20180619 949) ((cl-lib (0 5))) "major mode for editing Futhark source files" single]) (furl . [(20150508 2016) nil "Friendly URL retrieval" single]) (fuo . [(20180314 948) ((emacs (24 4))) "feeluown client." single]) (function-args . [(20171031 1004) ((ivy (0 9 1))) "C++ completion for GNU Emacs" tar]) (fullframe . [(20170816 303) ((cl-lib (0 5))) "Generalized automatic execution in a single frame" single]) (full-ack . [(20140223 932) nil "a front-end for ack" single]) (fuff . [(20170202 703) ((seq (2 3))) "Find files with findutils, recursively" single]) (fuel . [(20180224 1411) ((cl-lib (0 2)) (emacs (24 2))) "Major mode for the Factor programming language." tar]) (fstar-mode . [(20180713 1329) ((emacs (24 3)) (dash (2 11)) (company (0 8 12)) (quick-peek (1 0)) (yasnippet (0 11 0)) (flycheck (30 0)) (company-quickhelp (2 2 0))) "Support for F* programming" tar]) (fsharp-mode . [(20180518 1120) ((company (0 8 0)) (company-quickhelp (1 2 0)) (popup (0 5 3)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0)) (flycheck (0 25))) "F# mode for Emacs" tar]) (fsbot-data-browser . [(20160921 833) nil "browse the fsbot database using tabulated-list-mode" single]) (fringe-helper . [(20140620 1409) nil "helper functions for fringe bitmaps" single]) (fringe-current-line . [(20140110 2011) nil "show current line on the fringe." single]) (free-keys . [(20160726 1350) ((cl-lib (0 3))) "Show free keybindings for modkeys or prefixes" single]) (frecency . [(20170908 2331) ((emacs (25 1)) (a (0 1)) (dash (2 13 0))) "Library for sorting items by frequency and recency of access" single]) (framesize . [(20131017 1432) ((key-chord (0 5 20080915))) "change the size of frames in Emacs" single]) (frameshot . [(20180228 408) ((emacs (25 3))) "Take screenshots of a frame" single]) (frames-only-mode . [(20180114 1048) ((emacs (24 4)) (dash (2 13 0)) (s (1 11 0))) "Use frames instead of Emacs windows" single]) (frame-tag . [(20170110 1606) ((cl-lib (0 5))) "Minor mode that assigns a unique number to each frame for easy switching" single]) (frame-purpose . [(20180623 1757) ((emacs (25 1)) (dash (2 12)) (dash-functional (1 2 0))) "Purpose-specific frames" single]) (frame-mode . [(20170419 1427) ((s (1 9 0)) (emacs (24 4))) "Use frames instead of windows" single]) (frame-local . [(20180330 240) ((emacs (25 1))) "Variables local to a frame" single]) (fraktur-mode . [(20160814 1927) ((cl-lib (0 5))) "Easily insert Unicode mathematical Fraktur characters" single]) (fountain-mode . [(20180715 145) ((emacs (24 5))) "Major mode for screenwriting in Fountain markup" single]) (fortune-cookie . [(20170407 1517) nil "Print a fortune in your scratch buffer." single]) (fortpy . [(20150715 1332) ((epc (0 1 0)) (auto-complete (1 4)) (python-environment (0 0 2)) (pos-tip (0 4 5))) "a Fortran auto-completion for Emacs" tar]) (forth-mode . [(20170527 1230) nil "Programming language mode for Forth" tar]) (format-sql . [(20150422 633) nil "Use format-sql to make your SQL readable in directly Emacs." single]) (format-all . [(20180710 329) ((cl-lib (0 5))) "Auto-format C, C++, JS, Python, Ruby and 20 other languages" single]) (form-feed . [(20160102 1453) nil "Display ^L glyphs as horizontal lines" single]) (forest-blue-theme . [(20160627 142) ((emacs (24))) "Emacs theme with a dark background." single]) (foreman-mode . [(20170725 722) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "View and manage Procfile-based applications" single]) (foreign-regexp . [(20180224 321) nil "search and replace by foreign regexp." tar]) (forecast . [(20180429 1515) ((emacs (24 4))) "Weather forecasts" single]) (fontify-face . [(20180420 924) ((emacs (24))) "Fontify symbols representing faces with that face." single]) (fontawesome . [(20170305 556) ((emacs (24 4))) "fontawesome utility" tar]) (font-utils . [(20150806 1051) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Utility functions for working with fonts" single]) (font-lock-studio . [(20170127 1251) ((emacs (24 3))) "interactive debugger for Font Lock keywords." single]) (font-lock-profiler . [(20170208 1208) ((emacs (24 3))) "Coverage and timing tool for font-lock keywords." single]) (folding . [(20170925 838) nil "A folding-editor-like minor mode." single]) (fold-this . [(20180224 40) nil "Just fold this region please" single]) (fold-dwim-org . [(20131203 551) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single]) (fold-dwim . [(20140208 837) nil "Unified user interface for Emacs folding modes" single]) (foggy-night-theme . [(20160209 708) ((emacs (24))) "Dark low contrast theme with soft and muted colors." single]) (focus-autosave-mode . [(20160519 1416) ((emacs (24 4))) "Automatically save files in focus-out-hook." single]) (focus . [(20171203 2103) ((emacs (24)) (cl-lib (0 5))) "Dim the font color of text in surrounding sections" single]) (fn . [(20170209 1804) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (dash-functional (1 2 0))) "Concise anonymous functions for Emacs Lisp" single]) (fm-bookmarks . [(20170104 916) ((emacs (24 3)) (cl-lib (0 5))) "Use file manager bookmarks (eg Dolphin, Nautilus, PCManFM) in Dired" single]) (flyspell-popup . [(20170529 115) ((popup (0 5 0))) "Correcting words with Flyspell in popup menus" single]) (flyspell-lazy . [(20180224 1306) nil "Improve flyspell responsiveness using idle timers" single]) (flyspell-correct-popup . [(20180427 1135) ((flyspell-correct (0 4 0)) (popup (0 5 3))) "correcting words with flyspell via popup interface" single]) (flyspell-correct-ivy . [(20180427 1135) ((flyspell-correct (0 4 0)) (ivy (0 8 0))) "correcting words with flyspell via ivy interface" single]) (flyspell-correct-helm . [(20180427 1135) ((flyspell-correct (0 4 0)) (helm (1 9 0))) "correcting words with flyspell via helm interface" single]) (flyspell-correct . [(20180427 1135) nil "correcting words with flyspell via custom interface" tar]) (flyparens . [(20140723 1146) nil "Check for unbalanced parens on the fly" tar]) (flymd . [(20160617 514) ((cl-lib (0 5))) "On the fly markdown preview" tar]) (flymake-yaml . [(20130423 848) ((flymake-easy (0 1))) "A flymake handler for YAML" single]) (flymake-vala . [(20150325 2231) ((flymake-easy (0 1))) "A flymake handler for vala-mode files" single]) (flymake-solidity . [(20170804 2344) ((flymake-easy (0 10))) "A flymake handler for solidity using solc" single]) (flymake-shell . [(20170722 1846) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single]) (flymake-sass . [(20170722 1846) ((flymake-easy (0 1))) "Flymake handler for sass and scss files" single]) (flymake-rust . [(20170729 1439) ((flymake-easy (0 1))) "A flymake handler for rust-mode files" single]) (flymake-ruby . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single]) (flymake-python-pyflakes . [(20170722 1846) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single]) (flymake-puppet . [(20170731 2254) ((flymake-easy (0 9))) "Flymake handler using puppet-lint" single]) (flymake-phpcs . [(20140712 2331) ((flymake-easy (0 9))) "making flymake work with PHP CodeSniffer" single]) (flymake-php . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single]) (flymake-perlcritic . [(20120328 114) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar]) (flymake-lua . [(20170128 1754) nil "Flymake for Lua" single]) (flymake-less . [(20151110 2338) ((less-css-mode (0 15)) (flymake-easy (0 1))) "Flymake handler for LESS stylesheets (lesscss.org)" single]) (flymake-json . [(20180511 211) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single]) (flymake-jslint . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for javascript using jslint" single]) (flymake-jshint . [(20140319 1500) ((flymake-easy (0 8))) "making flymake work with JSHint" single]) (flymake-hlint . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single]) (flymake-haskell-multi . [(20170722 1846) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar]) (flymake-haml . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for haml files" single]) (flymake-google-cpplint . [(20140205 525) ((flymake-easy (0 9))) "Help to comply with the Google C++ Style Guide" single]) (flymake-go . [(20150714 33) nil "A flymake handler for go-mode files" single]) (flymake-gjshint . [(20130327 532) nil "A flymake handler for javascript using both jshint and gjslint" single]) (flymake-elixir . [(20130810 717) nil "A flymake handler for elixir-mode .ex files." single]) (flymake-easy . [(20140818 55) nil "Helpers for easily building flymake checkers" single]) (flymake-cursor . [(20120322 1057) ((flymake (0 3))) "Show flymake messages in the minibuffer after delay" single]) (flymake-css . [(20170722 1846) ((flymake-easy (0 1))) "Flymake support for css using csslint" single]) (flymake-cppcheck . [(20140415 557) ((flymake-easy (0 9))) "Flymake work with Cppcheck for C/C++" single]) (flymake-coffee . [(20170722 1846) ((flymake-easy (0 1))) "A flymake handler for coffee script" single]) (flycheck-ycmd . [(20180207 843) ((emacs (24)) (dash (2 13 0)) (flycheck (0 22)) (ycmd (1 2)) (let-alist (1 0 5))) "flycheck integration for ycmd" single]) (flycheck-yang . [(20180312 1131) ((yang-mode (0 9 4)) (flycheck (0 18))) "YANG flycheck checker" single]) (flycheck-yamllint . [(20170325 1035) ((flycheck (30))) "Flycheck integration for YAMLLint" single]) (flycheck-xcode . [(20180121 2251) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Apple's Xcode." single]) (flycheck-vale . [(20180308 2243) ((emacs (24 4)) (flycheck (0 22)) (let-alist (1 0 4))) "flycheck integration for vale" single]) (flycheck-title . [(20170216 1546) ((flycheck (30)) (emacs (24))) "show flycheck errors in the frame title" single]) (flycheck-tip . [(20171020 348) ((flycheck (29)) (emacs (24 1)) (popup (0 5 0))) "Show flycheck/flymake errors by tooltip" tar]) (flycheck-tcl . [(20180327 559) ((emacs (24 4)) (flycheck (0 22))) "A flycheck checker for Tcl using tclchecker" single]) (flycheck-swiftlint . [(20180312 1656) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Swiftlint." single]) (flycheck-swift3 . [(20180411 652) ((emacs (24 4)) (flycheck (26))) "Flycheck: Swift support for Apple swift-mode" single]) (flycheck-swift . [(20170128 2149) ((emacs (24 4)) (flycheck (0 25))) "Flycheck extension for Apple's Swift." single]) (flycheck-status-emoji . [(20180330 1625) ((cl-lib (0 1)) (emacs (24)) (flycheck (0 20)) (let-alist (1 0))) "Show flycheck status using cute, compact emoji" single]) (flycheck-stack . [(20160520 244) ((flycheck (26)) (haskell-mode (13))) "Flychecker using stack ghci" single]) (flycheck-rust . [(20180327 945) ((emacs (24 1)) (flycheck (28)) (dash (2 13 0)) (seq (2 3)) (let-alist (1 0 4))) "Flycheck: Rust additions and Cargo support" single]) (flycheck-rtags . [(20180619 124) ((emacs (24)) (flycheck (0 23)) (rtags (2 10))) "RTags Flycheck integration." single]) (flycheck-rebar3 . [(20161030 615) ((flycheck (27))) "Rebar3 flycheck integration for Erlang projects" single]) (flycheck-pyflakes . [(20170330 1611) ((flycheck (0 18))) "Support pyflakes in flycheck" single]) (flycheck-pycheckers . [(20180717 2300) ((flycheck (0 18))) "multiple syntax checker for Python, using Flycheck" tar]) (flycheck-purescript . [(20161121 907) ((emacs (24 3)) (flycheck (0 22)) (dash (2 12 0)) (let-alist (1 0 4)) (seq (1 11))) "Flycheck: PureScript support" single]) (flycheck-prospector . [(20180523 2150) ((flycheck (0 22))) "Support prospector in flycheck" single]) (flycheck-posframe . [(20180321 2307) ((flycheck (0 24)) (emacs (26)) (posframe (0 3 0))) "Show flycheck error messages using posframe.el" single]) (flycheck-pos-tip . [(20180610 915) ((emacs (24 1)) (flycheck (0 22)) (pos-tip (0 4 6))) "Display Flycheck errors in GUI tooltips" single]) (flycheck-popup-tip . [(20170812 1651) ((flycheck (0 22)) (popup (0 5)) (emacs (24))) "Display Flycheck error messages using popup.el" single]) (flycheck-pony . [(20160501 1417) ((flycheck (0 25 1))) "Pony support in Flycheck" single]) (flycheck-plantuml . [(20171017 1811) ((flycheck (0 24)) (emacs (24 4)) (plantuml-mode (1 2 2))) "Integrate plantuml with flycheck" single]) (flycheck-pkg-config . [(20180430 1543) ((dash (2 8 0)) (s (1 9 0)) (flycheck (29))) "configure flycheck using pkg-config" single]) (flycheck-phpstan . [(20180430 358) ((emacs (24 3)) (flycheck (26)) (phpstan (0 2 1))) "Flycheck integration for PHPStan" single]) (flycheck-perl6 . [(20180509 1501) ((emacs (24 3)) (flycheck (0 22))) "Perl 6 support in Flycheck" single]) (flycheck-package . [(20161111 1451) ((flycheck (0 22)) (package-lint (0 2))) "A Flycheck checker for elisp package authors" single]) (flycheck-ocaml . [(20170730 1453) ((emacs (24 1)) (flycheck (0 22)) (merlin (3 0 1)) (let-alist (1 0 3))) "Flycheck: OCaml support" single]) (flycheck-objc-clang . [(20180410 422) ((emacs (24 4)) (flycheck (26))) "Flycheck: Objective-C support using Clang" single]) (flycheck-nimsuggest . [(20171027 1508) ((flycheck (0 23)) (emacs (24 3))) "flycheck backend for Nim using nimsuggest" single]) (flycheck-nim . [(20160714 2128) ((dash (2 4 0)) (flycheck (0 20))) "Defines a flycheck syntax checker for nim" single]) (flycheck-mypy . [(20180518 4) ((flycheck (0 18))) "Support mypy in flycheck" single]) (flycheck-mmark . [(20180203 932) ((emacs (24 4)) (flycheck (0 29))) "Flycheck checker for the MMark markdown processor" single]) (flycheck-mix . [(20170118 630) ((flycheck (27)) (elixir-mode (1 8 0))) "Elixir mix flycheck integration" single]) (flycheck-mercury . [(20151122 2334) ((flycheck (0 22)) (s (1 9 0)) (dash (2 4 0))) "Mercury support in Flycheck" single]) (flycheck-liquidhs . [(20170412 1626) ((flycheck (0 15))) "A flycheck checker for Haskell using liquid (i.e. liquidhaskell)" single]) (flycheck-lilypond . [(20171203 532) ((emacs (24 3)) (flycheck (0 22))) "LilyPond support in Flycheck" single]) (flycheck-ledger . [(20180125 31) ((flycheck (0 15))) "Flycheck integration for ledger files" single]) (flycheck-kotlin . [(20170122 337) ((flycheck (0 18))) "Support kotlin in flycheck" single]) (flycheck-julia . [(20170729 1441) ((emacs (24)) (flycheck (0 22))) "Julia support for Flycheck" single]) (flycheck-joker . [(20180712 2102) ((flycheck (0 18))) "Add Clojure syntax checker (via Joker) to flycheck" single]) (flycheck-jest . [(20180410 2028) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Jest." single]) (flycheck-irony . [(20180604 1452) ((emacs (24 1)) (flycheck (0 22)) (irony (0 2 0))) "Flycheck: C/C++ support via Irony" single]) (flycheck-inline . [(20180529 614) ((emacs (25 1)) (flycheck (31))) "Display Flycheck errors inline" single]) (flycheck-hdevtools . [(20160926 2) ((flycheck (0 21 -4 1)) (dash (2 0))) "A flycheck checker for Haskell using hdevtools" single]) (flycheck-haskell . [(20180611 1442) ((emacs (24 3)) (flycheck (0 25)) (haskell-mode (13 7)) (dash (2 4 0)) (seq (1 11)) (let-alist (1 0 1))) "Flycheck: Automatic Haskell configuration" tar]) (flycheck-gradle . [(20180403 33) ((emacs (25 1)) (flycheck (0 25))) "Flycheck extension for Gradle." single]) (flycheck-gometalinter . [(20180424 241) ((emacs (24)) (flycheck (0 22))) "flycheck checker for gometalinter" single]) (flycheck-golangci-lint . [(20180711 117) ((emacs (24)) (flycheck (0 22))) "Flycheck checker for golangci-lint" single]) (flycheck-ghcmod . [(20150113 2232) ((flycheck (0 21 -4 1)) (dash (2 0))) "A flycheck checker for Haskell using ghcmod" single]) (flycheck-flow . [(20180216 1156) ((flycheck (0 18)) (json (1 4))) "Support Flow in flycheck" single]) (flycheck-flawfinder . [(20170115 1927) ((flycheck (0 24)) (emacs (24 4))) "Integrate flawfinder with flycheck" single]) (flycheck-elm . [(20160717 257) ((flycheck (0 29 -4)) (emacs (24 4))) "Flycheck support for the elm language" single]) (flycheck-elixir . [(20171122 507) ((flycheck (0 25))) "Support Elixir in flycheck" single]) (flycheck-dtrace . [(20180126 1135) ((emacs (25 1)) (flycheck (0 22))) "Flycheck: DTrace support" single]) (flycheck-dogma . [(20170124 2321) ((flycheck (29))) "flycheck checker for elixir dogma" single]) (flycheck-dmd-dub . [(20180625 935) ((flycheck (0 24)) (f (0 18 2))) "Sets flycheck-dmd-include-paths from dub package information" single]) (flycheck-dialyzer . [(20160326 730) ((flycheck (0 18))) "Support dialyzer in flycheck" single]) (flycheck-dialyxir . [(20170515 825) ((flycheck (29))) "flycheck checker for elixir dialyxir" single]) (flycheck-demjsonlint . [(20161114 2318) ((flycheck (30))) "Flychecker for json-mode using jsonlint from demjson" tar]) (flycheck-dedukti . [(20171103 512) ((flycheck (0 19)) (dedukti-mode (0 1))) "Flycheck integration of Dedukti" single]) (flycheck-d-unittest . [(20160521 2117) ((flycheck (0 21 -4 1)) (dash (1 4 0))) "Add D unittest support to flycheck" single]) (flycheck-cython . [(20170724 258) ((flycheck (0 25))) "Support Cython in flycheck" single]) (flycheck-cstyle . [(20160905 1641) ((flycheck (0 24)) (emacs (24 4))) "Integrate cstyle with flycheck" single]) (flycheck-css-colorguard . [(20161031 422) ((flycheck (0 22)) (emacs (24))) "Detect similar colors in CSS" single]) (flycheck-crystal . [(20180626 1942) ((flycheck (30))) "Add support for Crystal to Flycheck" single]) (flycheck-credo . [(20170526 845) ((flycheck (29))) "flycheck checker for elixir credo" single]) (flycheck-coverity . [(20170703 1759) ((flycheck (0 24)) (dash (2 12 0)) (emacs (24 4))) "Integrate Coverity with flycheck" single]) (flycheck-color-mode-line . [(20171121 2307) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single]) (flycheck-clojure . [(20170221 1354) ((cider (0 8 1)) (flycheck (0 22 -4 1)) (let-alist (1 0 1)) (emacs (24))) "Flycheck: Clojure support" single]) (flycheck-clangcheck . [(20150712 10) ((cl-lib (0 5)) (seq (1 7)) (flycheck (0 17))) "A Flycheck checker difinition for ClangCheck." single]) (flycheck-clang-tidy . [(20171024 108) ((flycheck (0 30))) "Flycheck syntax checker using clang-tidy" single]) (flycheck-clang-analyzer . [(20180225 2039) ((flycheck (0 24)) (emacs (24 4))) "Integrate Clang Analyzer with flycheck" single]) (flycheck-checkpatch . [(20170217 225) ((emacs (25)) (flycheck (30))) "Flycheck support for checkpatch.pl tool" single]) (flycheck-checkbashisms . [(20160224 906) ((emacs (24)) (flycheck (0 25))) "checkbashisms checker for flycheck" single]) (flycheck-cask . [(20160928 226) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" single]) (flycheck-bashate . [(20160629 2140) ((flycheck (0 24)) (emacs (24 4))) "Integrate bashate with flycheck" single]) (flycheck-ats2 . [(20170225 836) ((emacs (24 1)) (flycheck (0 22))) "Flycheck: ATS2 support" single]) (flycheck-apertium . [(20160406 618) ((flycheck (0 25))) "Apertium checkers in flycheck" tar]) (flycheck . [(20180614 1235) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "On-the-fly syntax checking" tar]) (flx-isearch . [(20180102 2114) ((emacs (24)) (flx (20140821)) (cl-lib (0 5))) "Fuzzy incremental searching for emacs" single]) (flx-ido . [(20180117 719) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single]) (flx . [(20151030 1112) ((cl-lib (0 3))) "fuzzy matching with good sorting" single]) (fluxus-mode . [(20170210 1141) ((osc (0 1)) (emacs (24 4))) "Major mode for interfacing with Fluxus" single]) (flower . [(20180618 1222) ((emacs (24 4)) (clomacs (0 0 3))) "Emacs task tracker client." tar]) (flow-minor-mode . [(20180315 1124) ((emacs (25 1))) "Flow type mode based on web-mode." single]) (floobits . [(20170802 1500) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar]) (fliptext . [(20171124 1256) nil "Input method for flipping characters upside down" single]) (flimenu . [(20170417 1847) ((dash (2 10 0)) (emacs (24 4))) "Flatten imenu automatically" single]) (flim . [(20180328 1624) ((apel (10 8))) "A library to provide basic features about message representation or encoding." tar]) (flex-isearch . [(20170308 1210) nil "Flex matching (like ido) in isearch." single]) (flex-compile . [(20180528 853) ((emacs (25)) (buffer-manage (0 6)) (dash (2 13 0))) "Run, evaluate and compile for a many languages and modes." tar]) (flex-autopair . [(20120809 518) nil "Automatically insert pair braces and quotes, insertion conditions & actions are highly customizable." single]) (flatui-theme . [(20160618 1827) nil "A color theme for Emacs based on flatuicolors.com" single]) (flatui-dark-theme . [(20170513 722) ((emacs (24))) "Dark color theme with colors from https://flatuicolors.com/" single]) (flatland-theme . [(20171113 721) nil "A simple theme for Emacs based on the Flatland theme for Sublime Text" single]) (flatland-black-theme . [(20170808 612) ((emacs (24 0))) "an Emacs 24 theme based on Flatland Black (tmTheme)" single]) (flash-region . [(20130923 1117) nil "Flash a region" single]) (flappymacs . [(20171023 304) nil "flappybird clone for emacs" single]) (flame . [(20180303 1216) ((emacs (24))) "automatic generation of flamage, as if we needed more." single]) (fixmee . [(20150223 555) ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) "Quickly navigate to FIXME notices in code" single]) (fix-word . [(20171231 2215) ((emacs (24 1)) (cl-lib (0 5))) "Convenient word transformation" single]) (fix-muscle-memory . [(20160822 2139) nil "Simple hacks to fix muscle memory problems" single]) (fix-input . [(20171231 2220) ((emacs (24 4))) "Make input methods play nicely with alternative keyboard layout on OS level" single]) (fish-mode . [(20180306 818) ((emacs (24))) "Major mode for fish shell scripts" single]) (fish-completion . [(20180616 1223) nil "Add fish completion to pcomplete (shell and Eshell)" single]) (firrtl-mode . [(20180221 1555) ((emacs (24 3))) "mode for working with FIRRTL files" single]) (firestarter . [(20161219 523) nil "Execute (shell) commands on save" single]) (fireplace . [(20160811 519) nil "A cozy fireplace for emacs" single]) (firefox-controller . [(20160320 1147) ((moz (0)) (popwin (1 0 0)) (cl-lib (0 5))) "An improved Firefox controller" single]) (firecode-theme . [(20170808 611) ((emacs (24 0))) "an Emacs 24 theme based on FireCode (tmTheme)" single]) (fiplr . [(20140723 2345) ((grizzl (0 1 0)) (cl-lib (0 1))) "Fuzzy Search for Files in Projects" tar]) (fingers . [(20160817 129) nil "Modal editing with universal text manipulation helpers." tar]) (findr . [(20130127 1232) nil "Breadth-first file-finding facility for (X)Emacs" single]) (find-things-fast . [(20150519 1526) nil "Find things fast, leveraging the power of git" single]) (find-temp-file . [(20170107 539) nil "Open quickly a temporary file" single]) (find-file-in-repository . [(20151113 519) nil "Quickly find files in a git, mercurial or other repository" single]) (find-file-in-project . [(20180705 1832) ((ivy (0 10 0)) (emacs (24 3))) "Find file/directory and review Diff/Patch/Commit efficiently everywhere" single]) (find-by-pinyin-dired . [(20180209 1818) ((pinyinlib (0 1 0))) "Find file by first PinYin character of Chinese Hanzi" single]) (finalize . [(20170418 1245) ((emacs (24 1)) (cl-generic (0 3)) (cl-lib (0 3)) (eieio (1 4))) "finalizers for Emacs Lisp" tar]) (fillcode . [(20171029 925) nil "Fill (wrap) function calls and expressions in source code" single]) (fill-function-arguments . [(20180427 1002) ((emacs (24 4))) "Convert function arguments to/from single line" single]) (fill-column-indicator . [(20171209 1124) nil "Graphically indicate the fill column" single]) (filelock . [(20180524 1515) ((emacs (24)) (cl-lib (0)) (f (0))) "Functions for manipulating file locks" single]) (figlet . [(20160218 1437) nil "Annoy people with big, ascii art text" single]) (fifo-class . [(20160424 2258) nil "First in first out abstract class" single]) (fic-mode . [(20180603 1335) nil "Show FIXME/TODO/BUG(...) in special face only in comments and strings" single]) (fetch . [(20131130 2330) nil "Fetch and unpack resources" single]) (fennel-mode . [(20180509 1852) nil "a major-mode for editing Fennel code" single]) (feebleline . [(20180604 515) nil "Replace modeline with a slimmer proxy" single]) (feature-mode . [(20170907 748) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar]) (fcopy . [(20150304 603) nil "Funny Copy, set past point HERE then search copy text" single]) (fcitx . [(20170913 1900) nil "Make fcitx better in Emacs" single]) (faustine . [(20171122 402) ((emacs (24 3)) (faust-mode (0 3))) "Edit, visualize, build and run Faust code" single]) (faust-mode . [(20180205 126) nil "Faust syntax colorizer for Emacs." single]) (fastnav . [(20120211 657) nil "Fast navigation and editing routines." single]) (fastdef . [(20160713 629) ((ivy (0 7 0)) (w3m (0 0))) "Insert terminology from Google top search results" single]) (fasd . [(20180605 2205) nil "Emacs integration for the command-line productivity booster `fasd'" single]) (farmhouse-theme . [(20160713 1544) nil "Farmhouse Theme, Emacs edition" tar]) (fancy-narrow . [(20171030 1716) nil "narrow-to-region with more eye candy." single]) (fancy-battery . [(20150101 404) ((emacs (24 1))) "Fancy battery display" single]) (fakir . [(20140729 952) ((noflet (0 0 8)) (dash (1 3 2)) (kv (0 0 19))) "fakeing bits of Emacs" single]) (fakespace . [(20120817 1706) nil "fake namespaces with defpackage" single]) (faff-theme . [(20180702 1023) nil "Light Emacs color theme on ivory3 background" single]) (factlog . [(20130209 1740) ((deferred (0 3 1))) "File activity logger" single]) (faceup . [(20170925 1246) nil "Markup language for faces and font-lock regression testing" single]) (face-explorer . [(20170710 1201) nil "Library and tools for faces and text properties" single]) (fabric . [(20171115 2256) nil "Launch Fabric using Emacs" tar]) (f3 . [(20180130 358) ((emacs (24 3)) (helm (2 8 8)) (cl-lib (0 5))) "a helm interface to find" tar]) (f . [(20180106 122) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single]) (eziam-theme . [(20180414 329) nil "A mostly monochrome theme, inspired by Tao and Leuven, with dark and light versions." tar]) (ez-query-replace . [(20170814 621) ((dash (1 2 0)) (s (1 11 0))) "a smarter context-sensitive query-replace that can be reapplied" single]) (eyuml . [(20141028 1527) ((request (0 2 0)) (s (1 8 0))) "Write textual uml diagram from emacs using yuml.me" single]) (eyebrowse . [(20180514 1219) ((dash (2 7 0)) (emacs (24 3 1))) "Easy window config switching" single]) (exwm-x . [(20180227 257) ((cl-lib (0 5)) (exwm (0 17)) (switch-window (0 10)) (swiper (0 9 0)) (bind-key (1 0)) (counsel (0 9 0)) (ivy (0 9 0))) "A derivative wm based on EXWM (emacs x window manager)" tar]) (exwm-surf . [(20171204 340) ((emacs (24 4)) (exwm (0 16))) "Interface for Surf (surf.suckless.org) under exwm" single]) (exwm-edit . [(20180629 137) ((emacs (24 4))) "Edit mode for EXWM" single]) (extmap . [(20180205 1047) ((emacs (24 1))) "Externally-stored constant mapping for Elisp" single]) (extend-dnd . [(20151122 1050) nil "R drag and Drop" tar]) (extempore-mode . [(20180104 2221) ((emacs (24 4))) "Emacs major mode for Extempore source files" single]) (exsqlaim-mode . [(20170607 303) ((s (1 10 0))) "Use variables inside sql queries" single]) (express . [(20140508 1341) ((string-utils (0 3 2))) "Alternatives to `message'" single]) (expand-region . [(20180625 939) nil "Increase selected region by semantic units." tar]) (expand-line . [(20151005 1907) nil "Expand selection by line" single]) (exotica-theme . [(20180212 1529) ((emacs (24))) "A dark theme with vibrant colors" single]) (exiftool . [(20170822 1432) ((emacs (25))) "Elisp wrapper around ExifTool" single]) (exec-path-from-shell . [(20180323 1904) nil "Get environment variables such as $PATH from the shell" single]) (exato . [(20180305 242) ((evil (1 2 13)) (emacs (24))) "EXATO: Evil XML/HTML Attributes Text Object" single]) (eww-lnum . [(20150102 712) nil "Conkeror-like functionality for eww" single]) (ewmctrl . [(20170921 1917) nil "Use `wmctrl' to manage desktop windows via EWMH/NetWM." single]) (evm . [(20141007 456) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single]) (evil-visualstar . [(20160222 1648) ((evil (0))) "Starts a * or # search from the visual selection" single]) (evil-visual-replace . [(20171015 2313) ((evil (1 0 0))) "search/replace commands for evil visual state, inc. blocks" single]) (evil-visual-mark-mode . [(20150202 1000) ((evil (1 0 9)) (dash (2 10))) "Display evil marks on buffer" single]) (evil-vimish-fold . [(20171030 451) ((emacs (24 4)) (evil (1 0 0)) (vimish-fold (0 2 0))) "Integrate vimish-fold with evil" single]) (evil-tutor-ja . [(20160916 1832) ((evil (1 0 9)) (evil-tutor (0 1))) "Japanese Vimtutor adapted to Evil and wrapped in a major-mode" tar]) (evil-tutor . [(20150102 2250) ((evil (1 0 9))) "Vimtutor adapted to Evil and wrapped in a major-mode" tar]) (evil-textobj-column . [(20170905 1205) ((names (0 5)) (emacs (24)) (evil (0))) "Provides column text objects." single]) (evil-textobj-anyblock . [(20170905 1207) ((cl-lib (0 5)) (evil (1 1 0))) "Textobject for the closest user-defined blocks." single]) (evil-text-object-python . [(20160815 141) ((emacs (24)) (evil (1 2 12))) "Python specific evil text objects" single]) (evil-test-helpers . [(20180109 1040) ((evil (1 2 13))) "unit test helpers for Evil" single]) (evil-terminal-cursor-changer . [(20170401 142) ((evil (1 0 8))) "Change cursor shape and color by evil state in terminal" single]) (evil-tabs . [(20160217 720) ((evil (0 0 0)) (elscreen (0 0 0))) "Integrating Vim-style tabs for Evil mode users." single]) (evil-swap-keys . [(20170726 1120) ((emacs (24))) "intelligently swap keys on text input with evil" single]) (evil-surround . [(20180102 601) ((evil (1 2 12))) "emulate surround.vim from Vim" single]) (evil-string-inflection . [(20180313 1055) ((emacs (24)) (evil (1 2 13)) (string-inflection (1 0 6))) "snake_case -> CamelCase -> etc. for text objects" single]) (evil-space . [(20151208 428) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single]) (evil-snipe . [(20180503 141) ((emacs (24 4)) (evil (1 2 12)) (cl-lib (0 5))) "emulate vim-sneak & vim-seek" single]) (evil-smartparens . [(20171210 713) ((evil (1 0)) (emacs (24 4)) (smartparens (1 10 1))) "Evil support for smartparens" single]) (evil-search-highlight-persist . [(20170522 2034) ((highlight (0))) "Persistent highlights after search" single]) (evil-rsi . [(20160221 1304) ((evil (1 0 0))) "Use emacs motion keys in evil, inspired by vim-rsi" single]) (evil-replace-with-register . [(20170713 225) ((evil (1 0 8))) "Port of vim plugin ReplaceWithRegister" single]) (evil-replace-with-char . [(20180324 1506) ((evil (1 2 13)) (emacs (24))) "replace chars of a text object with a char" single]) (evil-rails . [(20160621 1558) ((evil (1 0)) (projectile-rails (1 0))) "Rails support for Evil Mode" single]) (evil-quickscope . [(20160202 1124) ((evil (0))) "Highlight unique characters in words for f,F,t,T navigation" single]) (evil-paredit . [(20150413 1348) ((evil (1 0 9)) (paredit (25 -2))) "Paredit support for evil keybindings" single]) (evil-org . [(20180323 1606) ((emacs (24 4)) (evil (1 0))) "evil keybindings for org-mode" tar]) (evil-opener . [(20161207 1010) ((evil (1 2 12)) (opener (0 2 2))) "opening urls as buffers in evil" tar]) (evil-numbers . [(20140606 551) nil "increment/decrement numbers like in vim" single]) (evil-nerd-commenter . [(20180411 640) ((emacs (24 4))) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar]) (evil-multiedit . [(20180209 1819) ((emacs (24 4)) (evil (1 2 12)) (iedit (0 97)) (cl-lib (0 5))) "multiple cursors for evil-mode" single]) (evil-mu4e . [(20180613 339) ((emacs (24 4)) (evil (1 2 10))) "evil-based key bindings for mu4e" single]) (evil-mc-extras . [(20170202 849) ((emacs (24 3)) (evil (1 2 12)) (cl-lib (0 5)) (evil-mc (0 0 2)) (evil-numbers (0 4))) "Extra functionality for evil-mc" tar]) (evil-mc . [(20180603 2033) ((emacs (24 3)) (evil (1 2 12)) (cl-lib (0 5))) "Multiple cursors for evil-mode" tar]) (evil-matchit . [(20180526 557) ((evil (1 0 7))) "Vim matchit ported to Evil" tar]) (evil-mark-replace . [(20150424 18) ((evil (1 0 8))) "replace the thing in marked area" single]) (evil-magit . [(20180702 853) ((evil (1 2 3)) (magit (2 6 0))) "evil-based key bindings for magit" single]) (evil-lispy . [(20170304 259) ((lispy (0 26 0)) (evil (1 2 12)) (hydra (0 13 5))) "precision Lisp editing with Evil and Lispy" tar]) (evil-lisp-state . [(20160403 1948) ((evil (1 0 9)) (bind-map (0)) (smartparens (1 6 1))) "An evil state to edit Lisp code" single]) (evil-lion . [(20170810 2314) ((emacs (24 3)) (evil (1 0 0))) "Evil align operator, port of vim-lion" single]) (evil-ledger . [(20170905 519) ((emacs (24 4)) (evil (1 2 12))) "Make `ledger-mode' more `evil'." single]) (evil-leader . [(20140606 543) ((evil (0))) "let there be <leader>" single]) (evil-indent-textobject . [(20130831 1519) ((evil (0))) "evil textobjects based on indentation" single]) (evil-indent-plus . [(20151109 1106) ((evil (0)) (cl-lib (0 5))) "Evil textobjects based on indentation" single]) (evil-iedit-state . [(20180606 2258) ((evil (1 0 9)) (iedit (0 97))) "Evil states to interface iedit mode." single]) (evil-goggles . [(20180702 353) ((emacs (24 4)) (evil (1 0 0))) "Add a visual hint to evil operations" single]) (evil-god-state . [(20141116 1855) ((evil (1 0 8)) (god-mode (2 12 0))) "use god-mode keybindings in evil-mode" single]) (evil-fringe-mark . [(20180619 1534) ((emacs (24 3)) (evil (1 0 0)) (fringe-helper (0 1 1)) (goto-chg (1 6))) "Display evil-mode marks in the fringe" tar]) (evil-find-char-pinyin . [(20160514 1341) ((evil (1 2 12)) (pinyinlib (0 1 0))) "Evil's f/F/t/T/evil-snipe commands with Pinyin support" single]) (evil-extra-operator . [(20161212 2003) ((evil (1 0 7))) "Evil operator for evaluating codes, taking notes, searching via google, etc." single]) (evil-expat . [(20180717 336) ((emacs (24 3)) (evil (1 0 0))) "Evil ex commands" single]) (evil-exchange . [(20170510 1959) ((evil (1 2 8)) (cl-lib (0 3))) "Exchange text more easily within Evil" single]) (evil-escape . [(20180623 2019) ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) "Escape from anything with a customizable key sequence" single]) (evil-embrace . [(20160519 1129) ((emacs (24 4)) (embrace (0 1 0)) (evil-surround (0))) "Evil integration of embrace.el" single]) (evil-ediff . [(20170724 1223) ((evil (1 2 3))) "Make ediff a little evil" single]) (evil-easymotion . [(20180113 2254) ((emacs (24)) (avy (0 3 0)) (cl-lib (0 5))) "A port of vim's easymotion to emacs" single]) (evil-dvorak . [(20160416 1141) ((evil (1 0 8))) "evil keybindings for that work with dvorak mode" tar]) (evil-commentary . [(20170413 751) ((evil (1 0 0))) "Comment stuff out. A port of vim-commentary." tar]) (evil-collection . [(20180718 113) ((emacs (25 1)) (cl-lib (0 5)) (evil (1 2 13))) "A set of keybindings for Evil mode" tar]) (evil-colemak-minimal . [(20171006 617) ((emacs (24)) (evil (1 2 12))) "Minimal Colemak key bindings for evil-mode" single]) (evil-colemak-basics . [(20170425 509) ((emacs (24)) (evil (1 2 12)) (evil-snipe (2 0 3))) "Basic Colemak key bindings for evil-mode" single]) (evil-cleverparens . [(20170717 2113) ((evil (1 0)) (paredit (1)) (smartparens (1 6 1)) (emacs (24 4)) (dash (2 12 0))) "Evil friendly minor-mode for editing lisp." tar]) (evil-avy . [(20150908 48) ((emacs (24 1)) (cl-lib (0 5)) (avy (0 3 0)) (evil (1 2 3))) "set-based completion" single]) (evil-args . [(20140329 1429) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single]) (evil-anzu . [(20170123 2318) ((evil (1 0 0)) (anzu (0 46))) "anzu for evil-mode" single]) (evil . [(20180517 1300) ((emacs (24 1)) (undo-tree (0 6 3)) (goto-chg (1 6)) (cl-lib (0 5))) "Extensible Vi layer for Emacs." tar]) (eve-mode . [(20170822 1531) ((emacs (25)) (polymode (1 0)) (markdown-mode (2 0))) "Major mode for editing Eve documents." single]) (evalator-clojure . [(20160208 1348) ((cider (0 10 0)) (evalator (1 0 0))) "Clojure evaluation context for evalator via CIDER." tar]) (evalator . [(20160212 1728) ((helm-core (1 9 1))) "Package for interactive transformation of data with helm" tar]) (eval-sexp-fu . [(20180509 1903) ((cl-lib (0)) (highlight (0))) "Tiny functionality enhancements for evaluating sexps." single]) (eval-in-repl . [(20171122 543) ((dash (0 0 0)) (paredit (0 0 0)) (ace-window (0 0 0))) "Consistent ESS-like eval interface for various REPLs" tar]) (eval-expr . [(20120618 2347) nil "enhanced eval-expression command" single]) (euslisp-mode . [(20170830 1229) ((emacs (24 3)) (s (1 9)) (exec-path-from-shell (0)) (helm-ag (0 58))) "Major mode for Euslisp-formatted text" single]) (ethan-wspace . [(20170507 1330) nil "whitespace customizations for emacs" single]) (eterm-256color . [(20180520 523) ((emacs (24 4)) (xterm-color (1 7)) (f (0 19 0))) "Customizable 256 colors for term." tar]) (etable . [(20161028 1309) ((dash (2 9 0)) (interval-list (0 1)) (emacs (24 4))) "Implementation of javax.swing.JTable for Emacs." tar]) (esxml . [(20171129 7) nil "Library for working with xml via esxml and sxml" tar]) (esup . [(20180506 1639) ((cl-lib (0 5)) (emacs (24))) "the Emacs StartUp Profiler (ESUP)" tar]) (ess-view . [(20180525 1503) ((ess (15)) (s (1 8 0)) (f (0 16 0))) "View R dataframes in a spreadsheet software" single]) (ess-smart-underscore . [(20170222 1715) ((ess (0))) "Ess Smart Underscore" tar]) (ess-smart-equals . [(20150201 2201) ((emacs (24)) (ess (5 0))) "better smart-assignment with =-key in R and S" single]) (ess-R-data-view . [(20130509 458) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single]) (ess . [(20180718 650) nil "Emacs Speaks Statistics" tar]) (esqlite-helm . [(20151116 50) ((esqlite (0 2 0)) (helm (20131207 845))) "Define helm source for sqlite database" single]) (esqlite . [(20151206 406) ((pcsv (1 3 3))) "Manipulate sqlite file from Emacs" single]) (espuds . [(20160905 600) ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) "Ecukes step definitions" single]) (espresso-theme . [(20170716 813) nil "Espresso Tutti Colori port for Emacs" single]) (eslintd-fix . [(20180429 755) ((dash (2 12 0)) (emacs (24 3))) "use eslint_d to automatically fix js files" single]) (eslint-fix . [(20180514 0) nil "Fix JavaScript files using ESLint" single]) (eshell-z . [(20170116 2038) ((cl-lib (0 5))) "cd to frequent directory in eshell" single]) (eshell-up . [(20170425 1037) ((emacs (24))) "Quickly go to a specific parent directory in eshell" single]) (eshell-prompt-extras . [(20180109 2234) nil "Display extra information for your eshell prompt." single]) (eshell-git-prompt . [(20170909 752) ((emacs (24 1)) (cl-lib (0 5)) (dash (2 11 0))) "Some Eshell prompt for Git users" single]) (eshell-fringe-status . [(20170117 1516) nil "Show last status in fringe" single]) (eshell-fixed-prompt . [(20170804 635) ((emacs (25)) (s (1 11 0))) "Restrict eshell to a single fixed prompt" single]) (eshell-did-you-mean . [(20150915 1252) ((emacs (24 1)) (cl-lib (0 5))) "command not found (\"did you mean…\" feature) in Eshell" single]) (eshell-bookmark . [(20170922 814) ((emacs (24 3))) "Integrate bookmarks with eshell." single]) (eshell-autojump . [(20150927 24) nil "autojump command for Eshell" single]) (esh-help . [(20170829 2111) ((dash (1 4 0))) "Add some help functions and support for Eshell" single]) (esh-buf-stack . [(20140107 218) nil "Add a buffer stack feature to Eshell" single]) (esh-autosuggest . [(20171223 1855) ((emacs (24 4)) (company (0 9 4))) "History autosuggestions for eshell" single]) (esa . [(20180403 825) ((cl-lib (0 5))) "Interface to esa.io" single]) (es-windows . [(20140211 104) ((cl-lib (0 3)) (emacs (24))) "Window-management utilities" single]) (es-mode . [(20180212 1425) ((dash (2 11 0)) (cl-lib (0 5)) (spark (1 0)) (s (1 11 0)) (request (0 3 0))) "A major mode for editing and executing Elasticsearch queries" tar]) (es-lib . [(20141111 1030) ((cl-lib (0 3))) "A collection of emacs utilities" tar]) (ert-runner . [(20180215 857) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar]) (ert-modeline . [(20140115 215) ((s (1 3 1)) (dash (1 2 0)) (emacs (24 1)) (projectile (0 9 1))) "displays ert test results in the modeline." single]) (ert-junit . [(20180511 1548) ((ert (0))) "JUnit XML reports from ert results" single]) (ert-expectations . [(20121009 34) nil "The simplest unit test framework in the world" single]) (ert-async . [(20151011 659) nil "Async support for ERT" single]) (eros . [(20180414 2318) ((emacs (24 4))) "Evaluation Result OverlayS for Emacs Lisp" single]) (erlang . [(20180618 557) ((emacs (24 1))) "Erlang major mode" tar]) (ergoemacs-status . [(20160317 2238) ((powerline (2 3)) (mode-icons (0 1 0))) "Adaptive Status Bar / Mode Line" single]) (ergoemacs-mode . [(20180709 645) ((emacs (24 1)) (undo-tree (0 6 5)) (cl-lib (0 5))) "Emacs mode based on common modern interface and ergonomics." tar]) (erefactor . [(20160121 159) ((cl-lib (0 3))) "Emacs-Lisp refactoring utilities" single]) (eredis . [(20180221 1313) nil "eredis, a Redis client in emacs lisp" single]) (ereader . [(20170809 2201) ((emacs (24 4)) (dash (2 12 1)) (s (1 10 0)) (xml+ (0 0 0))) "Major mode for reading ebooks with org-mode integration" tar]) (ercn . [(20150523 803) nil "Flexible ERC notifications" single]) (erc-yt . [(20150426 549) ((dash (2 10 0))) "An erc module to display youtube links nicely" single]) (erc-youtube . [(20150603 1436) nil "Show info about a YouTube URL in an ERC buffer." single]) (erc-view-log . [(20140227 1239) nil "Major mode for viewing ERC logs" single]) (erc-twitch . [(20170426 2306) ((json (1 3)) (erc (5 0))) "Support for Twitch emotes for ERC." single]) (erc-tweet . [(20150920 558) nil "shows text of a tweet when an url is posted in erc buffers" single]) (erc-track-score . [(20130328 515) nil "Add score support to tracked channel buffers" single]) (erc-terminal-notifier . [(20140115 224) nil "OSX notifications via the terminal-notifier gem for Emacs ERC." single]) (erc-status-sidebar . [(20171223 1324) ((emacs (24 5)) (seq (2 3))) "a hexchat-like activity overview for ERC channels" single]) (erc-social-graph . [(20150508 504) nil "A social network graph module for ERC." single]) (erc-scrolltoplace . [(20180607 2306) ((emacs (24 0)) (switch-buffer-functions (0 0 1))) "An Erc module to scrolltobottom better with keep-place" single]) (erc-image . [(20180522 724) nil "Show received image urls in the ERC buffer" single]) (erc-hl-nicks . [(20180415 1246) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single]) (erc-hipchatify . [(20170314 937) ((emacs (24 4)) (s (1 10 0)) (alert (1 2)) (request (0 2 0))) "Provide emoticons and html rendering for HipChat" single]) (erc-crypt . [(20161228 739) ((cl-lib (0 5))) "Symmetric Encryption for ERC" single]) (erc-colorize . [(20170107 539) nil "Per user colorization of whole message" single]) (eproject . [(20180312 942) ((helm (1 6 4))) "assign files to projects, programatically" tar]) (eprime-mode . [(20140513 1116) nil "An E-prime checking mode for Emacs" single]) (epresent . [(20160410 1901) ((org (8)) (cl-lib (0 5))) "Simple presentation mode for Emacs Org-mode" single]) (epm . [(20161027 34) ((emacs (24 3)) (epl (0 8))) "Emacs Package Manager" tar]) (epl . [(20180205 1249) ((cl-lib (0 3))) "Emacs Package Library" single]) (epkg . [(20180627 1353) ((closql (0 4 0)) (dash (2 13 0)) (emacs (25 1))) "browse the Emacsmirror package database" tar]) (epic . [(20170209 1623) ((htmlize (1 47))) "Evernote Picker for Cocoa Emacs" single]) (epc . [(20140609 2234) ((concurrent (0 3 1)) (ctable (0 1 2))) "A RPC stack for the Emacs Lisp" tar]) (eopengrok . [(20160903 2359) ((s (1 9 0)) (dash (2 10 0)) (magit (2 1 0)) (cl-lib (0 5))) "opengrok interface for emacs" single]) (envdir . [(20160221 1123) ((emacs (24)) (dash (2 10 0)) (f (0 17 2))) "Modify environment according to files in a specified directory" single]) (ensime . [(20180615 630) ((scala-mode (0 23)) (sbt-mode (0 2)) (yasnippet (0 10 0)) (company (0 9 0)) (dash (2 12 1)) (s (1 11 0)) (popup (0 5 3))) "ENhanced Scala Interaction Mode for Emacs" tar]) (enotify . [(20130407 648) nil "A networked notification system for emacs" tar]) (eno . [(20160110 234) ((dash (2 12 1)) (edit-at-point (1 0))) "Goto/copy/cut any word/symbol/line in view, similar to ace-jump/easymotion" single]) (enlive . [(20170725 717) nil "query html document with css selectors" single]) (enh-ruby-mode . [(20180403 1251) ((emacs (24))) "Major mode for editing Ruby files" tar]) (engine-mode . [(20180401 946) ((cl-lib (0 5))) "Define and query search engines from within Emacs." single]) (encourage-mode . [(20151128 105) ((emacs (24 4))) "Encourages you in your work. :D" single]) (enclose . [(20121008 914) nil "Enclose cursor within punctuation pairs." tar]) (emr . [(20180708 1011) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1)) (clang-format (0)) (iedit (0 97))) "Emacs refactoring system." tar]) (empos . [(20151011 1216) nil "Locate bibtex citations from within emacs" single]) (emojify-logos . [(20171125 214) ((emojify (0 4))) "Add logos to emojify" tar]) (emojify . [(20180611 838) ((seq (1 11)) (ht (2 0)) (emacs (24 3))) "Display emojis in Emacs" tar]) (emoji-recall . [(20160723 1508) ((emacs (24))) "How many emoji can you recall from memory?" tar]) (emoji-fontset . [(20160726 1224) nil "Set font face for Emoji." single]) (emoji-display . [(20140117 213) nil "emoji displaying module" single]) (emoji-cheat-sheet-plus . [(20150617 631) ((emacs (24)) (helm (1 6 4))) "emoji-cheat-sheet for emacs" tar]) (emms-state . [(20160504 105) ((emms (0))) "Display track description and playing time in the mode line" single]) (emms-soundcloud . [(20131221 345) ((emms (20131016)) (json (1 2))) "EMMS source for Soundcloud audio sharing platform" single]) (emms-player-simple-mpv . [(20180316 849) ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) "An extension of emms-player-simple.el for mpv JSON IPC" tar]) (emms-player-mpv-jp-radios . [(20180325 417) ((emacs (24)) (cl-lib (0 5)) (emms (4 0)) (emms-player-simple-mpv (0 1 7))) "EMMS players and stream lists of Japan radio stations" tar]) (emms-player-mpv . [(20180503 1427) ((emms (0))) "mpv support for EMMS" single]) (emms-mode-line-cycle . [(20160221 320) ((emacs (24)) (emms (4 0))) "Display the emms mode line as a ticker" single]) (emms-mark-ext . [(20130528 2027) ((emms (3 0))) "Extra functions for emms-mark-mode and emms-tag-edit-mode" single]) (emms-info-mediainfo . [(20131223 500) ((emms (0))) "Info-method for EMMS using medianfo" single]) (emms-bilibili . [(20180102 2018) ((emacs (25)) (cl-lib (0 5))) "Play Bilibili in EMMS." single]) (emms . [(20180708 1823) ((cl-lib (0 5))) "The Emacs Multimedia System" tar]) (emmet-mode . [(20180612 2041) nil "Unofficial Emmet's support for emacs" single]) (emlib . [(20161126 723) ((dash (2 13 0)) (cl-lib (0 5))) "A Machine Learning library for Emacs" tar]) (embrace . [(20171031 1133) ((cl-lib (0 5)) (expand-region (0 10 0))) "Add/Change/Delete pairs based on `expand-region'" single]) (ember-yasnippets . [(20160526 958) ((yasnippet (0 8 0))) "Snippets for Ember.js development" tar]) (ember-mode . [(20171208 559) ((cl-lib (0 5))) "Ember navigation mode for emacs" single]) (emaps . [(20180712 1216) nil "utilities for working with keymaps." single]) (emamux-ruby-test . [(20130812 939) ((emamux (0 1)) (projectile (0 9 1))) "Ruby test with emamux" single]) (emamux . [(20170226 1937) ((emacs (24 3))) "Interact with tmux" single]) (emacsshot . [(20161018 743) nil "Snapshot a frame or window from within Emacs" tar]) (emacsql-sqlite . [(20180128 1252) ((emacs (25 1)) (emacsql (2 0 0))) "EmacSQL back-end for SQLite" tar]) (emacsql-psql . [(20171218 1827) ((emacs (25 1)) (emacsql (2 0 0))) "EmacSQL back-end for PostgreSQL via psql" tar]) (emacsql-mysql . [(20171218 1827) ((emacs (25 1)) (emacsql (2 0 0))) "EmacSQL back-end for MySQL" single]) (emacsql . [(20180712 1052) ((emacs (25 1))) "high-level SQL database front-end" tar]) (emacsist-view . [(20160426 523) nil "Mode for viewing emacsist.com" single]) (emacsc . [(20161028 1006) nil "helper for emacsc(1)" tar]) (emacsagist . [(20140331 1130) ((cl-lib (0 5))) "Search Packagist.org packages without leaving Emacs" single]) (emacs-setup . [(20120727 726) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar]) (elx . [(20180614 1957) ((emacs (26))) "extract information from Emacs Lisp libraries" single]) (elwm . [(20150817 307) ((dash (1 1 0))) "Minimalistic window manager for emacs" single]) (elvish-mode . [(20170913 1939) ((emacs (24 3))) "Defines a major mode for Elvish" single]) (elscreen-separate-buffer-list . [(20161106 1958) ((emacs (24 4)) (elscreen (1 4 6))) "Separate buffer list manager for elscreen" single]) (elscreen-multi-term . [(20151021 1933) ((emacs (24 4)) (elscreen (1 4 6)) (multi-term (1 3))) "Multi term for elscreen" single]) (elscreen-mew . [(20160504 1135) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single]) (elscreen-fr . [(20160920 253) ((elscreen (0)) (seq (1 11))) "Use frame title as screen tab" single]) (elscreen-buffer-group . [(20170808 1825) ((emacs (24 4)) (elscreen (0)) (cl-lib (0 5))) "elscreen buffer group" single]) (elscreen . [(20180320 1902) ((emacs (24))) "Emacs window session manager" tar]) (elquery . [(20180513 1912) ((emacs (25 1)) (s (1 11 0)) (dash (2 13 0))) "The HTML library for elisp." single]) (elpygen . [(20171225 936) ((emacs (25)) (yasnippet (0 8 0))) "Generate a Python function/method using a symbol under point" single]) (elpy . [(20180707 1413) ((company (0 9 2)) (emacs (24 4)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0)) (s (1 11 0))) "Emacs Python Development Environment" tar]) (elpa-mirror . [(20180228 1636) ((emacs (24 4))) "Create local package repository so package upgrade never breaks" single]) (elpa-clone . [(20170502 514) ((emacs (24 4)) (cl-lib (0))) "Clone ELPA archive" single]) (elpa-audit . [(20141023 631) nil "Handy functions for inspecting and comparing package archives" single]) (eloud . [(20160731 857) ((emacs (24 4))) "A lightweight, interactive screen reader" single]) (elogcat . [(20151120 1641) ((s (1 9 0)) (dash (2 10 0))) "logcat interface" single]) (elog . [(20160724 1555) ((eieio (1 3))) "logging library extended from logito" single]) (elnode . [(20140203 1506) ((web (0 1 4)) (dash (1 1 0)) (noflet (0 0 7)) (s (1 5 0)) (creole (0 8 14)) (fakir (0 1 6)) (db (0 0 5)) (kv (0 0 17))) "The Emacs webserver." tar]) (elmine . [(20170511 20) ((s (1 10 0))) "Redmine API access via elisp." single]) (elmacro . [(20180628 711) ((s (1 11 0)) (dash (2 13 0))) "Convert keyboard macros to emacs lisp" single]) (elm-yasnippets . [(20160331 2224) ((yasnippet (0 8 0))) "Yasnippets for Elm" tar]) (elm-mode . [(20180114 9) ((f (0 17)) (let-alist (1 0 4)) (seq (2 2)) (s (1 7 0)) (emacs (24 4)) (dash (2 13 0))) "Major mode for Elm" tar]) (elixir-yasnippets . [(20150417 539) ((yasnippet (0 8 0))) "Yasnippets for Elixir" tar]) (elixir-mode . [(20180711 545) ((emacs (24)) (pkg-info (0 4))) "Major mode for editing Elixir files" tar]) (elisp-slime-nav . [(20160128 1109) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single]) (elisp-sandbox . [(20131116 1042) nil "Evaluate EmacsLisp expressions in a sandbox" single]) (elisp-refs . [(20180715 1602) ((dash (2 12 0)) (loop (1 2)) (s (1 11 0))) "find callers of elisp functions or macros" single]) (elisp-lint . [(20180224 1242) ((emacs (24))) "basic linting for Emacs Lisp" single]) (elisp-format . [(20160508 252) nil "Format elisp code" single]) (elisp-docstring-mode . [(20170304 815) nil "Major mode for editing elisp docstrings." single]) (elisp-depend . [(20161230 750) nil "Parse depend libraries of elisp file." single]) (elisp-def . [(20180410 224) ((dash (2 12 0)) (f (0 19 0)) (s (1 11 0)) (emacs (24 3))) "macro-aware go-to-definition for elisp" single]) (elhome . [(20161025 1342) ((initsplit (20120630))) "A framework for a \"home\" Emacs configuration" tar]) (elgrep . [(20180302 527) ((emacs (25 1))) "Searching files for regular expressions" single]) (elfeed-web . [(20180513 524) ((simple-httpd (1 4 3)) (elfeed (1 4 0)) (emacs (24 1))) "web interface to Elfeed" tar]) (elfeed-protocol . [(20180409 813) ((emacs (24 4)) (elfeed (2 1 1)) (cl-lib (0 5))) "Provide owncloud/ttrss protocols for elfeed" tar]) (elfeed-org . [(20180129 507) ((elfeed (1 1 1)) (org (8 2 7)) (dash (2 10 0)) (s (1 9 0)) (cl-lib (0 5))) "Configure elfeed with one or more org-mode files" single]) (elfeed-goodies . [(20171126 2251) ((popwin (1 0 0)) (powerline (2 2)) (elfeed (2 0 0)) (cl-lib (0 5)) (noflet (0 0 10)) (ace-jump-mode (2 0))) "Elfeed goodies" tar]) (elfeed . [(20180713 529) ((emacs (24 3))) "an Emacs Atom/RSS feed reader" tar]) (elf-mode . [(20161009 48) ((emacs (24 3))) "Show symbols in binaries" single]) (elein . [(20120120 316) nil "running leiningen commands from emacs" single]) (electric-spacing . [(20161209 1157) nil "Insert operators with surrounding spaces smartly" single]) (electric-operator . [(20180627 1012) ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) "Automatically add spaces around operators" tar]) (electric-case . [(20150417 412) nil "insert camelCase, snake_case words without \"Shift\"ing" single]) (eldoc-overlay . [(20171219 140) ((emacs (24 3)) (inline-docs (1 0 1)) (quick-peek (1 0))) "Display eldoc with contextual documentation overlay." single]) (eldoc-eval . [(20180607 457) nil "Enable eldoc support when minibuffer is in use." single]) (elcouch . [(20180529 57) ((emacs (25 1)) (json-mode (1 0 0)) (libelcouch (0 7 0))) "View and manipulate CouchDB databases" single]) (elcord . [(20180411 1207) ((emacs (25))) "Allows you to integrate Rich Presence from Discord" tar]) (elcontext . [(20180526 604) ((ht (2 3)) (hydra (0 14 0)) (emacs (24 3)) (f (0 20 0)) (osx-location (0 4)) (uuidgen (0 3))) "Create context specific actions" tar]) (elbank . [(20180316 643) ((emacs (25)) (seq (2 16))) "Personal finances reporting application" tar]) (el2org . [(20180311 855) ((emacs (25 1))) "Convert elisp file to org file" single]) (el2markdown . [(20170630 1158) nil "Convert commentary section of elisp files to markdown." single]) (el-x . [(20140111 1401) nil "main entry point for el-x package" tar]) (el-spy . [(20131226 1208) nil "Mocking framework for Emacs lisp. It also support spy, proxy." single]) (el-sprunge . [(20140106 1739) ((web-server (20140105 2246)) (htmlize (20130207 1202)) (emacs (24 3))) "Command line paste server with Emacs highlighting" tar]) (el-spice . [(20180128 921) nil "Extra spice for emacs lisp programming" tar]) (el-spec . [(20121018 4) nil "ruby's rspec like syntax test frame work" single]) (el-pocket . [(20170922 549) ((web (0 5 2)) (emacs (24))) "Read and write to Pocket (getpocket.com)" single]) (el-patch . [(20180712 1302) ((emacs (25))) "Future-proof your Elisp." single]) (el-mock . [(20170824 1254) nil "Tiny Mock and Stub framework in Emacs Lisp" single]) (el-init-viewer . [(20150303 28) ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) "Record viewer for el-init" single]) (el-init . [(20150728 220) ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) "A loader inspired by init-loader" single]) (el-get . [(20180610 1821) nil "Manage the external elisp bits and pieces you depend upon" tar]) (el-fly-indent-mode . [(20180421 1943) ((emacs (25))) "Indent Emacs Lisp on the fly" single]) (el-autoyas . [(20120918 617) nil "Automatically create Emacs-Lisp Yasnippets" tar]) (ejc-sql . [(20180701 1105) ((emacs (24 4)) (clomacs (0 0 3)) (dash (2 12 1)) (auto-complete (1 5 1)) (spinner (1 7 1)) (direx (1 0 0))) "Emacs SQL client uses Clojure JDBC." tar]) (eink-theme . [(20170717 807) nil "E Ink color theme" single]) (ein-mumamo . [(20150301 1628) ((ein (0 4))) "Multiple major mode support for Emacs IPython Notebook" single]) (ein . [(20180626 1257) ((websocket (1 7)) (auto-complete (1 4 0)) (request (0 3)) (deferred (0 5)) (request-deferred (0 2 0)) (cl-generic (0 3)) (dash (2 13 0)) (s (1 11 0)) (skewer-mode (1 6 2))) "Emacs IPython Notebook" tar]) (eimp . [(20120826 1339) nil "Emacs Image Manipulation Package" single]) (eide . [(20180626 1259) nil "IDE interface" tar]) (ego . [(20180228 1704) ((emacs (24 5)) (ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (simple-httpd (1 4 5))) "a static site generator based on org mode, forked from org-page." tar]) (eglot . [(20180711 1630) ((emacs (26 1)) (jsonrpc (1 0 0))) "Client for Language Server Protocol (LSP) servers" single]) (egison-mode . [(20160603 103) nil "Egison editing mode" single]) (egg . [(20180713 218) nil "Emacs Got Git - Emacs interface to Git" tar]) (eg . [(20170830 115) ((cl-lib (0 5)) (emacs (24 3))) "Norton Guide reader" single]) (efire . [(20151009 1331) ((circe (1 2))) "Use campfire from Emacs" single]) (edts . [(20171030 9) ((auto-complete (1 3 1)) (auto-highlight-symbol (1 53)) (dash (2 13)) (erlang (2 4 1)) (f (0 19 0)) (popup (0 4)) (s (1 11 0))) "Erlang Development Tool Suite" tar]) (edn . [(20160215 419) ((cl-lib (0 3)) (emacs (24 1)) (peg (0 6))) "Support for reading and writing the edn data format from elisp" single]) (editorconfig-domain-specific . [(20180505 224) ((cl-lib (0 5)) (editorconfig (0 6 0))) "Apply brace style and other \"domain-specific\" EditorConfig properties" single]) (editorconfig-custom-majormode . [(20180507 1942) ((editorconfig (0 6 0))) "Decide major-mode and mmm-mode from EditorConfig" single]) (editorconfig-charset-extras . [(20180222 2057) ((editorconfig (0 6 0))) "Extra EditorConfig Charset Support" single]) (editorconfig . [(20180708 228) ((cl-lib (0 5))) "EditorConfig Emacs Plugin" tar]) (edit-server-htmlize . [(20130329 1548) ((edit-server (1 9))) "(de)HTMLization hooks for edit-server.el" single]) (edit-server . [(20180120 752) nil "server that responds to edit requests from Chrome" single]) (edit-list . [(20100930 743) nil "edit a single list" single]) (edit-indirect-region-latex . [(20161128 2245) ((emacs (24 3)) (ht (2 2)) (edit-indirect (0 1 4))) "Edit LaTeX regions in separate buffers, e.g. for English grammar checks" single]) (edit-indirect . [(20180422 1107) ((emacs (24 3))) "Edit regions in separate buffers" single]) (edit-color-stamp . [(20130529 1033) ((es-lib (0 2)) (cl-lib (1 0))) "Edit a hex color stamp, using a QT or the internal color picker" tar]) (edit-at-point . [(20150716 624) nil "edit(copy,cut..) current things(word,symbol..) under cursor" single]) (edebug-x . [(20130615 2325) nil "Extensions for Edebug" single]) (ede-php-autoload-drupal . [(20170316 1458) ((ede-php-autoload (1 0 0)) (f (0 19 0)) (s (1 7 0))) "Drupal support for ede-php-autoload" single]) (ede-php-autoload-composer-installers . [(20170221 1226) ((ede-php-autoload (1 0 0)) (f (0 19 0)) (s (1 7 0))) "Composer installers support for ede-php-autoload" single]) (ede-php-autoload . [(20170428 933) nil "Simple EDE PHP Project" tar]) (ede-compdb . [(20150920 1333) ((ede (1 2)) (semantic (2 2)) (cl-lib (0 4))) "Support for compilation database projects in EDE" single]) (edbi-sqlite . [(20160221 1123) ((emacs (24)) (edbi (0 1 3))) "Open sqlite files with edbi" single]) (edbi-minor-mode . [(20160706 747) ((edbi (0 1 3))) "Use edbi with regular SQL files." single]) (edbi-django . [(20180627 300) ((emacs (25)) (pythonic (0 1 0)) (edbi (0 1 3))) "Run edbi with django settings" single]) (edbi-database-url . [(20160221 1123) ((emacs (24)) (edbi (0 1 3))) "Run edbi with database url" single]) (edbi . [(20160224 1741) ((concurrent (0 3 1)) (ctable (0 1 2)) (epc (0 1 1))) "Emacs Database Interface" tar]) (ecukes . [(20171216 408) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar]) (eclipse-theme . [(20160430 322) nil "Theme based on Eclipse circa 2010" single]) (eclim . [(20171113 1754) ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0)) (cl-lib (0 5)) (yasnippet (0 10 0))) "An interface to the Eclipse IDE." tar]) (ecb . [(20170728 1221) nil "a code browser for Emacs" tar]) (ebib . [(20180428 1401) ((dash (2 5 0)) (seq (2 15)) (parsebib (2 3)) (emacs (24 4))) "a BibTeX database manager" tar]) (ebf . [(20160211 958) ((dash (2 11 0)) (dash-functional (1 2 0)) (cl-lib (0 5))) "brainfuck language transpiler to Emacs Lisp" tar]) (ebal . [(20171231 2216) ((emacs (24 4)) (f (0 18 0))) "Emacs interface to Cabal and Stack" single]) (easy-repeat . [(20150516 148) ((emacs (24 4))) "Repeat easily" single]) (easy-kill-extras . [(20161028 504) ((easy-kill (0 9 4))) "Extra functions for easy-kill." tar]) (easy-kill . [(20151030 2229) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" single]) (easy-jekyll . [(20180513 1107) ((emacs (24 4))) "Major mode managing jekyll blogs" single]) (easy-hugo . [(20180531 221) ((emacs (24 4)) (popup (0 5 3))) "Write blogs made with hugo by markdown or org-mode" single]) (easy-escape . [(20161209 744) nil "Improve readability of escape characters in regular expressions" single]) (easy-after-load . [(20170817 531) nil "eval-after-load for all files in a directory" single]) (eacl . [(20180607 658) ((emacs (24 3)) (ivy (0 9 1))) "Auto-complete line(s) by grepping project" single]) (e2wm-term . [(20141009 608) ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perspective of e2wm.el for work in terminal" single]) (e2wm-sww . [(20140524 158) ((e2wm (1 2))) "Plugin of e2wm.el to switch plugin quickly" single]) (e2wm-svg-clock . [(20150106 506) ((e2wm (20130225 1602)) (svg-clock (0 4))) "e2wm plugin for svg-clock" single]) (e2wm-pkgex4pl . [(20140525 347) ((e2wm (1 2)) (plsense-direx (0 2 0))) "Plugin of e2wm.el for package explorer of Perl" single]) (e2wm-direx . [(20170509 601) ((e2wm (1 2)) (direx (0 1 -3))) "Plugin of e2wm.el for direx.el" single]) (e2wm-bookmark . [(20151122 2121) ((e2wm (1 2))) "Bookmark plugin for e2wm.el" single]) (e2wm-R . [(20151230 126) ((e2wm (1 3)) (inlineR (1 0)) (ess (15 3))) "some e2wm plugin and perspective for GNU R" single]) (e2wm . [(20170214 1636) ((window-layout (1 4))) "simple window manager for emacs" tar]) (e2ansi . [(20180403 1215) ((face-explorer (0 0 3))) "Syntax highlighting support for `less', powered by Emacs." tar]) (dynamic-spaces . [(20171027 1151) nil "When editing, don't move text separated by spaces" single]) (dynamic-ruler . [(20160602 108) nil "Displays a dynamic ruler at point." single]) (dynamic-fonts . [(20140731 526) ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Set faces based on available fonts" single]) (dylan-mode . [(20160405 1514) nil "Major mode for editing Dylan programs." tar]) (dyalog-mode . [(20180605 1413) ((cl-lib (0 2)) (emacs (24))) "Major mode for editing Dyalog APL source code" tar]) (dut-mode . [(20170729 1411) ((emacs (24))) "Major mode for the Dut programming language" single]) (duplicate-thing . [(20120515 948) nil "Duplicate current line & selection" single]) (dummyparens . [(20141009 324) nil "parenthesis auto-pairing and wrapping" single]) (dumb-jump . [(20180615 2114) ((emacs (24 3)) (f (0 20 0)) (s (1 11 0)) (dash (2 9 0)) (popup (0 5 3))) "jump to definition for multiple languages without configuration." single]) (dumb-diff . [(20171211 1322) ((emacs (24 3))) "fast arbitrary diffs" single]) (ducpel . [(20140702 454) ((cl-lib (0 5))) "Logic game with sokoban elements" tar]) (dts-mode . [(20161103 523) nil "Major mode for Devicetree source code" single]) (dtrt-indent . [(20180628 1438) nil "Adapt to foreign indentation offsets" tar]) (dtrace-script-mode . [(20150213 2223) nil "DTrace code editing commands for Emacs" single]) (dsvn . [(20130120 1257) nil "Subversion interface" single]) (drupal-spell . [(20130520 955) nil "Aspell extra dictionary for Drupal" tar]) (drupal-mode . [(20171120 1509) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar]) (dropbox . [(20170502 1722) ((json (1 2)) (oauth (1 0 3))) "Emacs backend for dropbox" single]) (drone . [(20161106 118) nil "Launch your drone test suite if drone.yml is present" single]) (drill-instructor-AZIK-force . [(20151122 2114) ((popup (0 5))) "Support AZIK input" tar]) (drawille . [(20160418 1138) ((cl-lib (0 5))) "Drawille implementation in elisp" tar]) (drag-stuff . [(20161107 2349) nil "Drag stuff (lines, words, region, etc...) around" tar]) (draft-mode . [(20140609 756) nil "Rough drafting for Emacs." single]) (dracula-theme . [(20180710 624) ((emacs (24))) "Dracula Theme" single]) (dr-racket-like-unicode . [(20161021 511) ((emacs (24 1))) "DrRacket-style unicode input" single]) (dpaste_de . [(20131015 525) ((web (0 3 7))) "Emacs mode to paste to dpaste.de" single]) (dpaste . [(20160303 1312) nil "Emacs integration for dpaste.com" single]) (downplay-mode . [(20151125 1209) nil "focus attention on a region of the buffer" single]) (download-region . [(20180123 1733) ((cl-lib (0 3))) "Simple in-buffer download manager" single]) (dotnet . [(20170827 838) nil "Interact with dotnet CLI tool" single]) (dotenv-mode . [(20180207 1114) ((emacs (24 3))) "Major mode for .env files" single]) (dot-mode . [(20180312 1600) ((emacs (24 3))) "minor mode to repeat typing or commands" single]) (doom-themes . [(20180711 1157) ((emacs (24 4)) (all-the-icons (1 0 0)) (cl-lib (0 5))) "an opinionated pack of modern color-themes" tar]) (doom-modeline . [(20180712 2015) ((emacs (25 1)) (all-the-icons (1 0 0)) (projectile (0 10 0)) (shrink-path (0 2 0)) (eldoc-eval (0 1)) (dash (2 11 0))) "A minimal modeline from DOOM." single]) (doom . [(20180301 1508) ((cl-lib (0 5))) "DOM implementation and manipulation library" single]) (doneburn-theme . [(20180502 1004) nil "A light theme based on Bozhidar Batsov's Zenburn" single]) (dollaro . [(20151123 502) ((s (1 6 0))) "simple text templates" single]) (dokuwiki-mode . [(20170223 501) nil "Major mode for DokuWiki document" single]) (dokuwiki . [(20180101 1659) ((emacs (24 3)) (xml-rpc (1 6 8))) "Edit Remote DokuWiki Pages Using XML-RPC" single]) (dockerfile-mode . [(20180628 959) ((emacs (24)) (s (1 12))) "Major mode for editing Docker's Dockerfiles" single]) (docker-tramp . [(20170206 1925) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for docker containers" tar]) (docker-compose-mode . [(20180324 1052) ((emacs (24 3)) (dash (2 12 0)) (yaml-mode (0 0 12))) "Major mode for editing docker-compose files" single]) (docker-api . [(20160525 20) ((dash (2 12 1)) (request (0 2 0)) (s (1 11 0))) "Emacs interface to the Docker API" tar]) (docker . [(20180710 743) ((emacs (24 5)) (dash (2 14 1)) (docker-tramp (0 1)) (magit-popup (2 12 3)) (s (1 12 0)) (tablist (0 70)) (json-mode (1 7 0))) "Emacs interface to Docker" tar]) (docean . [(20180605 1044) ((emacs (24)) (cl-lib (0 5)) (request (0 2 0))) "Interact with DigitalOcean from Emacs." single]) (docbook-snippets . [(20150714 925) ((yasnippet (0 8 0))) "Yasnippets for DocBook" tar]) (dna-mode . [(20170804 114) nil "a major mode for editing dna sequences" tar]) (dmenu . [(20180118 445) ((cl-lib (0 5))) "simulate the dmenu command line program" single]) (dkmisc . [(20131110 315) ((emacs (24 1))) "Miscellaneous functions required by dk* packages." tar]) (dklrt . [(20131110 541) ((dkmisc (0 50)) (ledger-mode (20130908 1357)) (emacs (24 1))) "Ledger Recurring Transactions." tar]) (dkl . [(20161004 1707) nil "Display keyboard layout." tar]) (dkdo . [(20131110 319) ((dkmisc (0 50)) (emacs (24 1))) "Do List major mode based on org-mode." tar]) (djangonaut . [(20180710 1445) ((emacs (25 2)) (magit-popup (2 6 0)) (pythonic (0 1 0)) (f (0 20 0)) (s (1 12 0))) "Minor mode to interact with Django projects" single]) (django-theme . [(20131022 202) nil "Custom face theme for Emacs" single]) (django-snippets . [(20131229 811) ((yasnippet (0 8 0))) "Yasnippets for django" tar]) (django-mode . [(20170522 14) ((projectile (0)) (s (0)) (helm-make (0))) "Major mode for Django web framework." tar]) (django-manage . [(20160818 1912) ((hydra (0 13 2))) "Django minor mode for commanding manage.py" single]) (dizzee . [(20171201 116) nil "A more pleasant way to manage your project's subprocesses in Emacs." tar]) (dix-evil . [(20170105 623) ((dix (0 3 0)) (evil (1 0 7))) "optional evil-integration with dix.el" single]) (dix . [(20170224 615) ((cl-lib (0 5))) "minor mode for editing Apertium XML dictionary files" tar]) (ditz-mode . [(20150729 240) nil "Emacs interface to Ditz issue tracking system" single]) (distinguished-theme . [(20151216 1215) nil "A dark and elegant theme for emacs." single]) (distel-completion-lib . [(20160816 406) nil "Completion library for Erlang/Distel" single]) (display-theme . [(20140115 756) ((emacs (24))) "display current theme(s) at mode-line" single]) (dispass . [(20140202 731) ((dash (1 0 0))) "Emacs wrapper for DisPass" single]) (disk . [(20171115 2331) nil "simplified find-file, revert-file, save-buffer interface" single]) (discover-my-major . [(20180605 2211) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" single]) (discover-js2-refactor . [(20140129 752) ((js2-refactor (20131221 501)) (discover (20140103 1339))) "Adds discover context menu for js2-refactor" single]) (discover-clj-refactor . [(20150328 759) ((clj-refactor (0 14 0)) (discover (0 3))) "Adds discover context menu for clj-refactor" single]) (discover . [(20140103 1339) ((makey (0 3))) "discover more of Emacs" single]) (discourse . [(20160911 119) ((cl-lib (0 5)) (request (0 2)) (s (1 11 0))) "discourse api" single]) (disaster . [(20171016 1452) nil "Disassemble C/C++ code under cursor in Emacs" single]) (disable-mouse . [(20171226 1715) nil "Disable mouse commands globally" single]) (dirtree-prosjekt . [(20140129 104) ((prosjekt (0 3)) (dirtree (0 1))) "dirtree integration for prosjekt." single]) (dirtree . [(20140129 32) ((tree-mode (1 1 1 1)) (windata (0))) "Directory tree views" single]) (direx-grep . [(20140515 806) ((direx (0 1 -3))) "Grep node of direx.el using incremental search like anything.el/helm.el" single]) (direx . [(20170422 627) nil "Simple Directory Explorer" tar]) (direnv . [(20180513 123) ((emacs (24 4)) (dash (2 12 0)) (with-editor (2 5 10))) "direnv support" single]) (diredful . [(20160529 1317) nil "colorful file names in dired buffers" single]) (diredfl . [(20180210 1814) ((emacs (24))) "Extra font lock rules for a more colourful dired" single]) (dired-toggle-sudo . [(20151109 206) nil "Browse directory with sudo privileges." single]) (dired-toggle . [(20140907 1349) nil "provide a simple way to toggle dired buffer for current directory" single]) (dired-subtree . [(20170910 1521) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Insert subdirectories in a tree-like fashion" single]) (dired-single . [(20170804 544) nil "Reuse the current dired buffer to visit a directory" single]) (dired-sidebar . [(20180709 2204) ((emacs (25 1)) (dired-subtree (0 0 1))) "Tree browser leveraging dired" single]) (dired-rsync . [(20180625 1448) ((s (1 12 0)) (dash (2 0 0)) (emacs (24))) "Allow rsync from dired buffers" single]) (dired-recent . [(20180527 1259) ((emacs (24))) "Dired visited paths history" single]) (dired-ranger . [(20180401 1506) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Implementation of useful ranger features for dired" single]) (dired-rainbow . [(20171202 1448) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Extended file highlighting according to its type" single]) (dired-quick-sort . [(20161208 1312) ((hydra (0 13 0))) "Persistent quick sorting of dired buffers in various ways." single]) (dired-open . [(20160205 1213) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "Open files from dired using using custom actions" single]) (dired-narrow . [(20170309 329) ((dash (2 7 0)) (dired-hacks-utils (0 0 1))) "Live-narrowing of search results for dired" single]) (dired-launch . [(20180607 1141) nil "Use dired as a launcher" single]) (dired-k . [(20170313 803) ((emacs (24 3))) "highlight dired buffer by file size, modified time, git status" tar]) (dired-imenu . [(20140109 810) nil "imenu binding for dired mode" single]) (dired-icon . [(20170222 2126) ((emacs (24 3))) "A minor mode to display a list of associated icons in dired buffers." tar]) (dired-hide-dotfiles . [(20170314 1339) ((emacs (25 1))) "Hide dotfiles in dired" single]) (dired-hacks-utils . [(20160527 1436) ((dash (2 5 0))) "Utilities and helpers for dired-hacks collection" single]) (dired-filter . [(20171010 204) ((dash (2 10 0)) (dired-hacks-utils (0 0 1)) (f (0 17 0)) (cl-lib (0 3))) "Ibuffer-like filtering for dired" single]) (dired-filetype-face . [(20160822 655) nil "Set different faces for different filetypes in dired" single]) (dired-fdclone . [(20180402 2308) nil "dired functions and settings to mimic FDclone" single]) (dired-explorer . [(20180606 1921) ((cl-lib (0 5))) "minor-mode provides Explorer like select file at dired." single]) (dired-efap . [(20140122 856) nil "Edit Filename At Point in a dired buffer" single]) (dired-dups . [(20130527 1425) nil "Find duplicate files and display them in a dired buffer" single]) (dired-collapse . [(20180530 727) ((dash (2 10 0)) (f (0 19 0))) "Collapse unique nested paths in dired listing" single]) (dired-avfs . [(20161012 404) ((dash (2 5 0)) (dired-hacks-utils (0 0 1))) "AVFS support for dired" single]) (dired-atool . [(20180302 2340) ((emacs (24))) "Pack/unpack files with atool on dired." single]) (dircmp . [(20141204 956) nil "Compare and sync directories." tar]) (dionysos . [(20160810 356) ((libmpdee (2 1 0)) (alert (1 2)) (s (1 11 0)) (dash (2 12 1)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Dionysos, a music player for Emacs" tar]) (dimmer . [(20180217 2011) ((emacs (25))) "visually highlight the selected buffer" single]) (diminish . [(20170419 1036) nil "Diminished modes are minor modes with no modeline display" single]) (dim-autoload . [(20180318 1327) nil "dim or hide autoload cookie lines" single]) (dim . [(20160818 249) ((emacs (24 4))) "Change mode-line names of major/minor modes" single]) (digitalocean-helm . [(20180610 46) ((emacs (24 3)) (helm (2 5)) (digitalocean (0 1))) "Create and manipulate digitalocean droplets" single]) (digitalocean . [(20180603 225) ((request (2 5)) (emacs (24 4))) "Create and manipulate digitalocean droplets" single]) (digit-groups . [(20160816 1926) ((dash (2 11 0))) "Highlight place-value positions in numbers" single]) (digistar-mode . [(20160218 1155) nil "major mode for Digistar scripts" single]) (diffview . [(20150928 2211) nil "View diffs in side-by-side format" single]) (diffscuss-mode . [(20141014 1657) nil "Major mode for diffscuss files." single]) (difflib . [(20171227 718) ((emacs (24 4)) (cl-generic (0 3)) (ht (2 2)) (s (1 12 0))) "Helpers for computing deltas between sequences." single]) (diff-hl . [(20180201 355) ((cl-lib (0 2)) (emacs (24 3))) "Highlight uncommitted changes using VC" tar]) (dictionary . [(20140717 2029) ((connection (1 10)) (link (1 10))) "Client for rfc2229 dictionary servers" single]) (dictcc . [(20171213 1334) ((emacs (24 4)) (cl-lib (0 5)) (ivy (0 10 0))) "Look up translations on dict.cc" single]) (dic-lookup-w3m . [(20170803 354) ((w3m (20120723 324)) (stem (20120826))) "look up dictionaries on the Internet" tar]) (diary-manager . [(20180626 1058) ((emacs (25))) "Simple personal diary." single]) (dhall-mode . [(20180715 213) ((emacs (24 4))) "a major mode for dhall configuration language" single]) (dfmt . [(20170728 323) nil "Emacs Interface to D indenting/formatting tool dfmt." single]) (devdocs . [(20170731 150) nil "Launch DevDocs search" single]) (desktop-registry . [(20140119 1343) nil "Keep a central registry of desktop files" single]) (desktop-environment . [(20180423 153) ((emacs (25 1))) "Helps you control your GNU/Linux computer" single]) (desktop+ . [(20170107 1332) ((emacs (24 4)) (dash (2 11 0)) (f (0 17 2))) "Handle special buffers when saving & restoring sessions" single]) (describe-number . [(20151031 1755) ((yabin (1 1))) "Describe arbitrarily large number at point." single]) (demo-it . [(20180403 2032) nil "Create demonstrations" tar]) (demangle-mode . [(20180515 1945) ((cl-lib (0 1)) (emacs (24))) "Automatically demangle C++ symbols" single]) (delim-kill . [(20100516 2320) nil "Kill text between delimiters." single]) (deft . [(20180619 857) nil "quickly browse, filter, and edit plain text notes" single]) (defproject . [(20151201 1419) ((emacs (24))) "Manager dir-locals and project specific variables" single]) (define-word . [(20180706 1329) ((emacs (24 3))) "display the definition of word at point." single]) (deferred . [(20170901 630) ((emacs (24 4))) "Simple asynchronous functions for emacs lisp" single]) (default-text-scale . [(20180520 2349) nil "Easily adjust the font size in all frames" single]) (dedukti-mode . [(20171103 512) nil "Major mode for Dedukti files" single]) (dedicated . [(20090428 1231) nil "A very simple minor mode for dedicated buffers" single]) (decl . [(20171212 658) ((dash (2 5 0)) (emacs (24 3)) (cl-lib (0 3))) "Library for organizing code declaratively" single]) (decide . [(20180316 1101) nil "rolling dice and other random things" single]) (debug-print . [(20140125 1619) ((emacs (24))) "A nice printf debugging environment by the way Gauche do" single]) (debpaste . [(20160113 1547) ((xml-rpc (1 6 7))) "Interface for getting/posting/deleting pastes from paste.debian.net" single]) (deadgrep . [(20180714 1716) ((emacs (25 1)) (dash (2 12 0)) (s (1 11 0)) (spinner (1 7 3)) (projectile (0 14 0))) "fast, friendly searching with ripgrep" single]) (ddskk . [(20180706 2232) ((ccc (1 43)) (cdb (20141201 754))) "Simple Kana to Kanji conversion program." tar]) (db-pg . [(20130131 1102) ((pg (0 12)) (db (0 0 6))) "A PostgreSQL adapter for emacs-db" single]) (db . [(20140421 1411) ((kv (0 0 11))) "A database for EmacsLisp" single]) (dayone . [(20160105 440) ((uuid (0 0 3)) (mustache (0 22)) (ht (1 5))) "Utility script for Day One" tar]) (datomic-snippets . [(20180116 752) ((s (1 4 0)) (dash (1 2 0)) (yasnippet (0 6 1))) "Yasnippets for Datomic" tar]) (datetime-format . [(20160612 1015) nil "Datetime functions" single]) (datetime . [(20180325 1004) ((emacs (24 1)) (extmap (1 0))) "Parsing, formatting and matching timestamps" tar]) (date-field . [(20141128 1705) ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) "Date widget" single]) (date-at-point . [(20150308 543) nil "Add `date' to `thing-at-point' function" single]) (dashboard . [(20180704 2325) ((emacs (24 4)) (page-break-lines (0 11))) "A startup screen extracted from Spacemacs" tar]) (dash-functional . [(20180107 818) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single]) (dash-at-point . [(20180710 656) nil "Search the word at point with Dash" single]) (dash . [(20180413 30) nil "A modern list library for Emacs" single]) (dart-mode . [(20180717 2003) ((emacs (24 5)) (cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23)) (s (1 10))) "Major mode for editing Dart files" single]) (darktooth-theme . [(20180612 1814) ((autothemer (0 2))) "From the darkness... it watches" single]) (darkokai-theme . [(20180513 1857) nil "A darker variant on Monokai." single]) (darkmine-theme . [(20160405 2324) nil "Yet another emacs dark color theme." single]) (darkburn-theme . [(20170423 952) nil "A not-so-low contrast color theme for Emacs." single]) (dark-souls . [(20140314 428) nil "Prepare to die" single]) (dark-mint-theme . [(20160301 2242) nil "dark & minty fresh theme" single]) (dark-krystal-theme . [(20170808 600) ((emacs (24 0))) "an Emacs 24 theme based on Dark Krystal (tmTheme)" single]) (darcula-theme . [(20171227 1045) nil "Inspired by IntelliJ's Darcula theme" single]) (darcsum . [(20140315 2110) nil "a pcl-cvs like interface for managing darcs patches" tar]) (dante . [(20180515 1312) ((dash (2 12 0)) (emacs (25 1)) (f (0 19 0)) (flycheck (0 30)) (haskell-mode (13 14)) (s (1 11 0)) (lcr (1 0))) "Development mode for Haskell" single]) (danneskjold-theme . [(20180708 724) nil "Beautiful high-contrast Emacs theme." tar]) (dakrone-theme . [(20170801 1233) nil "dakrone's custom dark theme" single]) (dakrone-light-theme . [(20170808 1440) nil "dakrone's custom light theme" single]) (daemons . [(20180610 810) ((emacs (25 1))) "UI for managing init system daemons (services)" tar]) (dad-joke . [(20170927 2358) ((emacs (24))) "Get/display dad jokes" single]) (dactyl-mode . [(20140906 1025) nil "Major mode for editing Pentadactyl config files" single]) (d-mode . [(20180502 710) ((emacs (24 3))) "D Programming Language major mode for (X)Emacs" single]) (czech-holidays . [(20160113 952) nil "Adds a list of Czech public holidays to Emacs calendar" single]) (cython-mode . [(20180213 854) nil "Major mode for editing Cython files" single]) (cypher-mode . [(20151110 342) nil "major mode for editing cypher scripts" single]) (cyphejor . [(20171231 2218) ((emacs (24 4))) "Shorten major mode names using user-defined rules" single]) (cycle-themes . [(20150402 2009) ((cl-lib (0 5))) "A global minor mode to make switching themes easier" single]) (cycle-resize . [(20160521 857) nil "Cycle resize the current window horizontally or vertically" single]) (cycbuf . [(20131203 1237) nil "Cycle buffers, inspired by swbuff.el, swbuff-x.el, and bs.el" single]) (cyberpunk-theme . [(20180608 2209) nil "Cyberpunk Color Theme" single]) (cwl-mode . [(20171205 145) ((yaml-mode (0 0 13)) (emacs (24 4))) "A major mode for editing CWL" single]) (cursor-test . [(20131207 932) ((emacs (24))) "testing library for cursor position in emacs." single]) (cuda-mode . [(20151213 1921) nil "NVIDIA CUDA Major Mode" single]) (cucumber-goto-step . [(20131209 2119) ((pcre2el (1 5))) "Jump to cucumber step definition" single]) (cubicle-mode . [(20171009 1257) nil "Major mode for the Cubicle model checker" single]) (cubicaltt . [(20171108 602) ((emacs (24 1)) (cl-lib (0 5))) "Mode for cubical type theory" single]) (ctxmenu . [(20140303 1342) ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) "Provide a context menu like right-click." tar]) (ctl-mode . [(20151202 206) nil "Major mode for editing GrADS script files" single]) (ctags-update . [(20170728 58) nil "(auto) update TAGS in parent directory using exuberant-ctags" single]) (ctable . [(20171005 1711) nil "Table component for Emacs Lisp" single]) (csv . [(20161113 710) nil "Functions for reading and parsing CSV files." single]) (cssh . [(20150810 1009) nil "clusterssh implementation for emacs" single]) (css-eldoc . [(20150124 1923) nil "an eldoc-mode plugin for CSS source code" tar]) (css-comb . [(20160415 2259) nil "Sort CSS properties in a particular order using CSS Comb" single]) (css-autoprefixer . [(20180311 900) ((emacs (24))) "Adds autoprefix to CSS" single]) (csound-mode . [(20180505 1225) ((emacs (25)) (shut-up (0 3 2)) (multi (2 0 1))) "A major mode for interacting and coding Csound" tar]) (csharp-mode . [(20180708 652) nil "C# mode derived mode" single]) (csgo-conf-mode . [(20161209 819) nil "CS:GO Configuration files syntax highlighting" single]) (crystal-mode . [(20180606 755) ((emacs (24 4))) "Major mode for editing Crystal files" single]) (cryptsy-public-api . [(20141008 528) ((json (1 2))) "Library for working with the Cryptsy public API" single]) (cryptol-mode . [(20180321 1108) nil "Cryptol major mode for Emacs" single]) (crux . [(20180611 2355) ((seq (1 11))) "A Collection of Ridiculously Useful eXtensions" single]) (crm-custom . [(20160116 1606) ((cl-lib (0 5))) "Alternate `completing-read-multiple' that uses `completing-read'" single]) (cricbuzz . [(20171227 1607) ((enlive (0 0 1)) (f (0 19 0)) (dash (2 13 0)) (s (1 11 0))) "Cricket scores from cricbuzz in emacs" single]) (creole-mode . [(20130721 1750) nil "a markup mode for creole" single]) (creole . [(20140924 800) ((noflet (0 0 3)) (kv (0 0 17))) "A parser for the Creole Wiki language" single]) (creds . [(20140510 1006) ((s (1 9 0)) (dash (2 5 0))) "A parser credentials file library (not limited to credentials entries)" tar]) (creamsody-theme . [(20170222 258) ((autothemer (0 2))) "Straight from the soda fountain." single]) (crappy-jsp-mode . [(20140311 231) nil "A pretty crappy major-mode for jsp." single]) (cquery . [(20180619 1953) ((emacs (25 1)) (lsp-mode (3 4)) (dash (0 13))) "cquery client for lsp-mode" tar]) (cql-mode . [(20160720 2039) ((emacs (24))) "Major mode for editting CQLs" single]) (cpputils-cmake . [(20170819 259) nil "Easy realtime C++ syntax check and IntelliSense with CMake." single]) (cpanfile-mode . [(20161001 10) ((emacs (24 4))) "Major mode for cpanfiles" single]) (cp5022x . [(20120323 1635) nil "cp50220, cp50221, cp50222 coding system" single]) (coverlay . [(20180518 1555) ((emacs (24 1)) (cl-lib (0 5))) "Test coverage overlays" single]) (coverage . [(20180226 2057) ((ov (1 0)) (cl-lib (0 5))) "Code coverage line highlighting" single]) (cov . [(20180415 1331) ((emacs (24 4)) (f (0 18 2)) (s (1 11 0)) (elquery (0))) "Show coverage stats in the fringe." single]) (counsel-world-clock . [(20171201 2337) ((ivy (0 9 0)) (s (1 12 0))) "Display world clock using Ivy." single]) (counsel-tramp . [(20180311 2327) ((emacs (24 3)) (counsel (0 10))) "Tramp ivy interface for ssh, docker, vagrant" single]) (counsel-spotify . [(20180319 2022) ((emacs (25)) (ivy (0 9 0))) "Control Spotify search and select music with Ivy." single]) (counsel-pydoc . [(20171018 1342) ((emacs (24 3)) (ivy (0 9 1))) "run pydoc with counsel" single]) (counsel-projectile . [(20180718 842) ((counsel (0 10 0)) (projectile (0 14 0))) "Ivy integration for Projectile" single]) (counsel-osx-app . [(20160821 109) ((ivy (0 8 0)) (emacs (24 3))) "launch osx applications via ivy interface" single]) (counsel-org-clock . [(20180623 617) ((emacs (24 3)) (ivy (0 10 0)) (dash (2 0))) "Counsel commands for org-clock" single]) (counsel-org-capture-string . [(20180707 217) ((emacs (25 1)) (ivy (0 10))) "Counsel for org-capture-string" single]) (counsel-notmuch . [(20180713 1740) ((emacs (24)) (ivy (0 10 0)) (notmuch (0 21)) (s (1 12 0))) "Search emails in Notmuch asynchronously with Ivy" single]) (counsel-gtags . [(20170326 559) ((emacs (24 3)) (counsel (0 8 0))) "ivy for GNU global" single]) (counsel-etags . [(20180605 613) ((emacs (24 4)) (counsel (0 9 1))) "Fast and complete Ctags/Etags solution using ivy" single]) (counsel-dash . [(20160729 829) ((emacs (24 4)) (dash (2 12 1)) (dash-functional (1 2 0)) (helm-dash (1 3 0)) (counsel (0 8 0))) "Browse dash docsets using Ivy" single]) (counsel-css . [(20180302 236) ((emacs (24 4)) (counsel (0 7 0)) (cl-lib (0 5))) "stylesheet-selector-aware swiper" single]) (counsel-codesearch . [(20180713 304) ((codesearch (1)) (counsel (0 10 0)) (emacs (24)) (ivy (0 10 0))) "Counsel interface for codesearch.el" single]) (counsel-bbdb . [(20171129 1737) ((ivy (0 8 0)) (emacs (24 3))) "Quick search&input email from BBDB based on ivy" single]) (counsel . [(20180718 250) ((emacs (24 3)) (swiper (0 9 0))) "Various completion functions using Ivy" single]) (cosmo . [(20170922 44) ((emacs (24 4))) "Cosmological Calculator" single]) (corral . [(20160502 1) nil "Quickly surround text with delimiters" single]) (coq-commenter . [(20170822 1609) ((dash (2 13 0)) (s (1 11 0)) (cl-lib (0 5))) "Coq commenting minor mode for proof" single]) (copyit-pandoc . [(20160624 1328) ((emacs (24)) (copyit (0 0 1)) (pandoc (0 0 1))) "Copy it, yank anything!" single]) (copyit . [(20161126 429) ((emacs (24)) (cl-lib (0 5)) (s (1 9 0))) "Copy it, yank anything!" single]) (copy-file-on-save . [(20180604 719) ((emacs (24 3)) (cl-lib (0 5)) (f (0 17)) (s (1 7 0))) "Copy file on save, automatic deployment it." single]) (copy-as-format . [(20171215 1616) ((cl-lib (0 5))) "Copy buffer locations as GitHub/Slack/JIRA/HipChat/... formatted code" single]) (control-mode . [(20160624 1010) nil "A \"control\" mode, similar to vim's \"normal\" mode" single]) (contrast-color . [(20160903 1107) ((emacs (24 3)) (cl-lib (0 5))) "Pick best contrast color for you" single]) (contextual-menubar . [(20180204 2309) nil "display the menubar only on a graphical display" single]) (contextual . [(20160131 1037) ((emacs (24)) (dash (2 12 1)) (cl-lib (0 5))) "Contextual profile management system" single]) (connection . [(20140717 2029) nil "TCP-based client connection" single]) (conllu-mode . [(20180304 637) ((emacs (25)) (parsec (0 1)) (cl-lib (0 5))) "editing mode for CoNLL-U files" tar]) (conkeror-minor-mode . [(20150114 804) nil "Mode for editing conkeror javascript files." single]) (confluence . [(20151020 1828) ((xml-rpc (1 6 4))) "Emacs mode for interacting with confluence wikis" tar]) (config-parser . [(20160426 519) ((emacs (24 4))) "a library for parsing config file" single]) (config-general-mode . [(20171024 1140) nil "Config::General config file mode" single]) (conda . [(20171122 716) ((emacs (24 4)) (pythonic (0 1 0)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2))) "Work with your conda environments" single]) (concurrent . [(20161228 1930) ((emacs (24 3)) (deferred (0 5 0))) "Concurrent utility functions for emacs lisp" single]) (composer . [(20180415 743) ((emacs (24)) (s (1 9 0)) (f (0 17)) (request (0 2 0)) (seq (1 9)) (php-runtime (0 1 0))) "Interface to PHP Composer" single]) (composable . [(20170723 2347) ((emacs (24 4))) "composable editing" tar]) (company-ycmd . [(20180520 353) ((ycmd (1 3)) (company (0 9 3)) (deferred (0 5 1)) (s (1 11 0)) (dash (2 13 0)) (let-alist (1 0 5)) (f (0 19 0))) "company-mode backend for ycmd" single]) (company-ycm . [(20140904 1117) ((ycm (0 1))) "company-ycm" single]) (company-web . [(20180402 455) ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" tar]) (company-try-hard . [(20150902 1506) ((emacs (24 3)) (company (0 8 0)) (dash (2 0))) "get all completions from company backends" single]) (company-terraform . [(20180703 533) ((emacs (24 4)) (company (0 8 12)) (terraform-mode (0 6))) "A company backend for terraform" tar]) (company-tern . [(20161004 1147) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single]) (company-suggest . [(20180527 931) ((company (0 9 0)) (emacs (25 1))) "Company-mode back-end for search engine suggests" single]) (company-statistics . [(20170210 1133) ((emacs (24 3)) (company (0 8 5))) "Sort candidates using completion history" single]) (company-sourcekit . [(20170126 353) ((emacs (24 3)) (company (0 8 12)) (dash (2 12 1)) (dash-functional (1 2 0)) (sourcekit (0 2 0))) "company-mode completion backend for SourceKit" single]) (company-solidity . [(20180407 1344) ((company (0 9 0)) (cl-lib (0 5 0)) (solidity-mode (0 1 8))) "Company-mode back-end for solidity-mode" single]) (company-shell . [(20170517 2241) ((emacs (24 4)) (company (0 8 12)) (dash (2 12 0)) (cl-lib (0 5))) "Company mode backend for shell functions" single]) (company-rtags . [(20170924 2244) ((emacs (24 3)) (company (0 8 1)) (rtags (2 10))) "RTags back-end for company" single]) (company-restclient . [(20151202 401) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) "company-mode completion back-end for restclient-mode" single]) (company-reftex . [(20180713 141) ((emacs (25 1)) (s (1 12)) (company (0 8))) "Company backend based on RefTeX." single]) (company-racer . [(20171204 1910) ((emacs (24 4)) (cl-lib (0 5)) (company (0 8 0)) (deferred (0 3 1))) "Company integration for racer" single]) (company-quickhelp . [(20180525 303) ((emacs (24 3)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" single]) (company-qml . [(20170428 1008) ((qml-mode (0 1)) (company (0 8 12))) "Company backend for QML files" tar]) (company-prescient . [(20180626 1050) ((emacs (25 1)) (prescient (2 0)) (company (0 9 6))) "prescient.el + Company" single]) (company-posframe . [(20180610 1010) ((emacs (26 0)) (company (0 9 0)) (posframe (0 1 0))) "Use a posframe as company candidate menu" single]) (company-pollen . [(20160812 810) ((company (0 9 0)) (pollen-mode (1 0))) "company-mode completion backend for pollen" single]) (company-plsense . [(20180117 1658) ((company (0 9 3)) (cl-lib (0 5 0)) (dash (2 12 0)) (s (1 12)) (emacs (24))) "Company backend for Perl" single]) (company-php . [(20180510 1500) ((cl-lib (0 5)) (ac-php-core (1)) (company (0 9))) "company completion source for php" single]) (company-nixos-options . [(20160215 57) ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) "Company Backend for nixos-options" single]) (company-ngram . [(20170129 1113) ((cl-lib (0 5)) (company (0 8 0))) "N-gram based completion" tar]) (company-nginx . [(20180603 1702) ((emacs (24))) "company-mode keywords support for nginx-mode" single]) (company-nand2tetris . [(20171201 1013) ((nand2tetris (1 1 0)) (company (0 5)) (cl-lib (0 5 0))) "Company backend for nand2tetris major mode" single]) (company-math . [(20171016 814) ((company (0 8 0)) (math-symbol-lists (1 2))) "Completion backends for unicode math symbols and latex tags" single]) (company-lua . [(20171108 1506) ((company (0 8 12)) (s (1 10 0)) (f (0 17 0)) (lua-mode (20151025))) "Company backend for Lua" tar]) (company-lsp . [(20180617 1033) ((emacs (25 1)) (lsp-mode (3 4)) (company (0 9 0)) (s (1 2 0)) (dash (2 11 0))) "Company completion backend for lsp-mode." single]) (company-lean . [(20171102 754) ((emacs (24 3)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 10 0)) (f (0 19 0)) (company (0 9 3)) (lean-mode (3 3 0))) "A company backend for lean-mode" single]) (company-jedi . [(20151216 1921) ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 7))) "company-mode completion back-end for Python JEDI" single]) (company-irony-c-headers . [(20151018 209) ((cl-lib (0 5)) (company (0 9 0)) (irony (0 2 0))) "Company mode backend for C/C++ header files with Irony" single]) (company-irony . [(20170905 1346) ((emacs (24 1)) (company (0 8 0)) (irony (1 1 0)) (cl-lib (0 5))) "company-mode completion back-end for irony-mode" single]) (company-inf-ruby . [(20140805 1354) ((company (0 6 10)) (inf-ruby (2 2 7)) (emacs (24 1))) "company-mode completion back-end for inf-ruby" single]) (company-go . [(20170825 943) ((company (0 8 0)) (go-mode (1 0 0))) "company-mode backend for Go (using gocode)" single]) (company-glsl . [(20171015 1049) ((company (0 9 4)) (glsl-mode (2 0)) (emacs (24 4))) "Support glsl in company-mode" single]) (company-ghci . [(20160310 1800) ((company (0 8 11)) (haskell-mode (13))) "company backend which uses the current ghci process." single]) (company-ghc . [(20170918 133) ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 4 0 0)) (emacs (24))) "company-mode ghc-mod backend" single]) (company-flx . [(20180102 2118) ((emacs (24)) (company (0 8 12)) (flx (0 5))) "flx based fuzzy matching for company" single]) (company-flow . [(20180225 1359) ((company (0 8 0)) (dash (2 13 0))) "Flow backend for company-mode" single]) (company-erlang . [(20170122 2138) ((emacs (24 4)) (ivy-erlang-complete (0 1)) (company (0 9 2))) "company backend based on ivy-erlang-complete" single]) (company-emoji . [(20161230 1937) ((cl-lib (0 5)) (company (0 8 0))) "company-mode backend for emoji" tar]) (company-emacs-eclim . [(20170104 743) ((eclim (0 3)) (company (0 7)) (cl-lib (0 5))) "company-mode backend for eclim" single]) (company-edbi . [(20160221 1123) ((company (0 8 5)) (edbi (0 1 3)) (cl-lib (0 5 0)) (s (1 9 0))) "Edbi backend for company-mode" single]) (company-distel . [(20161002 2339) ((distel-completion-lib (1 0 0))) "Erlang/distel completion backend for company-mode" single]) (company-dict . [(20180216 156) ((emacs (24 4)) (company (0 8 12)) (parent-mode (2 3))) "A backend that emulates ac-source-dictionary" single]) (company-dcd . [(20170516 210) ((company (0 9)) (flycheck-dmd-dub (0 7)) (yasnippet (0 8)) (popwin (0 7)) (cl-lib (0 5)) (ivy (20160804 326))) "Company backend for Dlang using DCD." single]) (company-coq . [(20180307 510) ((company-math (1 1)) (company (0 8 12)) (yasnippet (0 11 0)) (dash (2 12 1)) (cl-lib (0 5))) "A collection of extensions for Proof General's Coq mode" tar]) (company-childframe . [(20180704 2246) ((emacs (26 0)) (company-posframe (0 1 0))) "Please use company-posframe instead." single]) (company-cabal . [(20170917 617) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) "company-mode cabal backend" tar]) (company-c-headers . [(20170531 1330) ((emacs (24 1)) (company (0 8))) "Company mode backend for C/C++ header files" single]) (company-box . [(20180607 845) ((emacs (26 0 91)) (dash (2 13)) (dash-functional (1 2 0)) (company (0 9 6))) "Company front-end with icons" tar]) (company-bibtex . [(20171104 2344) ((company (0 9 0)) (cl-lib (0 5)) (parsebib (1 0))) "Company completion for bibtex keys" single]) (company-axiom . [(20171024 1310) ((emacs (24)) (company (0 9)) (axiom-environment (20171021))) "A company-mode backend for the axiom-environment system" single]) (company-auctex . [(20180330 1118) ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87))) "Company-mode auto-completion for AUCTeX" single]) (company-arduino . [(20160306 939) ((emacs (24 1)) (company (0 8 0)) (irony (0 1 0)) (cl-lib (0 5)) (company-irony (0 1 0)) (company-c-headers (20140930)) (arduino-mode (1 0))) "company-mode for Arduino" single]) (company-ansible . [(20180701 1113) ((emacs (24 4)) (company (0 8 12))) "A company back-end for ansible" tar]) (company-anaconda . [(20180610 2321) ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) "Anaconda backend for company-mode" single]) (company . [(20180704 701) ((emacs (24 3))) "Modular text completion framework" tar]) (common-lisp-snippets . [(20180226 723) ((yasnippet (0 8 0))) "Yasnippets for Common Lisp" tar]) (commify . [(20161106 1534) ((s (1 9 0))) "Toggle grouping commas in numbers" single]) (commenter . [(20160219 827) ((emacs (24 4)) (let-alist (1 0 4))) "multiline-comment support package" single]) (comment-tags . [(20170910 1035) ((emacs (24 5))) "Highlight & navigate comment tags like 'TODO'." single]) (comment-dwim-2 . [(20170809 1354) nil "An all-in-one comment command to rule them all" single]) (commander . [(20140120 1052) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single]) (command-queue . [(20160328 1025) ((emacs (24 3))) "shell command queue" single]) (command-log-mode . [(20160412 2147) nil "log keyboard commands to buffer" single]) (comint-intercept . [(20170317 528) ((emacs (24 3))) "Intercept input in comint-mode" single]) (com-css-sort . [(20180607 1808) ((emacs (24 4)) (s (1 12 0))) "Common way of sorting the CSS attributes." single]) (column-enforce-mode . [(20171030 1200) nil "Highlight text that extends beyond a  column" single]) (colormaps . [(20171008 1524) ((emacs (25))) "Hex colormaps" single]) (color-theme-x . [(20180226 1646) ((cl-lib (0 5))) "convert color themes to X11 resource settings" single]) (color-theme-solarized . [(20171024 825) ((color-theme (6 5 5))) "Solarized themes for Emacs" tar]) (color-theme-sanityinc-tomorrow . [(20180713 212) nil "A version of Chris Kempson's \"tomorrow\" themes" tar]) (color-theme-sanityinc-solarized . [(20160429 1903) nil "A version of Ethan Schoonover's Solarized themes" tar]) (color-theme-modern . [(20161219 344) ((emacs (24))) "Reimplement colortheme with Emacs 24 theme framework." tar]) (color-theme-buffer-local . [(20170125 2201) ((color-theme (0))) "Install color-themes by buffer." single]) (color-theme-approximate . [(20140227 2036) nil "Makes Emacs theme works on terminal transparently" single]) (color-theme . [(20080305 34) nil "install color themes" tar]) (color-moccur . [(20141222 1635) nil "multi-buffer occur (grep) mode" single]) (color-identifiers-mode . [(20180504 926) ((dash (2 5 0)) (emacs (24))) "Color identifiers based on their names" single]) (colonoscopy-theme . [(20170808 609) ((emacs (24 0))) "an Emacs 24 theme based on Colonoscopy (tmTheme)" single]) (colemak-evil . [(20171015 1607) ((evil (20170323 1140))) "Colemak-friendly keybindings for Evil." single]) (coin-ticker . [(20170611 27) ((request (0 3 0)) (emacs (25))) "Show a cryptocurrency price ticker" single]) (coffee-mode . [(20170324 240) ((emacs (24 3))) "Major mode for CoffeeScript code" single]) (coffee-fof . [(20131012 530) ((coffee-mode (0 4 1))) "A coffee-mode configuration for `ff-find-other-file'." single]) (codic . [(20150926 427) ((emacs (24)) (cl-lib (0 5))) "Search Codic (codic.jp) naming dictionaries" tar]) (codesearch . [(20180508 822) ((elog (0 1))) "Core support for managing codesearch tools" tar]) (codebug . [(20140929 1437) nil "Interact with codebug" single]) (code-library . [(20160426 518) ((gist (1 3 1))) "use org-mode to collect code snippets" single]) (code-archive . [(20180705 1913) ((emacs (24 3))) "git supported code archive and reference for org-mode" single]) (cobra-mode . [(20140116 1316) nil "Major mode for .NET-based Cobra language" single]) (cobalt . [(20180304 355) ((emacs (24))) "Easily use the Cobalt.rs static site generator" single]) (cnfonts . [(20171205 111) ((emacs (24))) "A simple Chinese fonts config tool" tar]) (cmm-mode . [(20150224 2346) nil "Major mode for C-- source code" single]) (cmd-to-echo . [(20161203 1333) ((emacs (24 4)) (s (1 11 0)) (shell-split-string (20151224 208))) "Show the output of long-running commands in the echo area" single]) (cmake-project . [(20171121 315) nil "Integrates CMake build process with Emacs" single]) (cmake-mode . [(20180709 726) nil "major-mode for editing CMake sources" single]) (cmake-ide . [(20180713 813) ((emacs (24 4)) (cl-lib (0 5)) (seq (1 11)) (levenshtein (0)) (s (1 11 0))) "Calls CMake to find out include paths and other compiler flags" single]) (cmake-font-lock . [(20170117 1225) ((cmake-mode (0 0))) "Advanced, type aware, highlight support for CMake" single]) (cm-mode . [(20170203 1307) ((cl-lib (0 5))) "Minor mode for CriticMarkup" single]) (clues-theme . [(20161213 327) ((emacs (24 0))) "an Emacs 24 theme which may well be fully awesome..." single]) (cloud-to-butt-erc . [(20130627 1608) nil "Replace 'the cloud' with 'my butt'" single]) (closure-lint-mode . [(20101118 1324) nil "minor mode for the Closure Linter" single]) (closql . [(20180627 1931) ((emacs (25 1)) (emacsql-sqlite (2 0 3))) "store EIEIO objects using EmacSQL" single]) (clomacs . [(20180713 340) ((emacs (24 3)) (cider (0 16 0)) (s (1 12 0)) (simple-httpd (1 4 6))) "Simplifies Emacs Lisp interaction with Clojure." single]) (clojure-snippets . [(20180314 608) ((yasnippet (0 10 0))) "Yasnippets for clojure" tar]) (clojure-quick-repls . [(20150814 36) ((cider (0 8 1)) (dash (2 9 0))) "Quickly create Clojure and ClojureScript repls for a project." single]) (clojure-mode-extra-font-locking . [(20180114 911) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single]) (clojure-mode . [(20180709 648) ((emacs (25 1))) "Major mode for Clojure code" single]) (clojure-cheatsheet . [(20180201 4) ((helm (1 7 7)) (cider (0 9 0))) "The Clojure Cheatsheet for Emacs" single]) (clojars . [(20161109 1448) ((request-deferred (0 2 0))) "clojars.org search interface" single]) (clocker . [(20160125 1505) ((projectile (0 11 0)) (dash (2 10))) "Note taker and clock-in enforcer" single]) (cloc . [(20170728 1124) ((cl-lib (0 5))) "count lines of code over emacs buffers" single]) (clmemo . [(20160326 923) nil "Change Log MEMO" tar]) (cljsbuild-mode . [(20160402 1000) nil "A minor mode for the ClojureScript 'lein cljsbuild' command" single]) (cljr-helm . [(20160913 128) ((clj-refactor (0 13 0)) (helm-core (1 7 7)) (cl-lib (0 5))) "Wraps clojure refactor commands with helm" single]) (clj-refactor . [(20180708 57) ((emacs (24 4)) (s (1 8 0)) (seq (2 19)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (clojure-mode (5 6 1)) (cider (0 17 0)) (edn (1 1 2)) (inflections (2 3)) (hydra (0 13 2))) "A collection of clojure refactoring functions" tar]) (clips-mode . [(20170909 123) nil "Major mode for editing CLIPS code and REPL" tar]) (clippy . [(20161028 1254) ((pos-tip (1 0))) "Show tooltip with function documentation at point" single]) (clipmon . [(20180129 254) nil "Clipboard monitor - watch system clipboard, add changes to kill ring/autoinsert" tar]) (cliphist . [(20171112 2138) ((emacs (24 3)) (ivy (0 9 0))) "Read data from clipboard managers at Linux and Mac" tar]) (click-mode . [(20180610 1744) ((emacs (24))) "Major mode for the Click Modular Router Project" single]) (clevercss . [(20131228 1755) nil "A major mode for editing CleverCSS files" single]) (clear-text . [(20160406 1343) nil "Make you use clear text" tar]) (clean-buffers . [(20160529 1559) ((cl-lib (0 5))) "clean useless buffers" single]) (clean-aindent-mode . [(20171017 1343) nil "Simple indent and unindent, trims indent white-space" single]) (clang-format . [(20180406 814) ((cl-lib (0 3))) "Format code using clang-format" single]) (cl-lib-highlight . [(20140127 1312) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single]) (cl-format . [(20160412 1745) nil "CL format routine." tar]) (citeproc . [(20180429 57) ((emacs (25)) (dash (2 13 0)) (s (1 12 0)) (f (0 18 0)) (queue (0 2)) (string-inflection (1 0)) (org (9))) "A CSL 1.0.1 Citation Processor" tar]) (circe-notifications . [(20180102 1518) ((emacs (24 4)) (circe (2 3)) (alert (1 2))) "Add desktop notifications to Circe." single]) (circe . [(20180525 531) ((cl-lib (0 5))) "Client for IRC in Emacs" tar]) (circadian . [(20180708 643) ((emacs (24 4))) "Theme-switching based on daytime" single]) (cinspect . [(20150715 1933) ((emacs (24)) (cl-lib (0 5)) (deferred (0 3 1)) (python-environment (0 0 2))) "Use cinspect to look at the CPython source of builtins and other C objects!" single]) (cil-mode . [(20160622 730) nil "Common Intermediate Language mode" single]) (ciel . [(20170330 526) ((emacs (24))) "A command that is clone of \"ci\" in vim." single]) (cider-spy . [(20160313 740) ((emacs (24 4)) (cider (0 10 0)) (dash (2 5 0)) (cl-lib (0 5)) (noflet (0 0 15))) "Spy on CIDER to get info" single]) (cider-hydra . [(20161018 2254) ((cider (0 14 0)) (hydra (0 13 0))) "Hydras for CIDER." single]) (cider-eval-sexp-fu . [(20160907 100) ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) "Briefly highlights an evaluated sexp." single]) (cider-decompile . [(20151121 2137) ((cider (0 3 0)) (javap-mode (9))) "decompilation extension for cider" single]) (cider . [(20180717 553) ((emacs (25)) (clojure-mode (5 7 0)) (pkg-info (0 4)) (queue (0 1 1)) (spinner (1 7)) (seq (2 16)) (sesman (0 1 1))) "Clojure Interactive Development Environment that Rocks" tar]) (chyla-theme . [(20180302 858) nil "chyla.org - green color theme." single]) (chruby . [(20180114 852) ((cl-lib (0 5))) "Emacs integration for chruby" single]) (chronos . [(20150602 829) nil "multiple simultaneous countdown / countup timers" tar]) (choice-program . [(20171004 931) ((emacs (25)) (cl-lib (1 0))) "parameter based program" tar]) (chinese-yasdcv . [(20171014 1844) ((cl-lib (0 5)) (pyim (1 6 0))) "Yet another StarDict frontend" tar]) (chinese-word-at-point . [(20170811 241) ((cl-lib (0 5))) "Add `chinese-word' thing to `thing-at-point'" single]) (chinese-wbim . [(20150623 2050) nil "Enable Wubi Input Method in Emacs." tar]) (chinese-number . [(20161007 2209) nil "Convert numbers between Arabic and Chinese formats" single]) (chinese-conv . [(20170807 1428) ((cl-lib (0 5))) "Conversion between Chinese Characters with opencc or cconv" single]) (chicken-scheme . [(20141116 1139) nil "Scheme-mode extensions for Chicken Scheme" single]) (cherry-blossom-theme . [(20150621 2042) ((emacs (24 0))) "a soothing color theme for Emacs24." single]) (chef-mode . [(20180628 753) nil "minor mode for editing an opscode chef repository" single]) (cheerilee . [(20160313 1135) ((xelb (0 1))) "Toolkit library" tar]) (chee . [(20171123 1433) ((dash (2 12 1)) (s (1 10 0)) (f (0 18 2))) "Interface to chee using dired and image-dired" tar]) (checkbox . [(20141116 1658) ((emacs (24)) (cl-lib (0 5))) "Quick manipulation of textual checkboxes" single]) (cheatsheet . [(20170126 1350) ((emacs (24)) (cl-lib (0 5))) "create your own cheatsheet" single]) (cheat-sh . [(20170802 418) ((emacs (24))) "Interact with cheat.sh" single]) (chatwork . [(20170510 2142) nil "ChatWork client for Emacs" single]) (charmap . [(20160309 146) nil "Unicode table for Emacs" single]) (char-menu . [(20171231 2218) ((emacs (24 3)) (avy-menu (0 1))) "Create your own menu for fast insertion of arbitrary symbols" single]) (chapel-mode . [(20160504 108) nil "a CC Mode for Chapel derived from derived-mode-ex.el" single]) (change-inner . [(20150707 844) ((expand-region (0 7))) "Change contents based on semantic units" single]) (challenger-deep-theme . [(20180525 918) ((emacs (24))) "challenger-deep Theme" single]) (cg . [(20171123 301) nil "major mode for editing Constraint Grammar files" single]) (cftag-mode . [(20170811 2240) ((emacs (25))) "Emacs mode for editing tag-based CFML files" single]) (cframe . [(20170917 1509) ((emacs (25)) (buffer-manage (0 6)) (dash (2 13 0))) "customize a frame and fast switch size and positions" single]) (cfml-mode . [(20170903 1949) ((emacs (25)) (mmm-mode (0 5 4)) (cftag-mode (1 0 0))) "Emacs mode for editing CFML files" single]) (cff . [(20160118 1218) ((cl-lib (0 5)) (emacs (24))) "Search of the C/C++ file header by the source and vice versa" single]) (cfengine-code-style . [(20171115 1308) nil "C code style for CFEngine project." single]) (ceylon-mode . [(20180606 624) ((emacs (25))) "Major mode for editing Ceylon source code" single]) (cerbere . [(20140418 715) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5))) "Unit testing in Emacs for several programming languages" tar]) (centimacro . [(20140306 627) nil "Assign multiple macros as global key bindings" single]) (centered-window . [(20171127 149) ((emacs (24 4))) "Center the text when there's only one window" single]) (centered-cursor-mode . [(20180112 755) nil "cursor stays vertically centered" single]) (celestial-mode-line . [(20180518 122) ((emacs (24))) "Show lunar phase and sunrise/-set time in modeline" single]) (celery . [(20170225 124) ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) "a minor mode to draw stats from celery and more?" single]) (cedit . [(20141231 814) nil "paredit-like commands for c-like languages" single]) (cdnjs . [(20161031 822) ((dash (2 13 0)) (deferred (0 4)) (f (0 17 2)) (pkg-info (0 5))) "A front end for http://cdnjs.com" single]) (cdlatex . [(20140707 426) nil "Fast input methods for LaTeX environments and math" single]) (cdb . [(20151205 543) nil "constant database (cdb) reader for Emacs Lisp" single]) (cd-compile . [(20141108 1157) nil "run compile in a specific directory" single]) (ccls . [(20180708 2207) ((emacs (25 1)) (lsp-mode (3 4)) (dash (0 13))) "ccls client for lsp-mode" tar]) (ccc . [(20151205 543) nil "buffer local cursor color control library" single]) (cbm . [(20171116 440) ((cl-lib (0 5))) "Switch to similar buffers." single]) (catmacs . [(20170826 457) ((emacs (24))) "Simple CAT interface for Yaesu Transceivers." single]) (caskxy . [(20140513 839) ((log4e (0 2 0)) (yaxception (0 1))) "Control Cask in Emacs" single]) (cask-package-toolset . [(20170921 1556) ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Toolsettize your package" tar]) (cask-mode . [(20160410 749) ((emacs (24 3))) "major mode for editing Cask files" single]) (cask . [(20180626 1249) ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (1 2))) "Cask: Project management for Emacs package development" tar]) (caseformat . [(20160115 815) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (s (1 10 0))) "Format based letter case converter" single]) (caroline-theme . [(20160317 2220) ((emacs (24))) "A trip down to New Orleans..." single]) (cargo . [(20180521 408) ((emacs (24 3)) (rust-mode (0 2 0)) (markdown-mode (2 4))) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar]) (carbon-now-sh . [(20180331 1035) ((emacs (24 4)) (dash (2 12 0))) "https://carbon.now.sh integration." single]) (capture . [(20130828 944) nil "screencasting with \"avconv\" or \"ffmpeg\"" tar]) (caml . [(20171209 1232) nil "OCaml code editing commands for Emacs" tar]) (camcorder . [(20160404 2134) ((emacs (24)) (names (20150000)) (cl-lib (0 5))) "Record screencasts in gif or other formats." single]) (calmer-forest-theme . [(20130925 2210) nil "Darkish theme with green/orange tint" single]) (call-graph . [(20180509 635) ((emacs (25 1)) (cl-lib (0 6 1)) (hierarchy (0 7 0)) (tree-mode (1 0 0)) (ivy (0 10 0))) "Library to generate call graph for c/c++ functions" single]) (calfw-org . [(20160302 1858) nil "calendar view for org-agenda" single]) (calfw-ical . [(20150703 119) nil "calendar view for ical format" single]) (calfw-howm . [(20170703 1704) nil "calendar view for howm" single]) (calfw-gcal . [(20120111 200) nil "edit Google calendar for calfw.el." tar]) (calfw-cal . [(20170320 506) nil "calendar view for emacs diary" single]) (calfw . [(20180117 1645) nil "Calendar view framework on Emacs" single]) (calendar-norway . [(20160827 1316) nil "Norwegian calendar" single]) (cal-china-x . [(20180211 1101) ((cl-lib (0 5))) "Chinese localization, lunar/horoscope/zodiac info and more..." tar]) (cakecrumbs . [(20180222 1845) ((emacs (24 4))) "Show parents on header for HTML/Jade/Sass/Stylus" single]) (cake-inflector . [(20140415 158) ((s (1 9 0))) "Lazy porting CakePHP infrector.php to el" single]) (cacoo . [(20120319 1659) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar]) (cache . [(20111019 1600) nil "implementation of a hash table whose key-value pairs expire" single]) (cabledolphin . [(20160204 138) ((emacs (24 4)) (seq (1 0))) "capture Emacs network traffic" single]) (c0-mode . [(20151110 1052) nil "Major mode for editing C0 files" tar]) (c-eldoc . [(20170917 1502) nil "helpful description of the arguments to C functions" single]) (c-c-combo . [(20151223 1855) nil "Make stuff happen when you reach a target wpm" tar]) (button-lock . [(20150223 554) nil "Clickable text defined by regular expression" single]) (buttercup . [(20180629 523) nil "Behavior-Driven Emacs Lisp Testing" tar]) (butler . [(20150811 1708) ((deferred (0 3 2)) (json (1 2)) (emacs (24))) "Emacs client for Jenkins" tar]) (busybee-theme . [(20170719 228) nil "port of vim's mustang theme" single]) (buster-snippets . [(20151125 210) ((yasnippet (0 8 0))) "Yasnippets for the Buster javascript testing framework" tar]) (buster-mode . [(20140928 513) nil "Minor mode to speed up development when writing tests with Buster.js" single]) (bury-successful-compilation . [(20150328 1728) nil "Bury the *compilation* buffer after successful compilation" single]) (bundler . [(20160815 215) ((inf-ruby (2 1)) (cl-lib (0 5))) "Interact with Bundler from Emacs" single]) (build-status . [(20171111 1147) ((cl-lib (0 5))) "Mode line build status indicator" single]) (build-helper . [(20161009 1055) ((projectile (0 9 0))) "Utilities to help build code" single]) (bui . [(20171215 930) ((emacs (24 3)) (dash (2 11 0))) "Buffer interface library" tar]) (bug-reference-github . [(20180128 514) nil "Set `bug-reference-url-format' in Github repos" tar]) (bufshow . [(20130726 1138) ((emacs (24 1))) "A simple presentation tool for Emacs." single]) (buffer-watcher . [(20170913 139) ((f (0 16 2)) (cl-lib (0 5))) "Easily run shell scripts per filetype/directory when a buffer is saved" single]) (buffer-utils . [(20140512 700) nil "Buffer-manipulation utility functions" single]) (buffer-sets . [(20170717 2040) ((cl-lib (0 5))) "Sets of Buffers for Buffer Management" single]) (buffer-move . [(20160615 1103) nil "easily swap buffers" single]) (buffer-manage . [(20180528 913) ((emacs (25)) (choice-program (0 3)) (dash (2 13 0))) "manage buffers" tar]) (buffer-flip . [(20180307 1451) nil "Cycle through buffers like Alt-Tab in Windows" single]) (buffer-buttons . [(20150106 639) nil "Define, save, and load code-safe buttons in files for emacs" single]) (buckwalter . [(20180107 843) nil "Write arabic using Buckwalter transliteration" single]) (bubbleberry-theme . [(20141017 244) ((emacs (24 1))) "A theme based on LightTable for Emacs24" single]) (bts-github . [(20170401 549) ((bts (0 0 1)) (gh (0 8 2))) "A plugin of bts.el for GitHub" single]) (bts . [(20151109 533) ((widget-mvc (0 0 2)) (log4e (0 3 0)) (yaxception (0 3 3)) (dash (2 9 0)) (s (1 9 0)) (pos-tip (0 4 5))) "A unified UI for various bug tracking systems" single]) (btc-ticker . [(20151113 659) ((json (1 2)) (request (0 2 0))) "Shows latest bitcoin price" single]) (bshell . [(20170903 1137) ((emacs (25)) (buffer-manage (0 5))) "manage and track multiple inferior shells" single]) (browse-url-dwim . [(20140731 1222) ((string-utils (0 3 2))) "Context-sensitive external browse URL or Internet search" single]) (browse-kill-ring . [(20171219 1108) nil "interactively insert items from kill-ring" single]) (browse-at-remote . [(20180621 2331) ((f (0 17 2)) (s (1 9 0)) (cl-lib (0 5))) "Open github/gitlab/bitbucket/stash page from Emacs" single]) (broadcast . [(20151204 1812) ((emacs (24 4))) "Links buffers together for simultaneous editing." single]) (brainfuck-mode . [(20150113 42) ((langdoc (20130601 1450))) "Brainfuck mode for Emacs" single]) (bracketed-paste . [(20160407 1648) ((emacs (24 3))) "bracketed paste mode support within emacs -nw" single]) (bpr . [(20180220 1044) ((emacs (24))) "Background Process Runner" tar]) (bpe . [(20141228 1405) ((emacs (24 1))) "Blog from Org mode to Blogger" single]) (boxquote . [(20170802 417) ((cl-lib (0 5))) "Quote text with a semi-box." single]) (boron-theme . [(20170808 608) ((emacs (24 0))) "an Emacs 24 theme based on Boron (tmTheme)" single]) (borland-blue-theme . [(20160117 521) ((emacs (24 1))) "Blue/yellow theme based on old DOS Borland/Turbo C IDE" single]) (borg . [(20180702 1353) ((emacs (26)) (dash (2 13)) (epkg (3 0)) (magit (2 11))) "assimilate Emacs packages as Git submodules" tar]) (boon . [(20180319 526) ((emacs (25 1)) (expand-region (0 10 0)) (dash (2 12 0)) (multiple-cursors (1 3 0))) "Ergonomic Command Mode for Emacs." tar]) (bool-flip . [(20161215 739) ((emacs (24 3))) "flip the boolean under the point" single]) (boogie-friends . [(20171024 1955) ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23)) (yasnippet (0 9 0 1)) (company (0 8 12))) "A collection of programming modes for Boogie, Dafny, and Z3 (SMTLIB v2)." tar]) (bonjourmadame . [(20170919 434) nil "Say \"Hello ma'am!\"" single]) (bongo . [(20171118 1842) ((cl-lib (0 5)) (emacs (24 1))) "play music with Emacs" tar]) (bolt-mode . [(20180310 10) ((emacs (24 3))) "Editing support for Bolt language" single]) (bog . [(20180113 759) ((cl-lib (0 5))) "Extensions for research notes in Org mode" single]) (bnfc . [(20160605 1227) ((emacs (24 3))) "Define context-free grammars for the BNFC tool" single]) (bmx-mode . [(20180324 857) ((emacs (25 1)) (cl-lib (0 5)) (company (0 9 4)) (dash (2 13 0)) (s (1 12 0))) "Batch Mode eXtras" single]) (bm . [(20180703 343) nil "Visible bookmarks in buffer." tar]) (blog-minimal . [(20170311 555) ((ht (1 5)) (simple-httpd (1 4 6)) (mustache (0 22)) (s (1 11 0)) (org (9 0 3))) "a very simple static site generator based on org mode" tar]) (blog-admin . [(20170923 709) ((ctable (0 1 1)) (s (1 10 0)) (f (0 17 3)) (names (20151201 0)) (cl-lib (0 5))) "Blog admin for emacs with hexo/org-page supported" tar]) (blockdiag-mode . [(20160426 2224) ((emacs (24 3))) "Major mode for editing blockdiag files" single]) (bln-mode . [(20170112 527) nil "binary line navigation minor mode for cursor movement in long lines" single]) (bliss-theme . [(20170808 607) ((emacs (24 0))) "an Emacs 24 theme based on Bliss (tmTheme)" single]) (blgrep . [(20150401 716) ((clmemo (20140321 715))) "Block grep" tar]) (blacken . [(20180615 803) ((emacs (25 2))) "Reformat python buffers using the \"black\" formatter" single]) (blackboard-theme . [(20161215 2256) ((emacs (24))) "TextMate Blackboard Theme" single]) (blackboard-bold-mode . [(20160812 1906) ((cl-lib (0 5))) "Easily insert Unicode mathematical double-struck characters" single]) (bitlbee . [(20151202 1600) nil "Help get Bitlbee (http://www.bitlbee.org) up and running." single]) (bitbucket . [(20170404 2146) ((emacs (24)) (request (0 1 0)) (s (1 9 0))) "Bitbucket API wrapper" tar]) (bitbake . [(20180326 58) ((emacs (24 1)) (dash (2 6 0)) (mmm-mode (0 5 4)) (s (1 10 0))) "Running bitbake from emacs" single]) (bison-mode . [(20160616 2252) nil "Major mode for editing bison, yacc and lex files." single]) (birds-of-paradise-plus-theme . [(20130419 1429) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single]) (bing-dict . [(20170604 1831) nil "Minimalists' English-Chinese Bing dictionary" single]) (bind-map . [(20161207 711) ((emacs (24 3))) "Bind personal keymaps in multiple locations" single]) (bind-key . [(20180512 2130) nil "A simple way to manage personal keybindings" single]) (bind-chord . [(20171204 1210) ((bind-key (1 0)) (key-chord (0 6))) "key-chord binding helper for use-package-chords" single]) (binclock . [(20170802 416) ((cl-lib (0 5))) "Display the current time using a binary clock." single]) (bifocal . [(20171004 1124) ((emacs (24 4))) "Split-screen scrolling for comint-mode buffers" single]) (bicycle . [(20180624 12) ((emacs (25 1))) "cycle outline and code visibility" single]) (bibtex-utils . [(20170817 1219) nil "Provides utilities for extending BibTeX mode" single]) (bibslurp . [(20151202 1546) ((s (1 6 0)) (dash (1 5 0))) "retrieve BibTeX entries from NASA ADS" single]) (bibretrieve . [(20180617 1108) ((auctex (11 87)) (emacs (24 3))) "Retrieve BibTeX entries from the internet" tar]) (bibliothek . [(20180429 1515) ((emacs (24 4)) (pdf-tools (0 70)) (a (0 1 0 -3 4))) "Managing a digital library of PDFs" single]) (biblio-core . [(20160901 1115) ((emacs (24 3)) (let-alist (1 0 4)) (seq (1 11)) (dash (2 12 1))) "A framework for looking up and displaying bibliographic entries" single]) (biblio . [(20161014 1604) ((emacs (24 3)) (biblio-core (0 2))) "Browse and import bibliographic references from CrossRef, arXiv, DBLP, HAL, Dissemin, and doi.org" tar]) (bfbuilder . [(20150924 950) ((cl-lib (0 3))) "A brainfuck development environment with interactive debugger" single]) (bf-mode . [(20130403 742) nil "Browse file persistently on dired" single]) (better-shell . [(20180625 616) ((emacs (24 4))) "Better shell management" single]) (better-defaults . [(20170613 2104) nil "Fixing weird quirks and poor defaults" single]) (bert . [(20131117 214) nil "BERT serialization library for Emacs" single]) (benchstat . [(20171013 2012) nil "proper benchmarking made simple" single]) (benchmark-init . [(20150905 238) nil "Benchmarks Emacs require and load calls" tar]) (belarus-holidays . [(20180615 611) nil "Belarus holidays whith transfers" single]) (beginend . [(20171003 548) ((emacs (24 4))) "Redefine M-< and M-> for some modes" single]) (beeminder . [(20180413 1229) ((org (7))) "Emacs interface for Beeminder" tar]) (beacon . [(20180706 1025) ((seq (2 14))) "Highlight the cursor whenever the window scrolls" single]) (bdo . [(20140126 101) nil "Do things to a browser page from Emacs. BETA!" tar]) (bbyac . [(20180206 641) ((browse-kill-ring (1 3)) (cl-lib (0 5))) "Type a little Bit, and Bang! You Are Completed." tar]) (bbdb2erc . [(20170221 554) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single]) (bbdb-vcard . [(20150713 1350) ((bbdb (3 0))) "vCard import/export for BBDB" tar]) (bbdb-ext . [(20151220 1213) ((bbdb (2 36))) "Extra commands for BBDB" single]) (bbdb-csv-import . [(20180121 1649) ((pcsv (1 3 3)) (dash (2 5 0)) (bbdb (20140412 1949))) "import csv to bbdb version 3+" single]) (bbdb . [(20180502 2038) nil "The Insidious Big Brother Database for GNU Emacs" tar]) (bbdb- . [(20140221 1554) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." single]) (bbcode-mode . [(20180505 227) ((cl-lib (0 5))) "Major mode for phpBB posts (BBCode markup)" single]) (bazel-mode . [(20180222 2253) ((emacs (24 3))) "A major mode for editing Bazel files" single]) (bats-mode . [(20160513 2315) nil "Emacs mode for editing and running Bats tests" single]) (basic-theme . [(20160817 127) ((emacs (24))) "Minimalistic light color theme" single]) (basic-mode . [(20180612 1152) ((seq (2 20)) (emacs (24 3))) "major mode for editing BASIC code" single]) (basic-c-compile . [(20170302 312) ((cl-lib (0 5)) (f (0 19 0))) "Quickly create a Makefile, compile and run C." single]) (bash-completion . [(20180519 920) nil "BASH completion for the shell buffer" single]) (base16-theme . [(20180524 1311) nil "Collection of themes built on combinations of 16 base colors" tar]) (bart-mode . [(20180131 1829) ((emacs (24 3))) "Real time BART departures info." single]) (bar-cursor . [(20180226 1645) nil "package used to switch block cursor to a bar" single]) (banner-comment . [(20180510 620) ((emacs (24 4))) "For producing banner comments." single]) (badwolf-theme . [(20161004 15) ((emacs (24))) "Bad Wolf color theme" single]) (badger-theme . [(20140716 1932) nil "A dark theme for Emacs 24." single]) (backward-forward . [(20161228 2150) ((emacs (24 5))) "navigation backwards and forwards across marks" single]) (backup-walker . [(20130720 816) nil "quickly traverse all backups of a file" single]) (backup-each-save . [(20180226 2157) nil "backup each savepoint of a file" single]) (backlight . [(20180629 1459) ((emacs (24 3))) "backlight brightness adjustment on GNU/Linux" single]) (back-button . [(20150804 1304) ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (list-utils (0 4 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Visual navigation through mark rings" single]) (babel-repl . [(20160504 1501) ((emacs (24))) "Run babel REPL" single]) (babel . [(20161122 2340) nil "interface to web translation services such as Babelfish" single]) (axiom-environment . [(20180401 1257) ((emacs (24 2))) "An environment for using Axiom/OpenAxiom/FriCAS" tar]) (aws-snippets . [(20180410 845) ((yasnippet (0 8 0))) "Yasnippets for AWS" tar]) (aws-ec2 . [(20161007 1214) ((emacs (24 4)) (dash (2 12 1)) (tblui (0 1 0))) "Manage AWS EC2 instances" single]) (avy-zap . [(20160921 1444) ((avy (0 2 0))) "Zap to char using `avy'" single]) (avy-migemo . [(20180716 755) ((emacs (24 4)) (avy (0 4 0)) (migemo (1 9))) "avy with migemo" tar]) (avy-menu . [(20171231 2220) ((emacs (24 3)) (avy (0 3 0))) "Library providing avy-powered popup menu" single]) (avy-flycheck . [(20160720 800) ((emacs (24 1)) (flycheck (0 14)) (seq (1 11)) (avy (0 4 0))) "Jump to and fix syntax errors using `flycheck' with `avy' interface" single]) (avy . [(20180615 801) ((emacs (24 1)) (cl-lib (0 5))) "Jump to arbitrary positions in visible text and select text quickly." single]) (avk-emacs-themes . [(20180406 2220) nil "Collection of avk themes" tar]) (avandu . [(20170101 1103) nil "Gateway to Tiny Tiny RSS" tar]) (autumn-light-theme . [(20150515 747) nil "A light color theme with muted, autumnal colors." single]) (autothemer . [(20170112 1324) ((dash (2 10 0)) (emacs (24)) (cl-lib (0 5))) "Conveniently define themes." single]) (autotetris-mode . [(20141114 846) ((cl-lib (0 5))) "automatically play tetris" single]) (autotest . [(20180323 1542) nil "ZenTest's autotest integration with emacs." single]) (autopair . [(20160304 437) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single]) (automargin . [(20131112 14) nil "add margins to windows not-splitted, and center them" single]) (autodisass-llvm-bitcode . [(20150410 1825) nil "Automatically disassemble LLVM bitcode" tar]) (autodisass-java-bytecode . [(20151005 912) nil "Automatically disassemble Java bytecode" tar]) (autobookmarks . [(20180531 1206) ((dash (2 10 0)) (cl-lib (0 5))) "Save recently visited files and buffers" single]) (auto-yasnippet . [(20180503 1208) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single]) (auto-virtualenvwrapper . [(20180408 310) ((cl-lib (0 6)) (s (1 10 0)) (virtualenvwrapper (0))) "Lightweight auto activate python virtualenvs" single]) (auto-virtualenv . [(20170125 1117) ((cl-lib (0 5)) (pyvenv (1 9)) (s (1 10 0))) "Auto activate python virtualenvs" single]) (auto-sudoedit . [(20180428 2343) ((emacs (24)) (f (0 19 0))) "auto sudo edit by tramp" single]) (auto-shell-command . [(20160603 1938) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single]) (auto-save-buffers-enhanced . [(20161108 2310) nil "Automatically save buffers in a decent way" single]) (auto-read-only . [(20170305 2043) ((cl-lib (0 5))) "Automatically make the buffer to read-only" single]) (auto-pause . [(20160426 516) ((emacs (24 4))) "Run processes which will be paused when Emacs is idle" single]) (auto-package-update . [(20180712 1345) ((emacs (24 4)) (dash (2 1 0))) "Automatically update Emacs packages." single]) (auto-org-md . [(20180213 1543) ((emacs (24 4))) "export a markdown file automatically when you save an org-file" single]) (auto-minor-mode . [(20180527 423) ((emacs (24 4))) "Enable minor modes by file name and contents" single]) (auto-indent-mode . [(20171221 2106) nil "Auto indent Minor mode" tar]) (auto-highlight-symbol . [(20130313 243) nil "Automatic highlighting current symbol minor mode" single]) (auto-dim-other-buffers . [(20180612 1641) nil "Makes non-current buffers less prominent" single]) (auto-dictionary . [(20150410 910) nil "automatic dictionary switcher for flyspell" single]) (auto-complete-sage . [(20160514 51) ((auto-complete (1 5 1)) (sage-shell-mode (0 1 0))) "An auto-complete source for sage-shell-mode." single]) (auto-complete-rst . [(20140225 144) ((auto-complete (1 4))) "Auto-complete extension for ReST and Sphinx" tar]) (auto-complete-pcmp . [(20140226 2251) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide auto-complete sources using pcomplete results" single]) (auto-complete-nxml . [(20140220 2058) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single]) (auto-complete-exuberant-ctags . [(20140320 24) ((auto-complete (1 4 0))) "Exuberant ctags auto-complete.el source" single]) (auto-complete-distel . [(20160815 2300) ((auto-complete (1 4)) (distel-completion-lib (1 0 0))) "Erlang/distel completion backend for auto-complete-mode" single]) (auto-complete-clang-async . [(20130526 814) nil "Auto Completion source for clang for GNU Emacs" single]) (auto-complete-clang . [(20140409 52) ((auto-complete (1 3 1))) "Auto Completion source for clang for GNU Emacs" single]) (auto-complete-chunk . [(20140225 146) ((auto-complete (1 4))) "Auto-completion for dot.separated.words." single]) (auto-complete-c-headers . [(20150911 2023) ((auto-complete (1 4))) "An auto-complete source for C/C++ header files" single]) (auto-complete-auctex . [(20140223 958) ((yasnippet (0 6 1)) (auto-complete (1 4))) "auto-completion for auctex" single]) (auto-complete . [(20170124 1845) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar]) (auto-compile . [(20180321 807) ((emacs (24 3)) (packed (2 0 0))) "automatically compile Emacs Lisp libraries" single]) (auto-auto-indent . [(20131106 1103) ((es-lib (0 1)) (cl-lib (1 0))) "Indents code as you type" single]) (auto-async-byte-compile . [(20160915 2154) nil "Automatically byte-compile when saved" single]) (auth-source-pass . [(20180529 657) ((emacs (25))) "Integrate auth-source with password-store" single]) (aurora-config-mode . [(20180216 1502) nil "Major mode for Apache Aurora configuration files" single]) (aurel . [(20170114 137) ((emacs (24 3)) (bui (1 1 0)) (dash (2 11 0))) "Search, get info, vote for and download AUR packages" single]) (audio-notes-mode . [(20170611 1459) nil "Play audio notes synced from somewhere else." single]) (auctex-lua . [(20151121 810) ((auctex (11 86)) (lua-mode (20130419))) "Lua editing support for AUCTeX" single]) (auctex-latexmk . [(20170618 936) ((auctex (11 87))) "Add LatexMk support to AUCTeX" single]) (attrap . [(20180715 1205) ((dash (2 12 0)) (emacs (25 1)) (f (0 19 0)) (flycheck (0 30)) (s (1 11 0))) "ATtempt To Repair At Point" single]) (atomic-chrome . [(20180617 24) ((emacs (24 3)) (let-alist (1 0 4)) (websocket (1 4))) "Edit Chrome text area with Emacs using Atomic Chrome" single]) (atom-one-dark-theme . [(20180607 1638) nil "Atom One Dark color theme" single]) (atom-dark-theme . [(20170710 1612) nil "An Emacs port of the Atom Dark theme from Atom.io." single]) (async-await . [(20170208 350) ((emacs (25)) (promise (1 0))) "Async/Await" single]) (async . [(20180527 1030) nil "Asynchronous processing in Emacs" tar]) (assess . [(20170504 657) ((emacs (24 1)) (m-buffer (0 15))) "Test support functions" tar]) (asn1-mode . [(20170728 1926) ((emacs (24 3)) (s (1 10 0))) "ASN.1/GDMO mode for GNU Emacs" single]) (asilea . [(20150105 725) ((emacs (24)) (cl-lib (0 5))) "Find best compiler options using simulated annealing" single]) (arview . [(20160419 1409) nil "extract and view archives in the temporary directory" single]) (artbollocks-mode . [(20170523 2122) nil "Improve your writing (especially about art)" single]) (arjen-grey-theme . [(20170522 1347) nil "A soothing dark grey theme" single]) (ariadne . [(20131117 911) ((bert (0 1))) "Ariadne plugin for Emacs" single]) (aria2 . [(20141107 1517) ((emacs (24 4))) "Control aria2c commandline tool from Emacs" single]) (arduino-mode . [(20180508 1736) ((emacs (25)) (cl-lib (0 5)) (spinner (1 7 3))) "Major mode for editing Arduino code." tar]) (archive-rpm . [(20180706 532) ((emacs (24 4))) "RPM and CPIO support for archive-mode" tar]) (archive-region . [(20140201 1542) nil "Move region to archive file instead of killing" single]) (arch-packer . [(20170730 621) ((emacs (25 1)) (s (1 11 0)) (async (1 9 2)) (dash (2 12 0))) "Arch Linux package management frontend" single]) (apt-sources-list . [(20180527 541) ((emacs (24 4))) "Mode for editing APT source.list files" single]) (apropospriate-theme . [(20180223 1526) nil "A colorful, low-contrast, light & dark theme set for Emacs with a fun name." tar]) (aproject . [(20150605 206) nil "Basic project framework for Emacs" tar]) (applescript-mode . [(20090320 2332) nil "major mode for editing AppleScript source" single]) (apples-mode . [(20110120 2018) nil "Major mode for editing and executing AppleScript code" tar]) (apiwrap . [(20180602 1531) ((emacs (25))) "api-wrapping macros" single]) (apib-mode . [(20170520 658) ((markdown-mode (2 1))) "Major mode for API Blueprint files" single]) (apel . [(20170122 1458) nil "APEL (A Portable Emacs Library) provides support for portable Emacs Lisp programs" tar]) (apache-mode . [(20170711 913) nil "major mode for editing Apache configuration files" single]) (aozora-view . [(20140310 617) nil "Aozora Bunko text Emacs viewer." tar]) (anzu . [(20161017 907) ((emacs (24 3))) "Show number of matches in mode-line while searching" single]) (anyins . [(20131229 241) nil "Insert content at multiple places from shell command or kill-ring" single]) (anybar . [(20160816 721) nil "Control AnyBar from Emacs" single]) (anx-api . [(20140208 714) nil "Interact with the AppNexus API from Emacs." single]) (anti-zenburn-theme . [(20180712 1138) nil "Low-contrast Zenburn-inverted theme" single]) (ant . [(20160211 743) nil "helpers for compiling with ant" single]) (ansible-vault . [(20170111 1318) ((emacs (24 3))) "Minor mode for editing ansible vault files" single]) (ansible-doc . [(20160924 124) ((emacs (24 3))) "Ansible documentation Minor Mode" single]) (ansible . [(20170926 1951) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar]) (ansi . [(20150703 126) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" single]) (annoying-arrows-mode . [(20161023 2346) ((cl-lib (0 5))) "Ring the bell if using arrows too much" single]) (annotate-depth . [(20160520 1340) nil "Annotate buffer if indentation depth is beyond threshold." single]) (annotate . [(20171110 2336) nil "annotate files without changing them" single]) (anki-editor . [(20180715 151) ((emacs (25)) (request (0 3 0)) (dash (2 12 0))) "Minor mode for making Anki cards with Org" tar]) (angular-snippets . [(20140513 2223) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar]) (angular-mode . [(20151201 1327) nil "Major mode for Angular.js" tar]) (angry-police-captain . [(20120829 552) nil "Show quote from http://theangrypolicecaptain.com in the minibuffer" single]) (android-mode . [(20170323 115) nil "Minor mode for Android application development" single]) (anaphora . [(20180618 1500) nil "anaphoric macros providing implicit temp variables" single]) (anaconda-mode . [(20180707 1010) ((emacs (25)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" single]) (amx . [(20180627 1555) ((emacs (24 4)) (s (0))) "Alternative M-x with extra features." single]) (ample-zen-theme . [(20150119 1354) nil "AmpleZen Theme for Emacs 24" single]) (ample-theme . [(20180207 945) nil "Calm Dark Theme for Emacs" tar]) (ample-regexps . [(20151023 300) nil "ample regular expressions for Emacs" tar]) (amd-mode . [(20180111 602) ((emacs (25)) (projectile (20161008 47)) (s (1 9 0)) (f (0 16 2)) (seq (2 16)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) "Minor mode for handling JavaScript AMD module requirements." single]) (all-the-icons-ivy . [(20180225 630) ((emacs (24 4)) (all-the-icons (2 4 0)) (ivy (0 8 0))) "Shows icons while using ivy and counsel" single]) (all-the-icons-gnus . [(20180510 2354) ((emacs (24 4)) (dash (2 12 0)) (all-the-icons (3 1 0))) "Shows icons for in Gnus" single]) (all-the-icons-dired . [(20170418 1431) ((emacs (24 4)) (all-the-icons (2 2 0))) "Shows icons for each file in dired mode" single]) (all-the-icons . [(20180125 757) ((emacs (24 3)) (memoize (1 0 1))) "A library for inserting Developer icons" tar]) (all-ext . [(20170114 1805) ((all (1 0))) "M-x all with helm-swoop/anything/multiple-cursors/line-number" single]) (align-cljlet . [(20160112 1301) ((clojure-mode (1 11 5))) "Space align various Clojure forms" single]) (alert . [(20180403 38) ((gntp (0 1)) (log4e (0 3 0))) "Growl-style notification system for Emacs" single]) (alect-themes . [(20180504 1020) ((emacs (24 0))) "Configurable light, dark and black themes for Emacs 24 or later" tar]) (alda-mode . [(20180607 2305) ((emacs (24 0))) "An Alda major mode" single]) (alchemist . [(20180312 604) ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4)) (s (1 11 0))) "Elixir tooling integration into Emacs" tar]) (alan-mode . [(20180711 2148) ((flycheck (32)) (emacs (25 1)) (s (1 12))) "Major mode for editing M-industries Alan files" single]) (airplay . [(20130212 426) ((request (20130110 2144)) (simple-httpd (1 4 1)) (deferred (0 3 1))) "Airplay bindings to Emacs" tar]) (airline-themes . [(20180410 2106) ((powerline (2 3))) "vim-airline themes for emacs powerline" tar]) (ahungry-theme . [(20180130 1928) ((emacs (24))) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." single]) (ahk-mode . [(20160320 1521) ((emacs (24 3))) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" single]) (ahg . [(20180125 944) nil "Alberto's Emacs interface for Mercurial (Hg)" single]) (aggressive-indent . [(20180626 1721) ((emacs (24 1)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single]) (aggressive-fill-paragraph . [(20170902 705) ((dash (2 10 0))) "A mode to automatically keep paragraphs filled" single]) (ag . [(20180225 240) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "A front-end for ag ('the silver searcher'), the C ack replacement." single]) (afternoon-theme . [(20140104 1059) ((emacs (24 1))) "Dark color theme with a deep blue background" single]) (aes . [(20171028 2323) nil "Implementation of AES" single]) (adoc-mode . [(20160314 1430) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single]) (addressbook-bookmark . [(20171107 2234) ((emacs (24))) "An address book based on Standard Emacs bookmarks." single]) (add-node-modules-path . [(20180710 1642) nil "Add node_modules to your exec-path" single]) (add-hooks . [(20171216 1723) nil "Functions for setting multiple hooks" single]) (adafruit-wisdom . [(20180224 1652) ((emacs (25))) "Get/display adafruit.com quotes" single]) (actionscript-mode . [(20180527 1001) nil "A simple mode for editing Actionscript 3 files" single]) (ack-menu . [(20150504 1322) ((mag-menu (0 1 0))) "A menu-based front-end for ack" single]) (achievements . [(20150530 1126) ((keyfreq (0 0 3))) "Achievements for emacs usage." tar]) (ace-window . [(20180607 1223) ((avy (0 2 0))) "Quickly switch windows." single]) (ace-popup-menu . [(20171231 2215) ((emacs (24 3)) (avy-menu (0 1))) "Replace GUI popup menu with something more efficient" single]) (ace-pinyin . [(20170430 2326) ((avy (0 2 0)) (pinyinlib (0 1 0))) "Jump to Chinese characters using avy or ace-jump-mode" single]) (ace-mc . [(20160408 1737) ((ace-jump-mode (1 0)) (multiple-cursors (1 0)) (dash (2 10 0))) "Add multiple cursors quickly using ace jump" single]) (ace-link . [(20180308 100) ((avy (0 4 0))) "Quickly follow links" single]) (ace-jump-zap . [(20170717 1149) ((ace-jump-mode (1 0)) (dash (2 10 0))) "Character zapping, `ace-jump-mode` style" single]) (ace-jump-mode . [(20140616 115) nil "a quick cursor location minor mode for emacs" single]) (ace-jump-helm-line . [(20160918 1136) ((avy (0 4 0)) (helm (1 6 3))) "Ace-jump to a candidate in helm window" single]) (ace-jump-buffer . [(20171031 850) ((avy (0 4 0)) (dash (2 4 0))) "fast buffer switching extension to `avy'" single]) (ace-isearch . [(20170506 12) ((emacs (24))) "A seamless bridge between isearch, ace-jump-mode, avy, helm-swoop and swiper" single]) (ace-flyspell . [(20170308 2109) ((avy (0 4 0))) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" single]) (academic-phrases . [(20180318 438) ((dash (2 12 0)) (s (1 12 0)) (ht (2 0)) (emacs (24))) "Bypass that mental block when writing your papers." single]) (ac-sly . [(20170728 327) ((sly (1 0 0 -3)) (auto-complete (1 4)) (cl-lib (0 5))) "An auto-complete source using sly completions" single]) (ac-slime . [(20171027 1400) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) "An auto-complete source using slime completions" single]) (ac-skk . [(20141229 1719) ((auto-complete (1 3 1)) (ddskk (16 0 50)) (tinysegmenter (0)) (cl-lib (0 5))) "auto-complete-mode source for DDSKK a.k.a Japanese input method" single]) (ac-rtags . [(20170522 2154) ((auto-complete (1 4 0)) (rtags (2 10))) "auto-complete back-end for RTags" single]) (ac-racer . [(20170114 9) ((emacs (24 3)) (auto-complete (1 5 0)) (racer (0 0 2))) "auto-complete source of racer" single]) (ac-php-core . [(20180629 144) ((emacs (24)) (dash (1)) (php-mode (1)) (xcscope (1)) (s (1)) (f (0 17 0)) (popup (0 5 0))) "gen tags for php" tar]) (ac-php . [(20171201 134) ((ac-php-core (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0))) "auto-completion source for php" single]) (ac-octave . [(20180405 2034) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single]) (ac-mozc . [(20150227 819) ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) "auto-complete sources for Japanese input using Mozc" single]) (ac-math . [(20141116 1327) ((auto-complete (1 4)) (math-symbol-lists (1 0))) "Auto-complete sources for input of mathematical symbols and latex tags" single]) (ac-js2 . [(20140906 442) ((js2-mode (20090723)) (skewer-mode (1 4))) "Auto-complete source for Js2-mode, with navigation" tar]) (ac-ispell . [(20151031 1926) ((auto-complete (1 4)) (cl-lib (0 5))) "ispell completion source for auto-complete" single]) (ac-inf-ruby . [(20131115 350) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single]) (ac-html-csswatcher . [(20151208 1313) ((web-completion-data (0 1))) "css/less class/id completion with `ac-html' or `company-web'" single]) (ac-html-bootstrap . [(20160302 901) ((web-completion-data (0 1))) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" tar]) (ac-html-angular . [(20151224 2319) ((web-completion-data (0 1))) "auto complete angular15 data for `ac-html' and `company-web'" tar]) (ac-html . [(20151005 31) ((auto-complete (1 4)) (s (1 9)) (f (0 17)) (dash (2 10))) "auto complete source for html tags and attributes" tar]) (ac-helm . [(20160318 1933) ((helm (1 6 3)) (auto-complete (1 4 0)) (popup (0 5 0)) (cl-lib (0 5))) "Helm interface for auto-complete" single]) (ac-haskell-process . [(20150423 702) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single]) (ac-geiser . [(20130928 2347) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar]) (ac-etags . [(20161001 807) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single]) (ac-emoji . [(20150823 11) ((auto-complete (1 5 0)) (cl-lib (0 5))) "auto-complete source of Emoji" tar]) (ac-emmet . [(20131015 858) ((emmet-mode (1 0 2)) (auto-complete (1 4))) "auto-complete sources for emmet-mode's snippets" single]) (ac-emacs-eclim . [(20170924 1339) ((eclim (0 3)) (auto-complete (1 5))) "auto-complete source for eclim" single]) (ac-dcd . [(20170323 601) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) "Auto Completion source for dcd for GNU Emacs" single]) (ac-clang . [(20180709 2246) ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) "Auto Completion source by libclang for GNU Emacs" tar]) (ac-cider . [(20161006 19) ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) "Clojure auto-complete sources using CIDER" single]) (ac-capf . [(20151031 1917) ((auto-complete (1 4)) (cl-lib (0 5))) "auto-complete source with completion-at-point" single]) (ac-c-headers . [(20151021 134) ((auto-complete (1 3 1))) "auto-complete source for C headers" single]) (ac-alchemist . [(20150907 2356) ((auto-complete (1 5 0)) (alchemist (1 5 0)) (cl-lib (0 5))) "auto-complete source for alchemist" single]) (abyss-theme . [(20170808 645) ((emacs (24))) "A dark theme with contrasting colours." single]) (abl-mode . [(20170604 1309) nil "Python TDD minor mode" single]) (abgaben . [(20171118 2246) ((pdf-tools (0 80)) (f (0 19 0)) (s (1 11 0))) "review and correct assignments received by mail" single]) (abc-mode . [(20171020 319) nil "Major mode for editing abc music files" single]) (aa-edit-mode . [(20170118 1920) ((emacs (24 3)) (navi2ch (2 0 0))) "Major mode for editing AA(S_JIS Art) and .mlt file" single]) (a . [(20170720 553) ((emacs (25))) "Associative data structure functions" single]) (@ . [(20140707 520) ((queue (0 1)) (emacs (24))) "multiple-inheritance prototype-based objects DSL" tar]) (4clojure . [(20131014 1507) ((json (1 2)) (request (0 2 0))) "Open and evaluate 4clojure.com questions" single]) (2048-game . [(20151026 1233) nil "play 2048 in Emacs" single]) (0xc . [(20170125 1953) ((emacs (24 4)) (s (1 11 0))) "Base conversion made easy" single]) (0blayout . [(20161007 2307) nil "Layout grouping with ease" single]))
