
(1 (zzz-to-char . [(0 1 2) ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) "Fancy version of `zap-to-char' command" single ((:commit . "b62414b155fe2e09d91b70059a909d1403d89acf") (:url . "https://github.com/mrkkrp/zzz-to-char") (:keywords "convenience"))]) (zygospore . [(0 0 3) nil "reversible C-x 1 (delete-other-windows)" single ((:commit . "1af5ee663f5a7aa08d96a77cacff834dcdf55ea8") (:url . "https://github.com/louiskottmann/zygospore.el"))]) (zotxt . [(0 1 34) ((request-deferred (0 2 0))) "Tools to integrate emacs with Zotero via the zotxt plugin." tar ((:commit . "43c0c6d23b31126bac6b14bb85608180fd9c866f"))]) (zotelo . [(1 3) nil "Manage Zotero collections from emacs" single ((:commit . "56eaaa76f80bd15710e68af4a1e585394af987d3") (:url . "https://github.com/vitoshka/zotelo") (:keywords "zotero" "emacs" "reftex" "bibtex" "mozrepl" "bibliography manager"))]) (zop-to-char . [(1 1) ((cl-lib (0 5))) "A replacement of zap-to-char." single ((:commit . "816ea90337db0545a2f0a5079f4d7b3a2822af7d") (:url . "https://github.com/thierryvolpiatto/zop-to-char"))]) (zoom-window . [(0 5) ((emacs (24 3))) "Zoom window like tmux" single ((:commit . "eefe36d26e04a9f89aad27671d1f06e9d4736ac6") (:url . "https://github.com/syohex/emacs-zoom-window"))]) (zone-nyan . [(0 2 2) ((esxml (0 3 1))) "Zone out with nyan cat" single ((:commit . "e36875d83ad3dce14f23864688959fa0d98ba410") (:url . "https://github.com/wasamasa/zone-nyan") (:keywords "zone"))]) (zombie-trellys-mode . [(0 2 1) ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5))) "A minor mode for interaction with Zombie Trellys" single ((:commit . "9e99d444a387dd1634cab62ef802683f5bf5d907") (:keywords "languages"))]) (zerodark-theme . [(4 5) ((all-the-icons (2 0 0)) (magit (2 8 0)) (flycheck (29))) "A dark, medium contrast theme for Emacs" single ((:commit . "ceb46240636865e86f3fe26906957943ba7bd73c") (:url . "https://github.com/NicolasPetton/zerodark-theme") (:keywords "themes"))]) (zenburn-theme . [(2 5) nil "A low contrast color theme for Emacs." single ((:commit . "f031c785b469cf4356fddb997eccf60399e34235") (:url . "http://github.com/bbatsov/zenburn-emacs"))]) (youdao-dictionary . [(0 4) ((popup (0 5 0)) (chinese-word-at-point (0 2)) (names (0 5)) (emacs (24))) "Youdao Dictionary interface for Emacs" single ((:commit . "a6e44e4fb93cc1b9f1067f10cf854b0bfc3fe732") (:url . "https://github.com/xuchunyang/youdao-dictionary.el") (:keywords "convenience" "chinese" "dictionary"))]) (yoshi-theme . [(6 1 0) nil "Theme named after my cat" single ((:commit . "b140d3adce4e8e7ff7b0daaa6684bd7065e4819b") (:url . "http://projects.ryuslash.org/yoshi-theme/") (:keywords "faces"))]) (yesql-ghosts . [(0 1 0) ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) "Display ghostly yesql defqueries inline" single ((:commit . "bd834e97f263f9f981758c1462bc6297a83ca852"))]) (ydk-mode . [(1 0 0) nil "Language support for Yu-Gi-Oh! deck files" single ((:commit . "f3f125b29408e0b0a34fec27dcb7c02c5dbfd04e") (:url . "https://github.com/jacksonrayhamilton/ydk-mode") (:keywords "faces" "games" "languages" "ydk" "yugioh" "yu-gi-oh"))]) (ycmd . [(1 2) ((emacs (24 4)) (dash (2 13 0)) (s (1 11 0)) (deferred (0 5 1)) (cl-lib (0 6 1)) (let-alist (1 0 5)) (request (0 3 0)) (request-deferred (0 3 0)) (pkg-info (0 6))) "emacs bindings to the ycmd completion server" tar ((:commit . "d042a673b4d717c3ca9d641f120bfe16c994c740") (:url . "https://github.com/abingham/emacs-ycmd"))]) (yaxception . [(0 3 3) nil "Provide framework about exception like Java for Elisp" single ((:commit . "4e94cf3e0b9b5631b0e90eb4b7de597ee7185875") (:url . "https://github.com/aki2o/yaxception") (:keywords "exception" "error" "signal"))]) (yatex . [(1 78) nil "Yet Another tex-mode for emacs //野鳥//" tar nil]) (yatemplate . [(2 0) ((yasnippet (0 8 1))) "File templates with yasnippet" tar ((:commit . "90c14d2e2b8247eeba464a52560af484f8542558") (:url . "https://github.com/mineo/yatemplate") (:keywords "files" "convenience"))]) (yasnippet . [(0 12 0) ((cl-lib (0 5))) "Yet another snippet extension for Emacs." tar ((:commit . "75cbf7251b2c041b134f6b0d162dfe911e578b8f") (:url . "http://github.com/joaotavora/yasnippet") (:keywords "convenience" "emulation"))]) (yascroll . [(0 1) nil "Yet Another Scroll Bar Mode" single ((:commit . "0a8b531b3a3c8afe7235c8c212e08bfe2021a629") (:keywords "convenience"))]) (yankpad . [(1 6) nil "Paste snippets from an org-mode file" single ((:commit . "d2ea6920a2444f1ce6f53947640446b8e16f84b7") (:url . "http://github.com/Kungsgeten/yankpad") (:keywords "abbrev" "convenience"))]) (yang-mode . [(0 9 4) nil "major mode for editing YANG files" single ((:commit . "bcf698acbdb4df91f587942348739b407a8b0807"))]) (yaml-mode . [(0 0 13) ((emacs (24 1))) "Major mode for editing YAML files" single ((:commit . "2ace378bef2047a980fba0e42e3e6b5d990f2c66") (:keywords "data" "yaml"))]) (yagist . [(0 8 12) ((cl-lib (0 3))) "Yet Another Emacs integration for gist.github.com" single ((:commit . "97723a34750ccab5439eb9f6a2f67e4e0e234167") (:url . "https://github.com/mhayashi1120/yagist.el") (:keywords "tools"))]) (yafolding . [(0 4 0) nil "Yet another folding extension for Emacs" single ((:commit . "57c015ddd7c3454571c80825bc5391d7a10fa1d7") (:keywords "folding"))]) (xtest . [(1 1 0) ((cl-lib (0 5))) "Simple Testing with Emacs & ERT" single ((:commit . "b227414d714e7baddef79bd306a43024b9a34d45") (:url . "https://github.com/promethial/xtest") (:keywords "testing" "ert"))]) (xterm-color . [(1 6) ((cl-lib (0 5))) "ANSI & XTERM 256 color support" single ((:commit . "ed3d0f4ccb2b28ff034192c50f244a97197d3911") (:url . "https://github.com/atomontage/xterm-color") (:keywords "faces"))]) (xref-js2 . [(1 5) ((emacs (25)) (js2-mode (20150909))) "Jump to references/definitions using ag & js2-mode's AST" single ((:commit . "7e2bc6a8dad08a493d11d3554f6374584846b9e6") (:url . "https://github.com/NicolasPetton/xref-js2") (:keywords "javascript" "convenience" "tools"))]) (xquery-tool . [(0 1 10) nil "A simple interface to saxonb's xquery." single ((:commit . "b81b5862e8541aca5231840eb176afad7ab55cf3") (:url . "https://github.com/paddymcall/xquery-tool.el") (:keywords "xml" "xquery" "emacs"))]) (xmlgen . [(0 5) nil "A DSL for generating XML." single ((:commit . "dba66681f0c5e621a9e70e8afb34903c9ffe93c4"))]) (xml-rpc . [(1 6 12) nil "An elisp implementation of clientside XML-RPC" single ((:commit . "0ab093d60140d19e31d217c8abdc7dbdac944486") (:url . "http://github.com/hexmode/xml-rpc-el") (:keywords "xml" "rpc" "network"))]) (xkcd . [(1 1) ((json (1 3))) "View xkcd from Emacs" single ((:commit . "2c538d41a9728939cc5e8292faa78ed50997877d") (:url . "https://github.com/vibhavp/emacs-xkcd") (:keywords "xkcd" "webcomic"))]) (xcscope . [(1 3) nil "cscope interface for (X)Emacs" single ((:commit . "1e4c8e60eb841a3ecb56ff4115b6a8ae5c0bf779") (:url . "https://github.com/dkogan/xcscope.el") (:keywords "languages" "c"))]) (xbm-life . [(0 1 3) nil "A XBM version of Conway's Game of Life" single ((:commit . "bde2b3730a02d237f7d95a8e3f3722f23f2d9201") (:url . "https://github.com/wasamasa/xbm-life") (:keywords "games"))]) (x86-lookup . [(1 1 1) ((emacs (24 3)) (cl-lib (0 3))) "jump to x86 instruction documentation" single ((:commit . "208810ea93214491e6e2329cdbf81de85437939a") (:url . "https://github.com/skeeto/x86-lookup"))]) (wttrin . [(0 1 0) ((emacs (24 4)) (xterm-color (1 0))) "Emacs frontend for weather web service wttr.in" single ((:commit . "d595240d92788791da2218d12efd6a77eee06217") (:url . "https://github.com/bcbcarl/emacs-wttrin") (:keywords "comm" "weather" "wttrin"))]) (wsd-mode . [(0 5 0) nil "Emacs major-mode for www.websequencediagrams.com" tar ((:commit . "b5e8ea0daeaa52f2ea6349e09902bd3216e96258") (:url . "https://github.com/josteink/wsd-mode") (:keywords "wsd" "diagrams" "design" "process" "modelling" "uml"))]) (ws-butler . [(0 6) nil "Unobtrusively remove trailing whitespace." single ((:commit . "323b651dd70ee40a25accc940b8f80c3a3185205") (:url . "https://github.com/lewang/ws-butler"))]) (writeroom-mode . [(3 7) ((emacs (24 1)) (visual-fill-column (1 9))) "Minor mode for distraction-free writing" tar ((:commit . "d3252f54c8f9f37a19d6a21fb2291c3da7a7121a") (:keywords "text"))]) (writegood-mode . [(2 0 2) nil "Polish up poor writing on the fly" single ((:commit . "4302169c1563cab9319745083f9b9a7f5f4af0bd") (:url . "http://github.com/bnbeckwith/writegood-mode") (:keywords "writing" "weasel-words" "grammar"))]) (wrap-region . [(0 7 3) ((dash (1 0 3))) "Wrap text with punctation or tag" single ((:commit . "5a910ad23ebb0649e644bf62ad042587341da5da") (:url . "http://github.com/rejeep/wrap-region") (:keywords "speed" "convenience"))]) (worf . [(0 1 0) ((swiper (0 7 0)) (ace-link (0 1 0)) (hydra (0 13 0))) "A warrior does not press so many keys! (in org-mode)" single ((:commit . "f36755447b588b739b2bf6ab0fb5eb5f4d8db3df") (:url . "https://github.com/abo-abo/worf") (:keywords "lisp"))]) (wordsmith-mode . [(1 0 0) nil "Syntax analysis and NLP text-processing in Emacs (OSX-only)" single ((:commit . "41b10f2fe3589da9812395cb417c3dcf906f0969"))]) (wonderland . [(0 1 1) ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) "declarative configuration for Emacsen" single ((:commit . "28cf6b37000c395ece9519db53147fb826a42bc4") (:url . "http://github.com/kurisuwhyte/emacs-wonderland") (:keywords "configuration" "profile" "wonderland"))]) (wolfram . [(1 1 1) nil "Wolfram Alpha Integration" single ((:commit . "6b5dceae3fd6cdb4d7562510deeafa02c93c010b") (:keywords "math"))]) (wn-mode . [(1 4) ((emacs (24))) "numeric window switching shortcuts" single ((:commit . "6e7029b0d5773a79914a289937be068784931cad") (:url . "https://github.com/luismbo/wn-mode") (:keywords "buffers" "windows" "switching-windows"))]) (with-editor . [(2 5 11) ((emacs (24 4)) (async (1 9)) (dash (2 13 0))) "Use the Emacsclient as $EDITOR" tar ((:commit . "3385ffdc6faed5a283e26a7ebf89825c700dd395") (:url . "https://github.com/magit/with-editor") (:keywords "tools"))]) (wispjs-mode . [(0 2 0) ((clojure-mode (0))) "Major mode for Wisp code." single ((:commit . "be094c3c3223c07b26b5d8bb8fa7aa6866369b3f") (:url . "https://github.com/krisajenkins/wispjs-mode"))]) (wisp-mode . [(0 9 1) nil "Tools for wisp: the Whitespace-to-Lisp preprocessor" single ((:keywords "languages" "lisp"))]) (winum . [(1 0 2) ((cl-lib (0 5))) "Navigate windows and frames using numbers." single ((:commit . "8e886302c7e1d8fd521a95e0f00d6efab295a883") (:url . "http://github.com/deb0ch/winum.el") (:keywords "convenience" "frames" "windows" "multi-screen"))]) (windsize . [(0 1) nil "Simple, intuitive window resizing" single ((:commit . "014b0836f9ffe45fa7e0ccc84576fbef74815a59") (:url . "http://github.com/grammati/windsize") (:keywords "window" "resizing" "convenience"))]) (window-purpose . [(1 6) ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) "Purpose-based window management for Emacs" tar ((:commit . "00c253778d8e845bdc17a350c22ea157c5871b41") (:url . "https://github.com/bmag/emacs-purpose") (:keywords "frames"))]) (window-numbering . [(1 1 2) nil "No description available." single ((:commit . "653afce73854d629c2b9d63dad73126032d6a24c"))]) (window-layout . [(1 4) nil "window layout manager" single ((:commit . "cd2e4f967b610c2bbef53182829e47250d027056") (:keywords "window" "layout"))]) (window-end-visible . [(0 1 0) nil "Find the last visible point in a window" single ((:commit . "bdc3d182e5f76e75f1b8cc49357194b36e48b67c") (:url . "http://github.com/rolandwalker/window-end-visible") (:keywords "extensions"))]) (win-switch . [(1 1 4) nil "fast, dynamic bindings for window-switching/resizing" single ((:commit . "954eb5e4c5737f0c06368c42a7f1c3dd374d782f") (:url . "http://www.stat.cmu.edu/~genovese/emacs/win-switch/") (:keywords "window" "switch" "key bindings" "ergonomic" "efficient"))]) (wiki-nav . [(1 0 2) ((button-lock (1 0 2)) (nav-flash (1 0 0))) "Simple file navigation using [[WikiStrings]]" single ((:commit . "cd0bf4a3c2f224d851e6ed8a54a6e80c129b225f") (:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "navigation"))]) (widget-mvc . [(0 0 2) nil "MVC framework for the emacs widgets" single ((:commit . "2576e6f0c35d8dedfa9c2cd6ea4fb4c14cb72b63") (:keywords "lisp" "widget"))]) (whole-line-or-region . [(1 3 1) nil "operate on current line if region undefined" single ((:commit . "a60e022b30c2f4d3118bcaef1adb77b90e0ca941") (:keywords "kill" "yank" "cut" "copy" "paste" "whole" "lines"))]) (whizzml-mode . [(0 2 1) ((emacs (24 4))) "Programming mode for editing WhizzML files" tar ((:commit . "662c60173cdb396fcb2386d7d7c774d26f16cd9f") (:keywords "languages" "lisp"))]) (whitespace-cleanup-mode . [(0 10) nil "Intelligently call whitespace-cleanup on save" single ((:commit . "e1e250aa6f5b1a526778c7a501cdec98ba29c0a4") (:url . "https://github.com/purcell/whitespace-cleanup-mode") (:keywords "convenience"))]) (whitaker . [(0 3) ((dash (2 10 0))) "Comint interface for Whitaker's Words" single ((:commit . "28172edce0f727f0f7f17d8ba71d5510d877bb45") (:keywords "processes"))]) (which-key . [(3 0 1) ((emacs (24 4))) "Display available keybindings in popup" single ((:commit . "3ff303b50495d492cfac70cc9f7321971928bdb1") (:url . "https://github.com/justbur/emacs-which-key"))]) (wgrep-pt . [(2 1 10) ((wgrep (2 1 5))) "Writable pt buffer and apply the changes to files" single ((:commit . "7ef26c51feaef8a5ec0929737130ab8ba326983c") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-pt.el") (:keywords "grep" "edit" "extensions"))]) (wgrep-helm . [(2 1 10) ((wgrep (2 1 1))) "Writable helm-grep-mode buffer and apply the changes to files" single ((:commit . "7ef26c51feaef8a5ec0929737130ab8ba326983c") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-helm.el") (:keywords "grep" "edit" "extensions"))]) (wgrep-ag . [(2 1 10) ((wgrep (2 1 5))) "Writable ag buffer and apply the changes to files" single ((:commit . "7ef26c51feaef8a5ec0929737130ab8ba326983c") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ag.el") (:keywords "grep" "edit" "extensions"))]) (wgrep-ack . [(2 1 10) ((wgrep (2 1 1))) "Writable ack-and-a-half buffer and apply the changes to files" single ((:commit . "7ef26c51feaef8a5ec0929737130ab8ba326983c") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep-ack.el") (:keywords "grep" "edit" "extensions"))]) (wgrep . [(2 1 10) nil "Writable grep buffer and apply the changes to files" single ((:commit . "7ef26c51feaef8a5ec0929737130ab8ba326983c") (:url . "http://github.com/mhayashi1120/Emacs-wgrep/raw/master/wgrep.el") (:keywords "grep" "edit" "extensions"))]) (weibo . [(1 0) nil "No description available." tar ((:commit . "a8af467e5660a35342029c2796de99cd551454b2"))]) (weechat . [(0 3 1) ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) "Chat via WeeChat's relay protocol in Emacs" tar ((:commit . "41f06299b2a691473b6b26c15dc46367542c79f0"))]) (websocket . [(1 8) nil "Emacs WebSocket client and server" single ((:commit . "a9b8e74fa190024cd450ef4f832482e8438674fa") (:keywords "communication" "websocket" "server"))]) (webpaste . [(1 5 0) ((emacs (24 4)) (request (0 2 0)) (cl-lib (0 5))) "Paste to pastebin-like services" single ((:commit . "77e6154ece15ffcc58db80dca48fe342376831aa") (:url . "https://github.com/etu/webpaste.el") (:keywords "convenience" "comm" "paste"))]) (weblogger . [(1 4 5) ((xml-rpc (1 6 8))) "Weblog maintenance via XML-RPC APIs" single ((:url . "http://launchpad.net/weblogger-el") (:keywords "weblog" "blogger" "cms" "movable" "type" "openweblog" "blog"))]) (web-mode-edit-element . [(2 1) ((emacs (24 4)) (web-mode (14))) "Helper-functions for attribute- and element-handling" tar ((:commit . "8b8ac07aa8c920dafd94c96a51effb0d6c0ed1ce") (:url . "https://github.com/jtkDvlp/web-mode-edit-element") (:keywords "languages" "convenience"))]) (web-mode . [(15) ((emacs (23 1))) "major mode for editing web templates" single ((:commit . "aef2a32f6e5e2fdb7f38a650b009a737c67959e2") (:url . "http://web-mode.org") (:keywords "languages"))]) (web-completion-data . [(0 2) nil "Shared completion data for ac-html and company-web" tar ((:commit . "c272c94e8a71b779c29653a532f619acad433a4f") (:url . "https://github.com/osv/web-completion-data") (:keywords "html" "auto-complete" "company"))]) (web-beautify . [(0 3 2) nil "Format HTML, CSS and JavaScript/JSON by js-beautify" single ((:commit . "aa95055224c24f38736716809fec487cd817c38d") (:url . "https://github.com/yasuyk/web-beautify"))]) (weather-metno . [(0 1 0) ((emacs (24)) (cl-lib (0 3))) "Weather data from met.no in Emacs" tar ((:commit . "b59680c1ab908b32513954034ba894dfb8564dd8"))]) (wcheck-mode . [(2016 1 30) nil "General interface for text checkers" tar ((:commit . "adb9dd9f39cb0bd0000d140d6e778c4864dfde08"))]) (wc-mode . [(1 3) nil "Running word count with goals (minor mode)" single ((:commit . "122f90bd1d422a84cc50acabd350d44d39ddeb69") (:url . "https://github.com/bnbeckwith/wc-mode"))]) (wc-goal-mode . [(2 1) nil "Running word count with goals (minor mode)" single ((:commit . "a8aa227b1a692dd6399855add84b5e37f6c5d9cb") (:url . "https://github.com/bnbeckwith/wc-goal-mode"))]) (wandbox . [(0 6 4) ((emacs (24)) (request (0 3 0)) (s (1 10 0))) "Wandbox client" tar ((:commit . "e002fe41f2cd9b4ce2b1dc80b83301176e9117f1") (:url . "https://github.com/kosh04/emacs-wandbox") (:keywords "tools"))]) (wacspace . [(0 4 2) ((dash (1 2 0)) (cl-lib (0 2))) "The WACky WorkSPACE manager for emACS" tar ((:commit . "b951995c204ff23699d2bda515a96221147a725d"))]) (w32-browser . [(235) nil "Run Windows application associated with a file." single ((:commit . "a8126b60bf18193e8e4ec6f699b5694b6f71a062") (:url . "http://www.emacswiki.org/w32-browser.el") (:keywords "mouse" "dired" "w32" "explorer"))]) (volatile-highlights . [(1 11) nil "Minor mode for visual feedback on some operations." single ((:commit . "fb2abc2d4d4051a9a6b7c8de2fe7564161f01f24") (:url . "http://www.emacswiki.org/emacs/download/volatile-highlights.el") (:keywords "emulations" "convenience" "wp"))]) (voca-builder . [(0 2 0) nil "No description available." single ((:commit . "224402532da28e45edd398fda61ecbddb97d22d3"))]) (vlf . [(1 7) nil "View Large Files" tar ((:commit . "4eaf763cadac62d7a74f7b2d2436d7793c8f7b43") (:url . "https://github.com/m00natic/vlfi") (:keywords "large files" "utilities"))]) (visual-regexp-steroids . [(1 1 0) ((visual-regexp (1 1))) "Extends visual-regexp to support other regexp engines" tar ((:commit . "a6420b25ec0fbba43bf57875827092e1196d8a9e") (:url . "https://github.com/benma/visual-regexp-steroids.el/") (:keywords "external" "foreign" "regexp" "replace" "python" "visual" "feedback"))]) (visual-regexp . [(1 1 1) ((cl-lib (0 2))) "A regexp/replace command for Emacs with interactive visual feedback" single ((:commit . "b3096c2d391ff4e28a2a4e8cd82efbf11071ea85") (:url . "https://github.com/benma/visual-regexp.el/") (:keywords "regexp" "replace" "visual" "feedback"))]) (visual-fill-column . [(1 11) ((emacs (24 3))) "fill-column for visual-line-mode" single ((:commit . "57c2a72d46900117ea92e0a01b97e19481800503"))]) (visible-mark . [(0 1) nil "Make marks visible." single ((:commit . "c1852e13b6b61982738b56977a452ec9026faf1b") (:url . "https://gitlab.com/iankelling/visible-mark") (:keywords "marking" "color" "faces"))]) (virtualenvwrapper . [(0 1 0) ((dash (1 5 0)) (s (1 6 1))) "a featureful virtualenv tool for Emacs" single ((:commit . "5649028ea0c049cb7dfa2105285dee9c00d189fb") (:url . "http://github.com/porterjamesj/virtualenvwrapper.el") (:keywords "python" "virtualenv" "virtualenvwrapper"))]) (vimish-fold . [(0 2 2) ((emacs (24 4)) (cl-lib (0 5)) (f (0 18 0))) "Fold text like in Vim" single ((:commit . "5c9ae8018002c10a034de60b527c42f3665f6b67") (:url . "https://github.com/mrkkrp/vimish-fold") (:keywords "convenience"))]) (vimgolf . [(0 10 0) nil "VimGolf interface for the One True Editor" single ((:keywords "games" "vimgolf" "vim"))]) (vim-region . [(0 3 0) ((expand-region (20140127))) "Select region as vim" single ((:commit . "e5359cc584a0cfa9270a76866a5eff7d3f44eb3d") (:url . "https://github.com/ongaeshi/emacs-vim-region"))]) (vhdl-tools . [(5 6) ((ggtags (0 8 12)) (emacs (25 2)) (outshine (2 0)) (helm (2 8 0))) "Utilities for navigating vhdl sources." single ((:commit . "c08343904835cbae12f48e0758b0a6a014d76a74") (:url . "https://csantosb.github.io/vhdl-tools/") (:keywords "vhdl"))]) (vertigo . [(1 0) ((dash (2 11 0))) "Jump across lines using the home row." single ((:commit . "ebfa068d9e2fc39ba6d1744618c4e31dad6f629b") (:url . "https://github.com/noctuid/vertigo.el") (:keywords "vim" "vertigo"))]) (vector-utils . [(0 1 2) nil "Vector-manipulation utility functions" single ((:commit . "2bd63c8ade1a2b6f8aac403c5f25adda2215a685") (:url . "http://github.com/rolandwalker/vector-utils") (:keywords "extensions"))]) (vdirel . [(0 2 0) ((emacs (24 4)) (org-vcard (0 1 0)) (helm (1 7 0)) (seq (1 11))) "Manipulate vdir (i.e., vCard) repositories" single ((:commit . "4232676e93ca5ace8e51f6605bec223c3205beea") (:keywords "vdirsyncer" "vdir" "vcard" "carddav" "contact" "addressbook" "helm"))]) (vdiff-magit . [(0 3 1) ((emacs (24 4)) (vdiff (0 3)) (magit (2 10 0))) "magit integration for vdiff" single ((:commit . "5e245b6a078860d3b0f58436efec8ff6b4f485db") (:url . "https://github.com/justbur/emacs-vdiff") (:keywords "diff"))]) (vdiff . [(0 2 2) ((emacs (24 4)) (hydra (0 13 0))) "A diff tool similar to  vimdiff" single ((:commit . "f55acdbfcbb14e463d0850cfd041614c7002669e") (:url . "https://github.com/justbur/emacs-vdiff") (:keywords "diff"))]) (vcomp . [(0 3 1) nil "compare version strings" single ((:commit . "a12363c3a66576b68955abcadf7280de32eaa051") (:url . "https://github.com/tarsius/vcomp") (:keywords "versions"))]) (vc-darcs . [(1 19) nil "a VC backend for darcs" single ((:keywords "vc"))]) (vbasense . [(0 1 1) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a environment like Visual Basic Editor." tar ((:commit . "8c61a492d7c15218ae1a96e2aebfe6f78bfff6db") (:url . "https://github.com/aki2o/emacs-vbasense") (:keywords "vba" "completion"))]) (vagrant . [(0 6 1) nil "Manage a vagrant box from emacs" single ((:commit . "ef3022d290ee26597e21b17ab87acbd8d4f1071f") (:url . "https://github.com/ottbot/vagrant.el") (:keywords "vagrant" "chef"))]) (v2ex-mode . [(0 2) ((cl-lib (0 5)) (request (0 2)) (let-alist (1 0 3))) "Major mode for visit http://v2ex.com/ site." single ((:commit . "7a59ac3be2b08d873ec271ec7a3d5ace309c1407") (:url . "https://github.com/aborn/v2ex-mode") (:keywords "v2ex" "v2ex.com"))]) (uzumaki . [(0 1) ((cl-lib (0 5))) "A simple buffer cycler" single ((:commit . "a75956e1757f4b98aad3384a4616481aede70cb1") (:url . "http://github.com/geyslan/uzumaki") (:keywords "buffer" "convenience"))]) (utop . [(2 0 1) ((emacs (24))) "Universal toplevel for OCaml" single ((:commit . "d658bd8f63ed6b23144fdba2ee3f2a6d77979c4f") (:url . "https://github.com/diml/utop") (:keywords "ocaml" "languages"))]) (use-package . [(2 3) ((bind-key (1 0)) (diminish (0 44))) "A use-package declaration for simplifying your .emacs" single ((:commit . "cd58b268a8a025451c11c3cb1ba18d4f27f245da") (:url . "https://github.com/jwiegley/use-package") (:keywords "dotemacs" "startup" "speed" "config" "package"))]) (uptimes . [(3 5) ((cl-lib (0 5)) (emacs (24))) "Track and display emacs session uptimes." single ((:commit . "07bcd6517243c9c9f61172202d33718bd9b2a850") (:url . "https://github.com/davep/uptimes.el") (:keywords "uptime"))]) (unkillable-scratch . [(0 1) nil "Disallow buffers from being killed by regexp -- default is *scratch* buffer" single ((:commit . "4451f82eb98f9b159745ca1a79ac60b9d224fd5b") (:keywords "scratch"))]) (unify-opening . [(1 1 0) ((emacs (24 4))) "Make everything use the same mechanism to open files" single ((:commit . "2812e43029cab7183197ce5e3c9577856bfd22c5") (:url . "https://github.com/DamienCassou/unify-opening") (:keywords "dired" "org" "mu4e" "open" "runner" "extension" "file"))]) (unicode-whitespace . [(0 2 4) ((ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "teach whitespace-mode about fancy characters" single ((:commit . "6d29f25d46b3344c74ce289fc80b3d4fc17ed6db") (:url . "http://github.com/rolandwalker/unicode-whitespace") (:keywords "faces" "wp" "interface"))]) (unicode-progress-reporter . [(0 5 4) ((emacs (24 1 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Progress-reporter with fancy characters" single ((:commit . "f4705332412b12fc72ca868b77c78465561bda75") (:url . "http://github.com/rolandwalker/unicode-progress-reporter") (:keywords "interface"))]) (unicode-fonts . [(0 4 8) ((font-utils (0 7 8)) (ucs-utils (0 8 2)) (list-utils (0 4 2)) (persistent-soft (0 8 10)) (pcache (0 3 1))) "Configure Unicode fonts" single ((:commit . "a36597d83e0248bd0e6b2c1d5fb95bff72add527") (:url . "http://github.com/rolandwalker/unicode-fonts") (:keywords "i18n" "faces" "frames" "wp" "interface"))]) (unicode-escape . [(1 1) ((emacs (24)) (names (20151201 0)) (dash (2 12 1))) "Escape/Unescape unicode notations" single ((:commit . "b9cee7af45be62119b97033dc639bd1b5ed858f3") (:url . "https://github.com/kosh04/unicode-escape.el") (:keywords "i18n" "unicode"))]) (unicode-enbox . [(0 1 4) ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Surround a string with box-drawing characters" single ((:commit . "ff313f6778bb96481c0ee3291b07a7db46f21ff5") (:url . "http://github.com/rolandwalker/unicode-enbox") (:keywords "extensions" "interface"))]) (unfill . [(0 2) nil "Unfill paragraphs or regions, and toggle between filled & unfilled" single ((:commit . "88186dce0de69e8f4aeaf2bfdc77d62210f19cd8") (:url . "https://github.com/purcell/unfill") (:keywords "utilities"))]) (underwater-theme . [(1 1 0) nil "A gentle, deep blue color theme" single ((:commit . "1fbd4ecd4538256c6c46f9638f883072c73ac927") (:keywords "faces"))]) (underline-with-char . [(3 0 0) ((emacs (24))) "Underline with a char" single ((:commit . "c2f4870aff70efe70a8d1b089e56d3a2d6d048b9") (:keywords "convenience"))]) (undercover . [(0 6 1) ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) "Test coverage library for Emacs Lisp" single ((:commit . "86f856c799aacfd48d2eb42d1a6afda0e6e49845") (:url . "https://github.com/sviridov/undercover.el") (:keywords "lisp" "tests" "coverage" "tools"))]) (ucs-utils . [(0 8 4) ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) "Utilities for Unicode characters" tar ((:commit . "cbfd42f822bf5717934fa2d92060e6e24a813433") (:url . "http://github.com/rolandwalker/ucs-utils") (:keywords "i18n" "extensions"))]) (ubuntu-theme . [(4 2) nil "A theme inspired by the default terminal colors in Ubuntu" single ((:commit . "41f09ca6c203da93bdadb2077556efd48e3b5d5a") (:url . "http://github.com/rocher/ubuntu-theme"))]) (typo . [(1 1) nil "Minor mode for typographic editing" single ((:commit . "e72171e4eb0b9ec80b9dabc3198d137d9fb4f972") (:url . "https://github.com/jorgenschaefer/typoel") (:keywords "convenience" "wp"))]) (typit . [(0 2 1) ((emacs (24 4)) (f (0 18)) (mmt (0 1 1))) "Typing game similar to tests on 10 fast fingers" tar ((:commit . "a4e3147dedac5535bdc8b06aca00f34f14f26e35") (:url . "https://github.com/mrkkrp/typit") (:keywords "games"))]) (typescript-mode . [(0 2) nil "Major mode for editing typescript" single ((:commit . "f25f4751fea12298905c811a1f469a6b0a169ef1") (:url . "http://github.com/ananthakumaran/typescript.el") (:keywords "typescript" "languages"))]) (typed-clojure-mode . [(1 0 0) ((clojure-mode (2 1 1)) (cider (0 5 0))) "Typed Clojure minor mode for Emacs" single ((:commit . "00bc20db78901204a67722ab47482660e36d0463") (:url . "https://github.com/typedclojure/typed-clojure-mode"))]) (twittering-mode . [(3 0 0) nil "Major mode for Twitter" single ((:commit . "27e7f3aab238bd0788fd3b471c645c3ceceb0f13") (:url . "http://twmode.sf.net/") (:keywords "twitter" "web"))]) (twilight-anti-bright-theme . [(0 3 0) nil "A soothing Emacs 24 light-on-dark theme" single ((:commit . "16d4ff2606789b506f0d2f53d12f02d5b1b64f9b") (:url . "https://github.com/jimeh/twilight-anti-bright-theme.el") (:keywords "themes"))]) (turing-machine . [(0 1 4) ((emacs (24 4)) (cl-lib (0 6 1))) "Single-tape Turing machine simulator" single ((:commit . "41bfe79ecf8a44dcbaf308c33cbdf324f7c806ae") (:url . "http://github.com/therockmandolinist/turing-machine") (:keywords "turing" "machine" "simulation"))]) (tup-mode . [(1 3 1) nil "Major mode for editing files for Tup" single ((:commit . "945af9c8e6c402e10cd3bf8e28a9591174023d6d") (:url . "https://github.com/ejmr/tup-mode"))]) (tumble . [(1 5) nil "an Tumblr mode for Emacs" single ((:commit . "a1db6dac5720b9f468a79e0efce04f77c0a458e3") (:keywords "tumblr"))]) (tuareg . [(2 0 10) nil "No description available." tar ((:commit . "93b9c6cdba3a8f333cc817c3822fc76b71ff4dcd"))]) (tss . [(0 6 0) ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a interface for auto-complete.el/flymake.el on typescript-mode." tar ((:commit . "1f302deea3d74462c71a9c62031f48b753e8915f") (:url . "https://github.com/aki2o/emacs-tss") (:keywords "typescript" "completion"))]) (try . [(0 0 1) ((emacs (24))) "Try out Emacs packages." single ((:commit . "271b0a362cadf44d0694628b9e213f54516ef913") (:url . "http://github.com/larstvei/try") (:keywords "packages"))]) (truthy . [(0 2 8) ((list-utils (0 4 2))) "Test the content of a value" single ((:commit . "276a7e6b13606d28e4f2e423bb1ea30904c5def3") (:url . "http://github.com/rolandwalker/truthy") (:keywords "extensions"))]) (trr . [(2 0 0) nil "a type-writing training program on GNU Emacs." tar ((:commit . "7500ae0a05a3e26888949208afcd0185cc1b1404") (:keywords "games" "faces"))]) (treemacs-evil . [(1 7 6) ((evil (1 2 12)) (treemacs (0))) "Evil mode integration for treemacs" single ((:commit . "53f0e0c562ba28b9738d05cd730728e983d2917f") (:url . "https://github.com/Alexander-Miller/treemacs"))]) (treemacs . [(1 7 6) ((emacs (25 1)) (cl-lib (0 5)) (dash (2 11 0)) (s (1 10 0)) (f (0 11 0)) (ace-window (0 9 0)) (pfuture (1 1))) "A tree style file explorer package" tar ((:commit . "53f0e0c562ba28b9738d05cd730728e983d2917f") (:url . "https://github.com/Alexander-Miller/treemacs"))]) (travis . [(0 6 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Travis" tar ((:commit . "c8769d3db10ed4604969049e3bd276afa0a0138e") (:url . "https://github.com/nlamirault/emacs-travis") (:keywords "travis"))]) (transmission . [(0 10) ((emacs (24 4)) (let-alist (1 0 3))) "Interface to a Transmission session" single ((:commit . "fc0af768454f7964ba0c8b6934fc0cae24b8ebe8") (:keywords "comm" "tools"))]) (tracking . [(2 5) nil "Buffer modification tracking" tar ((:commit . "13c605e639194c3da0c2e685056fac685f8c76a0") (:url . "https://github.com/jorgenschaefer/circe/wiki/Tracking"))]) (toxi-theme . [(0 1 2) ((emacs (24))) "A dark color theme by toxi" single ((:url . "http://bitbucket.org/postspectacular/toxi-theme/"))]) (tox . [(0 4 0) nil "Launch current python test with tox" single ((:commit . "7655eb254038d5e34433e8a9d66b3ffc9c72e40c") (:url . "https://github.com/chmouel/tox.el") (:keywords "convenience" "tox" "python" "tests"))]) (toc-org . [(1 0 1) nil "add table of contents to org-mode files (formerly, org-toc)" single ((:commit . "a0e8ca05e806e5074b8603985da7f18b92c15856") (:url . "https://github.com/snosov1/toc-org") (:keywords "org-mode" "org-toc" "toc-org" "org" "toc" "table" "of" "contents"))]) (timonier . [(0 1 0) ((s (1 11 0)) (dash (2 12 0)) (pkg-info (0 5 0)) (hydra (0 13 6)) (request (0 2 0)) (all-the-icons (2 0 0))) "Timonier, Manage Kubernetes Applications from Emacs" tar ((:commit . "33ca5887a1d1b63349177237e9edfb73546511a5") (:url . "https://github.com/nlamirault/timonier") (:keywords "kubernetes" "docker"))]) (timesheet . [(0 4 0) ((s (1)) (org (7)) (auctex (11))) "Timesheet management add-on for org-mode" tar ((:commit . "2ed6fea9b508eb7eaff659d9a34a09ba064d4df8") (:url . "https://github.com/tmarble/timesheet.el") (:keywords "org" "timesheet"))]) (timer-revert . [(0 1) nil "minor mode to revert buffer for a given time interval." single ((:commit . "31ad8d94b85807cd9f63fcba0c90c3e9a9515fa2") (:url . "http://github.com/yyr/timer-revert") (:keywords "timer" "revert" "auto-revert."))]) (tide . [(2 3 1) ((dash (2 10 0)) (flycheck (27)) (typescript-mode (0 1)) (cl-lib (0 5))) "Typescript Interactive Development Environment" tar ((:commit . "669ce39bcd93ca6353d24a72a358272d7b0e2268") (:url . "http://github.com/ananthakumaran/tide") (:keywords "typescript"))]) (thrift . [(0 10 0) nil "Major mode for Apache Thrift files" single ((:commit . "b2a4d4ae21c789b689dd162deb819665567f481c") (:keywords "files"))]) (thinks . [(1 12) ((cl-lib (0 5))) "Insert text in a think bubble." single ((:commit . "7bdc418ff946d0cc9ea4cc73d38b3c71ffaa838d") (:url . "https://github.com/davep/thinks.el") (:keywords "convenience" "quoting"))]) (theme-looper . [(1 0 0) ((cl-lib (0 5))) "Loop thru the available color-themes" single ((:commit . "5e3a3ea7ad31d4b38efa2cc08f0063b230736da9") (:url . "http://ismail.teamfluxion.com") (:keywords "convenience" "color-themes"))]) (theme-changer . [(2 1 0) nil "Sunrise/Sunset Theme Changer for Emacs" single ((:commit . "d3d9c9f62a138958262ac5dd61837df427268611") (:url . "https://github.com/hadronzoo/theme-changer") (:keywords "color-theme" "deftheme" "solar" "sunrise" "sunset"))]) (textx-mode . [(0 0 2) ((emacs (24 3))) "Major mode for editing TextX files" single ((:commit . "72f9f0c5855b382024f0da8f56833c22a70a5cb3") (:url . "https://github.com/novakboskov/textx-mode") (:keywords "textx"))]) (textmate-to-yas . [(0 21) nil "Import Textmate macros into yasnippet syntax" tar ((:commit . "8805e5159329e1b74629b7b584373fc446f57d31") (:url . "https://github.com/mlf176f2/textmate-to-yas.el/") (:keywords "yasnippet" "textmate"))]) (textmate . [(1) nil "No description available." single ((:commit . "484845493a3c9b570799aea5195a5435a5a01b76"))]) (tex-smart-umlauts . [(1 4 0) nil "Smart umlaut conversion for TeX." single ((:url . "http://hub.darcs.net/lyro/tex-smart-umlauts") (:keywords "tex" "wp"))]) (test-simple . [(1 0) nil "Simple Unit Test Framework for Emacs Lisp" single ((:commit . "75eea25bae04d8e5e3e835a2770f02f0ff4602c4") (:url . "http://github.com/rocky/emacs-test-simple") (:keywords "unit-test"))]) (test-kitchen . [(0 3 0) nil "Run test-kitchen inside of emacs" single ((:commit . "ddbcb964ac4700973eaf30ae366f086e3319e51f") (:url . "http://github.com/jjasghar/test-kitchen-el") (:keywords "chef" "ruby" "test-kitchen"))]) (test-case-mode . [(1 0) ((fringe-helper (0 1 1))) "unit test front-end" single ((:commit . "26e397c0f930b7eb0be413ef7dd257b1da052bec") (:url . "http://nschum.de/src/emacs/test-case-mode/") (:keywords "tools"))]) (terraform-mode . [(0 6) ((emacs (24 3)) (hcl-mode (0 3))) "Major mode for terraform configuration file" single ((:commit . "6286aa42132a7fcad49271d63be33deeeb8d4efc") (:url . "https://github.com/syohex/emacs-terraform-mode"))]) (tern-django . [(0 1 0) ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) "Create tern projects for django applications." tar ((:commit . "6d616c5f802d3432c4065dc306d7977d254df49f") (:url . "https://github.com/proofit404/tern-django"))]) (tern-context-coloring . [(1 0 1) ((emacs (24 3)) (context-coloring (8 1 0)) (tern (0 0 1))) "Use Tern for context coloring" single ((:commit . "3a8e979d6cc83aabcb3dda3f5f31a6422532efba") (:url . "https://github.com/jacksonrayhamilton/tern-context-coloring") (:keywords "convenience" "faces" "tools"))]) (tern-auto-complete . [(0 21 0) ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) "Tern Completion by auto-complete.el" single ((:commit . "e6a7777f273050098fa7074577ac196bae59d80b"))]) (tern . [(0 21 0) ((json (1 2)) (cl-lib (0 5)) (emacs (24))) "Tern-powered JavaScript integration" single ((:commit . "e6a7777f273050098fa7074577ac196bae59d80b") (:url . "http://ternjs.net/"))]) (terminal-here . [(1 0) ((emacs (24)) (cl-lib (0 5))) "Run an external terminal in current directory" single ((:commit . "e176d1675dc5c41b6aebd05122fb2efc44b6cff0") (:url . "https://github.com/davidshepherd7/terminal-here") (:keywords "tools" "frames"))]) (termbright-theme . [(1 0) ((emacs (24 1))) "a more usable theme for white-on-black terminals" single ((:commit . "bec6ab14336c0611e85f45486276004f16d20607") (:url . "https://github.com/bmastenbrook/termbright-theme-el") (:keywords "themes"))]) (term-run . [(0 1 5) nil "Run arbitrary command in terminal buffer" single ((:commit . "54650dbbabb13cb2a6c0670ff6b24b29717a6a8b") (:url . "https://github.com/10sr/term-run-el") (:keywords "utility" "shell" "command" "term-mode"))]) (term-projectile . [(0 1 1) ((term-manager (0 1 0)) (projectile (0 13 0))) "projectile terminal management" single ((:commit . "0bca2e7e3b6e906ec67696bc0be952988ca7f733") (:url . "https://www.github.com/IvanMalison/term-projectile") (:keywords "term" "manager" "projectile"))]) (term-manager . [(0 1 1) ((dash (2 12 0)) (emacs (24 4))) "Contextual terminal management" tar ((:commit . "0bca2e7e3b6e906ec67696bc0be952988ca7f733") (:url . "https://www.github.com/IvanMalison/term-manager") (:keywords "term" "manager"))]) (term-cmd . [(1 1) ((emacs (24 0)) (dash (2 12 0)) (f (0 18 2))) "Send commands from programs running in term.el." tar ((:commit . "6c9cbc659b70241d2ed1601eea34aeeca0646dac"))]) (term-alert . [(1 2) ((emacs (24 0)) (term-cmd (1 1)) (alert (1 1)) (f (0 18 2))) "Notifications when commands complete in term.el." tar ((:commit . "47af9e6fe483ef0d393098c145f499362a33292a"))]) (ten-hundred-mode . [(1 0 1) ((cl-lib (0 5))) "use only the ten hundred most usual words" tar ((:commit . "bdcfda49b1819e82d61fe90947e50bb948cf7933"))]) (telephone-line . [(0 4) ((emacs (24 4)) (cl-lib (0 5)) (cl-generic (0 2)) (seq (1 8))) "Rewrite of Powerline" tar ((:commit . "a83dcda21b0f6e10e51c3cded7da9a5d2ead5f34") (:url . "https://github.com/dbordak/telephone-line") (:keywords "mode-line"))]) (telepathy . [(1 0) nil "Access Telepathy from Emacs" single ((:commit . "211d785b02a29ddc254422fdcc3db45262582f8c") (:keywords "telepathy" "tools"))]) (tawny-mode . [(1 5 0) nil "No description available." single ((:commit . "5666b34900a39c6da73d9a1efe11bddf94136a04"))]) (tagedit . [(1 4 0) ((s (1 3 1)) (dash (1 0 3))) "Some paredit-like features for html-mode" single ((:commit . "3fcf54b824b75c5ad68f5438d5638103049a389f") (:keywords "convenience"))]) (tablist . [(0 70) ((emacs (24 3))) "Extended tabulated-list-mode" tar ((:commit . "ef38312867bc0268b1584dd890b1c420bb77ec11") (:keywords "extensions" "lisp"))]) (tabbar-ruler . [(0 45) ((tabbar (2 0 1))) "Pretty tabbar, autohide, use both tabbar/ruler" tar ((:commit . "7df2e4814018e84ef9261d04a2ade8168a44e3d7") (:url . "http://github.com/mlf176f2/tabbar-ruler.el") (:keywords "tabbar" "ruler mode" "menu" "tool bar."))]) (ta . [(1 5) ((emacs (24 3)) (cl-lib (0 5))) "A tool to deal with Chinese homophonic characters" single ((:commit . "9226afbe7abbefb825844ef3ba4ca15f1934cfc2") (:url . "http://github.com/kuanyui/ta.el") (:keywords "tools"))]) (systemd . [(1 5) ((emacs (24 4))) "Major mode for editing systemd units" tar ((:commit . "4c1b2befd0c853dcc7bca52d9b084933c3a08254") (:keywords "tools" "unix"))]) (system-specific-settings . [(0 2) nil "Apply settings only on certain systems" single ((:commit . "0050d85b2175095aa5ecf580a2fe43c069b0eef3") (:url . "https://github.com/DarwinAwardWinner/emacs-system-specific-settings") (:keywords "configuration"))]) (syntax-subword . [(0 2) nil "make operations on words more fine-grained" single nil]) (syntactic-sugar . [(0 9 4) nil "Effect-free forms such as if/then/else" single ((:commit . "06d943c6ad9507603bb6ab6d37be2d359d0763a9") (:url . "http://github.com/rolandwalker/syntactic-sugar") (:keywords "extensions"))]) (synosaurus . [(0 1 0) ((cl-lib (0 5))) "An extensible thesaurus supporting lookup and substitution." tar ((:commit . "56efdc38952b9bd56a445591fcdeb626aede8678") (:url . "https://github.com/rootzlevel/synosaurus"))]) (syndicate . [(1 0) ((evil (1 0))) "evil keybindings for org-mode" single ((:commit . "b839aaba0c8583a3254476b53976e3caac4f89a9") (:url . "https://github.com/KNX32542/syndicate.git") (:keywords "evil" "org" "bindings"))]) (symon . [(20160630) nil "tiny graphical system monitor" single ((:commit . "7beeedd70dc37f5904c781fb697c8df056196ee9") (:url . "http://hins11.yu-yake.com/"))]) (sx . [(0 4) ((emacs (24 1)) (cl-lib (0 5)) (json (1 3)) (markdown-mode (2 0)) (let-alist (1 0 3))) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes" tar ((:commit . "4892f45746fb217d059f4fa074a237c5bac7dd6c") (:url . "https://github.com/vermiculus/sx.el/") (:keywords "help" "hypermedia" "tools"))]) (sws-mode . [(1 0 0) nil "(S)ignificant (W)hite(S)pace mode" single ((:commit . "4e7a20db492719062f40b225ed730ed50be5db56") (:url . "https://github.com/brianc/jade-mode"))]) (switch-window . [(1 5 1) ((cl-lib (0 5))) "A *visual* way to choose a window to switch to" tar ((:commit . "f4e3fde4d4717b75716f287577e84b7ee4f33d8d") (:url . "https://github.com/dimitri/switch-window") (:keywords "window" "navigation"))]) (switch-buffer-functions . [(0 0 1) nil "Hook run when current buffer changed" single ((:commit . "e1bccfff2d123b6218efab16c486215cedb9a108") (:url . "https://github.com/10sr/switch-buffer-functions-el") (:keywords "hook" "utility"))]) (swiper-helm . [(0 1 0) ((emacs (24 1)) (swiper (0 1 0)) (helm (1 5 3))) "Helm version of Swiper." single ((:commit . "f3d6dba865629eed8fb14f92dab1fad50734891b") (:url . "https://github.com/abo-abo/swiper-helm") (:keywords "matching"))]) (swiper . [(0 9 1) ((emacs (24 1)) (ivy (0 9 0))) "Isearch with an overview. Oh, man!" single ((:commit . "f4b433436668ac09f3d1815fbfb4b71f3e0690fa") (:url . "https://github.com/abo-abo/swiper") (:keywords "matching"))]) (swift3-mode . [(2 1 1) ((emacs (24 4))) "Major-mode for Apple's Swift programming language." tar ((:commit . "ea34d46bf9a4293e75ffdac9500d34989316d9e9") (:url . "https://github.com/taku0/swift3-mode") (:keywords "languages" "swift"))]) (swift-mode . [(2 3 0) ((emacs (24 4))) "Major-mode for Apple's Swift programming language." tar ((:commit . "98920962adaaf42698fc847fbe7d9edcd58e50e9") (:url . "https://github.com/swift-emacs/swift-mode") (:keywords "languages" "swift"))]) (sweetgreen . [(0 5) ((dash (2 12 1)) (helm (1 5 6)) (request (0 2 0)) (cl-lib (0 5))) "Order Salads from sweetgreen.com" single ((:commit . "9de3916023872ab054e1c7301175fa27fdb1de0c") (:url . "https://www.github.com/CestDiego/sweetgreen.el") (:keywords "salad" "food" "sweetgreen" "request"))]) (swbuff . [(3 3) nil "Quick switch between Emacs buffers." single ((:commit . "8d5b2bec12503509554f9dd83b97c198b259db2b") (:keywords "extensions" "convenience"))]) (swagger-to-org . [(0 0 2) ((emacs (24)) (cl-lib (0 5)) (json (1 4))) "Convert a swagger.json file into an org-mode file" single ((:commit . "181357c71ea24bede263f5706d8781ad65e16877") (:url . "https://github.com/ahungry/swagger-to-org") (:keywords "ahungry" "emacs" "swagger" "openapi" "orgmode" "org" "export"))]) (svg-mode-line-themes . [(0 1 3) ((xmlgen (0 4))) "SVG-based themes for mode-line" tar ((:commit . "80a0e01839cafbd66899202e7764c33231974259") (:url . "https://github.com/sabof/svg-mode-line-themes"))]) (super-save . [(0 2 0) ((emacs (24 4))) "Auto-save buffers, based on your activity." single ((:commit . "73397501fa5b01c02b9ae94f82a8cb37d1ed105f") (:url . "https://github.com/bbatsov/super-save") (:keywords "convenience"))]) (suomalainen-kalenteri . [(2015 11 29) nil "Finnish national and Christian holidays for calendar" tar ((:commit . "b7991cb35624ebc04a89bbe759d40f186c9c097e"))]) (suggest . [(0 3) ((emacs (24 4)) (loop (1 3)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2))) "suggest elisp functions that give the output requested" single ((:commit . "26e8b0615def4f0531682b8a849f55d330616ac1") (:url . "https://github.com/Wilfred/suggest.el") (:keywords "convenience"))]) (sudden-death . [(0 2) nil "Totsuzen-no-Shi" single ((:commit . "c58fb9a672f306604dde4fbb0ff079e65a5e40be") (:url . "https://github.com/yewton/sudden-death.el"))]) (subshell-proc . [(0 1) nil "Functions for working with comints" single ((:commit . "bf475eb7b0684af967755e91c9cabd19f953b03b") (:url . "https://github.com/andrewmains12/subshell-proc"))]) (sublimity . [(20160629) nil "smooth-scrolling, minimap and distraction-free mode" tar ((:commit . "ee9c9fbb92b8fc0c191e5e8640477e251b602bf9") (:url . "http://hins11.yu-yake.com/"))]) (subemacs . [(1 0) nil "Evaluating expressions in a fresh Emacs subprocess" single ((:commit . "24f0896f1995a3ea42a58b0452d250dcc6802944") (:url . "https://github.com/kbauer/subemacs") (:keywords "extensions" "lisp" "multiprocessing"))]) (subatomic-theme . [(1 8 1) nil "Low contrast bluish color theme" single ((:commit . "6a4086af748b1ecb27f6ba2aa2614988db16d594") (:url . "https://github.com/cryon/subatomic") (:keywords "color-theme" "blue" "low contrast"))]) (stylus-mode . [(1 0 0) ((sws-mode (0))) "Major mode for editing .jade files" single ((:commit . "4e7a20db492719062f40b225ed730ed50be5db56") (:url . "https://github.com/brianc/jade-mode"))]) (stumpwm-mode . [(0 9 8) nil "special lisp mode for evaluating code into running stumpwm" single ((:commit . "4d0603e52b5bab993b3be63e3654c74f641e677d") (:keywords "comm" "lisp" "tools"))]) (stripe-buffer . [(0 2 5) ((cl-lib (1 0))) "Use a different background for even and odd lines" single ((:commit . "d9f009b92cf16fe2c40cd92b8f842a3872e6c190") (:url . "https://github.com/sabof/stripe-buffer"))]) (string-utils . [(0 3 2) ((list-utils (0 4 2))) "String-manipulation utilities" single ((:commit . "3ae530143899f533a9ef5e1f26f28b577ebe72ee") (:url . "http://github.com/rolandwalker/string-utils") (:keywords "extensions"))]) (string-inflection . [(1 0 5) nil "underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names" single ((:commit . "f11e732a582419e14a36c53130dd3a7b2c9da8c5") (:keywords "elisp"))]) (string-edit . [(0 1 0) ((dash (1 2 0))) "Avoid escape nightmares by editing string in separate buffer" single ((:commit . "9f9c9cd659156fd2217be814eb4e91da48d44647"))]) (stgit . [(0 17 1) nil "No description available." single ((:commit . "48e5cef14cea5c810833d119900cd484c2a6ca85"))]) (status . [(0 3) nil "This package adds support for status icons to Emacs." tar ((:commit . "b62c74bf272566f82a68622f29fb9edafea0f241"))]) (stash . [(0 4 1) nil "lightweight persistent caching" single ((:commit . "638ae8a4f6d33af54fe77d57c2c0eb1800dd2e19") (:url . "https://www.github.com/vermiculus/stash.el/") (:keywords "extensions" "data" "internal" "lisp"))]) (stan-snippets . [(9 2 0) ((stan-mode (9 2 0)) (yasnippet (0 8 0))) "Yasnippets for Stan" tar ((:commit . "45b8242611fe0437fcff48f5f4f7d8f0552531ac") (:url . "http://github.com/stan-dev/stan-mode") (:keywords "snippets"))]) (stan-mode . [(9 2 0) nil "Major mode for editing Stan files" tar ((:commit . "45b8242611fe0437fcff48f5f4f7d8f0552531ac") (:url . "http://github.com/stan-dev/stan-mode") (:keywords "languanges"))]) (ssh-deploy . [(1 1) nil "Deployment via SSH or FTP, global or per directory." single ((:commit . "3569e5ea6892d6d7f4ef36bf41462af011e1a114") (:url . "https://github.com/cjohansson/emacs-ssh-deploy") (:keywords "tools" "convenience"))]) (ssh-config-mode . [(20170413 20 10) nil "Mode for fontification of ~/.ssh/config" tar ((:commit . "64b62ad32c3ebb4976c7619c3e809184f6a01605") (:url . "http://www.mahalito.net/~harley/elisp/ssh-config-mode.el") (:keywords "ssh" "config" "emacs"))]) (ssh-agency . [(0 3) ((emacs (24 4)) (dash (2 10 0))) "manage ssh-agent from Emacs" single ((:commit . "94abffa716aff963175196066526c7ee8b4efae7") (:url . "https://github.com/magit/ssh-agency"))]) (srefactor . [(0 5) ((emacs (24 4))) "A refactoring tool based on Semantic parser framework" tar ((:commit . "ecd40713f736b243285c07f4cfd77113794d4f9f") (:url . "https://github.com/tuhdo/semantic-refactor") (:keywords "c" "languages" "tools"))]) (sr-speedbar . [(20140914 2339) nil "Same frame speedbar" single ((:commit . "4f816528a32eb421197a768d6dcf3a05de83f642") (:url . "http://www.emacswiki.org/emacs/download/sr-speedbar.el") (:keywords "speedbar" "sr-speedbar.el"))]) (sqlup-mode . [(0 8 0) nil "Upcase SQL words for you" single ((:commit . "04970977b4abb4d44301651618bbf1cdb0b263dd") (:url . "https://github.com/trevoke/sqlup-mode.el") (:keywords "sql" "tools" "redis" "upcase"))]) (sql-impala . [(1 0) nil "comint support for Cloudera Impala" single ((:commit . "68248e9851b153850542ed1f709298bb9ab59610") (:url . "https://github.com/jterk/sql-impala") (:keywords "sql" "impala"))]) (sprunge . [(0 1 1) ((request (0 2 0)) (cl-lib (0 5))) "Upload pastes to sprunge.us" single ((:commit . "0fd386b8b29c4175022a04ad70ea5643185b6726") (:keywords "tools"))]) (sprintly-mode . [(0 0 4) ((furl (0 0 2))) "Major mode for dealing with sprint.ly" single ((:commit . "6695892bae5860b5268bf3ae62be990ee9b63c11") (:url . "https://github.com/sprintly/sprintly-mode"))]) (spotify . [(0 3 3) ((cl-lib (0 5))) "Control the spotify application from emacs" single ((:commit . "472f6e61d732a7e700f5505e2a445fc0b030916a") (:url . "https://github.com/remvee/spotify-el") (:keywords "convenience"))]) (splitjoin . [(0 1) ((cl-lib (0 5))) "splitjoin" single ((:commit . "0eb91e7beec915065cd6c00ceaca180a64d85cda") (:url . "https://github.com/syohex/emacs-splitjoin"))]) (sphinx-mode . [(0 1 1) nil "Minor mode providing sphinx support." tar ((:commit . "3d6e3059350593dc077f06f54c33869b9e28f7bc"))]) (sphinx-doc . [(0 1 0) ((s (1 9 0)) (cl-lib (0 5))) "Sphinx friendly docstrings for Python functions" single ((:commit . "b3459ecb9e6d3fffdee3cb7342563a56a32ce666") (:url . "https://github.com/naiquevin/sphinx-doc.el") (:keywords "sphinx" "python"))]) (speed-type . [(1 1) ((cl-lib (0 3))) "Practice touch and speed typing" single ((:commit . "5d691f57743304db63b6afdc5bd79dabd282d390") (:url . "https://github.com/parkouss/speed-type") (:keywords "games"))]) (speech-tagger . [(0 0 0) nil "No description available." single ((:commit . "e6595bd0eea93ede1534c536c1746c9cf763b73c"))]) (sparql-mode . [(2 0 1) ((cl-lib (0 5)) (emacs (25 1))) "Edit and interactively evaluate SPARQL queries." tar ((:commit . "a51d4e57974e8d06f7d49ada0fdca656b7470642") (:url . "https://github.com/ljos/sparql-mode"))]) (sparkline . [(1 0 2) ((cl-lib (0 3))) "Make sparkline images from a list of numbers" single ((:commit . "e44498cf1a58fb165991198fe5104d51c92ea904") (:keywords "extensions"))]) (spaceline-all-the-icons . [(1 3 5) ((emacs (24 4)) (all-the-icons (2 6 0)) (spaceline (2 0 0)) (memoize (1 0 1))) "A Spaceline theme using All The Icons" tar ((:commit . "255e89303bb706b42057504e72caeb2764f3d413") (:url . "https://github.com/domtronn/spaceline-all-the-icons.el") (:keywords "convenience" "lisp" "tools"))]) (spaceline . [(2 0 1) ((emacs (24 3)) (cl-lib (0 5)) (powerline (2 3)) (dash (2 11 0)) (s (1 10 0))) "Modeline configuration library for powerline" tar ((:commit . "2d1a7bfb5bdaf24958f50b4bf93182847916af85") (:url . "https://github.com/TheBB/spaceline") (:keywords "mode-line" "powerline" "spacemacs"))]) (sourcetalk . [(1 2 0) ((request (0 2 0))) "SourceTalk (http://sourcetalk.net) plugin for Emacs" single ((:commit . "aced89fa8776e6d5e42dad4a863e159959f08de6") (:url . "https://github.com/malroc/sourcetalk_emacs") (:keywords "sourcetalk" "code" "discussion"))]) (sourcemap . [(0 3) ((emacs (24 3))) "Sourcemap parser" single ((:commit . "64c89d296186f48d9135fb8aad501de19f64bceb") (:url . "https://github.com/syohex/emacs-sourcemap"))]) (sourcekit . [(0 2 0) ((emacs (24 3)) (dash (2 12 1)) (dash-functional (1 2 0)) (request (0 2 0))) "Library to interact with sourcekittendaemon" single ((:commit . "8ba62ac25bf533b7f148f333bcb5c1db799f749b") (:url . "https://github.com/nathankot/company-sourcekit") (:keywords "tools" "processes"))]) (sound-wav . [(0 2) ((deferred (0 3 1)) (cl-lib (0 5))) "Play wav file" single ((:commit . "2a8c8a9bd797dfbf4a0aa1c023a464b803227ff8") (:url . "https://github.com/syohex/emacs-sound-wav"))]) (sotlisp . [(1 6 2) ((emacs (24 1))) "Write lisp at the speed of thought." single ((:commit . "fffe8d0b42b143a2e7df0470d9049fa57b6ecac5") (:url . "https://github.com/Malabarba/speed-of-thought-lisp") (:keywords "convenience" "lisp"))]) (sotclojure . [(1 2) ((emacs (24 1)) (clojure-mode (4 0 0)) (cider (0 8)) (sotlisp (1 3))) "Write clojure at the speed of thought." single ((:commit . "8d879ef41c004726cca3c27a81b7543cc273c19b") (:url . "https://github.com/Malabarba/speed-of-thought-clojure") (:keywords "convenience" "clojure"))]) (sos . [(0 1) ((org (7))) "StackOverflow Search" single ((:commit . "c3906ca6872f460c0bdd276410519308626313f1") (:url . "https://github.com/omouse/emacs-sos") (:keywords "tools" "search" "questions"))]) (solarized-theme . [(1 2 2) ((dash (2 6 0))) "The Solarized color theme, ported to Emacs." tar ((:commit . "210dbef0186f87048d50face41d1d374d6154b3a"))]) (solaire-mode . [(1 0 2) ((emacs (24 4)) (cl-lib (0 5))) "make certain buffers grossly incandescent" single ((:commit . "0f467e5f309e5a36280e06b40c0e6bbe90e06358") (:url . "https://github.com/hlissner/emacs-solaire-mode") (:keywords "dim" "bright" "window" "buffer" "faces"))]) (socyl . [(0 3 0) ((s (1 11 0)) (dash (2 12 0)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Frontend for several search tools" tar ((:commit . "fcc0deda5b6c39d25e48e7da2a0ae73295193ea8") (:url . "https://github.com/nlamirault/socyl") (:keywords "ripgrep" "sift" "ack" "pt" "ag" "grep" "search"))]) (snapshot-timemachine-rsnapshot . [(0 4) ((snapshot-timemachine (20160222 132)) (seq (2 19))) "rsnapshot backend for snapshot-timemachine" single ((:commit . "72b0b700d80f1a0442e62bbbb6a0c8c59182f97f"))]) (snakemake-mode . [(1 2 1) ((emacs (24)) (cl-lib (0 5)) (magit-popup (2 4 0))) "Major mode for editing Snakemake files" tar ((:commit . "22b3efd741e26f59e18c9fd28691d8b84c9130ab") (:url . "https://github.com/kyleam/snakemake-mode") (:keywords "tools"))]) (smooth-scrolling . [(2 0 0) nil "Make emacs scroll smoothly" single ((:commit . "6a1420be510decde0a5eabc56cff229ae554417e") (:url . "http://github.com/aspiers/smooth-scrolling/") (:keywords "convenience"))]) (smooth-scroll . [(1 2) nil "Minor mode for smooth scrolling and in-place scrolling." single ((:commit . "02320f28abb5cae28b3a18f6b9ce93129bdbfc45") (:url . "http://www.emacswiki.org/emacs/download/smooth-scroll.el") (:keywords "convenience" "emulations" "frames"))]) (smmry . [(0 0 3) nil "SMMRY client" single ((:commit . "b7ee765337fa627a6c59eb4f2a91df5d280ac6df") (:url . "https://github.com/microamp/smmry.el") (:keywords "api" "smmry"))]) (smex . [(3 0) nil "M-x interface with Ido-style fuzzy matching." single ((:commit . "97b4a4d82a4449e3f1a3fa8a93387d6eb0ef9c26") (:url . "http://github.com/nonsequitur/smex/") (:keywords "convenience" "usability"))]) (smeargle . [(0 3) ((emacs (24 3))) "Highlighting region by last updated time" single ((:commit . "0665b1ff5109731898bc4a0ca6d939933b804777") (:url . "https://github.com/syohex/emacs-smeargle"))]) (smbc . [(0 2 1) nil "View SMBC from Emacs" single ((:commit . "c377b806118d82140197d9cb1095548477e00497") (:url . "https://github.com/sakshamsharma/emacs-smbc") (:keywords "smbc" "webcomic"))]) (smartscan . [(0 2) nil "Jumps between other symbols found at point" single ((:commit . "13c9fd6c0e38831f78dec55051e6b4a643963176") (:keywords "extensions"))]) (smartrep . [(1 0 0) nil "Support sequential operation which omitted prefix keys." single ((:commit . "0b73bf3d1a3c795671bfee0a36cecfaa54729446") (:url . "https://github.com/myuhe/smartrep.el") (:keywords "convenience"))]) (smartparens . [(1 10 1) ((dash (2 13 0)) (cl-lib (0 3))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar ((:commit . "7841b2f02a1a99e1cb166d595f24f16a514ccbb5"))]) (smart-tabs-mode . [(1 0) nil "Intelligently indent with tabs, align with spaces!" single ((:commit . "8b196d596b331f03fba0efdb4e31d2fd0752c4a7") (:url . "http://www.emacswiki.org/emacs/SmartTabs") (:keywords "languages"))]) (smart-mode-line-powerline-theme . [(2 10 1) ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) "smart-mode-line theme that mimics the powerline appearance." tar ((:commit . "8fd76a66abe4d37925e3d6152c6bd1e8648a293a") (:url . "http://github.com/Bruce-Connor/smart-mode-line") (:keywords "mode-line" "faces" "themes"))]) (smart-mode-line . [(2 10 1) ((emacs (24 3)) (rich-minority (0 1 1))) "A color coded smart mode-line." tar ((:commit . "8fd76a66abe4d37925e3d6152c6bd1e8648a293a") (:url . "http://github.com/Malabarba/smart-mode-line") (:keywords "mode-line" "faces" "themes"))]) (sly-company . [(0 8) ((sly (1 0 0 -3)) (company (0 7)) (emacs (24 3))) "sly completion backend for company mode" single ((:commit . "930e14fee9cdc837ae26299c7f5e379c53cee1af") (:keywords "convenience" "lisp" "abbrev"))]) (sly . [(2 14) nil "No description available." tar ((:commit . "1942c53fc40fd6ace0e822b5c9bf551f59061f32"))]) (slstats . [(1 9) ((cl-lib (0 5)) (emacs (24))) "Acquire and display stats about Second Life" single ((:commit . "3c22a8e5cf022d4eca840fefe7960d7ae6dcf167") (:url . "https://github.com/davep/slstats.el") (:keywords "games"))]) (slime-volleyball . [(1 1) nil "An SVG Slime Volleyball Game" tar ((:commit . "159b5c0f40b109e3854e94b89ec5383854c46ae3") (:keywords "games"))]) (slime-ritz . [(0 6 0) nil "slime extensions for ritz" single ((:commit . "1cc6faedae26323994ea8dd1a4f555db8acbf244") (:url . "https://github.com/pallet/ritz") (:keywords "languages" "lisp" "slime"))]) (slime-docker . [(0 7) ((emacs (24)) (slime (2 16)) (docker-tramp (0 1)) (cl-lib (0 5))) "Integration of SLIME with Docker containers." tar ((:commit . "1ba41c2d86540a84b47466b0b6957f8063f23aa8") (:url . "https://github.com/daewok/slime-docker") (:keywords "docker" "lisp" "slime"))]) (slime-company . [(1 1) ((slime (2 13)) (company (0 9 0))) "slime completion backend for company mode" single ((:commit . "6c244690c80387a32b0cb984843e00c8b75ad6bb") (:keywords "convenience" "lisp" "abbrev"))]) (slime . [(2 19) ((cl-lib (0 5)) (macrostep (0 9))) "Superior Lisp Interaction Mode for Emacs" tar ((:commit . "6e20d01e446334848ea31ace0ce041cec25647ab") (:url . "https://github.com/slime/slime") (:keywords "languages" "lisp" "slime"))]) (slim-mode . [(1 1) nil "Major mode for editing Slim files" single ((:commit . "fe8abb644b7b9cc0ed1e76d9ca8d6c01edccbdb8") (:url . "http://github.com/minad/emacs-slim") (:keywords "markup" "language"))]) (slideview . [(0 6 1) nil "File slideshow" single ((:commit . "ec2340e7b0e74201206d14e3eaef1e77149f122d") (:url . "https://github.com/mhayashi1120/Emacs-slideview/raw/master/slideview.el") (:keywords "files"))]) (sl . [(0 2) ((cl-lib (0 5))) "An Emacs clone of sl(1)" tar ((:commit . "51d92f820f3e93776fff6cdb9690458816888bdc") (:url . "https://github.com/xuchunyang/sl.el"))]) (skewer-mode . [(1 7 0) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar ((:commit . "51f3bbeafea6701de78190a395f6376a9974f1e5"))]) (skewer-less . [(0 2) ((skewer-mode (1 5 3))) "Skewer support for live LESS stylesheet updates" single ((:commit . "593001930f1d68c85233f34c5f6fb04173fc98d6") (:keywords "languages" "tools"))]) (skeletor . [(1 6 1) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar ((:commit . "d986806559628623b591542143707de8d76347d0"))]) (simplezen . [(0 1 1) nil "A simple subset of zencoding-mode for Emacs." single ((:commit . "c0ddaefbb38fcc1c9775434f734f89227d246a30"))]) (simplenote2 . [(3 0 0) ((request-deferred (0 2 0))) "Interact with simple-note.appspot.com" tar ((:commit . "070aa311b0a08b530394c53d0c52c6438efbc20c") (:keywords "simplenote"))]) (simpleclip . [(1 0 2) nil "Simplified access to the system clipboard" single ((:commit . "7deff873b79910496b4baf647cdb8dd5de63465a") (:url . "http://github.com/rolandwalker/simpleclip") (:keywords "convenience"))]) (simple-httpd . [(1 4 6) ((cl-lib (0 3))) "pure elisp HTTP server" single ((:commit . "b191b07c942e44c946a22a826c4d9c9a0475fd7e") (:url . "https://github.com/skeeto/emacs-http-server"))]) (simple-bookmarks . [(1 8) ((cl-lib (0 5))) "Bookmark / functioncall manager" tar ((:commit . "e89e8163a0705e28e9346320a1ee13c1aae249af") (:url . "https://github.com/jtkDvlp/simple-bookmarks") (:keywords "bookmark" "functioncall"))]) (silkworm-theme . [(0 1) ((emacs (24))) "Light theme with pleasant, low contrast colors." single ((:commit . "7951b53e5caf9daf6a5a15a57ae3a668cb78bd7b"))]) (sift . [(0 2 0) nil "Front-end for sift, a fast and powerful grep alternative" single ((:commit . "8c3f3d14a351a2394027d72ee0599aa73b9f0d13") (:url . "https://github.com/nlamirault/sift.el") (:keywords "sift" "ack" "pt" "ag" "grep" "search"))]) (shx . [(0 0 8) ((emacs (24 4))) "\"Extras\" for the (comint-mode) shell" single ((:commit . "fc98dd68f1562cf9c10a0245274c24f280f59da2") (:url . "https://github.com/riscy/shx-for-emacs") (:keywords "processes" "tools"))]) (shut-up . [(0 3 2) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" single ((:commit . "dccd8f7d6af2dde96718f557b37bc25adc61dd12") (:url . "http://github.com/rejeep/shut-up.el"))]) (shrink-whitespace . [(0 0 1) nil "Whitespace removal DWIM key" single ((:commit . "24518d58e8e692fa98a73d5e7cd44c1536ab4e42") (:url . "https://github.com/jcpetkovich/shrink-whitespace.el") (:keywords "editing"))]) (shr-tag-pre-highlight . [(1) ((emacs (24)) (language-detection (0 1 0))) "Syntax highlighting code block in HTML" single ((:commit . "bc1bff471cf4adcd86d87b8c045623aff3b20889") (:url . "https://github.com/xuchunyang/shr-tag-pre-highlight.el") (:keywords "html"))]) (shpec-mode . [(0 1 0) nil "Minor mode for shpec specification" single ((:commit . "76bccd63e3b70233a6c9ca0798dd03550952cc76") (:url . "http://github.com/shpec/shpec-mode") (:keywords "languages" "tools"))]) (showtip . [(0 1) nil "Show tip at cursor" single ((:commit . "930da302809a4257e8d69425455b29e1cc91949b") (:keywords "help"))]) (shm . [(1 0 20) nil "Structured Haskell Mode" tar ((:commit . "8abc5cd73e59ea85bef906e14e87dc388c4f350f") (:keywords "development" "haskell" "structured"))]) (shift-number . [(0 1) nil "Increase/decrease the number at point" single ((:commit . "ba3c1f2e6b01bf14aa1433c2a49098af1c025f7c") (:url . "https://github.com/alezost/shift-number.el") (:keywords "convenience"))]) (shen-elisp . [(0 1) ((emacs (24 4))) "Shen implementation in Elisp" tar ((:commit . "ffe17dee05f75539cf5e4c59395e4c7400ececaa") (:keywords "shen" "elisp") (:url . "http://github.com/deech/shen-elisp"))]) (shelltest-mode . [(1 1) nil "Major mode for shelltestrunner" single ((:commit . "fead97c7ff1b39715ec033a793de41176f1788f5") (:url . "https://github.com/rtrn/shelltest-mode") (:keywords "languages"))]) (shelldoc . [(0 0 5) ((cl-lib (0 3)) (s (1 9 0))) "shell command editing support with man page." single ((:commit . "1d40c73969347586906ca1dde2adb50afcd73b1b") (:url . "http://github.com/mhayashi1120/Emacs-shelldoc/raw/master/shelldoc.el") (:keywords "applications"))]) (shell-toggle . [(1 3 1) nil "Toggle to and from the shell buffer" single ((:commit . "9820b0ad6f22c700759555aae8a454a7dc5a46b3") (:url . "https://github.com/knu/shell-toggle.el") (:keywords "processes"))]) (shell-switcher . [(1 0 1) nil "Provide fast switching between shell buffers." tar ((:commit . "2c5575ae859a82041a4bacd1793b844bfc24c34f"))]) (shell-split-string . [(0 1) nil "Split strings using shell-like syntax" single ((:commit . "6d01c9249853fe1f8fd925ee80f97232d4e3e5eb") (:url . "https://github.com/10sr/shell-split-string-el") (:keywords "utility" "library" "shell" "string"))]) (shell-pop . [(0 64) ((emacs (24)) (cl-lib (0 5))) "helps you to use shell easily on Emacs. Only one key action to work." single ((:commit . "4a3a9d093ad1add792bba764c601aa28de302b34") (:url . "http://github.com/kyagi/shell-pop-el") (:keywords "shell" "terminal" "tools"))]) (shampoo . [(0 0 1) nil "Shampoo, a remote Smalltalk developemnt" tar ((:commit . "9bf488ad4025beef6eef63d2d5b72bc1c9b9e142"))]) (shakespeare-mode . [(0 0 1) nil "A major mode for editing Shakespearean templates." single ((:commit . "4bff63eeac2b7ec1220f17e8bbcddbea4c11cb02") (:url . "http://github.com/CodyReichert/shakespeare-mode") (:keywords "shakespeare" "hamlet" "lucius" "julius" "mode"))]) (shackle . [(0 9 2) ((cl-lib (0 5))) "Enforce rules for popups" single ((:commit . "979b021077655ca38749a60c9752c0817e8fd93e") (:url . "https://github.com/wasamasa/shackle") (:keywords "convenience"))]) (sexy-monochrome-theme . [(2 1) nil "A sexy dark Emacs >= 24 theme for your sexy code" single ((:commit . "d74cf7a50852c469ad13c634df74be2fcb3f3a96") (:url . "https://github.com/nuncostans/sexy-monochrome-theme") (:keywords "themes"))]) (sexp-move . [(0 2 6) nil "Improved S-Expression Movement" single ((:commit . "117f7a91ab7c25e438413753e916570122011ce7") (:url . "https://gitlab.com/elzair/sexp-move") (:keywords "sexp"))]) (session . [(2 3 1) nil "use variables, registers and buffer places across sessions" single ((:commit . "19ea0806873daac3539a4b956e15655e99e3dd6c") (:url . "http://emacs-session.sourceforge.net/") (:keywords "session" "session management" "desktop" "data" "tools"))]) (services . [(1 7) ((cl-lib (0 5))) "Services database access functions." single ((:commit . "514e4095e8964c4d0f38c4f3ad6c692e86d12faa") (:url . "https://github.com/davep/services.el") (:keywords "convenience" "net" "services"))]) (serverspec . [(0 0 7) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) "Serverspec minor mode" tar ((:commit . "b6dfe82af9869438de5e5d860ced196641f372c0") (:url . "http://101000lab.org"))]) (servant . [(0 3 0) ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) "ELPA server written in Emacs Lisp" tar ((:commit . "4d2aa8250b54b28e6e7ee4cd5ebd98a33db2c134") (:url . "http://github.com/rejeep/servant.el") (:keywords "elpa" "server"))]) (sentence-highlight . [(0 1) nil "highlight the current sentence" single ((:commit . "6f2bc989207ec8cf641e44924ef530a2e436eedb") (:keywords "plain text" "writing" "highlight" "editing" "focus"))]) (selectric-mode . [(1 4 1) nil "IBM Selectric mode for Emacs" tar ((:commit . "a35cb3815caceaf273ad7d16ac3b2dd3c7a3003e") (:url . "https://github.com/rbanffy/selectric-mode") (:keywords "multimedia" "convenience" "typewriter" "selectric"))]) (select-themes . [(0 1 4) nil "Color theme selection with completing-read" single ((:commit . "236f54287519a3ea6dd7b3992d053e4f4ff5d0fe") (:url . "https://github.com/jasonm23/emacs-select-themes"))]) (sekka . [(1 6 6) ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 2))) "A client for Sekka IME server" single ((:commit . "987c1cce65c8f30b12cdb5991e1b1ad9da766916") (:url . "https://github.com/kiyoka/sekka") (:keywords "ime" "skk" "japanese"))]) (secretaria . [(0 2 4) ((emacs (24 4)) (org (8 0)) (alert (1 2)) (s (1 11 0)) (f (0 19 0))) "A personal assistant based on org-mode" tar ((:commit . "aae30bfc93fa5ea846bce086b22321c46b94ff7b") (:url . "https://bitbucket.org/shackra/secretaria.el") (:keywords "org" "convenience"))]) (search-web . [(1 1) nil "Post web search queries using `browse-url'." single ((:commit . "c4ae86ac1acfc572b81f3d78764bd9a54034c331"))]) (scss-mode . [(0 5 0) nil "Major mode for editing SCSS files" single ((:commit . "d663069667d9b158d56e863b80dd4cc02984e49f") (:url . "https://github.com/antonj/scss-mode") (:keywords "scss" "css" "mode"))]) (scpaste . [(0 6 5) ((htmlize (1 39))) "Paste to the web via scp." single ((:commit . "cca8f4ee5402bbf9a4bbb24e81372067cb21bba4") (:url . "https://github.com/technomancy/scpaste") (:keywords "convenience" "hypermedia"))]) (schrute . [(0 2 2) ((emacs (24 3))) "Help you remember there is a better way to do something." single ((:commit . "08ab6565fa94f3a8016163fe6f7be1932af1156b") (:url . "https://bitbucket.org/shackra/dwight-k.-schrute") (:keywords "convenience"))]) (scala-mode . [(0 23) nil "Major mode for editing Scala" tar ((:commit . "2fd3b6dd94b7a5f29bb091dae47ea6109c3105ca") (:url . "https://github.com/ensime/emacs-scala-mode") (:keywords "languages"))]) (sbt-mode . [(0 2) nil "Interactive support for sbt projects" tar ((:commit . "217d56bc2ec93a77a9e644233f4fb1815e437c61") (:url . "https://github.com/ensime/emacs-sbt-mode") (:keywords "languages"))]) (sayid . [(0 0 15) ((cider (0 14 0))) "sayid nREPL middleware client" single ((:commit . "b44b6d346604f8d1ef9b9180be359ce1e601a298") (:url . "https://github.com/bpiel/sayid"))]) (say-what-im-doing . [(0 2) nil "dictate what you're doing with text to speech" single ((:commit . "4acc16360a29646040b51db158ba7fdeb711449d") (:url . "http://github.com/benaiah/say-what-im-doing") (:keywords "text to speech" "dumb" "funny"))]) (sauron . [(0 10) nil "Track (erc/org/dbus/...) events and react to them." tar ((:commit . "a9877f0efa9418c41d25002b58d1c2f8c69ec975"))]) (sass-mode . [(3 0 18) ((haml-mode (3 0 15))) "Major mode for editing Sass files" single ((:commit . "26a66e331b507fb420e3bb7d0a6a8fbb04294343") (:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "css"))]) (salt-mode . [(0 1) ((yaml-mode (0 0 12)) (mmm-mode (0 5 4)) (mmm-jinja2 (0 1))) "Major mode for Salt States" single ((:commit . "e14ed8f2ce0ab7a783c4341879ec8c003e2b5c81") (:url . "https://github.com/glynnforrest/salt-mode") (:keywords "languages"))]) (sage-shell-mode . [(0 3) ((cl-lib (0 5)) (emacs (24 1)) (let-alist (1 0 4)) (deferred (0 4 0))) "A front-end for Sage Math" tar ((:commit . "e8bc089e8dfd76f688160e2ac77aee985afeade7") (:url . "https://github.com/sagemath/sage-shell-mode") (:keywords "sage" "math"))]) (sackspace . [(0 8 2) nil "A better backspace" single ((:commit . "fd0480eaaf6d3d11fd30ac5feb2da2f4f7572708") (:url . "http://github.com/cofi/sackspace.el") (:keywords "delete" "convenience"))]) (s . [(1 11 0) nil "The long lost Emacs string manipulation library." single ((:commit . "a56f0d0fedf9754e1728067ac868100f2499357d") (:keywords "strings"))]) (rvm . [(1 4 0) nil "Emacs integration for rvm" single ((:commit . "8e45a9bad8e317ff195f384dab14d3402497dc79") (:url . "http://www.emacswiki.org/emacs/RvmEl") (:keywords "ruby" "rvm"))]) (rust-playground . [(0 1) ((emacs (24 3)) (rust-mode (0 3 0))) "Local Rust playground for short code snippets." single ((:commit . "6a23f8956bce1deaa38f52c01f5571c5cff77445") (:url . "https://github.com/grafov/rust-playground") (:keywords "tools" "rust"))]) (rust-mode . [(0 3 0) ((emacs (24 0))) "A major emacs mode for editing Rust source code" single ((:commit . "e32765893ce2efb2db6662f507fb9d33d5c1b61b") (:url . "https://github.com/rust-lang/rust-mode") (:keywords "languages"))]) (russian-holidays . [(0 4) nil "Russian holidays for the calendar" single ((:commit . "b285a30f29d85c48e3ea4eb93972d34a090c167b") (:url . "https://github.com/grafov/russian-holidays"))]) (runner . [(1 8) nil "Improved \"open with\" suggestions for dired" single ((:commit . "a211d57ddc600410d07a8b534920ba905b093d87") (:url . "https://github.com/thamer/runner") (:keywords "shell command" "dired" "file extension" "open with"))]) (rufo . [(0 3 0) ((emacs (24 3))) "use rufo to automatically format ruby files" single ((:commit . "4e7413fafd0320f30190ae9835ab021cf7a9ebdc") (:url . "https://github.com/danielma/rufo.el"))]) (ruby-tools . [(0 1 2) nil "Collection of handy functions for ruby-mode." tar ((:commit . "6e7fb376085bfa7010ecd3dfad63adacc6e2b4ac"))]) (ruby-test-mode . [(1 0) nil "Minor mode for Behaviour and Test Driven" single ((:commit . "7d3c04b60721665af93ffb4abc2a7b3191926431") (:keywords "ruby" "unit" "test" "rspec"))]) (ruby-hash-syntax . [(0 4) nil "Toggle ruby hash syntax between classic and 1.9 styles" single ((:commit . "a0362c2dc449a1e67ef75ad736bcf8b03b083226") (:url . "https://github.com/purcell/ruby-hash-syntax") (:keywords "languages"))]) (ruby-end . [(0 4 1) nil "Automatic insertion of end blocks for Ruby" single ((:commit . "648b81af136a581bcef387744d93c011d9cdf54b") (:url . "http://github.com/rejeep/ruby-end") (:keywords "speed" "convenience" "ruby"))]) (ruby-compilation . [(2 11) ((inf-ruby (2 2 1))) "run a ruby process in a compilation buffer" single ((:commit . "e2ed2fa55ac3435a86b1cf6a4f2d29aebc309135") (:url . "https://github.com/eschulte/rinari") (:keywords "test" "convenience"))]) (rubocop . [(0 5 0) ((emacs (24))) "An Emacs interface for RuboCop" single ((:commit . "980bedb455e3551d35a212fae515c054888907c1") (:url . "https://github.com/bbatsov/rubocop-emacs") (:keywords "project" "convenience"))]) (rtags . [(2 10) nil "A front-end for rtags" single ((:commit . "3b3ace901f53827daef81d4c13658ec4feb318b4") (:url . "http://rtags.net"))]) (rspec-mode . [(1 11) ((ruby-mode (1 0)) (cl-lib (0 4))) "Enhance ruby-mode for RSpec" tar ((:commit . "e289e52ec4b3aa1caf35957d721e5568eca2a3bb") (:url . "http://github.com/pezra/rspec-mode") (:keywords "rspec" "ruby"))]) (rsense . [(0 3) nil "RSense client for Emacs" single ((:commit . "e4297052ef32d06237e8bd1534a0caf70a34ad28") (:keywords "convenience"))]) (rope-read-mode . [(0 3 4) nil "Rearrange lines to read text smoothly" single ((:commit . "71e475ab35555e0a1eca26d73acf1ced911e422e") (:url . "https://github.com/marcowahl/rope-read-mode") (:keywords "reading" "convenience" "chill"))]) (roguel-ike . [(0 1 1) ((popup (0 5 0))) "A coffee-break roguelike" tar ((:commit . "706dcb0687e8016d7d776f9d9e5ace9fdbbca43c"))]) (robots-txt-mode . [(0 0 2) nil "Major mode for editing robots.txt" single ((:commit . "edf1f8082c88cb2ff5a784ba00f92c535aaa1c7d") (:keywords "web"))]) (robe . [(0 8 1) ((inf-ruby (2 5 1)) (emacs (24 4))) "Code navigation, documentation lookup and completion for Ruby" tar ((:commit . "22457d6855fb39b8aedf068556d0e2fbd2874d5b") (:url . "https://github.com/dgutov/robe") (:keywords "ruby" "convenience" "rails"))]) (rjsx-mode . [(0 1 4) ((emacs (24 4)) (js2-mode (20160623))) "Real support for JSX" single ((:commit . "b41de6c1b2f6668b674f8e5bf880f697c9ffb749") (:url . "https://github.com/felipeochoa/rjsx-mode/") (:keywords "languages"))]) (ripgrep . [(0 4 0) nil "Front-end for ripgrep, a command line search tool" single ((:commit . "73595f1364f2117db49e1e4a49290bd6d430e345") (:url . "https://github.com/nlamirault/ripgrep.el") (:keywords "ripgrep" "ack" "pt" "ag" "sift" "grep" "search"))]) (rinari . [(2 11) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) "Rinari Is Not A Rails IDE" single ((:commit . "e2ed2fa55ac3435a86b1cf6a4f2d29aebc309135") (:url . "https://github.com/eschulte/rinari") (:keywords "ruby" "rails" "project" "convenience" "web"))]) (rigid-tabs . [(1 0) ((emacs (24 3))) "Rigidify and adjust the visual alignment of TABs" single ((:commit . "c7c6b726806df7e8cb25a41b213a207850c91cb7") (:url . "https://github.com/wavexx/rigid-tabs.el") (:keywords "diff" "whitespace" "version control" "magit"))]) (rich-minority . [(1 0 1) ((cl-lib (0 5))) "Clean-up and Beautify the list of minor-modes." single ((:commit . "311ac8ee54078f95b7279e532da6cf5a2afb4125") (:url . "https://github.com/Malabarba/rich-minority") (:keywords "mode-line" "faces"))]) (rg . [(1 3 0) ((cl-lib (0 5)) (emacs (24)) (s (1 10 0)) (seq (2 19))) "A ripgrep frontend, similar to built in grep.el." single ((:commit . "09a5919d8982cfdb8496f0db7deccfb510a7f000") (:url . "https://github.com/dajva/rg.el") (:keywords "matching" "tools"))]) (reverse-theme . [(0 3) nil "Reverse theme for Emacs" single ((:commit . "3105c950bcb51c662c79b59ca102ef662c2b0be0") (:url . "https://github.com/syohex/emacs-reverse-theme"))]) (reveal-in-osx-finder . [(0 3 3) nil "Reveal file associated with buffer in OS X Finder" single ((:commit . "5710e5936e47139a610ec9a06899f72e77ddc7bc") (:url . "https://github.com/kaz-yos/reveal-in-osx-finder") (:keywords "os x" "finder"))]) (restclient-test . [(0 2) ((emacs (24 4)) (restclient (0))) "Run tests with restclient.el" single ((:commit . "a21e41b905b423e762eeb4da3a236c8b1aea8c49") (:url . "https://github.com/simenheg/restclient-test.el"))]) (restart-emacs . [(0 1 1) nil "Restart emacs from within emacs" single ((:commit . "e9292fe88d8be7d0ecf9f4f30ed98ffbc6bd689b") (:url . "https://github.com/iqbalansari/restart-emacs") (:keywords "convenience"))]) (resize-window . [(0 7) ((emacs (24)) (cl-lib (0 5))) "easily resize windows" single ((:commit . "dcbbd30f4f4435070a66a22c5a169b752ca9f904") (:url . "https://github.com/dpsutton/resize-mode") (:keywords "window" "resize"))]) (requirejs . [(1 1) ((js2-mode (20150713)) (popup (0 5 3)) (s (1 9 0)) (cl-lib (0 5))) "Requirejs import manipulation and source traversal." single ((:commit . "7d73453653b6b97cca59fcde8d529b5a228fbc01") (:url . "https://github.com/syohex/requirejs-emacs") (:keywords "javascript" "requirejs"))]) (request-deferred . [(0 3 0) ((deferred (0 3 1)) (request (0 2 0))) "Wrap request.el by deferred" single ((:commit . "a3d080e57eb8be606fbf39d1baff94e1b16e1fb8"))]) (request . [(0 3 0) ((emacs (24 4))) "Compatible layer for URL request in Emacs" single ((:commit . "a3d080e57eb8be606fbf39d1baff94e1b16e1fb8"))]) (req-package . [(1 0) ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0)) (ht (0))) "A use-package wrapper for package runtime dependencies management" tar ((:commit . "30f76a9c52994562191c90c315002410706f6c0b") (:url . "https://github.com/edvorg/req-package") (:keywords "dotemacs" "startup" "speed" "config" "package"))]) (repo . [(0 1 3) ((emacs (24 3))) "Running repo from Emacs" single ((:commit . "d7b87cd515bad8a67d3a892a46a23f5fe81e08de") (:url . "https://github.com/canatella/repo-el") (:keywords "convenience"))]) (replace-symbol . [(1 1) nil "Rename symbols in expressions or buffers" single ((:commit . "baf949e528aee1881f455f9c84e67718bedcb3f6") (:url . "https://github.com/bmastenbrook/replace-symbol-el"))]) (repl-toggle . [(0 4 0) ((fullframe (0 0 5))) "Switch to/from repl buffer for current major-mode" single ((:commit . "bd2d28738368a047d5f407034f78839a7e514489") (:keywords "repl" "buffers" "toggle"))]) (repeatable-motion . [(0 2) ((emacs (24))) "Make repeatable versions of motions" tar ((:commit . "e664b0a4a3e39c4085378a28b5136b349a0afb22") (:url . "https://github.com/willghatch/emacs-repeatable-motion") (:keywords "motion" "repeatable"))]) (relax . [(0 2) ((json (1 2))) "For browsing and interacting with CouchDB" single ((:commit . "6e33892623ab87833082262321dc8e1977209626") (:url . "http://github.com/technomancy/relax.el") (:keywords "database" "http"))]) (region-convert . [(0 0 1) nil "Convert string in region by Lisp function" single ((:commit . "31d370fce60d8cda04e1b9e4fe0e5d268fd37fe5") (:url . "https://github.com/zonuexe/right-click-context") (:keywords "region" "convenience"))]) (refine . [(0 3) ((emacs (24 3)) (s (1 11 0)) (dash (2 12 0)) (list-utils (0 4 4)) (loop (1 2))) "interactive value editing" single ((:commit . "9760e56ab849a4827e6c9425fdef6f5a7784c967") (:keywords "convenience"))]) (redtick . [(0 1 1) ((emacs (24))) "Smallest pomodoro timer (1 char)" single ((:commit . "14e3a07c229d1f660ca5129d6e8a52a8c68db94d") (:url . "http://github.com/ferfebles/redtick") (:keywords "pomodoro" "timer"))]) (redprl . [(0 1 0) ((emacs (24 3))) "Major mode for editing RedPRL proofs and interacting with RedPRL" single ((:commit . "d06d39486348a74981b2c4c4c2ed3af95b01d5ca") (:keywords "languages"))]) (redpen-paragraph . [(0 42) ((emacs (24)) (cl-lib (0 5)) (json (1 4))) "RedPen interface." single ((:commit . "f9569bc8e2993dea0f83cba5738a35ce32f82424") (:url . "https://github.com/karronoli/redpen-paragraph.el") (:keywords "document" "proofreading" "help"))]) (rectangle-utils . [(1 1) ((emacs (24)) (cl-lib (0 5))) "Some useful rectangle functions." single ((:commit . "6fe38fdd48ef5305a908b94a043a966ac3f2053a") (:url . "https://github.com/thierryvolpiatto/rectangle-utils"))]) (rect+ . [(1 0 10) nil "Extensions to rect.el" single ((:commit . "299b742faa0bc4448e0d5fe9cb98ab1eb93b8dcc") (:url . "https://github.com/mhayashi1120/Emacs-rectplus") (:keywords "extensions" "data" "tools"))]) (recover-buffers . [(1 0) nil "revisit all buffers from an auto-save file" tar ((:commit . "a1db7f084977697081da3497628e3514e032b966"))]) (rebecca-theme . [(1 2 1) ((emacs (24))) "Rebecca Purple Theme" single ((:commit . "239115183e0a354ccd5c2cb299893b558fbde05c") (:url . "https://github.com/vic/rebecca-theme") (:keywords "theme" "dark"))]) (realgud . [(1 4 3) ((load-relative (1 2)) (loc-changes (1 2)) (test-simple (1 2 0))) "A modular front-end for interacting with external debuggers" tar ((:commit . "6dc971269f6f9435e5159c2cfe66fc5e4b296df2") (:url . "http://github.com/realgud/realgud/"))]) (real-auto-save . [(0 4) nil "enable real auto save" single ((:commit . "879144ca7e9bfa09a4fb57d5fe92a80250311f1e"))]) (rdf-prefix . [(1 8) nil "Prefix lookup for RDF" single ((:commit . "35129521d5b6035e5dd75d5b3481ce4971f46034") (:url . "https://github.com/simenheg/rdf-prefix") (:keywords "convenience" "abbrev"))]) (rcirc-styles . [(1 3 2) ((cl-lib (0 5))) "support mIRC-style color and attribute codes" single ((:commit . "f313bf6a7470bed314b27c7a40558cb787d7bc67"))]) (rc-mode . [(1 0 13) nil "Major mode for the Plan9 rc shell" single ((:commit . "fe2e0570bf9c19a292e16b18fd4b0a256df5d93f") (:url . "https://github.com/mrhmouse/rc-mode.el") (:keywords "rc" "plan9" "shell"))]) (rbenv . [(0 0 3) nil "Emacs integration for rbenv" single ((:commit . "a613ee1941efa48ef5321bad39ac1ed8ad1540b8") (:url . "https://github.com/senny/rbenv.el") (:keywords "ruby" "rbenv"))]) (rats . [(0 2 0) ((s (1 10 0)) (go-mode (1 3 1)) (cl-lib (0 5))) "Rapid testing suite for Go" tar ((:commit . "8ad4023a4b9b00c1224b10b0060f6dc60b4814a4") (:keywords "convenience"))]) (rase . [(1 1) nil "Run At Sun Event daemon" single ((:commit . "59b5f7e8102570b65040e8d55781c7ea28de7338") (:url . "https://github.com/m00natic/rase/") (:keywords "solar" "sunrise" "sunset" "midday" "midnight"))]) (ranger . [(0 9 8 5) ((emacs (24 4))) "Make dired more like ranger" single ((:commit . "584e4ae8cce1c54a44b40dd4c77fbb2f06d73ecb") (:url . "https://github.com/ralesi/ranger") (:keywords "files" "convenience"))]) (rake . [(0 4 1) ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5))) "Run rake commands" single ((:commit . "e680f1a8f2591af7c80cad188340601b101b5ddc") (:url . "https://github.com/asok/rake.el") (:keywords "rake" "ruby"))]) (rainbow-identifiers . [(0 2 2) ((emacs (24))) "Highlight identifiers according to their names" single ((:commit . "19fbfded1baa98d12335f26f6d7b20e5ae44ce2e") (:url . "https://github.com/Fanael/rainbow-identifiers"))]) (rainbow-delimiters . [(2 1 3) nil "Highlight brackets according to their depth" single ((:commit . "93cd2dc873e7fedca7abc599cd97d46db4376ac7") (:url . "https://github.com/Fanael/rainbow-delimiters") (:keywords "faces" "convenience" "lisp" "tools"))]) (rainbow-blocks . [(1 0 0) nil "Block syntax highlighting for lisp code" single ((:commit . "8335993563aadd4290c5fa09dd7a6a81691b0690") (:url . "https://github.com/istib/rainbow-blocks"))]) (railscasts-reloaded-theme . [(1 5 0) nil "Railscasts Reloaded color theme" single ((:commit . "077af9cb791d9eba4c561cd7cb3b10d2fcfc39d2") (:url . "https://github.com/thegeorgeous/railscasts-reloaded-theme"))]) (racer . [(1 2) ((emacs (24 3)) (rust-mode (0 2 0)) (dash (2 11 0)) (s (1 10 0)) (f (0 18 2))) "The official Emacs package for Racer" single ((:commit . "8ad54e7674e49735390d63e3aea828a4d4bcddd0") (:url . "https://github.com/racer-rust/emacs-racer") (:keywords "abbrev" "convenience" "matching" "rust" "tools"))]) (r-autoyas . [(0 28) nil "Provides automatically created yasnippets for R function argument lists." tar ((:commit . "563254f01ce530ca4c9be1f23395e3fd7d520ff9") (:url . "https://github.com/mlf176f2/r-autoyas.el") (:keywords "r" "yasnippet"))]) (quickrun . [(2 2 8) ((emacs (24 3))) "Run commands quickly" single ((:commit . "70e93e06778f44113f405aedec6187b925311d57") (:url . "https://github.com/syohex/emacs-quickrun"))]) (quasi-monochrome-theme . [(1 1) nil "Quasi Monochrome theme" tar ((:commit . "7d3afe41c2696ee25e3e4bcce987af1f589208d6") (:keywords "color" "theme" "monochrome"))]) (qt-pro-mode . [(1 0 0) ((emacs (24))) "Qt Pro/Pri major mode" single ((:commit . "66601441cc728a609765b149ee0d7dcfb74dc8bf") (:keywords "extensions"))]) (qml-mode . [(0 4) nil "Major mode for editing QT Declarative (QML) code." single ((:commit . "6c5f33ba88ae010bf201a80ee8095e20a724558c") (:url . "https://github.com/coldnew/qml-mode") (:keywords "qml" "qt" "qt declarative"))]) (qiita . [(0 0 1) nil "No description available." single ((:commit . "33b6d3450bb4b3d0186c2475f6c78269c71fd1ff"))]) (pyvenv . [(1 10) nil "Python virtual environment interface" single ((:commit . "91c47b8d2608ccbcac2eba91f0e36b422101ce55") (:url . "http://github.com/jorgenschaefer/pyvenv") (:keywords "python" "virtualenv" "tools"))]) (pythonic . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (dash (2 11)) (s (1 9)) (f (0 17 2))) "Utility functions for writing pythonic emacs package." single ((:commit . "959b3f5d5607eb41ef26ad61d7ec15ceecb8e37a") (:url . "https://github.com/proofit404/pythonic"))]) (python-x . [(1 0) ((python (0 24)) (folding (0))) "python.el extras for interactive evaluation" single ((:commit . "e606469aafec2e6beda8c589540b88a5a6f6f33f") (:url . "https://github.com/wavexx/python-x.el") (:keywords "python" "eval" "folding"))]) (python-mode . [(6 2 3) nil "Python major mode" tar ((:commit . "a0a534639bc6142c2c2f44bd7ca5878ad5f79518"))]) (python-environment . [(0 0 2) ((deferred (0 3 1))) "virtualenv API for Emacs Lisp" tar ((:commit . "401006584e32864a10c69d29f14414828909362e") (:keywords "applications" "tools"))]) (pyimport . [(1 0) ((dash (2 8 0)) (s (1 9 0))) "Manage Python imports!" single ((:commit . "2c05712748f6b6624b15d524323f6391612683f4"))]) (pyenv-mode . [(0 1 0) ((pythonic (0 1 0))) "Integrate pyenv with python-mode" single ((:commit . "b96c15fa1b83cad855e472eda06319ad35e34513") (:url . "https://github.com/proofit404/pyenv-mode"))]) (pydoc . [(0 1) nil "functional, syntax highlighted pydoc navigation" single ((:commit . "5392248e33d83ef05d3b2809b0c6b207786b2644") (:url . "https://github.com/statmobile/pydoc") (:keywords "pydoc" "python"))]) (pycarddavel . [(1 0 1) ((helm (1 7 0)) (emacs (24 0))) "Integrate pycarddav" single ((:commit . "6ead921066fa0156f20155b7126e5875ce11c328") (:keywords "helm" "pyccarddav" "carddav" "message" "mu4e" "contacts"))]) (py-yapf . [(2016 1) nil "Use yapf to beautify a Python buffer" single ((:commit . "a878304202ad827a1f3de3dce1badd9ca8731146") (:url . "https://github.com/paetzke/py-yapf.el"))]) (py-isort . [(2016 1) nil "Use isort to sort the imports in a Python buffer" single ((:commit . "e67306f459c47c53a65604e4eea88a3914596560") (:url . "http://paetzke.me/project/py-isort.el"))]) (py-autopep8 . [(2016 1) nil "Use autopep8 to beautify a Python buffer" single ((:commit . "68e12d8788c91c7ec53a68acf1d23adb2ffa4788") (:url . "http://paetzke.me/project/py-autopep8.el"))]) (pushbullet . [(0 5 2) ((grapnel (0 5 2)) (json (1 2))) "Emacs client for the PushBullet Android app" single ((:commit . "73c59a0f1dc04875b3e5a2c8afbc26c32128e445") (:url . "http://www.github.com/theanalyst/revolver") (:keywords "convenience"))]) (purescript-mode . [(13 10) nil "No description available." tar ((:commit . "6a4d4bdd178c65183a715c7729941a0b8fe5f253"))]) (puppet-mode . [(0 3) ((emacs (24 1)) (cl-lib (0 5)) (pkg-info (0 4))) "Major mode for Puppet manifests" single ((:commit . "d943149691abd7b66c85d58aee9657bfcf822c02") (:url . "https://github.com/lunaryorn/puppet-mode") (:keywords "languages"))]) (pungi . [(1 1) ((jedi (0 2 0 -3 2)) (pyvenv (1 5))) "Integrates jedi with virtualenv and buildout python environments" single ((:commit . "41c9f8b7795e083bfd63ba0d06c789c250998723") (:keywords "convenience"))]) (punctuality-logger . [(0 8) nil "Punctuality logger for Emacs" single ((:commit . "708cae8e67dbae293c7c4be0ca5e49d76fac6714") (:url . "https://gitlab.com/elzair/punctuality-logger") (:keywords "reminder" "calendar"))]) (pug-mode . [(1 0 4) ((cl-lib (0 5))) "Major mode for jade/pug template files" single ((:commit . "bff32a818ccc9e400210b942bd5e67fa21551148") (:url . "https://github.com/hlissner/emacs-pug-mode") (:keywords "markup" "language" "jade" "pug"))]) (pt . [(0 0 3) nil "A front-end for pt, The Platinum Searcher." single ((:commit . "a539dc11ecb2d69760ff50f76c96f49895ce1e1e") (:url . "https://github.com/bling/pt.el") (:keywords "pt" "ack" "ag" "grep" "search"))]) (psysh . [(0 0 4) ((emacs (24 3)) (s (1 9 0)) (f (0 17))) "PsySH, PHP interactive shell (REPL)" single ((:commit . "705989d44fd449fd47e8e1bf599a445373c27605") (:url . "https://github.com/zonuexe/psysh.el") (:keywords "processes" "php"))]) (psession . [(1 3) ((emacs (24)) (cl-lib (0 5))) "Persistent save of elisp objects." single ((:commit . "3488f7777486aa6c85ebc04d011860163d3cf0fc") (:url . "https://github.com/thierryvolpiatto/psession"))]) (psci . [(0 0 6) ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) "Major mode for purescript repl psci" tar ((:commit . "8c2d5a0ba604ec593f83f632b2830a87f41f84d4") (:url . "https://github.com/ardumont/emacs-psci") (:keywords "purescript" "psci" "repl" "major" "mode"))]) (protocols . [(1 6) ((cl-lib (0 5))) "Protocol database access functions." single ((:commit . "f5549f5d873a683af45a0e19c732524d5b964026") (:url . "https://github.com/davep/protocols.el") (:keywords "convenience" "net" "protocols"))]) (protobuf-mode . [(3 3 2) nil "major mode for editing protocol buffers." single ((:commit . "5532abc15b97f3489183b266b41844306052a3fa") (:keywords "google" "protobuf" "languages"))]) (prop-menu . [(0 1 2) ((emacs (24 3)) (cl-lib (0 5))) "Create and display a context menu based on text and overlay properties" single ((:commit . "50b102c1c0935fd3e0c465feed7f27d66b21cdf3") (:url . "https://github.com/david-christiansen/prop-menu-el") (:keywords "convenience"))]) (prompt-text . [(0 1 0) nil "Various information in minibuffer prompt" single ((:commit . "bb9265ebfada42d0e3c67c809665e1e5d980691e") (:url . "https://github.com/10sr/prompt-text-el") (:keywords "utility" "minibuffer"))]) (projekt . [(0 1) ((emacs (24))) "some kind of staging for CVS" single ((:commit . "107232c191375b59d065354470d0af83062e2a4c"))]) (projectile-variable . [(0 0 2) ((emacs (24)) (cl-lib (0 5))) "Store project local variables." single ((:commit . "8d348ac70bdd6dc320c13a12941b32b38140e264") (:url . "https://github.com/zonuexe/projectile-variable") (:keywords "project" "convenience"))]) (projectile-sift . [(0 2 0) ((sift (0 2 0)) (projectile (0 13 0))) "Run a sift with Projectile" single ((:commit . "8c3f3d14a351a2394027d72ee0599aa73b9f0d13") (:url . "https://github.com/nlamirault/sift.el") (:keywords "sift" "projectile"))]) (projectile-ripgrep . [(0 4 0) ((ripgrep (0 3 0)) (projectile (0 14 0))) "Run ripgrep with Projectile" single ((:commit . "73595f1364f2117db49e1e4a49290bd6d430e345") (:url . "https://github.com/nlamirault/ripgrep.el") (:keywords "ripgrep" "projectile"))]) (projectile-rails . [(0 15 0) ((emacs (24 3)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects based on projectile-mode" single ((:commit . "19e3dc1236377de86147df8f3635fbbfe7558b2e") (:url . "https://github.com/asok/projectile-rails") (:keywords "rails" "projectile"))]) (projectile-git-autofetch . [(0 1 0) ((projectile (0 14 0)) (alert (1 2))) "automatically fetch git repositories" single ((:commit . "9692ed2a3935ee7b56e59af8b986e532839597dd") (:url . "https://github.com/andrmuel/projectile-git-autofetch") (:keywords "tools" "vc"))]) (projectile . [(0 14 0) ((dash (2 11 0)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single ((:commit . "19fb9fa6590e1dc49afc3c8c5bd69cff6cf743a7") (:url . "https://github.com/bbatsov/projectile") (:keywords "project" "convenience"))]) (project-root . [(0 7) nil "Define a project root and take actions based upon it." single nil]) (project-persist-drawer . [(0 0 4) ((project-persist (0 3))) "Use a project drawer with project-persist." tar ((:commit . "35bbe132a4fab6a0fec15ce6c0fd2fe6a4aa9626"))]) (project-persist . [(0 3 2) nil "A minor mode to allow loading and saving of project settings." tar ((:commit . "a4e5de1833edb60656d8a04357c527d34e81d27c"))]) (project-explorer . [(0 14 3) ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) "A project explorer sidebar" single ((:commit . "7c2cc86a81f679dda355110f916366b64893a5d4") (:url . "https://github.com/sabof/project-explorer"))]) (prodigy . [(0 7 0) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) "Manage external services from within Emacs" single ((:commit . "3bacca898db9b3493883c95f923a87eb1ce807eb") (:url . "http://github.com/rejeep/prodigy.el"))]) (processing-mode . [(1 0) ((yasnippet (0 8 0))) "Major mode for Processing 2.0" single ((:commit . "228bc56369675787d60f637223b50ce3a1afebbd") (:keywords "languages" "snippets"))]) (pretty-mode . [(2 0 3) nil "Redisplay parts of the buffer as pretty symbols." single ((:commit . "4ba8fceb7dd733361ed975d80ac2caa3612fa78b") (:url . "https://github.com/akatov/pretty-mode") (:keywords "pretty" "unicode" "symbols"))]) (prassee-theme . [(1 0) nil "A dark contrast color theme for Emacs." single ((:commit . "9850c806d39acffdef8e91e1a31b54a7620cbae3") (:url . "http://github.com/prassee/prassee-emacs-theme"))]) (ppd-sr-speedbar . [(0 0 6) ((sr-speedbar (20140914 2339)) (project-persist-drawer (0 0 4))) "Sr Speedbar adaptor for project-persist-drawer." tar ((:commit . "19d3e924407f40a6bb38c8fe427a159af755adce"))]) (powershell . [(0 1) nil "No description available." single ((:commit . "7316f44d0b528552f5a0692f778e5f0efd964299"))]) (powerline . [(2 4) ((cl-lib (0 2))) "Rewrite of Powerline" tar ((:commit . "d3dcfc57a36111d8e0b037d90c6ffce85ce071b2") (:url . "http://github.com/milkypostman/powerline/") (:keywords "mode-line"))]) (pos-tip . [(0 4 6) nil "Show tooltip at point" single ((:commit . "1b81694d1dc29253db0e855b82563f84a32b38d4") (:keywords "tooltip"))]) (popwin . [(1 0 0) nil "Popup Window Manager." single ((:commit . "95dea14c60019d6cccf9a3b33e0dec4e1f22c304") (:keywords "convenience"))]) (popup-imenu . [(0 6) ((dash (2 12 1)) (popup (0 5 3)) (flx-ido (0 6 1))) "imenu index popup" single ((:commit . "c5e2e69adbd3a630e4cb750965a1aee8c10c1f09") (:url . "https://github.com/ancane/popup-imenu") (:keywords "popup" "imenu"))]) (popup-complete . [(0 2) ((popup (0 5 0))) "completion with popup" single ((:commit . "e362d4a005b36646ffbaa6be604e9e31bc406ca9") (:url . "https://github.com/syohex/emacs-popup-complete"))]) (popup . [(0 5 3) ((cl-lib (0 3))) "Visual Popup User Interface" single ((:commit . "46632ab9652dacad56fd961cd6def25a015170ae") (:keywords "lisp"))]) (pophint . [(0 9 3) ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" tar ((:commit . "28dc6a76e726f371bcca3160c27ae2017324399c") (:url . "https://github.com/aki2o/emacs-pophint") (:keywords "popup"))]) (ponylang-mode . [(0 0 9) ((dash (2 10 0))) "Major mode for Pony code" single ((:commit . "38786ba7f9f5709d511e27b85028b2dc6aff532d") (:url . "https://github.com/seantallen/ponylang-mode") (:keywords "languages" "programming"))]) (pony-snippets . [(0 0 1) ((yasnippet (0 8 0))) "Yasnippets for Pony" tar ((:commit . "56018b23a11563c6766ed706024b22aa5a4556b4") (:url . "https://github.com/seantallen/pony-snippets") (:keywords "snippets" "pony"))]) (point-pos . [(0 1) nil "Save and restore point positions" single ((:commit . "4cd0f8c8d1296c5c64f708b6a5835e8520c51b68") (:url . "https://github.com/alezost/point-pos.el") (:keywords "tools" "convenience"))]) (po-mode . [(0 19 8 1) nil "No description available." single ((:commit . "c737bf843616ca984c9416048a2da845e9ad3f50"))]) (plur . [(0 1) ((emacs (24 4))) "Easily search and replace multiple variants of a word" single ((:commit . "5bdd3b9a2f0624414bd596e798644713cd1545f0") (:url . "https://github.com/xuchunyang/plur"))]) (plsense-direx . [(0 2 0) ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perl Package Explorer" single ((:commit . "8a2f465264c74e04524cc789cdad0190ace43f6c") (:url . "https://github.com/aki2o/plsense-direx") (:keywords "perl" "convenience"))]) (plsense . [(0 4 7) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) "provide interface for PlSense that is a development tool for Perl." single ((:commit . "f6fb22607a5252b2556d2e7fa14f1bcab5d9747a") (:url . "https://github.com/aki2o/emacs-plsense") (:keywords "perl" "completion"))]) (plenv . [(0 32) nil "A plenv wrapper for Emacs" single ((:commit . "ee937d0f3a1a7ba2d035f45be896d3ed8fefaee2") (:keywords "emacs" "perl"))]) (play-routes-mode . [(1 0) nil "Play Framework Routes File Support" single ((:commit . "d7eb682cd474d90b3a3d005290cd6d4fe9f94cae") (:url . "https://github.com/brocode/play-routes-mode/") (:keywords "play" "scala"))]) (platformio-mode . [(0 2 2) ((projectile (0 13 0))) "PlatformIO integration" single ((:commit . "470a80c1d764a6e1680a2b41ca5a847869a07a27") (:url . "https://github.com/zachmassia/platformio-mode"))]) (plantuml-mode . [(1 2 3) ((emacs (24))) "Major mode for PlantUML" single ((:commit . "eb380bac5663ec8e73482db6c6ba9d1394766eb3") (:keywords "uml" "plantuml" "ascii"))]) (plain-theme . [(7) nil "Plain theme without syntax highlighting" single ((:commit . "7c376f5bf9d653bf12e414176284736cbdd19108") (:url . "https://github.com/yegortimoshenko/plain-theme"))]) (pkgbuild-mode . [(0 14) nil "Interface to the ArchLinux package manager" single ((:commit . "6bb7cb3b0599ac0ae3c1d8d5014aefc1ecff7965"))]) (pkg-info . [(0 6) ((epl (0 8))) "Information about packages" single ((:commit . "f9bb471ee95d1c5fe9adc6b0e98db2ddff3ddc0e") (:url . "https://github.com/lunaryorn/pkg-info.el") (:keywords "convenience"))]) (pixiv-novel-mode . [(0 0 3) nil "Major mode for pixiv novel" single ((:commit . "4dd9caf749190fab8f0b33862b3894b635de46c5") (:keywords "novel" "pixiv"))]) (pip-requirements . [(0 5) ((dash (2 8 0))) "A major mode for editing pip requirements files." single ((:commit . "93e0595f037e3a95c1c1cd6f00f7e052a9a25912"))]) (pinyinlib . [(0 1 1) nil "Convert first letter of Pinyin to Simplified/Traditional Chinese characters" single ((:commit . "39943d226c2a42a9013421a0b4b6d5d3696bf234") (:keywords "extensions"))]) (pinyin-search . [(1 1 0) nil "Search Chinese by Pinyin" single ((:commit . "5895cccfa6b43263ee243c5642cc16dd9a69fb4e") (:url . "https://github.com/xuchunyang/pinyin-search.el") (:keywords "chinese" "search"))]) (pillar . [(1 0 0) ((makey (0 3))) "Major mode for editing Pillar files" tar ((:commit . "13a7f676544cc66005ccd8e6fc1c25e4ccd6f909") (:url . "http://github.com/DamienCassou/pillar-mode") (:keywords "markup" "major-mode"))]) (phpunit . [(0 15 0) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5)) (cl-lib (0 5)) (emacs (24 3))) "Launch PHP unit tests using phpunit" tar ((:commit . "5ca5ee53e16b2cf0939dbeacbf1dffa13b41b48f") (:url . "https://github.com/nlamirault/phpunit.el") (:keywords "php" "tests" "phpunit"))]) (phpcbf . [(0 9 2) ((s (1 9 0))) "Format PHP code in Emacs using PHP_CodeSniffer's phpcbf" single ((:commit . "b556b548ceb061b002389d6165d2cc63d8bddb5d") (:url . "https://github.com/nishimaki10/emacs-phpcbf") (:keywords "tools" "php"))]) (php-mode . [(1 18 2) ((emacs (24)) (cl-lib (0 5))) "Major mode for editing PHP code" tar ((:commit . "e41a44f39d5d78acc2bd59d2a614f5fc9ff80cd3") (:url . "https://github.com/ejmr/php-mode"))]) (php-cs-fixer . [(1 0 -2 4) ((cl-lib (0 5))) "php-cs-fixer wrapper." single ((:commit . "ca2c075a22ad156c336d2aa093fb6394c9f6c112") (:url . "https://github.com/OVYA/php-cs-fixer") (:keywords "languages" "php"))]) (php-auto-yasnippets . [(2 3 1) ((php-mode (1 11)) (yasnippet (0 8 0))) "Creates snippets for PHP functions" tar ((:commit . "1950d83cbcc5c5d62cd3bc432e1595870fe8cabf") (:url . "https://github.com/ejmr/php-auto-yasnippets"))]) (phi-search-mc . [(2 2 1) ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) "multiple-cursors extension for phi-search" single ((:commit . "4c6d2d39feb502febb81fc98b7b5854d88150c69") (:url . "https://github.com/knu/phi-search-mc.el") (:keywords "search" "cursors"))]) (phi-search . [(20160630) nil "another incremental search & replace, compatible with \"multiple-cursors\"" tar ((:commit . "40b86bfe9ae15377fbee842b1de3d93c2eb7dd69") (:url . "http://hins11.yu-yake.com/"))]) (phan . [(0 0 2) ((emacs (24)) (composer (0 0 8)) (f (0 17))) "Utility functions for Phan (PHP static analizer)" single ((:commit . "4e3528f490e77d3aa6d81729b30b569434ef679f") (:keywords "tools" "php"))]) (ph . [(0 1 0) ((emacs (24 3))) "A global minor mode for managing multiple projects." tar ((:commit . "ed45c371642e313810b56c45af08fdfbd71a7dfe"))]) (pfuture . [(1 1) ((emacs (25))) "a simple wrapper around asynchronous processes" single ((:commit . "a6c32c69abdb9b91baf8036b88cc4f477f611bd5") (:url . "https://github.com/Alexander-Miller/pfuture"))]) (perspeen . [(0 1) nil "An Emacs package for multi-workspace" single ((:commit . "30ee14339cf8fe2e59e5384085afee3f8eb58dda") (:keywords "lisp"))]) (perspective . [(1 12) ((cl-lib (0 5))) "switch between named \"perspectives\" of the editor" single ((:commit . "3a8d59045a6370fae1ec2011865190a7465d707f") (:url . "http://github.com/nex3/perspective-el") (:keywords "workspace" "convenience" "frames"))]) (persp-projectile . [(0 2 0) ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) "Perspective integration with Projectile" single ((:commit . "7686633acf44402fa90429759cca6a155e4df2b9") (:keywords "project" "convenience"))]) (persp-mode . [(2 9 6) nil "windows/buffers sets shared among frames + save/load." single ((:commit . "1dfea0de788f6d25ee47b5c62ddbeaf9e8e92f06") (:url . "https://github.com/Bad-ptr/persp-mode.el") (:keywords "perspectives" "session" "workspace" "persistence" "windows" "buffers" "convenience"))]) (persistent-soft . [(0 8 10) ((pcache (0 3 1)) (list-utils (0 4 2))) "Persistent storage, returning nil on failure" single ((:commit . "a1e0ddf2a12a6f18cab565dee250f070384cbe02") (:url . "http://github.com/rolandwalker/persistent-soft") (:keywords "data" "extensions"))]) (persistent-scratch . [(0 3) ((emacs (24))) "Preserve the scratch buffer across Emacs sessions" single ((:commit . "551c655fa349e6f48e4e29f427fff7594f76ac1d") (:url . "https://github.com/Fanael/persistent-scratch"))]) (per-buffer-theme . [(1 5) ((cl-lib (0 5))) "Change theme according to buffer name or major mode." single ((:url . "https://bitbucket.com/inigoserna/per-buffer-theme.el") (:keywords "themes"))]) (peg . [(0 6) nil "Parsing Expression Grammars in Emacs Lisp" single ((:commit . "081efeca91d790c7fbc90871ac22c40935f4833b"))]) (pdf-tools . [(0 70) ((emacs (24 3)) (tablist (0 70)) (let-alist (1 0 4))) "Support library for PDF documents." tar ((:commit . "0107f80dcf268d08ac075b01729820062c0fbd67") (:keywords "files" "multimedia"))]) (pcsv . [(1 3 6) nil "Parser of csv" single ((:commit . "91599aaba70a8e8593fa2f36165af82cbd35e41e") (:url . "https://github.com/mhayashi1120/Emacs-pcsv/raw/master/pcsv.el") (:keywords "data"))]) (pcre2el . [(1 8) ((emacs (24)) (cl-lib (0 3))) "regexp syntax converter" single ((:commit . "166a10472002010692dbc35f323ffb8110a294c5") (:url . "https://github.com/joddie/pcre2el"))]) (pcomplete-extension . [(1 0) ((emacs (24)) (cl-lib (0 5))) "additional completion for pcomplete" single ((:commit . "839740c90de857e18db2f578d6660951522faab5") (:url . "https://github.com/thierryvolpiatto/pcomplete-extension"))]) (pcache . [(0 4 2) ((eieio (1 3))) "persistent caching for Emacs." single ((:commit . "025ef2411fa1bf82a9ac61dfdb7bd4cedaf2d740"))]) (paxedit . [(1 1 8) ((cl-lib (0 5)) (paredit (23))) "Structured, Context Driven LISP Editing and Refactoring" single ((:commit . "644eb7036a475fbcba4de5d46d6940b1e8ef33cd") (:url . "https://github.com/promethial/paxedit") (:keywords "lisp" "refactoring" "context"))]) (pathify . [(0 1) nil "Symlink your scripts into a PATH directory" single ((:commit . "335332a900717ae01bde5ccb8f3dc97a5350f123") (:url . "https://gitlab.com/alezost-emacs/pathify") (:keywords "convenience"))]) (pastery . [(0 1 14) ((emacs (24 4)) (request (0 2 0))) "paste snippets to pastery.net." single ((:commit . "3f60a2660613c09be5a0b6e299828b44ee3c8732") (:url . "https://github.com/diasbruno/pastery.el") (:keywords "tools"))]) (pastelmac-theme . [(1 0) ((emacs (24 1))) "a soothing theme with a pastel color palette" single ((:commit . "bead21741e3f46f6506e8aef4469d4240a819389") (:url . "https://github.com/bmastenbrook/pastelmac-theme-el") (:keywords "themes"))]) (pastehub . [(0 5 2) nil "A client for the PasteHub cloud service" single ((:commit . "37b045c67659c078f1517d0fbd5282dab58dca23") (:url . "https://github.com/kiyoka/pastehub"))]) (password-store . [(1 6 5) ((dash (1 5 0)) (f (0 11 0)) (s (1 9 0))) "Password store (pass) support" single ((:keywords "pass"))]) (passthword . [(1 4) ((cl-lib (0 5))) "Simple password manager" single ((:commit . "58a91defdbeec9014b4e46f909a7411b3a627285"))]) (passmm . [(0 2 0) ((emacs (24))) "A minor mode for pass (Password Store)." single ((:commit . "983fc8e3e6d24bb8088e2e89254ecd5e03db787d") (:url . "https://github.com/pjones/passmm"))]) (pass . [(1 7) ((emacs (24)) (password-store (0 1)) (f (0 17))) "Major mode for password-store.el" single ((:commit . "2ccf4f68fa4d2aab7efbdc26ebdc45ac1ef1819c") (:keywords "password-store" "password" "keychain"))]) (parsec . [(0 1 3) ((emacs (24)) (cl-lib (0 5))) "Parser combinator library" single ((:commit . "8f0c266d8b9b0ee5fcf9b80c518644b2849ff3b3") (:url . "https://github.com/cute-jumper/parsec.el") (:keywords "extensions"))]) (parsebib . [(2 3 1) ((emacs (24 3))) "A library for parsing bib files" single ((:commit . "bc31b627c666df576aa37e21c27a2223b3cb91a3") (:keywords "text" "bibtex"))]) (parinfer . [(0 4 10) ((dash (2 13 0)) (cl-lib (0 5))) "Simpler Lisp editing" tar ((:commit . "5b3b247d68eeaf7404598cbcbf2158e07f16e65d") (:url . "https://github.com/DogLooksGood/parinfer-mode") (:keywords "parinfer"))]) (parent-mode . [(2 3) nil "get major mode's parent modes" single ((:commit . "db692cf08deff2f0e973e6e86e26662b44813d1b") (:url . "https://github.com/Fanael/parent-mode"))]) (paren-face . [(1 0 2) nil "a face for parentheses in lisp modes" single ((:commit . "0a7cbd65bb578cc52a9dc495a4fcaf23a57507bf") (:url . "https://github.com/tarsius/paren-face"))]) (paredit-everywhere . [(0 4) ((paredit (22))) "Enable some paredit features in non-lisp buffers" single ((:commit . "72b7cd5dcdc02233a32e9f1a6c2d21dc30532170") (:keywords "languages" "convenience"))]) (paredit . [(24) nil "minor mode for editing parentheses" single ((:commit . "82bb75ceb2ddc272d6618d94874b7fc13181a409") (:keywords "lisp"))]) (paradox . [(2 5 1) ((emacs (24 4)) (seq (1 7)) (let-alist (1 0 3)) (spinner (1 7 3)) (hydra (0 13 2))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar ((:commit . "17a6690d42a1e854ec270ed930c7494077570fc8") (:url . "https://github.com/Malabarba/paradox") (:keywords "package" "packages"))]) (paper-theme . [(1 0 0) ((emacs (24)) (hexrgb (0))) "A minimal Emacs colour theme." single ((:commit . "15af5e31492f79dc0d47787150ef39d6318a2608") (:url . "http://gkayaalp.com/emacs.html#paper") (:keywords "theme" "paper"))]) (pangu-spacing . [(0 4) nil "Minor-mode to add space between Chinese and English characters." single ((:commit . "034b4ef8a1b29bf7bfed6a916380941506ed26ed") (:url . "http://github.com/coldnew/pangu-spacing"))]) (pandoc-mode . [(2 22) ((hydra (0 10 0)) (dash (2 10 0))) "Minor mode for interacting with Pandoc" tar ((:commit . "b4e03ab345043fa7447dd59e59234dd33395e3cc") (:keywords "text" "pandoc"))]) (pandoc . [(0 0 1) ((emacs (24))) "Pandoc interface" single ((:commit . "0f59533bbd8494fea3172551efb6ec49f61ba285") (:url . "https://github.com/zonuexe/pandoc.el") (:keywords "documentation" "markup" "converter"))]) (pallet . [(0 9 2) ((dash (2 10 0)) (s (1 9 0)) (f (0 17 1)) (cask (0 7))) "A package management tool for Emacs, using Cask." tar ((:commit . "0e1ae11e1ebfe644cbf832df62ac2dbf6ecd0501"))]) (page-break-lines . [(0 11) nil "Display ugly ^L page breaks as tidy horizontal lines" single ((:commit . "67b5928a7f14568baf2716b5741e13659a86b9ea") (:url . "https://github.com/purcell/page-break-lines") (:keywords "convenience" "faces"))]) (packed . [(2 0 1) ((emacs (24 3)) (dash (2 12 1))) "package manager agnostic Emacs Lisp package utilities" single ((:commit . "536f4a3bda06cc09759fed1aa0cdebb068ff75a1") (:url . "https://github.com/tarsius/packed") (:keywords "compile" "convenience" "lisp" "package" "library"))]) (package-utils . [(0 5 0) nil "Extensions for package.el" single ((:commit . "e00df8a85fb3d0cfe9dde5a683d81e1a89570e29") (:url . "https://github.com/Silex/package-utils") (:keywords "package" "convenience"))]) (package-safe-delete . [(0 1 7) ((emacs (24)) (epl (0 7 -3))) "Safely delete package.el packages" single ((:commit . "138171e4fc03c0ef05a8260cbb5cd2e114c1c194") (:url . "https://github.com/Fanael/package-safe-delete"))]) (package-lint . [(0 5) ((cl-lib (0 5)) (emacs (24))) "A linting library for elisp package authors" single ((:commit . "1cee5135bd9a12e1b28e515a28093a751b4f7dd1") (:url . "https://github.com/purcell/package-lint") (:keywords "lisp"))]) (package-build . [(1 0) ((cl-lib (0 5))) "Tools for assembling a package archive" single ((:commit . "d70db33776cd52586e05e932915653ec54f41c9c") (:keywords "tools"))]) (package+ . [(1 1 0) nil "Extensions for the package library." single ((:commit . "4a9618a44ec4f26a14e0136cd9d3c4855fceb25b") (:url . "TBA") (:keywords "extensions" "tools"))]) (pabbrev . [(4 1) nil "Predictive abbreviation expansion" single ((:commit . "127a8b10cf352b0491fefd2f4178ba78ee587564"))]) (ox-twbs . [(1 1 1) nil "Bootstrap compatible HTML Back-End for Org" single ((:commit . "2414e6b1de7deb6dd2ae79a7be633fdccb9c2f28") (:url . "https://github.com/marsmining/ox-twbs") (:keywords "org" "html" "publish" "twitter" "bootstrap"))]) (ox-pandoc . [(1 150707) ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0))) "org exporter for pandoc." single ((:commit . "035f1d60a0139349232c382cfd23a96902b7003d") (:url . "https://github.com/kawabata/ox-pandoc") (:keywords "tools"))]) (ox-ioslide . [(0 2) ((emacs (24 1)) (org (8 0)) (cl-lib (0 5)) (f (0 17 2))) "Export org-mode to Google I/O HTML5 slide." tar ((:commit . "e81f7a6dab512da7eaa8c2c50c673538b97db267") (:url . "http://github.com/coldnew/org-ioslide") (:keywords "html" "presentation"))]) (ox-epub . [(0 2 1) ((emacs (24 3)) (org (9))) "Export org mode projects to EPUB" single ((:commit . "113300ed2c66cca10624e6d7bf5ff0a72e05653a") (:url . "http://github.com/ofosos/org-epub") (:keywords "hypermedia"))]) (owdriver . [(0 0 6) ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) "Quickly perform various actions on other windows" single ((:commit . "0479389d9df9e70ff9ce69dff06252d3aa40fc86") (:url . "https://github.com/aki2o/owdriver") (:keywords "convenience"))]) (overseer . [(0 3 0) ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4))) "Ert-runner Integration Into Emacs" single ((:commit . "cf532a4e373e3da2077ccbaa48d4bfacd14661ba") (:url . "http://www.github.com/tonini/overseer.el"))]) (ov . [(1 0 6) ((emacs (24 3))) "Overlay library for Emacs Lisp" single ((:commit . "4e1c254d74bc1773c92f1613c3865cdcb4bc7095") (:url . "https://github.com/ShingoFukuyama/ov.el") (:keywords "overlay"))]) (outshine . [(2 0) nil "outline with outshine outshines outline" single ((:commit . "cf1097692b3ea0367d3c821769399fec5831e200") (:url . "https://github.com/tj64/outshine"))]) (outorg . [(2 0) nil "Org-style comment editing" single ((:commit . "e946cda497bae53fca6fa1579910237e216170bf") (:url . "https://github.com/tj64/outorg"))]) (osx-trash . [(0 2) ((emacs (24 1))) "System trash for OS X" tar ((:commit . "529619b84d21e18a38ec5255eb40f6b8ede38b2a") (:url . "https://github.com/lunaryorn/osx-trash.el") (:keywords "files" "convenience" "tools" "unix"))]) (osx-plist . [(1 0 0) nil "Apple plist file parser" single ((:commit . "5e6de2622fdfe552d4902904f05ea03bc5a6ebd0") (:keywords "convenience"))]) (osx-location . [(0 4) nil "Watch and respond to changes in geographical location on OS X" tar ((:commit . "110aee945b53ea550e4debe69bf3c077d940ec8c"))]) (osx-dictionary . [(0 4) ((cl-lib (0 5))) "Interface for OSX Dictionary.app" tar ((:commit . "0e5e5f1b0077a62673855889d529dd4f0cc8f665") (:url . "https://github.com/xuchunyang/osx-dictionary.el") (:keywords "mac" "dictionary"))]) (osx-clipboard . [(0 1) nil "Use the OS X clipboard from terminal Emacs" single ((:commit . "e46dd31327a3f92f77b013b4c9b1e5fdd0e5c73d") (:url . "https://github.com/joddie/osx-clipboard-mode"))]) (osx-browse . [(0 8 8) ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) "Web browsing helpers for OS X" single ((:commit . "6186a6020e143e90d557c8d062c44fcdba0516c7") (:url . "http://github.com/rolandwalker/osx-browse") (:keywords "hypermedia" "external"))]) (orgtbl-show-header . [(1 0 0) nil "Show the header of the current column in the minibuffer" single ((:commit . "f0f48ccc0f96d4aa2a676ff609d9dddd71748e6f"))]) (orglink . [(1 1 2) ((emacs (24 3)) (dash (2 12 1)) (org (8 3))) "use Org Mode links in other modes" single ((:commit . "50debcf3508d2252bdce35c8822af1b3a81fd2dd") (:url . "https://github.com/tarsius/orglink") (:keywords "hypertext"))]) (orgit . [(1 4 0) ((emacs (24 4)) (dash (2 13 0)) (magit (2 10 0)) (org (8 3 3))) "support for Org links to Magit buffers" single ((:commit . "c91e662ace7e3ce992269cbf755f378bc6742511") (:url . "https://github.com/magit/orgit"))]) (orgbox . [(0 5 0) ((org (8 0)) (cl-lib (0 5))) "Mailbox-like task scheduling Org." single ((:commit . "ecaf5a064431cf92922338c974df8fce1a8f1734") (:url . "https://github.com/yasuhito/orgbox") (:keywords "org"))]) (org2jekyll . [(0 1 9) ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1))) "Minor mode to publish org-mode post to jekyll without specific yaml" tar ((:commit . "35e11ffa24b140d2e247df195489fca344bd0c08") (:url . "https://github.com/ardumont/org2jekyll") (:keywords "org-mode" "jekyll" "blog" "publish"))]) (org2blog . [(1 0 0) ((org (8 3)) (xml-rpc (1 6 12)) (metaweblog (1 0 0))) "Blog from Org mode to wordpress" tar ((:commit . "e266ff4296661de520b73e6e18f201fb6378ba05"))]) (org-vcard . [(0 1 0) nil "org-mode support for vCard export and import." tar ((:commit . "5c4e17c166fb0406d5dfdc8876b0e182ba7af8fd") (:url . "https://github.com/flexibeast/org-vcard") (:keywords "outlines" "org" "vcard"))]) (org-trello . [(0 8 0) ((request-deferred (0 2 0)) (deferred (0 4 0)) (s (1 11 0)) (dash-functional (2 12 1)) (dash (2 12 1))) "Minor mode to synchronize org-mode buffer and trello board" tar ((:commit . "32dd866e830836a72a3b96b96e0d00d044d0eaf7"))]) (org-tree-slide . [(2 8 4) nil "A presentation tool for org-mode" single ((:commit . "dccd80418a4444df5e8301695ff0d0dfe86a3c21") (:keywords "org-mode" "presentation" "narrowing"))]) (org-transform-tree-table . [(0 1 2) ((dash (2 10 0)) (s (1 3 0))) "Transform org-mode tree with properties to a table, and the other way around" single ((:commit . "0a9bf07f01bc5fc3b349aff64e83999a8de83b52") (:url . "https://github.com/jplindstrom/emacs-org-transform-tree-table") (:keywords "org-mode" "table" "org-table" "tree" "csv" "convert"))]) (org-tracktable . [(0 3 1) ((emacs (24)) (cl-lib (0 5))) "Track your writing progress in an org-table" single ((:commit . "8e0e60a582a034bd66d5efb72d513140b7d4d90a") (:url . "https://github.com/tty-tourist/org-tracktable") (:keywords "org" "writing"))]) (org-toodledo . [(2 1 0) nil "No description available." tar ((:commit . "5473c1a2762371b198862aa8fd83fd3ec57485a4"))]) (org-time-budgets . [(1 0 1) ((alert (0 5 10)) (cl-lib (0 5))) "Define time budgets and display clocked time." single ((:commit . "f2a8fe3d9d6104f3dd61fabbb385a596363b360b"))]) (org-themis . [(0 4 1) ((cl-lib (0 4))) "Experimental project management mode for org-mode" single ((:commit . "4b4bf1fa1e853664bf006dda8afe2db00e522aaa") (:url . "http://github.com/zellio/org-themis") (:keywords "org-mode" "elisp" "project"))]) (org-tfl . [(0 3 4) ((org (0 16 2)) (cl-lib (0 5)) (emacs (24 1))) "Transport for London meets Orgmode" tar ((:commit . "f0405e3ad62b90ea43489bdd6312adbd77edb9f3") (:url . "https://github.com/storax/org-tfl") (:keywords "org" "tfl"))]) (org-table-sticky-header . [(0 1 1) ((org (8 2 10))) "Sticky header for org-mode tables" single ((:commit . "4dba2dc9a3ed63f58aa946aeec84a52d46ca4043") (:keywords "extensions"))]) (org-table-comment . [(0 2 0) nil "Org table comment modes." single ((:commit . "33b9966c33ecbc3e27cca67c2f2cdea04364d74e") (:url . "http://github.com/mlf176f2/org-table-comment.el") (:keywords "org-mode" "orgtbl"))]) (org-sync . [(0 3 0) ((cl-lib (0 5)) (org (8 2)) (emacs (24))) "Synchronize Org documents with External Issue Trackers" tar ((:commit . "8c65dceaa2f3d436f83ed591916f22556a6e7f91") (:url . "https://github.com/arbox/org-sync") (:keywords "org" "synchronization" "issue tracking" "github" "redmine"))]) (org-static-blog . [(1 0 3) ((emacs (24 3))) "a simple org-mode based static blog generator" single ((:commit . "1a63f7eb0682a73126b534458b403ad0858273e8") (:url . "http://github.com/bastibe/org-static-blog"))]) (org-repo-todo . [(0 0 2) nil "Simple repository todo management with org-mode" single ((:commit . "904a26089d87db59a40421d6f857b189e70dfbe3") (:url . "https://github.com/waymondo/org-repo-todo") (:keywords "convenience"))]) (org-ref . [(1 1 1) ((dash (2 11 0)) (helm (1 5 5)) (helm-bibtex (2 0 0)) (ivy (0 8 0)) (hydra (0 13 2)) (key-chord (0)) (s (1 10 0)) (f (0 18 0)) (emacs (24 4)) (pdf-tools (0 7))) "citations, cross-references and bibliographies in org-mode" tar ((:commit . "db6c52f41faba686a378a8c57356a563f5cef496") (:url . "https://github.com/jkitchin/org-ref") (:keywords "org-mode" "cite" "ref" "label"))]) (org-readme . [(20130322 926) ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) "Integrates Readme.org and Commentary/Change-logs." tar ((:commit . "15054e42351b5ec6b629c55760a578516e035355") (:url . "https://github.com/mlf176f2/org-readme") (:keywords "header2" "readme.org" "emacswiki" "git"))]) (org-random-todo . [(0 5) ((emacs (24 3)) (alert (1 2))) "notify of random TODO's" single ((:commit . "14a065e1d376838f16a6ba32ed8710304542a4e6") (:keywords "org" "todo" "notification"))]) (org-protocol-jekyll . [(0 1) nil "Jekyll's handler for org-protocol" single ((:commit . "c1ac46793eb9bf22b1a601e841947428be5c9766"))]) (org-projectile . [(0 2 6) ((projectile (0 11 0)) (dash (2 10 0)) (emacs (24))) "Repository todo management for org-mode" tar ((:commit . "e2b78ca7fbd2e3b873d3ab9bb7196be4d7613f92") (:url . "https://github.com/IvanMalison/org-projectile") (:keywords "org" "projectile" "todo"))]) (org-pomodoro . [(2 1 0) ((alert (0 5 10)) (cl-lib (0 5))) "Pomodoro implementation for org-mode." tar ((:commit . "a6d867865f1a033fb5a09cca6643045d7ebac49c") (:url . "https://github.com/lolownia/org-pomodoro"))]) (org-pdfview . [(0 4) ((org (6 1)) (pdf-tools (0 40))) "Support for links to documents in pdfview mode" single ((:commit . "3a96bfb57cb158ac02cfb4225512699c66f5221d") (:keywords "org" "pdf-view" "pdf-tools"))]) (org-password-manager . [(0 0 1) ((org (8 2 10)) (s (1 9 0))) "Minimal password manager for Emacs Org Mode." single ((:commit . "d3a33ddfe583180bdb76cfb8bbd772e0078b24a3") (:url . "https://git.leafac.com/org-password-manager") (:keywords "password"))]) (org-page . [(0 41) ((ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8))) "a static site generator based on org mode" tar ((:commit . "09febf89d8dcb226aeedf8164169b31937b64439"))]) (org-outlook . [(0 11) nil "Outlook org" tar ((:commit . "070c37d017ccb71d94c3c69c99632fa6570ec2cc") (:url . "https://github.com/mlf176f2/org-outlook.el") (:keywords "org-outlook"))]) (org-multiple-keymap . [(0 2) ((org (8 2 4)) (emacs (24)) (cl-lib (0 5))) "Set keymap to elements, such as timestamp and priority." single ((:commit . "20eb3be6be9f0abbad9f0d007e40cb00c8109201") (:url . "https://github.com/myuhe/org-multiple-keymap.el") (:keywords "convenience" "org-mode"))]) (org-mime . [(0 0 7) ((emacs (24)) (cl-lib (0 5))) "org html export for text/html MIME emails" single ((:commit . "dd1b9881af705b9e78f79791c9f933cabe59c125") (:url . "http://github.com/org-mime/org-mime") (:keywords "mime" "mail" "email" "html"))]) (org-mac-iCal . [(7 9 3 5) nil "Imports events from iCal.app to the Emacs diary" single ((:commit . "592dc2ee7e4c80b9b61efb77117c8dc22d6cefd1") (:keywords "outlines" "calendar"))]) (org-linkany . [(0 0 2) ((log4e (0 2 0)) (yaxception (0 1))) "Insert link using anything.el/helm.el on org-mode" single ((:commit . "ed4a6614b56c9baef31647ea728b3d5fae6ed3a2") (:url . "https://github.com/aki2o/org-linkany") (:keywords "org" "completion"))]) (org-link-travis . [(0 0 1) ((org (7))) "Insert/Export the link of Travis CI on org-mode" single ((:commit . "596615ad8373d9090bd4138da683524f0ad0bda5") (:url . "https://github.com/aki2o/org-link-travis") (:keywords "org"))]) (org-journal . [(1 12 1) nil "a simple org-mode based journaling mode" single ((:commit . "d9b5512994c54ebcbc0dcccbf1c779fbb8a89d3d") (:url . "http://github.com/bastibe/org-journal"))]) (org-jira . [(2 7 0) ((emacs (24 5)) (cl-lib (0 5)) (request (0 2 0))) "Syncing between Jira and Org-mode." tar ((:commit . "ab86b343634acaaa04b81ecea511a38e975977d1") (:url . "https://github.com/ahungry/org-jira") (:keywords "ahungry" "jira" "org" "bug" "tracker"))]) (org-if . [(0 2 0) nil "Interactive Fiction Authoring System for Org-Mode." tar ((:commit . "fab602cc1bbee7a4e99c0083e129219d3f9ed2e8"))]) (org-gnome . [(0 3) ((alert (1 2)) (telepathy (0 1)) (gnome-calendar (0 1))) "Orgmode integration with the GNOME desktop" single ((:commit . "1012d47886cfd30eed25b73d9f18e475e0155f88") (:keywords "org" "gnome"))]) (org-gcal . [(0 2) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) "Org sync with Google Calendar" single ((:commit . "badd3629e6243563c30ff1dd0452b7601f6cc036") (:url . "https://github.com/myuhe/org-gcal.el") (:keywords "convenience"))]) (org-elisp-help . [(1 0 0) ((cl-lib (0 5)) (org (9 0))) "org links to emacs-lisp documentation" single ((:commit . "3e33ab1a2933dd7f2782ef91d667a37f12d633ab") (:url . "https://github.com/tarsius/org-elisp-help") (:keywords "org" "remember" "lisp"))]) (org-edit-latex . [(0 8 0) ((emacs (24 4)) (org (9 0)) (auctex (11 90))) "Edit embedded LaTeX in a dedicated buffer" single ((:commit . "323d0b39d0284cef730b706dce7c0e58ed35530f") (:url . "https://github.com/et2010/org-edit-latex") (:keywords "org" "latex"))]) (org-dp . [(1) ((cl-lib (0 5))) "Declarative Local Programming with Org Elements" tar ((:commit . "d740c2065120f71762c48877da1a31dea881e98e") (:url . "https://github.com/tj64/org-dp"))]) (org-doing . [(0 1) nil "Keep track of what you're doing" tar ((:commit . "e099514cfc162f8fe3d383456a7964743b0455d5") (:url . "https://github.com/omouse/org-doing") (:keywords "tools" "org"))]) (org-commentary . [(0 3 0) ((dash (2 0)) (emacs (24 4)) (org (8 0))) "generate or update conventional library headers using Org mode files" tar ((:commit . "2eeeb0f506e30ef82263e67279d837a79cbde021") (:url . "https://github.com/smaximov/org-commentary") (:keywords "convenience" "docs" "tools"))]) (org-bullets . [(0 2 4) nil "Show bullets in org-mode as UTF-8 characters" single ((:commit . "b70ac2ec805bcb626a6e39ea696354577c681b36") (:url . "https://github.com/sabof/org-bullets"))]) (org-bookmark-heading . [(1 0 0) ((emacs (24 4))) "Emacs bookmark support for org-mode" single ((:commit . "70b014e09977371a8c9bad03085c116693062b19") (:url . "http://github.com/alphapapa/org-bookmark-heading") (:keywords "hypermedia" "outlines"))]) (org-board . [(1018) nil "bookmarking and web archival system for Org mode." single ((:commit . "405bfd630f1b31bd77158bc8e79aab86812cba65") (:url . "https://github.com/scallywag/org-board") (:keywords "org" "bookmarks" "archives"))]) (org-beautify-theme . [(0 3 1) nil "A sub-theme to make org-mode more beautiful." single ((:commit . "7b7a7cbd4f25f77e8bd81783f517b2b182220fd9") (:keywords "org" "theme"))]) (org-babel-eval-in-repl . [(1 4) ((eval-in-repl (0 9 2)) (matlab-mode (3 3 6)) (ess (16 10)) (emacs (24))) "Eval org-mode babel code blocks in various REPLs." tar ((:commit . "3f26e3cf8bed9ec8e025e4143e708e6e470258d4") (:url . "https://github.com/diadochos/org-babel-eval-in-repl") (:keywords "literate programming" "reproducible research" "async execution"))]) (org-autolist . [(0 13) nil "Improved list management in org-mode" single ((:commit . "da332fadcd9be4c5eb21c5e98c392b89743750b2") (:url . "https://github.com/calvinwyoung/org-autolist") (:keywords "lists" "checklists" "org-mode"))]) (org-alert . [(0 1 0) ((s (1 10 0)) (dash (2 12 0)) (alert (1 2))) "Notify org deadlines via notify-send" single ((:commit . "685c18aa5ce994360c7f9e8bbf49590c412187ac") (:url . "https://github.com/groksteve/org-alert") (:keywords "org" "org-mode" "notify" "notifications"))]) (org-agenda-property . [(1 3 1) ((emacs (24 2))) "Display org properties in the agenda buffer." single ((:commit . "2ff628a14a3e758863bbd88fba4db9f77fd2c3a8") (:url . "http://github.com/Bruce-Connor/org-agenda-property") (:keywords "calendar"))]) (org-ac . [(0 0 2) ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) "Some auto-complete sources for org-mode" single ((:commit . "9cbbda79e2fe964ded3f39cf7a2e74f1be3d6b9a") (:url . "https://github.com/aki2o/org-ac") (:keywords "org" "completion"))]) (operate-on-number . [(1 1 0) nil "Operate on number at point with arithmetic functions" single ((:commit . "6a17272e2b6e23260edb1b5eeb01905a1f37e0a6") (:url . "https://github.com/knu/operate-on-number.el") (:keywords "editing"))]) (opensource . [(0 2 0) ((s (1 11 0)) (dash (2 12 1)) (pkg-info (0 6 0)) (request (0 2 0))) "Client for Opensource API" tar ((:commit . "27d06be45c852e84e47c33cbd0f4c344fd9a0370") (:url . "https://github.com/nlamirault/opensource.el") (:keywords "opensource"))]) (opener . [(0 2 2) ((request (0 2 0)) (emacs (24)) (cl-lib (0 5))) "opening urls as buffers" tar ((:commit . "c384f67278046fdcd220275fdd212ab85672cbeb") (:url . "https://github.com/0robustus1/opener.el") (:keywords "url" "http" "files"))]) (opencl-mode . [(1 0) nil "Syntax coloring for opencl kernels" single ((:commit . "14109a4bb56105a9c052ae49ad4c638b4cc210b2") (:url . "https://github.com/salmanebah/opencl-mode") (:keywords "c" "opencl"))]) (opam . [(0 1) ((emacs (24 1))) "OPAM tools" single ((:commit . "83fb2850d29ec792754e0af18b015e089aad2695") (:url . "https://github.com/lunaryorn/opam.el") (:keywords "convenience"))]) (omnisharp . [(4 0) ((emacs (24)) (flycheck (30)) (dash (2 12 0)) (auto-complete (1 4)) (popup (0 5 1)) (csharp-mode (0 8 7)) (cl-lib (0 5)) (s (1 10 0)) (shut-up (0 3 2))) "Omnicompletion (intellisense) and more for C#" tar ((:commit . "7ca20bb808dd51adbd83e0c18885c4300548d032") (:url . "https://github.com/Omnisharp/omnisharp-emacs") (:keywords "languages" "csharp" "c#" "ide" "auto-complete" "intellisense"))]) (omni-tags . [(0 1 2) ((pcre2el (1 7)) (cl-lib (0 5))) "Highlight and Actions for 'Tags'" tar ((:commit . "a7078bfbc9a6256efd0e57530df9fd7808bc2185") (:url . "http://github.com/AdrieanKhisbe/omni-tags.el") (:keywords "convenience"))]) (omni-scratch . [(0 4 1) nil "Easy and mode-specific draft buffers" single ((:commit . "0da549c1386f93ed4de201bf8779ba64ddc91347") (:url . "https://github.com/AdrieanKhisbe/omni-scratch.el") (:keywords "convenience" "languages" "tools"))]) (omni-quotes . [(0 5 0) ((dash (2 8)) (omni-log (0 3 3)) (f (0 19 0)) (s (1 11 0)) (ht (2 1))) "Random quotes displayer" tar ((:commit . "454116c1dd6581baaeefd6b9310b1b6b7a5c36d0") (:url . "https://github.com/AdrieanKhisbe/omni-quotes.el") (:keywords "convenience"))]) (omni-log . [(0 3 3) ((emacs (24)) (ht (2 0)) (s (1 6 1)) (dash (2 13 0))) "Logging utilities" tar ((:commit . "e86c80065030306645e28badcb0c25c549560106") (:url . "https://github.com/AdrieanKhisbe/omni-log.el") (:keywords "convenience" "languages" "tools"))]) (omni-kill . [(0 2 3) nil "Kill all the things" single ((:commit . "8a1145b58b4736c9163bcd5b28c8fea80b2ea97b") (:keywords "convenience" "editing" "tools"))]) (olivetti . [(1 5 6) nil "Minor mode for a nice writing environment" single ((:commit . "de2716cfb1f4dc82a08093cdd00200e9bb1f07ef") (:keywords "wp"))]) (offlineimap . [(1) nil "Run OfflineIMAP from Emacs" single ((:commit . "646482203aacdf847d57d0a96263fddcfc33fb61") (:url . "http://julien.danjou.info/offlineimap-el.html"))]) (octicons . [(0 1) ((cl-lib (0 5))) "octicons utility" tar ((:commit . "77bb1a49045f89b3eaf9bcffeefbb9e1abaee556") (:url . "https://github.com/syohex/emacs-octicons"))]) (ocp-indent . [(1 6 0) nil "automatic indentation with ocp-indent" single ((:commit . "032599b162624a4b65c82c20be06433f24b00e8f") (:url . "http://www.typerex.org/ocp-indent.html") (:keywords "ocaml" "languages"))]) (ocodo-svg-modelines . [(0 1 4) ((svg-mode-line-themes (0))) "A collection of beautiful SVG modelines" tar ((:commit . "a6c5b9a7536c7a8fa3bd9d9dafdebc8d99903018"))]) (obfusurl . [(2 0) ((cl-lib (0 5))) "Obfuscate URLs so they aren't spoilers" single ((:commit . "fb7524fe8432bf58f0c4f637e5a12565ae81134e") (:url . "https://github.com/davep/obfusurl.el") (:keywords "convenience" "web" "text"))]) (ob-uart . [(0 1 0) nil "org-babel support for UART communication" single ((:commit . "90daeac90a9e75c20cdcf71234c67b812110c50e") (:url . "https://www.0x7.ch") (:keywords "tools" "comm" "org-mode" "uart" "literate programming" "reproducible development"))]) (ob-translate . [(0 1 2) ((google-translate (0 4)) (org (8))) "Translation of text blocks in org-mode." single ((:commit . "6b39cc1a94a1071107a4391684b1bffb5b9826f3") (:url . "https://github.com/krisajenkins/ob-translate") (:keywords "org" "babel" "translate" "translation"))]) (ob-spice . [(0 4 2) ((spice-mode (0 0 1)) (org (8))) "org-babel functions for spice evaluation" single ((:commit . "790faa67b0c57ca76e8814a1fa60b4dd774412c0") (:url . "http://tiagoweber.github.io"))]) (ob-sml . [(0 2) ((sml-mode (6 4))) "org-babel functions for template evaluation" single ((:commit . "5dc966acbe65e9e158bfa90018035bf52d4dafd4") (:url . "http://orgmode.org") (:keywords "literate programming" "reproducible research"))]) (ob-sagemath . [(0 4) ((sage-shell-mode (0 0 8)) (s (1 8 0)) (emacs (24))) "org-babel functions for SageMath evaluation" tar ((:commit . "450d510a5eb1fd644d0037e9f02271ca33639fb0") (:url . "https://github.com/stakemori/ob-sagemath") (:keywords "sagemath" "org-babel"))]) (ob-prolog . [(1 0 0) nil "org-babel functions for prolog evaluation." single ((:commit . "7e94309d3a21d7e265f3a85b41801397f286af00") (:url . "https://github.com/ljos/ob-prolog") (:keywords "literate programming" "reproducible research"))]) (ob-http . [(0 1 0) ((s (1 9 0)) (cl-lib (0 5))) "http request in org-mode babel" tar ((:commit . "9155a413e41d918042e9839399e3940aa0f8499c") (:url . "http://github.com/zweifisch/ob-http"))]) (ob-blockdiag . [(20170501 112) nil "org-babel functions for blockdiag evaluation" single ((:commit . "e6532af46dcea8e79f3ad3cb2863cbbe516efbf6") (:url . "https://github.com/corpix/ob-blockdiag.el") (:keywords "tools" "convenience"))]) (o-blog . [(2 0) nil "" tar ((:commit . "5db9594c6e3439c000b183551d7975c2e29131f4") (:keywords "emacs"))]) (nyan-prompt . [(0 2 0) nil "Nyan Cat on the eshell prompt." tar ((:commit . "b5137f2ee9afe640f59786eed17b308df6356c73") (:url . "http://github.com/PuercoPop/nyan-prompt") (:keywords "nyan" "cat" "lulz" "eshell" "rainbow dependencies ((rx 0))"))]) (nyan-mode . [(1 1 2) nil "Nyan Cat shows position in current buffer in mode-line." tar ((:commit . "4195cd368aca8f05a71cbff4e60cfa9dde10319a") (:url . "https://github.com/TeMPOraL/nyan-mode/") (:keywords "nyan" "cat" "lulz" "scrolling" "pop tart cat" "build something amazing"))]) (nvm . [(0 2 0) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (dash-functional (2 4 0))) "Manage Node versions within Emacs" single ((:commit . "d18b13e8275a57ee6c55dc71b671f02a8e6522ad") (:url . "http://github.com/rejeep/nvm.el") (:keywords "node" "nvm"))]) (numbers . [(1 4) ((emacs (24))) "Display information and trivia about numbers" single ((:commit . "74be68b94143f042ce461b2a69202f515acaf20c") (:url . "https://github.com/davep/numbers.el") (:keywords "games" "trivia" "maths" "numbers"))]) (number-lock . [(1 0 0) nil "Enter symbols on your number keys without pressing shift" single ((:commit . "846e86e2b3b07410f69e70d3ba7afb072b5585da") (:url . "https://github.com/Liu233w/number-lock.el") (:keywords "convenience"))]) (nsis-mode . [(0 44) nil "NSIS-mode" tar ((:commit . "f1bf701c37680553c8f51462e0829d0dd6c53187") (:url . "http://github.com/mlf176f2/nsis-mode") (:keywords "nsis"))]) (nrepl-sync . [(0 3 1) ((cider (0 6))) "connect to nrepl port and eval .sync.clj." single ((:commit . "471a08df87687a3eab61b3b8bf25a2e0962b5d5b") (:url . "https://github.com/phillord/lein-sync"))]) (npm-mode . [(0 6 0) ((emacs (24 1))) "minor mode for working with npm projects" single ((:commit . "84b35211cba4f2d5f03b8dc2b60ae4b03d90bf8a") (:url . "https://github.com/mojochao/npm-mode") (:keywords "convenience" "project" "javascript" "node" "npm"))]) (noxml-fold . [(0 0 2) nil "Fold away XML things." single ((:commit . "56fbc44b25cee9f8719edb3c7f8b1c4327dc1051") (:url . "https://github.com/paddymcall/noxml-fold") (:keywords "xml" "folding"))]) (notmuch-labeler . [(0 1) ((notmuch (0))) "Improve notmuch way of displaying labels" tar ((:commit . "d65d1129555d368243df4770ecc1e7ccb88efc58") (:url . "https://github.com/DamienCassou/notmuch-labeler") (:keywords "emacs" "package" "elisp" "notmuch" "emails"))]) (notmuch . [(0 24 2) nil "run notmuch within emacs" tar ((:commit . "2e86a4da55c29e0751d950839cdcbe40234ca8ba") (:url . "https://notmuchmail.org/"))]) (nose . [(0 1 1) nil "Easy Python test running in Emacs" single ((:keywords "nose" "python" "testing"))]) (nord-theme . [(0 3 0) ((emacs (24))) "An arctic, north-bluish clean and elegant theme" single ((:commit . "290aa9221a10e107acb0f06d0ec338fcb3e44785") (:url . "https://github.com/arcticicestudio/nord-emacs"))]) (nodejs-repl . [(0 1 1) nil "Run Node.js REPL" single ((:commit . "d821ef49a8eae0e405fd2a000246f0475542a575"))]) (noccur . [(0 2) nil "Run multi-occur on project/dired files" single ((:commit . "6cc02ce07178a61ae38a849f80472c01969272bc") (:keywords "convenience"))]) (no-littering . [(0 5 9) ((cl-lib (0 5))) "help keeping ~/.emacs.d clean" single ((:commit . "8b689a1e16d4825d0221f4a41756b63bbc361c82") (:url . "https://github.com/tarsius/no-littering"))]) (nixos-options . [(0 0 1) ((emacs (24)) (json (1 4))) "Interface for browsing and completing NixOS options." single ((:commit . "5fc8fa29bea9dd8e9c822af92f9bc6ddc223635f") (:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix"))]) (nix-mode . [(1 11 13) nil "Major mode for editing Nix expressions" single ((:commit . "0ec723375bc6008a8a88024962b052c3fbbaf4b8") (:url . "https://github.com/NixOS/nix/tree/master/misc/emacs"))]) (nix-buffer . [(3 0 1) ((f (0 17 3)) (emacs (24 4))) "Set up buffer environments with nix" single ((:commit . "749f48b510d0fd47dac67850f4089119fbff142a") (:url . "https://github.com/shlevy/nix-buffer/tree/master/"))]) (ninja-mode . [(1 7 2) ((emacs (24))) "Major mode for editing .ninja files" single ((:commit . "717b7b4a31db6027207588c0fb89c3ead384747b"))]) (niceify-info . [(1 0 1) nil "improve usability of Info pages" single ((:commit . "66b45916f1994e16ee023d29fa7cf8fec48078f1"))]) (nginx-mode . [(1 1 9) nil "major mode for editing nginx config files" single ((:commit . "a2bab83c2eb233d57d76b236e7c141c2ccc97005") (:keywords "languages" "nginx"))]) (neotree . [(0 5 2) ((cl-lib (0 5))) "A tree plugin like NerdTree for Vim" tar ((:commit . "5e1271655170f4cdc6849258e383c548a4e6e3d0") (:url . "https://github.com/jaypei/emacs-neotree"))]) (neon-mode . [(1 2 2) nil "Simple major mode for editing neon files" single ((:commit . "044040df9e83a015ddfe58940b503b6197fc29ce") (:keywords "conf"))]) (nemerle . [(1 2) nil "major mode for editing nemerle programs" single ((:commit . "556270ce8b97668a65e9ec20a05f78c3dffeac60") (:keywords "nemerle" "mode" "languages"))]) (ncl-mode . [(0 99 2) ((emacs (24))) "Major Mode for editing NCL scripts and other goodies" tar ((:commit . "164e504e25cec1812fbae5c3dae164d9f6018ece"))]) (navorski . [(0 2 7) ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) "Helping you live in the terminal, like Viktor did." single ((:commit . "4546d4e4dfbec20ee8c423c045408a3388a9eab9") (:keywords "terminal"))]) (navi-mode . [(2 0) nil "major-mode for easy buffer-navigation" single ((:commit . "5c979b3b3873b0e67751a1321a9e271d066f2022") (:url . "https://github.com/tj64/navi"))]) (nav-flash . [(1 1 0) nil "Briefly highlight the current line" single ((:commit . "9054a0f9b51da9e5207672efc029ba265ba28f34") (:url . "http://github.com/rolandwalker/nav-flash") (:keywords "extensions" "navigation" "interface"))]) (nasm-mode . [(1 1 1) ((emacs (24 3))) "NASM x86 assembly major mode" single ((:commit . "d990ed94d902b74a5c834fb567e03307607cee45") (:url . "https://github.com/skeeto/nasm-mode"))]) (narrowed-page-navigation . [(0 1 0) ((emacs (24)) (cl-lib (0 5))) "A minor mode for showing one page at a time" single ((:commit . "b215adbac4873f56fbab65772062f0f5be8058a1") (:keywords "outlines"))]) (narrow-reindent . [(0 2 0) ((emacs (24 4))) "Defines a minor mode to left-align narrowed regions." single ((:commit . "87466aac4dbeb79597124dd077bf5c704872fd3d") (:url . "https://github.com/emallson/narrow-reindent.el"))]) (names . [(20151201 0) ((emacs (24 1)) (cl-lib (0 5))) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." tar ((:commit . "00862c57ae6363ba86d1e5ce138929a1b6d5c7e6") (:url . "https://github.com/Malabarba/names") (:keywords "extensions" "lisp"))]) (nameless . [(1 0 2) ((emacs (24 4))) "Hide package namespace in your emacs-lisp code" single ((:commit . "ab1a5c589378334eafca105af1a17f73b9065423") (:url . "https://github.com/Malabarba/nameless") (:keywords "convenience" "lisp"))]) (name-this-color . [(0 3 0) ((emacs (24)) (cl-lib (0 5)) (dash (2 11 0))) "Match RGB codes to names easily and precisely" single ((:commit . "e37cd1291d5d68d4c8d6386eab9cb9d94fd3bcfa") (:url . "https://github.com/knl/name-this-color.el") (:keywords "lisp" "color" "hex" "rgb" "shade" "name"))]) (myterminal-controls . [(1 0 0) ((emacs (24)) (cl-lib (0 5))) "Quick toggle controls at a key-stroke" single ((:commit . "59ff3a02e34969a2ac608906937cb65cb514f9f1") (:url . "http://ismail.teamfluxion.com") (:keywords "convenience" "shortcuts"))]) (mysql-to-org . [(1 0 0) ((emacs (24 3)) (s (1 11 0))) "Minor mode to output the results of mysql queries to org tables" single ((:commit . "0f51b174a0ee6c9820baf9d79783923b270f3ffc"))]) (mykie . [(0 3 1) ((emacs (24 3)) (cl-lib (0 5))) "Command multiplexer: Register multiple functions to a keybind" tar ((:commit . "ab8f7549f9018c26278d101af1b90997c9e5e0b3") (:url . "https://github.com/yuutayamada/mykie-el") (:keywords "emacs" "configuration" "keybind"))]) (mwim . [(0 3) nil "Move to the beginning/end of line or code" single ((:commit . "d7885c32ad54f5b5698b48abea392a8eae2567a8") (:url . "https://github.com/alezost/mwim.el") (:keywords "convenience"))]) (mustache-mode . [(1 3) nil "A major mode for editing Mustache files." single ((:commit . "bf9897eb287ca47ced65d7d4e07ea61ea0aec39f"))]) (multiple-cursors . [(1 4 0) ((cl-lib (0 5))) "Multiple cursors for Emacs." tar ((:commit . "b3bd49c756cd959c0fb998d27eaf3d273570b05e"))]) (multi-web-mode . [(0 2 1) nil "multiple major mode support for web editing" tar ((:commit . "0517b9e2b3052533ac0cb71eba7073ed309fce06") (:keywords "convenience" "languages" "wp"))]) (multi-term . [(1 2) nil "Managing multiple terminal buffers in Emacs." single ((:commit . "c9e67edb772f2d9f9da8d887dc746459cfbce244") (:url . "http://www.emacswiki.org/emacs/download/multi-term.el") (:keywords "term" "terminal" "multiple buffer"))]) (multi-line . [(0 1 5) ((emacs (24 3)) (s (1 9 0)) (cl-lib (0 5)) (dash (2 12 0)) (shut-up (0 3 2))) "multi-line statements" tar ((:commit . "778c7510b7f066f53cf1f96a6ad1079fda5dc1f7") (:url . "https://github.com/IvanMalison/multi-line") (:keywords "multi" "line" "length" "whitespace" "programming"))]) (multi . [(2 0 1) ((emacs (24))) "Clojure-style multi-methods for emacs lisp" single ((:commit . "884203b11fdac8374ec644cca975469aab263404") (:url . "http://github.com/kurisuwhyte/emacs-multi") (:keywords "multimethod" "generic" "predicate" "dispatch"))]) (mu4e-maildirs-extension . [(0 8) nil "Show mu4e maildirs summary in mu4e-main-view" single ((:commit . "8b384b0bbda46c473dea3ee7dc68c2b3f2548528") (:url . "http://github.com/agpchil/mu4e-maildirs-extension"))]) (mu4e-alert . [(1 0) ((alert (1 2)) (s (1 10 0)) (ht (2 0)) (emacs (24 1))) "Desktop notification for mu4e" single ((:commit . "3453e25ff6c07c1b768b2a79fdb9fc5c97100e76") (:url . "https://github.com/iqbalansari/mu4e-alert") (:keywords "mail" "convenience"))]) (mtg-deck-mode . [(0 2) ((emacs (24 4))) "Major mode to edit MTG decks" tar ((:commit . "7774641630ef85999ab2f6d57eebddbc7c1e7244") (:url . "https://github.com/mattiasb/mtg-deck-mode") (:keywords "data" "mtg" "magic"))]) (msvc . [(1 3 5) ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (1 2 0))) "Microsoft Visual C/C++ mode" tar ((:commit . "bb9af3aee0e82d6a78a49a9af61ce47fab32d577") (:url . "https://github.com/yaruopooner/msvc") (:keywords "languages" "completion" "syntax check" "mode" "intellisense"))]) (mpv . [(0 1 0) ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (names (0 5 4)) (org (8 0))) "control mpv for easy note-taking" single ((:commit . "059135de3979e044f14503806047476d9be9f0e8") (:url . "https://github.com/kljohann/mpv.el") (:keywords "tools" "multimedia"))]) (mozc-temp . [(1 0 0) ((emacs (24)) (dash (2 10 0)) (mozc (0))) "Use mozc temporarily" single ((:commit . "7f5dd5fc8ceeca9b1822f7e056a4be67e2e74959") (:url . "https://github.com/HKey/mozc-temp"))]) (moz-controller . [(1 0) ((moz (0))) "Control Firefox from Emacs" single ((:commit . "42fd842039620de7fb122f7e4ffc1ab802ee97c5") (:url . "https://github.com/RenWenshan/emacs-moz-controller"))]) (moz . [(1 1 0) nil "Lets current buffer interact with inferior mozilla." single ((:commit . "646208b67e6c9c56d188db1eba999846d518935f") (:url . "http://github.com/bard/mozrepl/raw/master/chrome/content/moz.el"))]) (mowedline . [(3 2 0) nil "elisp utilities for using mowedline" single ((:commit . "832e81b7f90f6c2e753f89737c0b57a260544424"))]) (move-text . [(2 0 5) nil "Move current line or region with M-up or M-down." single ((:commit . "58f66f9b62af776a6c3ebe1151b038b59b2c12d4") (:url . "https://github.com/emacsfodder/move-text") (:keywords "edit"))]) (move-dup . [(1 0 0) nil "Eclipse-like moving and duplicating lines or rectangles." single ((:commit . "dae61de7aa5e2bf56a7bab1fa36fa3a39520a3c0") (:url . "https://github.com/wyuenho/move-dup") (:keywords "convenience" "wp" "edit"))]) (mosey . [(0 1) ((emacs (24 4))) "Mosey around your buffers" single ((:commit . "4d28bf359242477a45994336c2ce37243965c65e") (:url . "http://github.com/alphapapa/mosey.el") (:keywords "convenience"))]) (morlock . [(1 0 1) nil "more font-lock keywords for elisp" single ((:commit . "5845b60c705e8db88ce790b0b12cd8b917e1e5a5") (:url . "https://github.com/tarsius/morlock") (:keywords "convenience"))]) (monroe . [(0 3 1) nil "Yet another client for nREPL" single ((:commit . "0b9b043f042145bf62969add7ec476ea51da7cbd") (:url . "http://www.github.com/sanel/monroe") (:keywords "languages" "clojure" "nrepl" "lisp"))]) (monokai-theme . [(3 3 0) nil "A fruity color theme for Emacs." single ((:commit . "46fe076b5943ccc6fdc9cdacc7e8ad02b64bcd36") (:url . "http://github.com/oneKelvinSmith/monokai-emacs"))]) (monitor . [(0 3 0) ((dash (2 13 0))) "Utilities for monitoring expressions." tar ((:commit . "8c67c06f60a89b2583bae90afc91a7e7d73260fd") (:url . "https://github.com/guiltydolphin/monitor") (:keywords "lisp" "monitor" "utility"))]) (modern-cpp-font-lock . [(0 1 3) nil "Font-locking for \"Modern C++\"" single ((:commit . "3e9c18b5a2ade485565f5191f12a724f1969dbb0") (:url . "https://github.com/ludwigpacifici/modern-cpp-font-lock") (:keywords "languages" "c++" "cpp" "font-lock"))]) (mode-line-debug . [(1 2 2) nil "show status of `debug-on-error' in the mode-line" single ((:commit . "da44422eeb6a1f055b4ec2f822962c5162fce001") (:url . "https://github.com/tarsius/mode-line-debug") (:keywords "convenience" "lisp"))]) (mode-icons . [(0 4 0) ((emacs (24)) (cl-lib (0 5))) "Show icons for modes" tar ((:commit . "37581ed911e4469f773ddfb7b40a85592d323b76") (:url . "http://ryuslash.org/projects/mode-icons.html") (:keywords "multimedia"))]) (modalka . [(0 1 5) ((emacs (24 4))) "Easily introduce native modal editing of your own design" single ((:commit . "1259afa084f58d143d133aac56a6c0c10bc460f2") (:url . "https://github.com/mrkkrp/modalka") (:keywords "modal" "editing"))]) (mocker . [(0 3 1) ((eieio (1 3)) (el-x (0 2 4))) "mocking framework for emacs" single ((:commit . "55b078b53ea49e48bd1821d96f0fb86f794fdc6c") (:keywords "lisp" "testing"))]) (mocha-snippets . [(1 0 0) ((yasnippet (0 8 0))) "Yasnippets for the Mocha JS Testing Framework" tar ((:commit . "e054137bd78f0d236e983874da1f345d30a71816") (:keywords "test" "javascript"))]) (mocha . [(1 1) ((js2-mode (20150909))) "Run Mocha or Jasmine tests" single ((:commit . "4ca9495d4b00b753f055152bd4256c07d7b208f4") (:url . "http://github.com/scottaj/mocha.el") (:keywords "javascript" "mocha" "jasmine"))]) (mmt . [(0 2 0) ((emacs (24 1)) (cl-lib (0 3))) "Missing macro tools for Emacs Lisp" single ((:commit . "f7db836a10720ee50217012e7e2597ebcf624f90") (:url . "https://github.com/mrkkrp/mmt") (:keywords "macro" "emacs-lisp"))]) (mmm-mode . [(0 5 4) nil "Allow Multiple Major Modes in a buffer" tar ((:commit . "4085494df67e0a3207839a175ac62673dfd0acc1") (:url . "https://github.com/purcell/mmm-mode") (:keywords "convenience" "faces" "languages" "tools"))]) (mmm-mako . [(1 1) ((mmm-mode (0 4 8))) "MMM submode class for Mako Templates" single ((:url . "https://bitbucket.org/pjenvey/mmm-mako"))]) (mmm-jinja2 . [(0 1) ((mmm-mode (0 5 4))) "MMM submode class for Jinja2 Templates" single ((:commit . "c8cb763174fa2fb61b9a0e5e0ff8cb0210f8492f") (:url . "https://github.com/glynnforrest/mmm-jinja2"))]) (mips-mode . [(1 0 1) nil "Major-mode for MIPS assembly" single ((:commit . "dcde079176c1419ec24df08b62dd77a897892437") (:url . "https://github.com/hlissner/emacs-mips-mode") (:keywords "mips" "assembly"))]) (minitest . [(0 8 0) ((dash (1 0 0))) "An Emacs mode for ruby minitest files" tar ((:commit . "2bed01262b0d888473468b5c7bd7d73694d31320") (:url . "https://github.com/arthurnn/minitest-emacs"))]) (minimal-session-saver . [(0 6 2) nil "Very lean session saver" single ((:commit . "aaba48a8525e1310b221eeb96763304c22e9a4b4") (:url . "http://github.com/rolandwalker/minimal-session-saver") (:keywords "tools" "frames" "project"))]) (miniedit . [(2 0) nil "Enhanced editing for minibuffer fields." single ((:commit . "e12bf659c3eb92dd8a4cb77642dc0865c54667a3"))]) (minibuffer-cua . [(1 0 0) nil "Make CUA mode's S-up/S-down work in minibuffer" single ((:commit . "e8dcddc24d4f2e8d7987336fb58259e3cc78bbcb") (:url . "https://github.com/knu/minibuffer-cua.el") (:keywords "completion" "editing"))]) (minibuffer-complete-cycle . [(1 25 20130814) nil "Cycle through the *Completions* buffer" single ((:commit . "3df80135887d0169e02294a948711f6dfeca4a6f") (:url . "https://github.com/knu/minibuffer-complete-cycle") (:keywords "completion"))]) (milkode . [(0 4) nil "Command line search and direct jump with Milkode" single ((:commit . "ba97e2aeefa1d9d0b3835bf08edd0de248b0c513") (:keywords "milkode" "search" "grep" "jump" "keyword"))]) (migemo . [(1 9 1) nil "Japanese incremental search through dynamic pattern expansion" single ((:commit . "97e07796573c4c47f286bfe8eeb6428cb474526e") (:url . "https://github.com/emacs-jp/migemo"))]) (mic-paren . [(3 10) nil "advanced highlighting of matching parentheses" single ((:commit . "e4cf6e1a0ee91e849a9d42ecdcd6ed0287f8a521") (:keywords "languages" "faces" "parenthesis" "matching"))]) (mhc . [(1 1 1) ((calfw (20150703))) "Message Harmonized Calendaring system." tar ((:commit . "46d2a983b77b3139c9694ffba16ae875edc7d5b0") (:url . "http://www.quickhack.net/mhc") (:keywords "calendar"))]) (mew . [(6 7) nil "Messaging in the Emacs World" tar ((:commit . "08289430ce14780a03789b71d2060ff4392fbae6"))]) (metaweblog . [(1 0 0) ((xml-rpc (1 6 8))) "An emacs library to access metaweblog based weblogs" tar ((:commit . "2200eacde17edb66bbdde9c0b6b65481f40d498b"))]) (metafmt . [(0 0 3) nil "Run metafmt on buffers when saving them" single ((:commit . "bd20fc67d0affd48c1199315b7da06a7182e7d76") (:url . "https://github.com/lvillani/metafmt") (:keywords "languages" "tools"))]) (meta-presenter . [(1 0 0) nil "A simple multi-file presentation tool for Emacs" single ((:commit . "7ba8d30e36ce6de6e563c7f3a41a24d288787c48") (:url . "http://ismail.teamfluxion.com") (:keywords "productivity" "presentation"))]) (merlin . [(2 5 5) nil "Mode for Merlin, an assistant for OCaml." tar ((:commit . "957e551140587f0cd83d9186a06fba10a38c6084") (:url . "https://github.com/the-lambda-church/merlin") (:keywords "ocaml" "languages"))]) (mentor . [(0 3 1) ((xml-rpc (1 6 9)) (seq (1 11)) (cl-lib (0 5))) "Frontend for the rTorrent bittorrent client" tar ((:commit . "2b6aea26fd998d6e6fdac5e6b768f9a1751e268a") (:keywords "comm" "processes" "bittorrent"))]) (melpa-upstream-visit . [(1 0 0) ((s (1 6 0))) "A set of kludges to visit a melpa-hosted package's homepage" single ((:commit . "7310c74fdead3c0f86ad6eff76cf989e63f70f66") (:keywords "convenience"))]) (meghanada . [(0 8 2) ((emacs (24 3)) (yasnippet (0 6 1)) (company (0 9 0)) (flycheck (0 23))) "A better java development mode" tar ((:commit . "b507fc0e6fa4b6f1b05c46ecf563ad0af69e263a") (:url . "https://github.com/mopemope/meghanada-emacs") (:keywords "languages" "java"))]) (mediawiki . [(2 2 5) nil "mediawiki frontend" single ((:commit . "f8f95722193cb74da2f6a01a0e558707c9b8c46d") (:url . "http://github.com/hexmode/mediawiki-el") (:keywords "mediawiki" "wikipedia" "network" "wiki"))]) (mc-extras . [(1 2 1) ((multiple-cursors (1 2 1))) "Extra functions for multiple-cursors mode." tar ((:commit . "71cf966be06d9c74e781a87bb30fa4cf657ee852") (:url . "https://github.com/knu/mc-extras.el") (:keywords "editing" "cursors"))]) (mbe . [(0 1) ((emacs (24)) (cl-lib (0 5))) "Macros by Example" single ((:commit . "b022030d6e26198bb8a93a5b0bfe7aa891cd59ec") (:url . "https://github.com/ijp/mbe.el") (:keywords "tools" "macros"))]) (mb-url . [(0 1 0) ((cl-lib (0))) "Multiple Backends for Emacs URL package." tar ((:commit . "129a0bb6a684be76fb9f09010e710065d0e5baaa") (:url . "https://github.com/dochang/mb-url") (:keywords "url"))]) (maxframe . [(0 5) nil "No description available." single ((:commit . "4f1dbbe68048864037eae277b9280b90fd701ff1"))]) (maven-test-mode . [(0 1 5) ((s (1 9)) (emacs (24))) "Utilities for navigating test files and running maven test tasks." single ((:commit . "f79409907375591283291eb96af4754b1ccc0e6f") (:url . "http://github.com/rranelli/maven-test-mode") (:keywords "java" "maven" "test"))]) (math-symbol-lists . [(1 2) nil "Lists of Unicode math symbols and latex commands" tar ((:commit . "328f792599e4e298d164e3c6331a2426d82ebf64") (:url . "https://github.com/vspinu/math-symbol-lists") (:keywords "unicode" "symbols" "mathematics"))]) (material-theme . [(1 1) ((emacs (24 1))) "A Theme based on the colors of the Google Material Design" tar ((:commit . "0890ff69a0fa1f908e79d0f68b1bb3cf0d55af40") (:url . "http://github.com/cpaulik/emacs-material-theme") (:keywords "themes"))]) (mastodon . [(0 7 0) ((emacs (24 4))) "Client for Mastodon" tar ((:commit . "a9e595142eee69fe84f0ab06f7fde76cef27cdac") (:url . "https://github.com/jdenen/mastodon.el"))]) (marshal . [(0 7 0) ((eieio (1 4)) (json (1 3)) (ht (2 1))) "eieio extension for automatic (un)marshalling" single ((:commit . "92caeddbb3c3de61707d12db62b9915e271807b7") (:url . "https://github.com/sigma/marshal.el") (:keywords "eieio"))]) (markup-faces . [(1 0 0) nil "collection of faces for markup language modes" single ((:commit . "c43612633c6c161857a3bab5752ae192bb03f5f3") (:url . "https://github.com/sensorflo/markup-faces") (:keywords "wp" "faces"))]) (markup . [(2 0 1) ((cl-lib (0 5))) "Simple markup generation helpers." single ((:commit . "876da2d3f23473475bb0fd0a1480ae11d2671291") (:url . "http://github.com/leoc/markup.el") (:keywords "convenience" "markup" "html"))]) (markdown-toc . [(0 1 2) ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 1))) "A simple TOC generator for markdown file" tar ((:commit . "15587c76bec43dd778a2034035f98a79ad29e96a"))]) (markdown-preview-mode . [(0 8) ((emacs (24 3)) (websocket (1 6)) (markdown-mode (2 0)) (cl-lib (0 5)) (web-server (0 1 1)) (uuidgen (0 3))) "markdown realtime preview minor mode." tar ((:commit . "65f48df07c87d37275cc6a135741df4b585f1836") (:url . "https://github.com/ancane/markdown-preview-mode") (:keywords "markdown" "gfm" "convenience"))]) (markdown-mode . [(2 2) ((emacs (24)) (cl-lib (0 5))) "Major mode for Markdown-formatted text" single ((:commit . "e9bb47d8d87ae8205ed935a3b485e12c12e43aa9") (:url . "http://jblevins.org/projects/markdown-mode/") (:keywords "markdown" "github flavored markdown" "itex"))]) (markdown-mode+ . [(0 8) ((markdown-mode (20111229))) "extra functions for markdown-mode" tar ((:commit . "f35e63284c5caed19b29501730e134018a78e441") (:url . "http://github.com/milkypostman/markdown-mode+.el") (:keywords "markdown" "latex" "osx" "rtf"))]) (mark-tools . [(0 3) nil "Some simple tools to access the mark-ring in Emacs" single ((:commit . "0e7ac2522ac84155cab341dc49f7f0b81067133c") (:url . "https://github.com/stsquad/emacs-mark-tools"))]) (marcopolo . [(0 3 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Docker API" tar ((:commit . "ce6ad40d7feab0568924e3bd9659b76e3eecd55e") (:url . "https://github.com/nlamirault/marcopolo") (:keywords "docker"))]) (map-regexp . [(0 3 0) ((cl-lib (0 2))) "map over matches of a regular expression" single ((:commit . "b8e06284ec1c593d7d2bda5f35597a63de46333f") (:url . "https://github.com/tarsius/map-regexp") (:keywords "convenience"))]) (map-progress . [(0 5 0) nil "mapping macros that report progress" single ((:commit . "6b8ef6b60626772082b2e80ec54d1f1275e1a1b8") (:url . "https://github.com/tarsius/map-progress/") (:keywords "convenience"))]) (mallard-mode . [(0 3 0) nil "Major mode for editing Mallard files" tar ((:commit . "152cd44d53c881457fe57c1aba77e8e2fca4d1b0") (:url . "https://github.com/jhradilek/emacs-mallard-mode") (:keywords "xml" "mallard"))]) (malinka . [(0 3 1) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) "A C/C++ project configuration package for Emacs" single ((:commit . "81cf7dd81fbf124ceda31ee963cce8c3616f28f1") (:url . "https://github.com/LefterisJP/malinka") (:keywords "c" "c++" "project-management"))]) (makey . [(0 3) ((cl-lib (0 2))) "interactive commandline mode" single ((:commit . "a61781e69d3b451551e269446e1c5f624ab81137"))]) (make-color . [(0 4) nil "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" single ((:commit . "b19cb40c0619e267f2948ed37aff67b712a6deed") (:url . "http://github.com/alezost/make-color.el") (:keywords "color"))]) (magithub . [(0 1 2) ((emacs (24 4)) (magit (2 8 0)) (git-commit (20160821 1338)) (with-editor (20160828 1025)) (s (20160711 525))) "Magit interfaces for GitHub" tar ((:commit . "283bde94b3fe5cd8f4634887812c58eaf55aef60") (:url . "https://github.com/vermiculus/magithub") (:keywords "git" "tools" "vc"))]) (magit-topgit . [(2 1 2) ((emacs (24 4)) (magit (2 1 0))) "TopGit extension for Magit" single ((:commit . "11489ea798bc88d0ea5244bbf725285eedfefbef") (:keywords "vc" "tools"))]) (magit-tbdiff . [(0 2 0) ((emacs (24 4)) (magit (2 10 0))) "Magit extension for git-tbdiff" single ((:commit . "2e7d54d290260e5834cca06863d78fc563d7373c") (:url . "https://github.com/magit/magit-tbdiff") (:keywords "vc" "tools"))]) (magit-svn . [(2 2 1) ((emacs (24 4)) (magit (2 1 0))) "Git-Svn extension for Magit" single ((:commit . "c833903732a14478f5c4cfc561bae7c50671b36c") (:keywords "vc" "tools"))]) (magit-stgit . [(2 1 3) ((emacs (24 4)) (magit (2 1 0))) "StGit extension for Magit" single ((:commit . "1b064485d512ab547d606dcea9ad4298f355095c") (:keywords "vc" "tools"))]) (magit-rockstar . [(1 0 5) ((dash (2 12 1)) (magit (2 6 1))) "commit like a rockstar" single ((:commit . "bccce1ac8e012f52e29470c1c7d815f9bb1a192b") (:url . "https://github.com/tarsius/magit-rockstar") (:keywords "convenience"))]) (magit-popup . [(2 10 3) ((emacs (24 4)) (async (1 9)) (dash (2 13 0))) "Define prefix-infix-suffix command combos" tar ((:commit . "d5b747473ab0bf0f0034fca2f57f6497d476b67e") (:url . "https://github.com/magit/magit") (:keywords "bindings"))]) (magit-gitflow . [(2 2 2) ((magit (2 1 0)) (magit-popup (2 2 0))) "gitflow extension for magit" single ((:commit . "5bdcfe0a7bf4f5bb9a927baa4880233bf11a4a6b") (:url . "https://github.com/jtatarik/magit-gitflow") (:keywords "vc" "tools"))]) (magit-gh-pulls . [(0 5 2) ((emacs (24)) (gh (0 9 1)) (magit (2 1 0)) (pcache (0 2 3)) (s (1 6 1))) "GitHub pull requests extension for Magit" single ((:commit . "e4a73781e3c1c7e4a09232b25e3474463cdf77b6") (:url . "https://github.com/sigma/magit-gh-pulls") (:keywords "git" "tools"))]) (magit-gerrit . [(0 3) ((magit (2 3 1))) "Magit plugin for Gerrit Code Review" single ((:commit . "699c5c39c6dbdc8d730721eaf1491f982dd78142") (:url . "https://github.com/terranpro/magit-gerrit"))]) (magit-find-file . [(2 1 0) ((magit (2 1 0)) (dash (2 8 0))) "completing-read over all files in Git" single ((:commit . "035da838b1a19e7a5ee135b4ca8475f4e235b61e") (:url . "https://github.com/bradleywright/magit-find-file.el") (:keywords "git"))]) (magit-filenotify . [(0 1) ((magit (1 3 0)) (emacs (24 4))) "Refresh status buffer when git tree changes" single ((:commit . "575c4321f61fb8f25e4779f9ffd4514ac086ae96") (:keywords "tools"))]) (magit-annex . [(1 3 1) ((cl-lib (0 3)) (magit (2 3 0))) "Control git-annex from Magit" single ((:commit . "ae6250aead8f283eac8d6951a249cfc7d85e0b40") (:url . "https://github.com/kyleam/magit-annex") (:keywords "vc" "tools"))]) (magit . [(2 10 3) ((emacs (24 4)) (async (1 9)) (dash (2 13 0)) (with-editor (2 5 10)) (git-commit (2 10 2)) (magit-popup (2 10 2))) "A Git porcelain inside Emacs" tar ((:commit . "d5b747473ab0bf0f0034fca2f57f6497d476b67e") (:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc"))]) (magic-filetype . [(0 2 1) ((emacs (24)) (s (1 9 0))) "Enhance filetype major mode" single ((:commit . "0dfe3d9e0e22c7b06e34c8338f110e337306e3fd") (:url . "https://github.com/zonuexe/magic-filetype.el") (:keywords "emulations" "vim" "ft" "file" "magic-mode"))]) (macrostep . [(0 9) ((cl-lib (0 5))) "interactive macro expander" tar ((:commit . "1e2593279f3722e31d8a8f07e297a5c546586cba") (:url . "https://github.com/joddie/macrostep") (:keywords "lisp" "languages" "macro" "debugging"))]) (macro-math . [(1 0) nil "in-buffer mathematical operations" single ((:commit . "105e03c80290d1b88984b2d265a149a13d722920") (:url . "http://nschum.de/src/emacs/macro-math/") (:keywords "convenience"))]) (m-buffer . [(0 15) ((seq (2 14))) "List-Oriented, Functional Buffer Manipulation" tar ((:commit . "6eb1d2535a82707a83733173bc400a0d8e520c80"))]) (lua-mode . [(20151025) nil "a major-mode for editing Lua scripts" tar ((:commit . "bdf121b2c05bc74d3d7961a91d7afeb6176e0f45") (:url . "http://immerrr.github.com/lua-mode") (:keywords "languages" "processes" "tools"))]) (love-minor-mode . [(1 1) nil "Minor mode for working on LÖVE projects" single ((:commit . "1634ff3a8b657c63a5cffd9a937812a289f2c954") (:url . "https://github.com/ejmr/love-minor-mode"))]) (loop . [(1 3) nil "friendly imperative loop structures" single ((:commit . "c3598bd3ad0677f66e061b3ba51a05d05275283e") (:keywords "loop" "while" "for each" "break" "continue"))]) (logview . [(0 8 1) ((emacs (24 1)) (datetime (0 2))) "Major mode for viewing log files" single ((:commit . "134b41557ab539219d9e3a1b3c8939df93676726") (:url . "https://github.com/doublep/logview") (:keywords "files" "tools"))]) (logito . [(0 1) ((eieio (1 3))) "logging library for Emacs" single ((:commit . "824acb89d2cc18cb47281a4fbddd81ad244a2052") (:keywords "lisp" "tool"))]) (logalimacs . [(1 0 0) nil "Front-end to logaling-command for Ruby gems" single ((:commit . "cfd7aaa925934f876eee6e8c550cf6e7a239a2ac") (:url . "https://github.com/logaling/logalimacs"))]) (log4j-mode . [(1 3) nil "major mode for viewing log files" single ((:keywords "log" "log4j" "java"))]) (log4e . [(0 3 0) nil "provide logging framework for elisp" single ((:commit . "6592682ab7de0e3d1915aa4d3c53e083be79fbeb") (:url . "https://github.com/aki2o/log4e") (:keywords "log"))]) (loc-changes . [(1 1) nil "Helps users and programs keep track of positions even after buffer changes." single ((:commit . "8447baff7cb4839ef8d1d747a14e5da85d0cee5b") (:url . "http://github.com/rocky/emacs-loc-changes"))]) (load-relative . [(1 0) nil "relative file load (within a multi-file Emacs package)" tar ((:commit . "15ffaa9ebf1b7bbfcc307d1716eec135253b3b8d") (:url . "http://github.com/rocky/emacs-load-relative") (:keywords "internal"))]) (live-py-mode . [(2 16 0) ((emacs (24 3))) "Live Coding in Python" tar ((:commit . "96f22fe5892775b8a9a081898e1a4f00fbb8a674") (:url . "http://donkirkby.github.io/live-py-plugin/") (:keywords "live" "coding"))]) (live-code-talks . [(0 2 1) ((emacs (24)) (cl-lib (0 5)) (narrowed-page-navigation (0 1))) "Support for slides with live code in them" single ((:commit . "3a2ecdb49b2651d87999d4cad56ba8f1004c7a99") (:keywords "docs" "multimedia"))]) (literate-coffee-mode . [(0 4) ((coffee-mode (0 5 0))) "major-mode for Literate CoffeeScript" single ((:commit . "39fe3bfa1f68a7b8b91160875589219b214a2cd6") (:url . "https://github.com/syohex/emacs-literate-coffee-mode"))]) (literal-string . [(0 1) ((markdown-mode (2 0)) (emacs (25))) "edit string literals in a dedicated buffer" single ((:commit . "46dd2b620df70d681261616f1a26afa4a032e2d5") (:url . "https://github.com/joodie/literal-string-mode/") (:keywords "lisp" "tools" "docs"))]) (lit-mode . [(0 1 1) nil "Major mode for lit" single ((:commit . "c61c403afc8333a5649c5421ab1a6341dc1c7d92") (:keywords "languages" "tools"))]) (list-utils . [(0 4 4) nil "List-manipulation utility functions" single ((:commit . "acf18aca1131a90f8d673974673e3c5d8fdc6a86") (:url . "http://github.com/rolandwalker/list-utils") (:keywords "extensions"))]) (list-unicode-display . [(0 1) ((cl-lib (0 5))) "Search for and list unicode characters by name" single ((:commit . "59770cf3572bd36c3e9ba044846dc420c0dca09b") (:keywords "convenience"))]) (list-packages-ext . [(0 1 0) ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6))) "Extras for list-packages" single ((:commit . "344719b313c208c644490f8f1130e21405402f05") (:keywords "convenience" "tools"))]) (lispyscript-mode . [(0 3 5) nil "Major mode for LispyScript code." single ((:commit . "9a4200085e2a15725a58616d131a56f5edce214b") (:url . "https://github.com/krisajenkins/lispyscript-mode") (:keywords "lisp" "languages"))]) (lispy . [(0 26 0) ((emacs (24 1)) (ace-window (0 8 0)) (hydra (0 12 1)) (iedit (0 97)) (multiple-cursors (1 3 0)) (swiper (0 2 0))) "vi-like Paredit" tar ((:commit . "7756a8fbbadbebbd5e20768569ed92ad6c402c5c"))]) (linum-relative . [(0 5) nil "display relative line number in emacs." single ((:commit . "b8a99dcfe38a491172a8193053fb7849634b43c0") (:url . "http://github.com/coldnew/linum-relative") (:keywords "converience"))]) (link . [(1 10) nil "No description available." single ((:commit . "9ef1672ecd367827381bbbc9af93685980083c5c"))]) (lingr . [(0 2) nil "Lingr Client for GNU Emacs" single ((:commit . "c9c20dd9b4967aa2f8873d6890d6797e6a498d23") (:url . "http://github.com/lugecy/lingr-el") (:keywords "chat" "client" "internet"))]) (lice . [(0 2) nil "License And Header Template" tar ((:commit . "69f2d87984f3f3d469db35e241fbbe979384cd03") (:url . "https://github.com/buzztaiki/lice-el") (:keywords "template" "license" "tools"))]) (lfe-mode . [(1 3) nil "Lisp Flavoured Erlang mode" tar ((:commit . "af14b1439097850ffa39935419ed83f5bcaa6d09"))]) (letcheck . [(0 4) nil "Check the erroneous assignments in let forms" single ((:commit . "e85b185993a2eaeec6490709f4c131fde2edd672") (:url . "https://github.com/Fuco1/letcheck") (:keywords "convenience"))]) (less-css-mode . [(0 21) nil "Major mode for editing LESS CSS files (lesscss.org)" single ((:commit . "59bf174c4e9f053ec2a7ef8c8a8198490390f6fb") (:url . "https://github.com/purcell/less-css-mode") (:keywords "less" "css" "mode"))]) (lentic . [(0 11) ((emacs (24 4)) (m-buffer (0 13)) (dash (2 5 0)) (f (0 17 2)) (s (1 9 0))) "One buffer as a view of another" tar ((:commit . "8655ecd51e189bbdd6a4d8405dc3ea2e689c709a"))]) (ledger-mode . [(3 1 1) nil "Helper code for use with the \"ledger\" command-line tool" tar ((:commit . "96c4e81eed52e0ef514dc15a6ea6d877b3409a2a"))]) (leanote . [(0 4 0) ((emacs (24 4)) (cl-lib (0 5)) (request (0 2)) (let-alist (1 0 3)) (pcache (0 4 0)) (s (1 10 0)) (async (1 9))) "A minor mode writing markdown leanote" single ((:commit . "1bd49fdf13ef707bae7edaa724a1592aa7fb002f") (:url . "https://github.com/aborn/leanote-emacs") (:keywords "leanote" "note" "markdown"))]) (lcb-mode . [(0 1 1) ((emacs (24))) "LiveCode Builder major mode" single ((:commit . "be0768e9aa6f9b8e76f2230f4f7f4d152a766b9a") (:url . "https://github.com/peter-b/lcb-mode") (:keywords "languages"))]) (latex-unicode-math-mode . [(0 3 1) nil "Input method for Unicode math symbols" tar ((:commit . "3b82347291edcb32e4062b0048c367a3079b3e8c") (:url . "https://github.com/Christoph-D/latex-unicode-math-mode"))]) (latex-math-preview . [(0 7 2) nil "preview LaTeX mathematical expressions." single ((:commit . "c1c87c4c5501f98b97af19f7e3454a2369265edc") (:url . "https://gitlab.com/latex-math-preview/latex-math-preview") (:keywords "latex" "tex"))]) (latex-extra . [(1 13) ((auctex (11 86 1)) (cl-lib (0 5))) "Adds several useful functionalities to LaTeX-mode." single ((:commit . "d5b759fa61da968c3ca998ba0d2ef4a73647e5fd") (:url . "http://github.com/Malabarba/latex-extra") (:keywords "tex"))]) (langtool . [(1 6 0) ((cl-lib (0 3))) "Grammar check utility using LanguageTool" single ((:commit . "d976e4f0cadb2309b798540429558936f8f45889") (:url . "https://github.com/mhayashi1120/Emacs-langtool") (:keywords "docs"))]) (labburn-theme . [(1 0 0) nil "A lab color space zenburn theme." single ((:commit . "bfa1d9f1c7e107cb45754fe57e4e72a9be70e9d1") (:url . "https://github.com/ksjogo/labburn-theme") (:keywords "theme" "zenburn"))]) (kurecolor . [(1 2 4) ((emacs (24 1)) (s (1 0))) "color editing goodies for Emacs" single ((:commit . "eb894bcb0769ce73404734f14f7582661abe02c8"))]) (kubernetes-evil . [(0 11 3) ((kubernetes (0 11 3)) (evil (1 2 12))) "Kubernetes keybindings for evil-mode." single ((:commit . "560b65baef1c4f2bedffd8e767774b55dfc35594"))]) (kubernetes . [(0 11 3) ((emacs (25 1)) (dash (2 12 0)) (magit (2 8 0))) "Magit-like porcelain for Kubernetes." tar ((:commit . "560b65baef1c4f2bedffd8e767774b55dfc35594"))]) (ksp-cfg-mode . [(0 4) ((cl-lib (0 5))) "major mode for editing KSP CFG files" single ((:commit . "07a957512e66030e1b9f8ac0f259051386acb5b5") (:url . "http://github.com/lashtear/ksp-cfg-mode") (:keywords "data"))]) (know-your-http-well . [(0 5 0) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar ((:commit . "c381a9735f3ea86ebc9667e35cdfeab0b67fefb7"))]) (kiwix . [(0 4 0) ((emacs (24 3)) (cl-lib (2 0))) "Kiwix interface and support." tar ((:commit . "b84a5ff33efdf13dda22ed32ea37a09b15cd1690") (:url . "https://github.com/stardiviner/kiwix.el") (:keywords "kiwix" "wikipedia"))]) (kivy-mode . [(1 10 0) nil "Emacs major mode for editing Kivy files" single ((:commit . "a4116a58d7c5448a4c6615021302375cbe3e129a"))]) (killer . [(0 2 2) nil "kill and delete text" single ((:commit . "52256640aebbb8c25f8527843c2425b848031cd8") (:url . "http://github.com/tarsius/killer") (:keywords "convenience"))]) (kill-ring-search . [(1 1) nil "incremental search for the kill ring" single ((:commit . "3a5bc1767f742c91aa788df79ecec836a0946edb") (:url . "http://nschum.de/src/emacs/kill-ring-search/") (:keywords "convenience" "matching"))]) (kill-or-bury-alive . [(0 1 2) ((emacs (24 4)) (cl-lib (0 5))) "Precise control over buffer killing in Emacs" single ((:commit . "b488c3dbba657bbd524402f48fde16ab6b1211db") (:url . "https://github.com/mrkkrp/kill-or-bury-alive") (:keywords "buffer" "killing" "convenience"))]) (kibit-helper . [(0 1 1) ((s (0 8)) (emacs (24))) "Conveniently use the Kibit Leiningen plugin from Emacs" single ((:commit . "ec5f154db3bb0c838e86f527353f08644cede926") (:url . "http://www.github.com/brunchboy/kibit-helper") (:keywords "languages" "clojure" "kibit"))]) (keyset . [(0 1 2) ((dash (2 8 0)) (cl-lib (0 5))) "A small library for structuring key bindings." single ((:commit . "25658ef79d26971ce41d9df207dff58d38daa091"))]) (keymap-utils . [(3 0 0) ((cl-lib (0 3))) "keymap utilities" single ((:commit . "0130f32e5ade649dd2738206a80570e450906ef6") (:url . "https://github.com/tarsius/keymap-utils") (:keywords "convenience" "extensions"))]) (keyfreq . [(1 8) nil "track command frequencies" single ((:commit . "f3a96693e2e4c6893198a0223e3f3c648ae09cec"))]) (keydef . [(1 15) nil "a simpler way to define keys, with kbd syntax" single ((:commit . "dff2be9f58d12d8c6a490ad0c1b2b10b55528dc0") (:keywords "convenience" "lisp" "customization" "keyboard" "keys"))]) (keychain-environment . [(2 4 0) nil "load keychain environment variables" single ((:commit . "7c08e8c4c3ea4d6eaee12d710a56793771f837c5") (:url . "https://github.com/tarsius/keychain-environment") (:keywords "gnupg" "pgp" "ssh"))]) (key-seq . [(1 0 1) ((key-chord (0 6))) "map pairs of sequentially pressed keys to commands" single ((:commit . "e29b083a6427d061638749194fc249ef69ad2cc0") (:url . "http://github.com/vlevit/key-seq.el") (:keywords "convenience" "keyboard" "keybindings"))]) (key-combo . [(1 6) nil "map key sequence to commands" single ((:commit . "0bc0cf6466a4257047a21a6d01913e92e6862165") (:url . "https://github.com/uk-ar/key-combo") (:keywords "keyboard" "input"))]) (key-chord . [(0 6) nil "map pairs of simultaneously pressed keys to commands" single ((:commit . "8468998946367157830df19a1e92785d22a34178") (:keywords "keyboard" "chord" "input"))]) (karma . [(0 1 0) nil "Karma Test Runner Emacs Integration" single ((:commit . "f4ee856e7f59649e9d9021c46f872f9b4f5b7e6e") (:url . "http://github.com/tonini/karma.el") (:keywords "javascript" "js" "karma" "testing"))]) (kaolin-theme . [(0 6) ((emacs (24))) "A dark jade theme inspired by Sierra.vim" single ((:commit . "041cc6637a58a3a24086d1c2b8c3eb113434127e") (:url . "https://github.com/0rdy/kaolin-theme"))]) (kakapo-mode . [(1 2) ((cl-lib (0 5))) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." single ((:commit . "fe3d579867f7465cd3ad04f29b4b2b3b820edc01") (:url . "https://github.com/listx/kakapo-mode") (:keywords "indentation"))]) (kaesar-mode . [(0 9 0) ((kaesar (0 1 4)) (cl-lib (0 3))) "Encrypt/Decrypt buffer by AES with password." single ((:commit . "4fa74851cd928f30e9f2ee1aa27ee6074ad253ea") (:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-mode.el") (:keywords "data" "convenience"))]) (kaesar-file . [(0 9 0) ((kaesar (0 1 1))) "Encrypt/Decrypt file by AES with password." single ((:commit . "4fa74851cd928f30e9f2ee1aa27ee6074ad253ea") (:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/cipher/kaesar-file.el") (:keywords "data" "files"))]) (kaesar . [(0 9 0) ((cl-lib (0 3))) "Another AES algorithm encrypt/decrypt string with password." single ((:commit . "4fa74851cd928f30e9f2ee1aa27ee6074ad253ea") (:url . "https://github.com/mhayashi1120/Emacs-kaesar/raw/master/kaesar.el") (:keywords "data"))]) (jvm-mode . [(0 2 0) ((dash (2 6 0)) (emacs (24))) "Monitor and manage your JVMs" single ((:commit . "16d84c8c80bb214367bae6ed30b08756521c27d6") (:url . "https://github.com/martintrojer/jvm-mode.el") (:keywords "convenience"))]) (jump-to-line . [(0 2 0) nil "Jump to line number at point." single ((:commit . "01ef8c3529d85e6c59cc20840acbc4a8e8325bc8") (:keywords "jump" "line" "back" "file" "ruby" "csharp" "python" "perl"))]) (jump . [(2 4) ((findr (0 7)) (inflections (2 4))) "build functions which contextually jump between files" single ((:commit . "fb3dd59f21f77016742de40028aee92176c0917a") (:url . "http://github.com/eschulte/jump.el") (:keywords "project" "convenience" "navigation"))]) (julia-mode . [(0 4 5) nil "Major mode for editing Julia source code" single ((:url . "https://github.com/JuliaLang/julia") (:keywords "languages"))]) (judge-indent . [(1 1 2) nil "judge indent and tab widths" single ((:keywords "indent" "tab"))]) (jsx-mode . [(0 1 10) nil "major mode for JSX" single ((:commit . "1ca260b76f6e6251c528ed89501597a5b456c179") (:url . "https://github.com/jsx/jsx-mode.el"))]) (json-snatcher . [(1 0 0) ((emacs (24))) "Grabs the path to JSON values in a JSON file" single ((:commit . "c4cecc0a5051bd364373aa499c47a1bb7a5ac51c") (:url . "http://github.com/sterlingg/json-snatcher"))]) (json-reformat . [(0 0 6) nil "Reformatting tool for JSON" single ((:commit . "b9bd375ec1deb10d2ba09c409bdcf99c56d7a716") (:url . "https://github.com/gongo/json-reformat") (:keywords "json"))]) (json-navigator . [(0 1 0) ((emacs (24 3)) (hierarchy (0 6 0))) "View and navigate JSON structures" single ((:commit . "bc5634fc78d2e43ebd3c255350829877f3e4549c"))]) (json-mode . [(1 7 0) ((json-reformat (0 0 5)) (json-snatcher (1 0 0))) "Major mode for editing JSON files" single ((:commit . "9ba01b868a6b138feeff82b9eb0abd331d29325f") (:url . "https://github.com/joshwnj/json-mode"))]) (jsfmt . [(0 2 0) nil "No description available." single ((:commit . "c5d9742872509143db0250a77db705ef78f02cd0"))]) (js3-mode . [(1 1 0) nil "An improved JavaScript editing mode" tar ((:commit . "5ccda46ba39998a74bd724fdffb34634be5b6563") (:keywords "javascript" "languages"))]) (js2-refactor . [(0 8 0) ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) "A JavaScript refactoring library for emacs." tar ((:commit . "bd73f03fc5f0d1ca1dce29e28bb43f78af483a38"))]) (js2-mode . [(20170116) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar ((:commit . "03c679eb9914d58d7d9b7afc2036c482a9a01236") (:url . "https://github.com/mooz/js2-mode/") (:keywords "languages" "javascript"))]) (js2-highlight-vars . [(0 1 0) ((js2-mode (20150909))) "highlight occurrences of the variable under cursor" single ((:commit . "bf38d12cf65eebc8b81866fd03f6a0389bb2a9ed") (:url . "http://mihai.bazon.net/projects/editing-javascript-with-emacs-js2-mode/js2-highlight-vars-mode"))]) (js2-closure . [(2 1) ((js2-mode (20150909))) "Google Closure dependency manager" single ((:commit . "6050abb334c228702c23fcb03bfdf1dfbd1d6b11") (:url . "http://github.com/jart/js2-closure"))]) (js-comint . [(1 1 0) nil "Run a JavaScript interpreter in an inferior process window." single ((:commit . "2c19fafed953ea0972ff086614f86614f4d5dc13") (:url . "https://github.com/redguardtoo/js-comint") (:keywords "javascript" "node" "inferior-mode" "convenience"))]) (jq-mode . [(0 2 0) ((emacs (24 3))) "Edit jq scripts." tar ((:commit . "3237634ab42566eb50f54e4b7f3896ffd20a8e53") (:url . "https://github.com/ljos/jq-mode"))]) (jpop . [(3 2 3) ((emacs (24)) (dash (2 11 0))) "Lightweight project cacheing and navigation framework" tar ((:commit . "f3eed65e54dc2daaa7678e6eb169d35c4a7d1e63") (:url . "https://github.com/domtronn/jpop") (:keywords "project" "convenience"))]) (jinja2-mode . [(0 2) nil "A major mode for jinja2" single ((:commit . "cfaa7bbe7bb290cc500440124ce89686f3e26f86"))]) (jedi-core . [(0 2 7) ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) "Common code of jedi.el and company-jedi.el" tar ((:commit . "8da022c8cda511428c72a6dc4c5be3c0a0c88584"))]) (jedi . [(0 2 7) ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) "a Python auto-completion for Emacs" single ((:commit . "8da022c8cda511428c72a6dc4c5be3c0a0c88584"))]) (jdecomp . [(0 2 0) ((emacs (24 5))) "Interface to Java decompilers" single ((:commit . "1590b06f139f036c1041e1ce5c0acccaa24b31a7") (:url . "https://github.com/xiongtx/jdecomp") (:keywords "decompile" "java" "languages" "tools"))]) (javadoc-lookup . [(1 1 0) ((cl-lib (0 3))) "Javadoc Emacs integration with Maven" tar ((:commit . "507a2dd443d60b537b8f779c1847e2cd0ccd1382") (:url . "https://github.com/skeeto/javadoc-lookup"))]) (java-imports . [(0 1 0) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Java imports" single ((:commit . "275f354c245df741b45e88d085660722e81a12be") (:url . "http://www.github.com/dakrone/emacs-java-imports") (:keywords "java"))]) (japanlaw . [(0 9 1) nil "Japan law from law.e-gov.go.jp" single ((:commit . "d90b204b018893d5d75286c92948c0bddf94cce2") (:keywords "docs" "help"))]) (jammer . [(0 1 1) nil "Punish yourself for using Emacs inefficiently" single ((:commit . "1ba232b71507b468c60dc53c2bc8888bef36c858") (:url . "https://github.com/wasamasa/jammer") (:keywords "games"))]) (jade-mode . [(1 0 0) nil "Major mode for editing .jade files" single ((:commit . "4e7a20db492719062f40b225ed730ed50be5db56") (:url . "https://github.com/brianc/jade-mode"))]) (jabber . [(0 8 92) nil "A Jabber client for Emacs." tar ((:commit . "2999f58619dd9c20cc6cac8060c4c850a504cbbd"))]) (j-mode . [(1 1 1) nil "Major mode for editing J programs" tar ((:commit . "caa55dfaae01d1875380929826952c2b3ef8a653") (:url . "http://github.com/zellio/j-mode") (:keywords "j" "langauges"))]) (iy-go-to-char . [(3 2 1) nil "Go to next CHAR which is similar to \"f\" and \"t\" in vim" single ((:commit . "77b40d64eef9dad11eca59f4e3fbc6e849de7434") (:url . "https://github.com/doitian/iy-go-to-char") (:keywords "navigation" "search"))]) (ix . [(0 7) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single ((:commit . "498dac674f4f1910d39087b1457c5da5465a0614") (:url . "http://www.github.com/theanalyst/ix.el"))]) (ivy-youtube . [(0 2 0) ((request (0 2 0)) (ivy (0 8 0)) (cl-lib (0 5))) "Query YouTube and play videos in your browser" single ((:commit . "32f609f1d1a3718739be5797e020d6266d8340d2") (:url . "https://github.com/squiter/ivy-youtube") (:keywords "youtube" "multimedia" "mpv" "vlc"))]) (ivy-rtags . [(2 10) ((ivy (0 7 0)) (rtags (2 10))) "RTags completion back-end for ivy" single ((:commit . "3b3ace901f53827daef81d4c13658ec4feb318b4") (:url . "http://rtags.net"))]) (ivy-purpose . [(0 1) ((emacs (24)) (ivy (0 8)) (window-purpose (1 5))) "Ivy Interface for Purpose" single ((:commit . "0495f2f3aed64d7e0028125e76a9a68f8fc4107e") (:url . "https://github.com/bmag/ivy-purpose"))]) (ivy-pages . [(0 1 1) ((emacs (24 1)) (ivy (0 8 0))) "Complete current buffer's pages with Ivy" single ((:commit . "428a901f94c9625c8407fd2bf76f9d7714d40d87") (:url . "https://github.com/igorepst/ivy-pages") (:keywords "convenience" "matching"))]) (ivy-hydra . [(0 9 1) ((emacs (24 1)) (ivy (0 9 0)) (hydra (0 13 4))) "Additional key bindings for Ivy" single ((:commit . "f4b433436668ac09f3d1815fbfb4b71f3e0690fa") (:url . "https://github.com/abo-abo/swiper") (:keywords "completion" "matching" "bindings"))]) (ivy-gitlab . [(0 8 0) ((s (1 9 0)) (dash (2 9 0)) (ivy (0 8 0)) (gitlab (0 8))) "Ivy interface to Gitlab" single ((:commit . "a1c1441ff5ffb290e695eb9ac05431e9385578f4") (:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "ivy"))]) (ivy-erlang-complete . [(0 3 0) ((async (1 9)) (counsel (0 8 0)) (ivy (0 8 0)) (erlang (19 2)) (emacs (24 4))) "Erlang context sensitive completion at point using ivy. It also support xref and eldoc." tar ((:commit . "acd6322571cb0820868a6febdc5326782a29b729"))]) (ivy-dired-history . [(1 0) ((ivy (0 9 0)) (counsel (0 9 0)) (cl-lib (0 5))) "use ivy to open recent directories" single ((:commit . "3604840f85e4ff2d7ecab6233e820cb2ec5c8733") (:url . "https://github.com/jixiuf/ivy-dired-history"))]) (ivy-bibtex . [(2 0 0) ((swiper (0 7 0)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A BibTeX bibliography manager based on Ivy" tar ((:commit . "d6a98ac6f28d2a6a05e203115211c98333d40aca"))]) (ivy . [(0 9 1) ((emacs (24 1))) "Incremental Vertical completYon" tar ((:commit . "f4b433436668ac09f3d1815fbfb4b71f3e0690fa") (:url . "https://github.com/abo-abo/swiper") (:keywords "matching"))]) (isgd . [(1 1) nil "Shorten URLs using the isgd.com shortener service" single ((:commit . "764306dadd5a9213799081a48aba22f7c75cca9a") (:url . "https://github.com/chmouel/isgd.el"))]) (irony . [(1 0 0) ((cl-lib (0 5)) (json (1 2))) "C/C++ minor mode powered by libclang" tar ((:commit . "2424f57a3c0d320946c7ad32b44d296a91104201") (:url . "https://github.com/Sarcasm/irony-mode") (:keywords "c" "convenience" "tools"))]) (ir-black-theme . [(1 0 1) nil "Port of ir-black theme" single ((:commit . "b1ca1d0778e3e6228ff756e7fdaf5f5982000fa2") (:keywords "faces"))]) (iplayer . [(0 1) nil "Browse and download BBC TV/radio shows" single ((:commit . "48b664e36e1a8e37eeb3eee80b91ff7126ed449a") (:url . "https://github.com/csrhodes/iplayer-el") (:keywords "multimedia" "bbc"))]) (intero . [(0 1 20) ((flycheck (0 25)) (company (0 8)) (emacs (24 3)) (haskell-mode (13 0))) "Complete development mode for Haskell" single ((:commit . "402722b5ad035b87fc08bc73343f05610a5fcb3c") (:url . "https://github.com/commercialhaskell/intero") (:keywords "haskell" "tools"))]) (interleave . [(1 1 0) nil "Interleaving text books since 2015" single ((:commit . "6b28363eac939227c6cdc8a73a1d3ea5b002442d") (:url . "https://github.com/rudolfochrist/interleave"))]) (intellij-theme . [(1 1) nil "Inspired by IntelliJ's default theme" single ((:commit . "ad207c8c3d266d566fb1e4862df154096c059171") (:keywords "faces"))]) (instapaper . [(0 9 5) nil "No description available." single nil]) (insert-shebang . [(0 9 5) nil "Insert shebang line automatically." single ((:commit . "8b36eaa092e62002fe64162daf9d3ad1138b6ec2") (:url . "http://github.com/psachin/insert-shebang") (:keywords "shebang" "tool" "convenience"))]) (inlineR . [(1 0) nil "insert Tag for inline image of R graphics" single ((:commit . "29357186beca825e3d0451b700ec09b9ed65e37b") (:url . "https://github.com/myuhe/inlineR.el") (:keywords "convenience" "iimage.el" "cacoo.el"))]) (inline-crypt . [(0 1 4) nil "Simple inline encryption via openssl" tar ((:commit . "497ce9dc29a8ccac0b6dd6854f5d120514350282"))]) (initsplit . [(1 6) nil "No description available." single ((:commit . "950bdc568e3fd08e6106170953caf98ac582a431"))]) (init-open-recentf . [(0 0 3) ((emacs (24 4))) "Open recentf immediately after Emacs is started" single ((:commit . "a4f5338a14302d44fa5aebb1ddc7aff3dc9abbe3") (:keywords "file" "recentf" "after-init-hook"))]) (init-loader . [(0 2) nil "Loader for configuration files" single ((:commit . "128ee76adbf431f0b8c30a3a29cb20c9c5100cde") (:url . "https://github.com/emacs-jp/init-loader/"))]) (inherit-local . [(1 1 1) ((emacs (24 3))) "Inherited buffer-local variables" single ((:commit . "b1f4ff9c41f9d64e4adaf5adcc280b82f084cdc7") (:url . "https://github.com/shlevy/inherit-local/tree-master/"))]) (info-buffer . [(0 2) nil "Display info topics in separate buffers" single ((:commit . "d35dad6e766c6e2ddb8dc6acb4ce5b6e10fbcaa7") (:url . "http://www.github.com/llvilanova/info-buffer") (:keywords "docs" "info"))]) (inflections . [(2 4) ((cl-lib (0 5)) (emacs (24))) "convert english words between singular and plural" single ((:commit . "fb3dd59f21f77016742de40028aee92176c0917a") (:url . "https://github.com/eschulte/jump.el") (:keywords "languages" "tools" "wp"))]) (inf-ruby . [(2 5 1) nil "Run a Ruby process in a buffer" single ((:commit . "81adadf0f98122b655d0c2bee9c8074d2b6a3ee2") (:url . "http://github.com/nonsequitur/inf-ruby") (:keywords "languages" "ruby"))]) (inf-clojure . [(2 0 1) ((emacs (24 4)) (clojure-mode (5 6))) "Run an external Clojure process in an Emacs buffer" single ((:commit . "956b22e7941d71216799ca4e8d5244e94fad9558") (:url . "http://github.com/clojure-emacs/inf-clojure") (:keywords "processes" "clojure"))]) (indium . [(0 28) nil "No description available." tar ((:commit . "83ad172b96bb011bb705add136a7571b08f6c4c2"))]) (indent-guide . [(20160630) nil "show vertical lines to guide indentation" single ((:commit . "feb207cb5610f351c7cdcf266e0c99117b2f786c") (:url . "http://hins11.yu-yake.com/"))]) (importmagic . [(1 0) ((f (0 11 0)) (epc (0 1 0)) (emacs (24 3))) "Fix Python imports using importmagic." tar ((:commit . "135e049d763ceb4cabd0bab068c4c71452459065") (:url . "https://github.com/anachronic/importmagic.el") (:keywords "languages" "convenience"))]) (import-popwin . [(0 10) ((emacs (24 3)) (popwin (0 6))) "popwin buffer near by import statements with popwin" single ((:commit . "6a21efc7fd44f8c2484d22eadf298e4bfd4bc003") (:url . "https://github.com/syohex/emacs-import-popwin"))]) (import-js . [(1 0 0) ((grizzl (0 1 0)) (emacs (24))) "Import Javascript dependencies" single ((:commit . "15d395126f57408d770a72db2e5f43271f90fa52") (:url . "http://github.com/Galooshi/emacs-import-js/") (:keywords "javascript"))]) (impatient-mode . [(1 0 0) ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) "Serve buffers live over HTTP" tar ((:commit . "eba1efce3dd20b5f5017ab64bae0cfb3b181c2b0") (:url . "https://github.com/netguy204/imp.el"))]) (immutant-server . [(1 2 0) nil "Run your Immutant server in Emacs" single ((:commit . "6f3d303354a229780a33e6bae64460a95bfefe60") (:url . "http://www.github.com/leathekd/immutant-server.el"))]) (imgix . [(1 0 0) ((json (1 2)) (ht (2 0)) (s (1 9 0)) (dash (2 9 0)) (cl-lib (0 5))) "Major mode for editing images in emacs via imgix" tar ((:commit . "cf3994f69b34a36f627e9ceaf3e6f4309ee9ec30") (:keywords "images" "image processing" "image editing" "sepia" "blur"))]) (imenus . [(0 2) ((cl-lib (0 5))) "Imenu for multiple buffers and without subgroups" single ((:commit . "ee1bbd2228dbb86df2865dc9004d375421b171ba") (:url . "https://github.com/alezost/imenus.el") (:keywords "tools" "convenience"))]) (imenu-list . [(0 7) ((cl-lib (0 5))) "Show imenu entries in a seperate buffer" single ((:commit . "999fc0ec7f03b56be8e2a6e673d9473f51e5a92f") (:url . "https://github.com/bmag/imenu-list"))]) (imenu-anywhere . [(1 1 3) ((cl-lib (0 5))) "ido/ivy/helm imenu across same mode/project/etc buffers" single ((:commit . "94bab9136e1264e98a10d9325ad53d735307f8f3") (:url . "https://github.com/vitoshka/imenu-anywhere") (:keywords "ido" "imenu" "tags"))]) (imapfilter . [(1 0 2) nil "run the imapfilter executable" single ((:commit . "a879ddc36fedc30311693f308f414c520fdfc370") (:url . "https://github.com/tarsius/imapfilter") (:keywords "mail"))]) (image-dired+ . [(0 7 2) ((cl-lib (0 3))) "Image-dired extensions" single ((:commit . "b68094625d963056ad64e0e44af0e2266b2eadc7") (:url . "https://github.com/mhayashi1120/Emacs-image-diredx") (:keywords "extensions" "multimedia"))]) (image-archive . [(0 0 7) ((emacs (24)) (cl-lib (0 5))) "Image thumbnails in archive file with non-blocking" single ((:commit . "699e967fa7b1dfcce2bf2ec878e74f4238bb6e45") (:url . "https://github.com/mhayashi1120/Emacs-image-archive/raw/master/image-archive.el") (:keywords "multimedia"))]) (image+ . [(0 6 2) ((cl-lib (0 3))) "Image manipulate extensions for Emacs" single ((:commit . "967508a6c151e6ab6e97d3ac332dc5599011830d") (:url . "https://github.com/mhayashi1120/Emacs-imagex") (:keywords "multimedia" "extensions"))]) (ignoramus . [(0 7 4) nil "Ignore backups, build files, et al." single ((:commit . "00385fcd0d42de3a470f61c1fdbe7e19fbef9c5b") (:url . "http://github.com/rolandwalker/ignoramus") (:keywords "convenience" "tools"))]) (iflipb . [(1 3) nil "interactively flip between recently visited buffers" single ((:commit . "2e0d1719abeec7982341761ee5dabb01574e6862") (:url . "http://git.rosdahl.net/?p=joel/iflipb.git"))]) (iedit . [(0 9 9 9) nil "Edit multiple regions in the same way simultaneously." tar ((:commit . "39919478f9472ce7a808ca601f4c19261ecc2f99") (:url . "http://www.emacswiki.org/emacs/Iedit") (:keywords "occurrence" "region" "simultaneous" "refactoring"))]) (idris-mode . [(0 9 19) ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5))) "Major mode for editing Idris code" tar ((:commit . "314a0baea5752069de08e814bb134a9643fb675d") (:url . "https://github.com/idris-hackers/idris-mode") (:keywords "languages"))]) (idomenu . [(0 1) nil "imenu tag selection with ido" single ((:commit . "5daaf7e06e4704ae43c825488109d7eb8c049321") (:url . "https://github.com/birkenfeld/idomenu") (:keywords "extensions" "convenience"))]) (ido-yes-or-no . [(1 4) ((ido-completing-read+ (0))) "Use Ido to answer yes-or-no questions" single ((:commit . "9ddee9e878ad62d58c9f4b3a7685f22b8e36e420") (:url . "https://github.com/DarwinAwardWinner/ido-yes-or-no"))]) (ido-vertical-mode . [(0 1 6) nil "Makes ido-mode display vertically." single ((:commit . "c3e0514405ba5c15b5527e7f8e2d42dff259788f") (:url . "https://github.com/gempesaw/ido-vertical-mode.el") (:keywords "convenience"))]) (ido-ubiquitous . [(3 16) ((emacs (24 1)) (ido-completing-read+ (3 16)) (cl-lib (0 5))) "Use ido (nearly) everywhere." single ((:commit . "2bd3a2722d8df0db9dfe25f5763f7dfaf0734624") (:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "convenience" "completion" "ido"))]) (ido-occur . [(0 2 0) ((dash (2 13 0))) "Yet another `occur' with `ido'." single ((:commit . "b0e67fe4835c162cbcf8a982bdf377955b9ac5ae") (:url . "https://github.com/danil/ido-occur") (:keywords "inner" "buffer" "search"))]) (ido-load-library . [(0 2 0) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Load-library alternative using ido-completing-read" single ((:commit . "8589cb1e4303066eb333f1cfc789835d1cbe21df") (:url . "http://github.com/rolandwalker/ido-load-library") (:keywords "maint" "completion"))]) (ido-grid-mode . [(1 1 5) ((emacs (24 4))) "Display ido-prospects in the minibuffer in a grid." single ((:commit . "8bbd66e365d4f6f352bbb17673be5869ab26d7ab") (:url . "https://github.com/larkery/ido-grid-mode.el") (:keywords "convenience"))]) (ido-describe-bindings . [(0 0 11) ((dash (2 13 0))) "Yet another `describe-bindings' with `ido'." single ((:commit . "a142ff1c33df23ed9665497d0dcae2943b3c706a") (:url . "https://github.com/danil/ido-describe-bindings") (:keywords "help"))]) (ido-completing-read+ . [(3 16) ((emacs (24 1)) (cl-lib (0 5))) "A completing-read-function using ido" single ((:commit . "2bd3a2722d8df0db9dfe25f5763f7dfaf0734624") (:url . "https://github.com/DarwinAwardWinner/ido-ubiquitous") (:keywords "ido" "completion" "convenience"))]) (ido-complete-space-or-hyphen . [(1 1) nil "No description available." single ((:commit . "ad9baaec10e06be3f85db97b6c8fd970cf20df77"))]) (ido-at-point . [(1 0 0) ((emacs (24))) "ido-style completion-at-point" single ((:commit . "e5907bbe8a3d148d07698b76bd994dc3076e16ee") (:url . "https://github.com/katspaugh/ido-at-point") (:keywords "convenience" "abbrev"))]) (idle-highlight-mode . [(1 1 3) nil "highlight the word the point is on" single ((:commit . "c466f2a9e291f9da1167dc879577b2e1a7880482") (:url . "http://www.emacswiki.org/cgi-bin/wiki/IdleHighlight") (:keywords "convenience"))]) (identica-mode . [(1 3 1) nil "Major mode API client for status.net open microblogging" tar ((:commit . "cf9183ee11ac922e85c7c908f04e2d00b03111b3") (:url . "http://blog.gabrielsaldana.org/identica-mode-for-emacs/") (:keywords "identica" "web"))]) (ibuffer-vc . [(0 10) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single ((:commit . "b2bac7aa69335933ebb2e6f34259fa96d2c8d46a") (:url . "http://github.com/purcell/ibuffer-vc") (:keywords "themes"))]) (ibuffer-projectile . [(0 2) ((projectile (0 11 0))) "Group ibuffer's list by projectile root" single ((:commit . "8b225dc779088ce65b81d8d86dc5d394baa53e2e") (:url . "http://github.com/purcell/ibuffer-projectile") (:keywords "themes"))]) (hydra . [(0 13 6) ((cl-lib (0 5))) "Make bindings that stick around." tar ((:commit . "91f8e7c13bcd9629ad1678588e58576ca6806b58") (:url . "https://github.com/abo-abo/hydra") (:keywords "bindings"))]) (hyde . [(0 2) nil "No description available." tar ((:commit . "181f9d2f91c2678a22243c5485162fa7999fd893"))]) (hydandata-light-theme . [(0 9 0) nil "A light color theme that is easy on your eyes" single ((:commit . "3b9bb5f213029a8331818b1d670194ef26d9505a") (:keywords "color-theme" "theme"))]) (hyai . [(1 0 0) ((cl-lib (0 5)) (emacs (24))) "Haskell Yet Another Indentation" single ((:commit . "7c644d31f62943c75ccf5a772e43450b462cc08f") (:url . "https://github.com/iquiw/hyai"))]) (hungry-delete . [(1 1 5) nil "hungry delete minor mode" single ((:commit . "78a787a87aceb821818bbe2a322fbf2e5cbf80c3") (:url . "http://github.com/nflath/hungry-delete"))]) (hugsql-ghosts . [(0 1 1) ((s (1 9 0)) (dash (2 10 0)) (cider (0 14 0))) "Display ghostly hugsql defqueries inline" single ((:commit . "9d76acb41333c6377c7fe79e936008d10fe55420") (:url . "https://github.com/rkaercher/hugsql-ghosts"))]) (httprepl . [(1 1) ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) "An HTTP REPL" single ((:commit . "d2de8a676544deed1a5e084631a7799e487dbe55") (:url . "https://github.com/gregsexton/httprepl.el") (:keywords "http" "repl"))]) (httpcode . [(0 1) nil "explains the meaning of an HTTP status code" single ((:commit . "2c8eb3b5455254ba70fb71f7178886bfc2d3af90") (:url . "http://github.com/rspivak/httpcode.el"))]) (htmlize . [(1 51) nil "Convert buffer text and decorations to HTML." single ((:commit . "88e2cb6588827893d7bc619529393887c264d15a") (:keywords "hypermedia" "extensions"))]) (html-to-markdown . [(1 5 1) nil "HTML to Markdown converter written in Emacs-lisp." single ((:commit . "0fa0effd71acd8981a425ef11e0e63d53aea3199") (:url . "http://github.com/Bruce-Connor/html-to-markdown") (:keywords "tools" "wp" "languages"))]) (ht . [(2 1) ((dash (2 12 0))) "The missing hash table library for Emacs" single ((:commit . "0c0019ba2dfeaacdfe6be6d7f681e5e11dc8fa67") (:keywords "hash table" "hash map" "hash"))]) (hound . [(1 1 0) ((request (0 2 0)) (cl-lib (0 5))) "Display hound search results in a compilation window" single ((:commit . "28cb804d99f9240d690d60098644e4300336b5fa"))]) (hookify . [(0 2 1) ((s (1 9 0)) (dash (1 5 0))) "Interactive commands to create temporary hooks" single ((:commit . "e76127230716f7fab6662410c03c3872d17a172b") (:url . "https://github.com/Silex/hookify") (:keywords "hook" "convenience"))]) (homebrew-mode . [(1 3 6) ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) "minor mode for editing Homebrew formulae" single ((:commit . "d422307aee2f897d1a92e3b959c3214bc54cbe38") (:url . "https://github.com/dunn/homebrew-mode") (:keywords "homebrew" "brew" "ruby"))]) (hoa-pp-mode . [(0 3 0) ((emacs (24 1)) (names (20150723 0))) "Major mode for Hoa PP grammars" single ((:commit . "a72104a191214fba502653643a0d166a8f5341d9") (:url . "https://github.com/hoaproject/Contributions-Emacs-Pp") (:keywords "php" "hoa"))]) (hl-todo . [(1 8 0) nil "highlight TODO and similar keywords" single ((:commit . "961db3116f1396dc4f903e3a59824a40e0bbb6a2") (:url . "https://github.com/tarsius/hl-todo") (:keywords "convenience"))]) (hl-sexp . [(1 0 0) nil "highlight the current sexp" single ((:commit . "0606100422321c18db51ceda80f25cd7717c2e01") (:keywords "faces" "frames" "emulation"))]) (hl-sentence . [(3) nil "highlight a sentence based on customizable face" single ((:commit . "f88882772f1a29fabb54194cc8aacd80d7f5b085") (:url . "http://github.com/milkypostman/hl-sentence") (:keywords "highlighting"))]) (hl-anything . [(0 0 9) ((emacs (24 3))) "Highlight symbols, selections, enclosing parens and more." tar ((:commit . "de631c87d3a6602cdbf84c1623558334fda354fa"))]) (historyf . [(0 0 9) nil "file history library like browser" single ((:commit . "64ab6c9d2cd6dec6982622bf675326e011373cd2") (:url . "https://github.com/k1LoW/emacs-historyf"))]) (history . [(1 0 0) ((emacs (24 3))) "History utility for source code navigation" tar ((:commit . "adef53ecc2f6067bb61f020a2b66c5185a51632d") (:url . "https://github.com/boyw165/history"))]) (hippie-namespace . [(0 5 8) nil "Special treatment for namespace prefixes in hippie-expand" single ((:commit . "79a662dfe9e61341e071b879f4f9101ca027ad10") (:url . "http://github.com/rolandwalker/hippie-namespace") (:keywords "convenience" "lisp" "tools" "completion"))]) (hippie-expand-slime . [(0 1) nil "Hook slime's completion into hippie-expand" single ((:commit . "de31fbc9f9d55891a006463bcee7670b47084015") (:url . "https://github.com/purcell/hippie-expand-slime"))]) (hindent . [(5 2 3) ((cl-lib (0 5))) "Indent haskell code using the \"hindent\" program" single ((:commit . "abe2933e3d1f82e4eecfba11ffed27f7f52ca469") (:url . "https://github.com/chrisdone/hindent"))]) (highlight-symbol . [(1 3) nil "automatic and manual symbol highlighting" single ((:commit . "6136dac6d4328c19077a838dfbae2efc4caa4db2") (:url . "http://nschum.de/src/emacs/highlight-symbol/") (:keywords "faces" "matching"))]) (highlight-quoted . [(0 1) ((emacs (24))) "Highlight Lisp quotes and quoted symbols" single ((:commit . "cdd7164f9ad3a9929387c08af641ef6f5f013f4f") (:url . "https://github.com/Fanael/highlight-quoted"))]) (highlight-parentheses . [(1 1 0) nil "highlight surrounding parentheses" single ((:commit . "5aa800a68e3795716de1e7f2722e836781190f31") (:url . "https://github.com/tsdh/highlight-parentheses.el") (:keywords "faces" "matching"))]) (highlight-numbers . [(0 2 3) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single ((:commit . "b7adef0286aaa5bca8e98a12d0ffed3a880e25aa") (:url . "https://github.com/Fanael/highlight-numbers"))]) (highlight-indentation . [(0 7 0) nil "Minor modes for highlighting indentation" single ((:commit . "cd6d8168ccb04c6c0394f42e9512c58f23c01689") (:url . "https://github.com/antonj/Highlight-Indentation-for-Emacs"))]) (highlight-defined . [(0 1 5) ((emacs (24))) "Syntax highlighting of known Elisp symbols" single ((:commit . "9cc03c7136b56c04ea053fbe08a3a4a6af26b90e") (:url . "https://github.com/Fanael/highlight-defined"))]) (highlight-blocks . [(0 1 16) ((emacs (24))) "Highlight the blocks point is in" single ((:commit . "9c4240a5d16008db430d1a81c76dad474d3deb0c") (:url . "https://github.com/Fanael/highlight-blocks"))]) (hierarchy . [(0 6 0) ((emacs (25 1))) "Library to create and display hierarchy structures" single ((:commit . "a6a01cd4688fc9264fd36c279c0249f16704132b"))]) (hide-lines . [(20130623 1701) nil "Commands for hiding lines based on a regexp" single ((:commit . "4bfb4c6f4769bd6c637e4c18bbf65506832fc9f0") (:url . "https://github.com/vapniks/hide-lines") (:keywords "convenience"))]) (hi2 . [(1 0) nil "indentation module for Haskell Mode" single ((:commit . "c9d199727b5cdcb9e36a972b38131ce4611fd6c8") (:url . "https://github.com/errge/hi2") (:keywords "indentation" "haskell"))]) (hfst-mode . [(0 4 0) nil "major mode for editing HFST files" single ((:commit . "ac1bb9dd92545d3e7fdc05c83996c227cc15c6b8") (:url . "http://wiki.apertium.org/wiki/Emacs") (:keywords "languages"))]) (helm-zhihu-daily . [(0 3) ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm interface for 知乎日报 (http://daily.zhihu.com)" single ((:commit . "be27dcc6be1eb97663b65581a9a5c0fc81cfaba7") (:url . "https://github.com/xuchunyang/helm-zhihu-daily"))]) (helm-w3m . [(1 0) ((helm (1 5)) (w3m (0 0)) (cl-lib (0 5)) (emacs (24 1))) "W3m bookmark - helm interface." single ((:commit . "280673470672c9fbc57fd6a91defeb9f6641fc8a"))]) (helm-w32-launcher . [(0 1 6) ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) "Start Menu entry launcher using Helm" tar ((:commit . "01aa370a32900e7521330fba495474f2aa435e19") (:url . "https://github.com/Fanael/helm-w32-launcher"))]) (helm-unicode . [(0 0 3) ((helm (1 6)) (emacs (24 4))) "Helm command for unicode characters." single ((:commit . "3b2a61dd9d4c9e85946567e07d8e70e276c5136b"))]) (helm-tramp . [(0 5 4) ((emacs (24 3)) (helm (2 0))) "Tramp helm interface for ssh, docker, vagrant" single ((:commit . "9480ee2d5a9cc190e48a04ffac33ca6403fd12e1") (:url . "https://github.com/masasam/emacs-helm-tramp"))]) (helm-themes . [(0 5) ((helm (1 0))) "Color theme selection with helm interface" single ((:commit . "8c979f4efc6174eed7df5f3b62db955246202818") (:url . "https://github.com/syohex/emacs-helm-themes"))]) (helm-swoop . [(1 7 2) ((helm (1 0)) (emacs (24 3))) "Efficiently hopping squeezed lines powered by helm interface" single ((:commit . "6d3fdcfb6dea06242efc8ff4cafff9917e558bfc") (:url . "https://github.com/ShingoFukuyama/helm-swoop") (:keywords "helm" "swoop" "inner" "buffer" "search"))]) (helm-spaces . [(0 4) ((helm-core (2 2)) (spaces (0 1 0))) "helm sources for spaces" single ((:commit . "877e2b5178926308d6a7c2a37477bb12c33a96d4") (:url . "https://github.com/yasuyk/helm-spaces") (:keywords "helm" "frames" "convenience"))]) (helm-smex . [(0 2) ((emacs (24)) (smex (3 0)) (helm (1 7 7))) "Helm interface for smex" single ((:commit . "7af4e4b44671f739b39584fc50c20084700701ac") (:keywords "convenience"))]) (helm-sage . [(0 0 4) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 8))) "A helm extension for sage-shell-mode." single ((:commit . "b42b4ba5fd1b17c4b54c30376a053281686beeb8") (:url . "https://github.com/stakemori/helm-sage") (:keywords "sage" "math" "helm"))]) (helm-rubygems-org . [(0 0 1) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) "Use helm to search rubygems.org" single ((:commit . "6aaed984f698cbdf9f9aceb0221404563e28764d") (:url . "https://github.com/neomantic/helm-rubygems-org") (:keywords "ruby" "rubygems" "gemfile" "helm"))]) (helm-rtags . [(2 10) ((helm (2 0)) (rtags (2 10))) "A front-end for rtags" single ((:commit . "3b3ace901f53827daef81d4c13658ec4feb318b4") (:url . "http://rtags.net"))]) (helm-robe . [(0 2) ((helm (1 7 7))) "completing read function for robe" single ((:commit . "7348d0bc0251b51979554ea678b970fd01c0efe9") (:url . "https://github.com/syohex/emacs-helm-robe"))]) (helm-recoll . [(0 5) ((helm (1 9 9))) "helm interface for the recoll desktop search tool." single ((:commit . "cc4c4fa9c8f4f99383647baa8512b60523dc8b36") (:url . "https://github.com/emacs-helm/helm-recoll") (:keywords "convenience"))]) (helm-rdefs . [(1 0 1) ((emacs (24)) (helm (1 6 4))) "rdefs with helm interface" single ((:commit . "cd3a6b3af3015ee58ef30cb7c81c79ebe5fc867b") (:url . "https://github.com/saidie/helm-rdefs") (:keywords "matching" "tools"))]) (helm-qiita . [(1 0 1) ((helm (1 9 5))) "Qiita with helm interface" single ((:commit . "45e38ae7b816da5db38412b2992c6d1c7a6cc30a") (:url . "https://github.com/masutaka/emacs-helm-qiita"))]) (helm-pydoc . [(0 7) ((helm-core (1 7 4)) (cl-lib (0 5))) "pydoc with helm interface" tar ((:commit . "30f1814b5b16db0413ffe74b0d0420b38e153df9") (:url . "https://github.com/syohex/emacs-helm-pydoc"))]) (helm-purpose . [(0 1) ((emacs (24)) (helm (1 9 2)) (window-purpose (1 4))) "Helm Interface for Purpose" single ((:commit . "115a9d612aa07bb6f7f7b18f42b34918699660b9") (:url . "https://github.com/bmag/helm-purpose"))]) (helm-pt . [(0 2) ((helm (1 5 6))) "Helm interface to the platinum searcher" tar ((:commit . "03e35e2bb5b683d79897d07acb57ee67009cc6cd") (:keywords "helm" "platinum searcher"))]) (helm-projectile . [(0 14 0) ((helm (1 7 7)) (projectile (0 14 0)) (dash (1 5 0)) (cl-lib (0 3))) "Helm integration for Projectile" single ((:commit . "1a90f93732f1a1e8080098d65eadd6a1cd799e31") (:url . "https://github.com/bbatsov/helm-projectile") (:keywords "project" "convenience"))]) (helm-project-persist . [(1 0 0) ((helm (1 5 2)) (project-persist (0 1 4))) "Helm integration for project-persist package" single ((:commit . "df63a21b9118f9639f0f4a336127b4fb8ec6deec") (:keywords "project-persist" "project" "helm"))]) (helm-proc . [(0 0 5) ((helm (1 6 0))) "Helm interface for managing system processes" tar ((:commit . "0a75a86e4f381143134e0cdcd8c84c5b5b0fb2d6"))]) (helm-perspeen . [(0 1 2) ((perspeen (0 1 0)) (helm (2 5 0))) "Helm interface for perspeen." single ((:commit . "aec145d5196aed1689563d138a2aa37b139e1759") (:url . "https://github.com/jimo1001/helm-perspeen") (:keywords "projects" "lisp"))]) (helm-perldoc . [(0 7) ((helm (1 0)) (deferred (0 3 1)) (cl-lib (0 5))) "perldoc with helm interface" tar ((:commit . "18645f2065a07acce2c6b50a2f9d7a2554e532a3") (:url . "https://github.com/syohex/emacs-helm-perldoc"))]) (helm-pages . [(0 1 1) ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) "Pages in current buffer as Helm datasource" single ((:commit . "e334ca3312e51d6fdfa989df5d3ebe683d673c0e") (:keywords "convenience" "helm" "outlines"))]) (helm-package . [(0 3) ((helm (1 7 7)) (cl-lib (0 5))) "Listing ELPA packages with helm interface" single ((:commit . "117f5f26c96c0854aadaf9c52aaec961195d5798") (:url . "https://github.com/syohex/emacs-helm-package"))]) (helm-orgcard . [(0 2) ((helm-core (1 7 7))) "browse the orgcard by helm" single ((:commit . "9655ac340d1ccc5f3d1c0f7c49be8dd3556d4d0d") (:url . "https://github.com/emacs-jp/helm-orgcard") (:keywords "convenience" "helm" "org"))]) (helm-org-rifle . [(1 4 1) ((emacs (24 4)) (dash (2 12)) (f (0 18 1)) (helm (1 9 4)) (s (1 10 0))) "Rifle through your Org files" single ((:commit . "93df6808dda8f50da4f435c47763733703905119") (:url . "http://github.com/alphapapa/helm-org-rifle") (:keywords "hypermedia" "outlines"))]) (helm-open-github . [(0 15) ((emacs (24 4)) (helm-core (1 7 7)) (gh (0 8 2))) "Utilities of Opening Github Page" single ((:commit . "553f3ab0fe0a028015e9b6cb7c35fb139ec222fc") (:url . "https://github.com/syohex/emacs-helm-open-github"))]) (helm-notmuch . [(1 0) ((helm (1 9 3)) (notmuch (0 21))) "Search emails with Notmuch and Helm" single ((:commit . "7d03cd9fed32b49a1f200c65ed38086c9f19cfaf") (:url . "https://github.com/xuchunyang/helm-notmuch") (:keywords "mail"))]) (helm-nixos-options . [(0 0 1) ((nixos-options (0 0 1)) (helm (1 5 6))) "Helm Interface for nixos-options" single ((:commit . "5fc8fa29bea9dd8e9c822af92f9bc6ddc223635f") (:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix"))]) (helm-mt . [(0 9) ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) "helm multi-term management" single ((:commit . "d2bff4100118483bc398c56d0ff095294209265b") (:url . "https://github.com/dfdeshom/helm-mt") (:keywords "helm" "multi-term"))]) (helm-mode-manager . [(1 0 0) ((helm (1 5 3))) "Select and toggle major and minor modes with helm" single ((:commit . "1fc1d65a27bc57d3a5bbd359f3eb77a6353fa4a5") (:url . "https://github.com/istib/helm-mode-manager"))]) (helm-migemo . [(1 22) ((helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) "Migemo plug-in for helm" single ((:commit . "2d964309a5415cf47f5154271e6fe7b6a7fffec7") (:url . "https://github.com/emacs-jp/helm-migemo") (:keywords "matching" "convenience" "tools" "i18n"))]) (helm-make . [(0 1 0) ((helm (1 5 3)) (projectile (0 11 0))) "Select a Makefile target with helm" single ((:commit . "6558a79d20d04465419b312da198190be6832647") (:url . "https://github.com/abo-abo/helm-make") (:keywords "makefile"))]) (helm-ls-hg . [(1 8 0) ((helm (1 7 8))) "List hg files in hg project." single ((:commit . "61b91a22fcfb62d0fc56e361ec01ce96973c7165"))]) (helm-ls-git . [(1 9 1) ((helm (1 7 8))) "list git files." single ((:commit . "7b7b6dc2554603ad98412927f84a803625069ab3"))]) (helm-ispell . [(0 1) ((helm-core (1 7 7))) "ispell-complete-word with helm interface" single ((:commit . "640723ace794d21b8a5892012db99f963149415b") (:url . "https://github.com/syohex/emacs-helm-ispell"))]) (helm-hayoo . [(0 0 5) ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) "Source and configured helm for searching hayoo" single ((:commit . "f49a77e8b8704bb7eb0d1097eefb8010a6617664") (:keywords "helm"))]) (helm-hatena-bookmark . [(2 2 2) ((helm (1 9 5))) "Hatena::Bookmark with helm interface" single ((:commit . "8350a600d3e03f1ec7dc899cc0b2e323b12518bb") (:url . "https://github.com/masutaka/emacs-helm-hatena-bookmark"))]) (helm-gtags . [(1 5 6) ((emacs (24 3)) (helm (1 7 7))) "GNU GLOBAL helm interface" single ((:commit . "dbe0d2d9d08058d469ad2d729bd782515b5b3b62") (:url . "https://github.com/syohex/emacs-helm-gtags"))]) (helm-go-package . [(0 3 0) ((emacs (24 4)) (helm-core (2 2 1)) (go-mode (1 4 0)) (deferred (0 4 0))) "helm sources for Go programming language's package" single ((:commit . "7db5ea9ce97502152a6bb1fe38f8fabb5a49abd2") (:url . "https://github.com/yasuyk/helm-go-package"))]) (helm-gitlab . [(0 8 0) ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0 8 0))) "Helm interface to Gitlab" single ((:commit . "a1c1441ff5ffb290e695eb9ac05431e9385578f4") (:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab" "helm"))]) (helm-github-stars . [(1 3 2) ((helm (1 6 8)) (emacs (24 4))) "Helm integration for your starred repositories on github" single ((:commit . "9211be3fbb65ca8819e0d1a54524ed8abbfaa4fa") (:url . "https://github.com/Sliim/helm-github-stars") (:keywords "helm" "github" "stars"))]) (helm-git-grep . [(0 10 1) ((helm-core (2 2 0))) "helm for git grep, an incremental git-grep(1)" single ((:commit . "744cea07dba6e6a5effbdba83f1b786c78fd86d3") (:url . "https://github.com/yasuyk/helm-git-grep"))]) (helm-ghq . [(1 7 0) ((helm (2 2 0))) "ghq with helm interface" single ((:commit . "21ccdb537a3be3d9351e01c6365df8e804e8bc56") (:url . "https://github.com/masutaka/emacs-helm-ghq"))]) (helm-ghc . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) "A Helm datasource for ghc-mod errors" single ((:commit . "d3603ee18299b789be255297dc42af16dd431869") (:keywords "languages" "helm"))]) (helm-flycheck . [(0 4) ((dash (2 12 1)) (flycheck (28)) (helm-core (1 9 8))) "Show flycheck errors with helm" single ((:commit . "a15e62a6432c165c4f2c17388686873383400d7d") (:url . "https://github.com/yasuyk/helm-flycheck") (:keywords "helm" "flycheck"))]) (helm-firefox . [(1 3) ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) "Firefox bookmarks" single ((:commit . "0ad34b7b5abc485a86cae6920c14de861cbeb085") (:url . "https://github.com/emacs-helm/helm-firefox"))]) (helm-ext . [(0 1 1) ((emacs (24 4)) (helm (2 5 3))) "A few extensions to Helm" tar ((:commit . "115a3ca9a466fa84c1874ac6175fdf2256c3765c") (:keywords "extensions"))]) (helm-etags-plus . [(1 1) ((helm (1 7 8))) "Another Etags helm.el interface" single ((:commit . "99512856918e485862ceb21460476adb0349f525") (:url . "https://github.com/jixiuf/helm-etags-plus") (:keywords "helm" "etags"))]) (helm-emms . [(1 3) ((helm (1 5)) (emms (0 0)) (cl-lib (0 5)) (emacs (24 1))) "Emms for Helm." single ((:commit . "d7da090af0f63b92c5d735197992c732adbeef3d") (:url . "https://github.com/emacs-helm/helm-emms"))]) (helm-dired-history . [(1 3) ((helm (1 9 8)) (cl-lib (0 5))) "Show dired history with helm.el support." single ((:commit . "281523f9fc46cf00fafd670ba5cd16552a607212") (:url . "https://github.com/jixiuf/helm-dired-history") (:keywords "helm" "dired history"))]) (helm-directory . [(0 6 4) ((emacs (24 4)) (helm (2 0))) "selecting directory before select the file" single ((:commit . "2c6d45404506ba744888dcdb65e9f63878f2da16") (:url . "https://github.com/masasam/emacs-helm-directory"))]) (helm-descbinds . [(1 13) ((helm (1 5))) "A convenient `describe-bindings' with `helm'" single ((:commit . "6d5ddc11e6cef86548bd6b3e0d840112d602659c") (:url . "https://github.com/emacs-helm/helm-descbinds") (:keywords "helm" "help"))]) (helm-dash . [(1 2 0) ((helm (0 0 0)) (cl-lib (0 5))) "Offline documentation browser for +150 APIs using Dash docsets." single ((:commit . "a0f5d6539da873cd0c51d8ef714930c970a66aa0") (:url . "http://github.com/areina/helm-dash") (:keywords "docs"))]) (helm-cscope . [(0 1 1) ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface for xcscope.el." single ((:commit . "b82db54071bd2d1c77db2e648f8b4e61b1abe288") (:url . "https://github.com/alpha22jp/helm-cscope.el") (:keywords "cscope" "helm"))]) (helm-core . [(2 8 1) ((emacs (24 4)) (async (1 9 2))) "Development files for Helm" tar ((:commit . "c695a697461a48840f567bd5339909d4a80fa99f") (:url . "https://emacs-helm.github.io/helm/"))]) (helm-company . [(0 2 0) ((helm (1 5 9)) (company (0 6 13))) "Helm interface for company-mode" single ((:commit . "ae4e1a05455f5eaf07e61b8627934ea1df4eb048") (:url . "https://github.com/Sodel-the-Vociferous/helm-company"))]) (helm-commandlinefu . [(0 3) ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) "Search and browse commandlinefu.com from helm" single ((:commit . "e11cd3e961c1c4c973b51d8d12592e7235a4971b") (:url . "https://github.com/xuchunyang/helm-commandlinefu") (:keywords "commandlinefu.com"))]) (helm-codesearch . [(0 4 0) ((s (1 10 0)) (dash (2 12 0)) (helm (1 7 7)) (cl-lib (0 5))) "helm interface for codesearch" single ((:commit . "e80e76e492f626659b88dbe362b11aa0a3b0a116") (:keywords "tools"))]) (helm-circe . [(0 4) ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) "helm circe buffer management." single ((:commit . "9091651d9fdd8d49d8ff6f9dcf3a2ae416c9f15a") (:url . "https://github.com/lesharris/helm-circe") (:keywords "helm" "circe"))]) (helm-cider . [(0 3 0) ((emacs (24 4)) (cider (0 12)) (helm-core (2 0)) (seq (1 0))) "Helm interface to CIDER" tar ((:commit . "a24ef274e382c1a158a76eae2570f1f007031cb8") (:url . "https://github.com/clojure-emacs/helm-cider") (:keywords "tools" "convenience"))]) (helm-c-yasnippet . [(0 6 7) ((helm-core (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single ((:commit . "1fa400233ba8e990066c47cca1e2af64bd192d4d") (:keywords "convenience" "emulation"))]) (helm-bundle-show . [(1 1 5) ((helm (1 8 0))) "bundle show with helm interface" single ((:commit . "b34523aa8a7f82ed9a1bf3643c35b65866a7877a") (:url . "https://github.com/masutaka/emacs-helm-bundle-show"))]) (helm-books . [(1 0 1) ((helm (1 7 7))) "Helm interface for searching books" single ((:commit . "b4c57d2aed596faad41a753dccbcd0a31a717b76") (:url . "https://github.com/grugrut/helm-books"))]) (helm-bm . [(0 3) ((bm (1 0)) (cl-lib (0 5)) (helm (1 9 3)) (s (1 11 0))) "helm sources for bm.el" single ((:commit . "d66341f5646c23178d4d8bffb6cfebe3fb73f1d7") (:url . "https://github.com/yasuyk/helm-bm") (:keywords "helm" "bookmark"))]) (helm-bibtex . [(2 0 0) ((helm (1 5 5)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A BibTeX bibliography manager based on Helm" tar ((:commit . "d6a98ac6f28d2a6a05e203115211c98333d40aca"))]) (helm-bbdb . [(1 1) ((helm (1 5)) (bbdb (3 1 2))) "Helm interface for bbdb" single ((:commit . "20513422102fea4c08a0433d728a7783bb4968c8") (:url . "https://github.com/emacs-helm/helm-bbdb"))]) (helm-backup . [(0 2 2) ((helm (1 5 5)) (s (1 8 0)) (cl-lib (0))) "Backup each file change using git" single ((:commit . "b6f930a370f6339988e79e0c85e9deee98c7b9f4") (:url . "http://github.com/antham/helm-backup") (:keywords "backup" "convenience" "files" "tools" "vc"))]) (helm-aws . [(1 0 0) ((helm (1 5 3))) "Manage AWS EC2 server instances directly from Emacs" single ((:commit . "172a4a3427d31c999e27e9ee06aa8e3822364a8c") (:url . "https://github.com/istib/helm-aws"))]) (helm-ag . [(0 58) ((emacs (24 4)) (helm (2 0))) "the silver searcher with helm interface" single ((:commit . "39ed137823665fca2fa5b215f7c3e8701173f7b7") (:url . "https://github.com/syohex/emacs-helm-ag"))]) (helm-ack . [(0 13) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single ((:commit . "5982f3cb6ec9f460ebbe06ec0ce7b3590bca3118") (:url . "https://github.com/syohex/emacs-helm-ack"))]) (helm . [(2 8 1) ((emacs (24 4)) (async (1 9 2)) (popup (0 5 3)) (helm-core (2 8 1))) "Helm is an Emacs incremental and narrowing framework" tar ((:commit . "c695a697461a48840f567bd5339909d4a80fa99f") (:url . "https://emacs-helm.github.io/helm/"))]) (hcl-mode . [(0 3) ((emacs (24 3))) "Major mode for Hashicorp" single ((:commit . "6a6daf37522188a2f2fcdebc60949fc3bdabbc06") (:url . "https://github.com/syohex/emacs-hcl-mode"))]) (haxor-mode . [(0 7 0) ((emacs (24 0))) "Major mode for editing Haxor Assembly Files" single ((:commit . "6fa25a8e6b6a59481bc0354c2fe1e0ed53cbdc91") (:url . "https://github.com/krzysztof-magosa/haxor-mode") (:keywords "haxor"))]) (hasky-extensions . [(0 1 1) ((emacs (24 4)) (avy-menu (0 2))) "Toggle Haskell language extensions" single ((:commit . "3f1862989a2ca3b79761dccfa352a1b6d518ee77") (:url . "https://github.com/hasky-mode/hasky-extensions") (:keywords "programming"))]) (haskell-tab-indent . [(0 1 0) nil "tab-based indentation for haskell-mode" single ((:commit . "38d50e9bb8f64ba13ffbd9bcff32db820403a0fc") (:url . "https://spwhitton.name/tech/code/haskell-tab-indent/") (:keywords "indentation" "haskell"))]) (haskell-snippets . [(0 1 0) ((yasnippet (0 8 0))) "Yasnippets for Haskell" tar ((:commit . "bcf12cf33a67ddc2f023a55072859e637fe4fa25") (:url . "https://github.com/haskell/haskell-snippets") (:keywords "snippets" "haskell"))]) (haskell-mode . [(16 1) ((emacs (24 3))) "A Haskell editing mode" tar ((:commit . "d2ea5239bf02f3917a78a5c2dcbc5b6f6dd1b359") (:keywords "haskell" "cabal" "ghc" "repl") (:url . "https://github.com/haskell/haskell-mode"))]) (haskell-emacs-text . [(4 0 3) ((haskell-emacs (2 4 0))) "Haskell functions from Data.Text" tar ((:commit . "a2c6a079175904689eed7c6c200754bfa85d1ed9") (:url . "https://github.com/knupfer/haskell-emacs/modules/text") (:keywords "haskell" "emacs" "ffi"))]) (haskell-emacs-base . [(4 0 3) ((haskell-emacs (2 4 0))) "Haskell functions from Prelude" tar ((:commit . "a2c6a079175904689eed7c6c200754bfa85d1ed9") (:url . "https://github.com/knupfer/haskell-emacs/modules/base") (:keywords "haskell" "emacs" "ffi"))]) (haskell-emacs . [(4 0 3) nil "Write emacs extensions in haskell" tar ((:commit . "a2c6a079175904689eed7c6c200754bfa85d1ed9") (:url . "https://github.com/knupfer/haskell-emacs") (:keywords "haskell" "emacs" "ffi"))]) (harvest . [(0 3 8) ((swiper (0 7 0)) (hydra (0 13 0)) (s (1 11 0))) "Harvest integration" single ((:commit . "69041907bdca68d3ab6802e08ec698c3448f28a1") (:url . "https://github.com/kostajh/harvest.el") (:keywords "harvest"))]) (hardhat . [(0 4 6) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" single ((:commit . "9038a49ab55cd4c502cf7f07ed0d1b9b6bc3626e") (:url . "http://github.com/rolandwalker/hardhat") (:keywords "convenience"))]) (hardcore-mode . [(0 1 0) nil "Disable arrow keys + optionally backspace and return" single ((:commit . "5ab75594a7a0ca236e2ac87882ee439ff6155d96"))]) (haml-mode . [(3 1 9) ((ruby-mode (1 0))) "Major mode for editing Haml files" single ((:commit . "5e0baf7b795b9e41ac03b55f8feff6b51027c43b") (:url . "http://github.com/nex3/haml/tree/master") (:keywords "markup" "language" "html"))]) (hamburger-menu . [(1 0 5) ((emacs (24 5))) "Mode line hamburger menu" single ((:commit . "fd37f013c2f2619a88d3ed5311a9d1308cc82614") (:url . "https://gitlab.com/iain/hamburger-menu-mode") (:keywords "hamburger" "menu"))]) (ham-mode . [(1 1 2) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown" single ((:commit . "3a141986a21c2aa6eefb428983352abb8b7907d2") (:url . "http://github.com/Bruce-Connor/ham-mode") (:keywords "convenience" "emulation" "wp"))]) (hackernews . [(0 3 1) ((json (1 2))) "Access the hackernews aggregator from Emacs" tar ((:commit . "452e939211ebc0af7256a2f0e8cdad5c426694e6"))]) (hacker-typer . [(1 0 6) ((emacs (24))) "Pretend to write code like a pro" tar ((:commit . "d5a23714a4ccc5071580622f278597d5973f40bd") (:url . "http://github.com/therockmandolinist/emacs-hacker-typer") (:keywords "hacker" "typer" "multimedia" "games"))]) (gxref . [(0 1) ((emacs (25))) "xref backend using GNU Global." single ((:commit . "15723a9d910d7dd9ea18cab0336332cf988aeceb") (:url . "https://github.com/dedi/gxref") (:keywords "xref" "global" "tools"))]) (guru-mode . [(0 2) nil "Become an Emacs guru" single ((:commit . "62a9a0025249f2f8866b94683c4114c39f48e1fa") (:url . "https://github.com/bbatsov/guru-mode") (:keywords "convenience"))]) (gulp-task-runner . [(1 0) nil "Gulp task runner" single ((:commit . "8f5c52a7180634a99e16822bbc9f6d5e014c87d2") (:keywords "convenience" "javascript"))]) (guix . [(0 3 2) ((emacs (24 3)) (dash (2 11 0)) (geiser (0 8)) (bui (1 1 0)) (magit-popup (2 1 0))) "Interface for GNU Guix" tar ((:commit . "6d4ccb3f7376d6326b58b25f3c94ab546418a030") (:url . "https://alezost.github.io/guix.el/") (:keywords "tools"))]) (guide-key-tip . [(0 0 1) ((guide-key (1 2 3)) (pos-tip (0 4 5))) "Show guide-key.el hints using pos-tip.el" single ((:commit . "e08b2585228529aeaae5e0ae0948f898e83a6200") (:url . "https://github.com/aki2o/guide-key-tip") (:keywords "help" "convenience" "tooltip"))]) (guide-key . [(1 2 5) ((popwin (0 3 0))) "Guide the following key bindings automatically and dynamically" single ((:commit . "626f3aacfe4561eddc46617570426246b88e9cab") (:url . "https://github.com/kai2nenobu/guide-key") (:keywords "help" "convenience"))]) (gscholar-bibtex . [(0 3 2) nil "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" single ((:commit . "655bccf0b12c9d95ec992ee4bfb5c7c9a4d0c99b") (:keywords "extensions"))]) (gruvbox-theme . [(1 12 0) ((autothemer (0 2))) "A retro-groove colour theme for Emacs" single ((:commit . "e57f494fd94e49321a6396f530b8a13bae8b57df") (:url . "http://github.com/Greduan/emacs-theme-gruvbox"))]) (grunt . [(1 3 2) ((dash (2 9 0)) (ansi-color (3 4 2))) "Some glue to stick Emacs and Gruntfiles together" single ((:commit . "e27dbb6b3de9b36c7fb28f69aa06b4b2ea32d4b9") (:url . "https://github.com/gempesaw/grunt.el") (:keywords "convenience" "grunt"))]) (gruber-darker-theme . [(0 6) nil "Gruber Darker color theme for Emacs 24." single ((:commit . "0c08d77e615aceb9e6e1ca66b1fbde275200cfe4") (:url . "http://github.com/rexim/gruber-darker-theme"))]) (groovy-mode . [(1 0 2) nil "Major mode for Groovy source files" tar ((:commit . "f8e9628916d4d41e1816b53d02f0b5a00c499555") (:keywords "languages"))]) (groovy-imports . [(1 0) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Groovy imports" single ((:commit . "e56d7dda617555ec6205644d32ffddf2e1fa43d9") (:url . "http://www.github.com/mbezjak/emacs-groovy-imports") (:keywords "groovy"))]) (grizzl . [(0 1 1) nil "Fuzzy Search Library & Completing Read" tar ((:commit . "c775de1c34d1e5a374e2f40c1ae2396b4b003fe7"))]) (grin . [(1 0) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find"))]) (green-screen-theme . [(1 0 0 1) nil "A nice color theme for those who miss green CRTs" single ((:commit . "e47e3eb903b4d9dbcc66342d91915947b35e5e1e") (:url . "https://github.com/rbanffy/green-screen-emacs") (:keywords "faces" "theme"))]) (grass-mode . [(0 1) ((cl-lib (0 2))) "Provides Emacs modes for interacting with the GRASS GIS program" single ((:keywords "grass" "gis"))]) (grapnel . [(0 5 3) nil "HTTP request lib with flexible callback dispatch" single ((:commit . "7387234eb3f0285a490fddb1e06a4bf029719fb7") (:url . "http://www.github.com/leathekd/grapnel"))]) (graphviz-dot-mode . [(0 4) nil "Mode for the dot-language used by graphviz (att)." single ((:commit . "7301cc276206b6995d265bcb9eb308bb83c760be") (:url . "http://ppareit.github.com/graphviz-dot-mode/") (:keywords "mode" "dot" "dot-language" "dotlanguage" "graphviz" "graphs" "att"))]) (graphene-meta-theme . [(0 0 5) nil "Integrated theming for common packages" single ((:commit . "62cc73fee31f1bd9474027b83a249feee050271e") (:url . "https://github.com/rdallasgray/graphene") (:keywords "defaults"))]) (graphene . [(0 9 7) ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 6)) (sr-speedbar (20140505)) (ido-ubiquitous (3 6)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 8 0)) (graphene-meta-theme (0 0 2)) (flycheck (0 23)) (company (0 8 12))) "Friendly Emacs defaults" tar ((:commit . "b25707ae82e286aefa5a66087b12c9cb3b7bf2ed"))]) (grandshell-theme . [(1 1) nil "Dark color theme for Emacs > 24 with intensive colors." tar ((:commit . "f9dbaa341fce72f9deaf69bfaa09282168ebaf9d"))]) (grails-projectile-mode . [(1 1 2) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." tar ((:commit . "8efca50ce92b556fe9d467b157d7aec635bcc017") (:url . "https://github.com/yveszoundi/grails-projectile-mode") (:keywords "grails" "projectile"))]) (grails-mode . [(1 0 2) nil "minor-mode that adds some Grails project management to a grails project" single ((:commit . "f8e9628916d4d41e1816b53d02f0b5a00c499555") (:url . "http://blog.wolfman.com") (:keywords "languages"))]) (grails . [(0 4 1) ((emacs (24))) "Minor mode for Grails projects" single ((:commit . "fa638abe5c37f3f8af4fcd32f212453185ce50b1") (:url . "https://github.com/lifeisfoo/emacs-grails"))]) (gradle-mode . [(0 5 5) ((s (1 8 0))) "Gradle integration with Emacs' compile" single ((:commit . "579de06674551919cddac9cfe42129f4fb0155c9") (:url . "http://github.com/jacobono/emacs-gradle-mode") (:keywords "gradle"))]) (grab-x-link . [(0 4 1) ((emacs (24)) (cl-lib (0 5))) "Grab links from X11 apps and insert into Emacs" single ((:commit . "d2ef886097f59e1facc5cb5d8cd1c77bf340be76") (:url . "https://github.com/xuchunyang/grab-x-link") (:keywords "hyperlink"))]) (grab-mac-link . [(0 2) ((emacs (24))) "Grab link from Mac Apps and insert it into Emacs" single ((:commit . "8bf05a69758fd10a4303c5c458cd91a49ab8b1b2") (:url . "https://github.com/xuchunyang/grab-mac-link.el") (:keywords "markdown" "mac" "hyperlink"))]) (govc . [(0 15 0) ((emacs (24 3)) (dash (1 5 0)) (s (1 9 0)) (magit-popup (2 0 50)) (json-mode (1 6 0))) "Interface to govc for managing VMware ESXi and vCenter" single ((:commit . "b63044e5f833781eb7b305bc035392480ee06a82") (:url . "https://github.com/vmware/govmomi/tree/master/govc/emacs") (:keywords "convenience"))]) (goto-last-change . [(1 2 1) nil "Move point through buffer-undo-list positions" single ((:commit . "58b0928bc255b47aad318cd183a5dce8f62199cc") (:url . "https://github.com/camdez/goto-last-change.el") (:keywords "convenience"))]) (goto-gem . [(1 2) ((s (1 9 0))) "Open dired in gem directory" single ((:commit . "6f5bd405c096ef879fed1298c09d0daa0bae5dac") (:keywords "gemfile" "convenience"))]) (gotham-theme . [(1 1 8) nil "A very dark Emacs color theme." single ((:commit . "d9b00bd93ab3fed0e7fff99b0dc8773584f5207d") (:url . "https://github.com/wasamasa/gotham-theme"))]) (gotest . [(0 13 0) ((emacs (24 3)) (s (1 11 0)) (f (0 19 0)) (go-mode (1 4 0))) "Launch GO unit tests" single ((:commit . "2ae187078beb5d9672ca14cb636b6b4021de4230") (:url . "https://github.com/nlamirault/gotest.el") (:keywords "languages" "go" "tests"))]) (goose-theme . [(1 0 0) ((emacs (24 1))) "A gray color theme for Emacs." single ((:commit . "52244bd5ee3e7b42599d9697007a5df3b026aafc") (:url . "https://github.com/thwg/goose-theme"))]) (google-translate . [(0 11 14) nil "Emacs interface to Google Translate." tar ((:commit . "486c63bbfa0338589589f628703c38112035a5b2"))]) (google-this . [(1 11) ((emacs (24 1))) "A set of functions and bindings to google under point." single ((:commit . "22cff810e7ed3b3c9dae066588508864c25c6d99") (:url . "http://github.com/Malabarba/emacs-google-this") (:keywords "convenience" "hypermedia"))]) (google-maps . [(1 0 0) nil "Access Google Maps from Emacs" tar ((:commit . "90151ab59e693243ca8da660ce7b9ce361ea5126") (:keywords "comm"))]) (golden-ratio . [(1 0) nil "Automatic resizing of Emacs windows to the golden ratio" single ((:commit . "79b1743fc1a2f3462445e9ddd0a869f30065bb6d") (:keywords "window" "resizing"))]) (godoctor . [(0 0 9) nil "Frontend for godoctor" single ((:commit . "f892a4dbabe61186540d6035c5185fd929a6a543") (:url . "https://github.com/microamp/godoctor.el") (:keywords "go" "golang" "refactoring"))]) (go-scratch . [(0 0 1) ((go-mode (1 3 1)) (emacs (24))) "*scratch* buffer for Go" single ((:commit . "3f68cbcce04f59eb8e83af109164731ec0454be0") (:keywords "languages" "go"))]) (go-rename . [(1 5 0) ((go-mode (1 3 1))) "Integration of the 'gorename' tool into Emacs." single ((:commit . "35f6826e435c3004dabf134d0f2ae2f31ea7b6a2") (:keywords "tools"))]) (go-playground . [(1 3) ((emacs (24)) (go-mode (1 4 0)) (gotest (0 13 0))) "Local Golang playground for short snippets." single ((:commit . "eebb1fec2177bc85b746b948beac873a77bea4a2") (:url . "https://github.com/grafov/go-playground") (:keywords "tools" "golang"))]) (go-mode . [(1 5 0) nil "Major mode for the Go programming language" single ((:commit . "35f6826e435c3004dabf134d0f2ae2f31ea7b6a2") (:url . "https://github.com/dominikh/go-mode.el") (:keywords "languages" "go"))]) (go-impl . [(0 14) ((emacs (24 3)) (go-mode (1 3 0))) "impl integration for go-mode" single ((:commit . "69f0d0ef05771487e15abec500cd06befd171abf") (:url . "https://github.com/syohex/emacs-go-impl"))]) (go-guru . [(1 5 0) ((go-mode (1 3 1)) (cl-lib (0 5))) "Integration of the Go 'guru' analysis tool into Emacs." single ((:commit . "35f6826e435c3004dabf134d0f2ae2f31ea7b6a2") (:keywords "tools"))]) (go-errcheck . [(1 1 2) nil "errcheck integration for go-mode" single ((:commit . "1b0cd6af048a8b2074ace14ab51fb6c987beb430"))]) (go-eldoc . [(0 30) ((emacs (24 3)) (go-mode (1 0 0))) "eldoc for go-mode" single ((:commit . "f1ad302ec4073354801e613293be2f55ba770618") (:url . "https://github.com/syohex/emacs-go-eldoc"))]) (go-direx . [(0 4) ((direx (1 0 0)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single ((:commit . "aecb9fef4d56d04d230d37c75c260c8392b5ad9f") (:url . "https://github.com/syohex/emacs-go-direx"))]) (go-autocomplete . [(20150303) ((auto-complete (1 4 0))) "auto-complete-mode backend for go-mode" single ((:commit . "eef10fdde96a12528a6da32f51bf638b2863a3b1") (:keywords "languages"))]) (go-add-tags . [(0 4) ((emacs (24 3)) (s (1 11 0))) "Add field tags for struct fields" single ((:commit . "54879945e46a0884c5f93d7fd6c866a9cdf401ac") (:url . "https://github.com/syohex/emacs-go-add-tags"))]) (gnus-x-gm-raw . [(0 0 1) ((log4e (0 2 0)) (yaxception (0 1))) "Search mail of Gmail using X-GM-RAW as web interface" single ((:commit . "978bdfcecc8844465b71641c2e909fcdc66b22be") (:url . "https://github.com/aki2o/gnus-x-gm-raw") (:keywords "gnus"))]) (gnus-desktop-notify . [(1 4) ((gnus (1 0))) "Gnus Desktop Notification global minor mode" single ((:commit . "210c70f0021ee78e724f1d8e00ca96e1e99928ca") (:url . "http://www.thregr.org/~wavexx/hacks/gnus-desktop-notify/"))]) (gnuplot . [(0 7 0) nil "drive gnuplot from within emacs" tar ((:commit . "aefd4f671485fbcea42511ce79a7a60e5e0110a3") (:keywords "gnuplot" "plotting"))]) (gntp . [(0 1) nil "Growl Notification Protocol for Emacs" single ((:commit . "767571135e2c0985944017dc59b0be79af222ef5"))]) (gnome-calendar . [(0 2) nil "Integration with the GNOME Shell calendar" single ((:commit . "58c3a3c32aff9901c679bdf9091ed934897b84a0") (:keywords "gnome" "calendar"))]) (gmpl-mode . [(0 1 0) nil "Major mode for editing GMPL(MathProg) files" single ((:commit . "25d20f9d24594e85cb6f80d35d7c73b7e82cbc71") (:keywords "extensions"))]) (gmail2bbdb . [(0 0 6) nil "import email and name into bbdb from vcard." single ((:commit . "181ef6039227bb30a02041d8cfdc435551a7d948") (:url . "http://github.com/redguardtoo/gmail2bbdb") (:keywords "vcard" "bbdb" "email" "contact" "gmail"))]) (gmail-message-mode . [(1 4) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single ((:commit . "ec36672a9dc93c09ebe2f77597b498d11883d008") (:url . "http://github.com/Bruce-Connor/gmail-message-mode") (:keywords "mail" "convenience" "emulation"))]) (glab . [(1 1 1) ((emacs (25))) "minuscule client for the Gitlab API" single ((:commit . "5ced0214622450930bcea105b9aac785c594609d") (:url . "https://gitlab.com/tarsius/glab") (:keywords "tools"))]) (gl-conf-mode . [(0 3) nil "No description available." single ((:commit . "1a53e548277eb9c669bbeda4bee9be32be7a82ec"))]) (gitter . [(1) ((emacs (24 1)) (let-alist (1 0 4))) "An Emacs Gitter client" single ((:commit . "bd2ba457109dd5d3e4b419e3ef5cbd3b5c9498d6") (:url . "https://github.com/xuchunyang/gitter.el") (:keywords "gitter" "chat" "client" "internet"))]) (gitlab . [(0 8 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Gitlab" tar ((:commit . "a1c1441ff5ffb290e695eb9ac05431e9385578f4") (:url . "https://github.com/nlamirault/emacs-gitlab") (:keywords "gitlab"))]) (gitignore-mode . [(1 2 4) nil "Major mode for editing .gitignore files" single ((:commit . "af4ff3222f38daa0d352afdf3d20741b4fab2e79") (:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (github-search . [(0 0 1) ((magit (2 1 0)) (gh (1 0 0))) "Clone repositories by searching github" single ((:commit . "1a5c1f8291f4d41e57367a8522699cb08eea8fc4") (:url . "https://github.com/IvanMalison/github-search") (:keywords "github" "search" "clone" "api" "gh" "magit"))]) (github-notifier . [(0 1) ((emacs (24))) "Displays your GitHub notifications unread count in mode-line" single ((:commit . "f8d011ebef9f626a94a27b5576c8ed06e6ff8987") (:url . "https://github.com/xuchunyang/github-notifier.el") (:keywords "github" "mode-line"))]) (github-elpa . [(0 0 1) ((package-build (1 0)) (commander (0 7 0)) (git (0 1 1))) "Build and publish ELPA repositories with GitHub Pages" tar ((:commit . "c5960375ed5d67465412be7eb0ac558082feebc7") (:url . "https://github.com/10sr/github-elpa"))]) (github-clone . [(0 2) ((gh (0 7 2)) (magit (1 2 0)) (emacs (24))) "Fork and clone github repos" single ((:commit . "ab048cf49d9ebda73acae803bc44e731e629d540") (:url . "https://github.com/dgtized/github-clone.el") (:keywords "vc" "tools"))]) (github-browse-file . [(0 5 0) ((cl-lib (0 5))) "View the file you're editing on GitHub" single ((:commit . "fa5cc00a40869430fb44596792961a4cddf9c265") (:url . "https://github.com/osener/github-browse-file") (:keywords "convenience" "vc" "git" "github"))]) (gitconfig-mode . [(1 2 4) nil "Major mode for editing .gitconfig files" single ((:commit . "af4ff3222f38daa0d352afdf3d20741b4fab2e79") (:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (gitconfig . [(1 0 0) nil "Emacs lisp interface to work with git-config variables" single ((:commit . "6c313a39e20702ddcebc12d146f69db1ce668901") (:keywords "git" "gitconfig" "git-config"))]) (gitattributes-mode . [(1 2 4) nil "Major mode for editing .gitattributes files" single ((:commit . "af4ff3222f38daa0d352afdf3d20741b4fab2e79") (:url . "https://github.com/magit/git-modes") (:keywords "convenience" "vc" "git"))]) (git-wip-timemachine . [(1 0) ((s (1 9 0))) "Walk through git-wip revisions of a file" single ((:commit . "7da7f2acec0b1d1252d7474b13190ae88e5b205d") (:url . "https://github.com/itsjeyd/git-wip-timemachine") (:keywords "git"))]) (git-timemachine . [(3 0) nil "Walk through git revisions of a file" single ((:commit . "7c66a878ee89861dcd59b5dfc598520daa156052") (:url . "https://github.com/pidu/git-timemachine") (:keywords "git"))]) (git-ps1-mode . [(0 2 2) nil "Global minor-mode to print __git_ps1" single ((:commit . "288e5c4d0ff20a4e1ac9e72b6af632f67f1d7525") (:url . "https://github.com/10sr/git-ps1-mode-el") (:keywords "utility" "mode-line" "git"))]) (git-messenger . [(0 18) ((emacs (24 3)) (popup (0 5 0))) "Pop up last commit information of current line" single ((:commit . "9297464c010dd8a2d584ac8e012876856655a8b5") (:url . "https://github.com/syohex/emacs-git-messenger"))]) (git-link . [(0 5 1) ((cl-lib (0 6 1))) "Get the GitHub/Bitbucket/GitLab URL for a buffer location" single ((:commit . "472af75eca7aba42a1934f408c4bda55e34c9dcf") (:url . "http://github.com/sshaw/git-link") (:keywords "git" "vc" "github" "bitbucket" "gitlab" "convenience"))]) (git-lens . [(0 4 2) ((emacs (24 4))) "Show new, deleted or modified files in branch" single ((:commit . "2d1d94fd2e8a17025224ae2224c5f44d8482dc64") (:keywords "vc" "convenience"))]) (git-gutter-fringe . [(0 23) ((git-gutter (0 88)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single ((:commit . "dfc93d1064df154a809aab350942830408051da3") (:url . "https://github.com/syohex/emacs-git-gutter-fringe"))]) (git-gutter-fringe+ . [(0 1) ((git-gutter+ (0 1)) (fringe-helper (20130519 1641))) "Fringe version of git-gutter+.el" single ((:commit . "ce9d594c0189e78d78df26a0c26bbcf886e373cd") (:url . "https://github.com/nonsequitur/git-gutter-fringe-plus"))]) (git-gutter . [(0 90) ((cl-lib (0 5)) (emacs (24))) "Port of Sublime Text plugin GitGutter" single ((:commit . "a786465bd527c13e32c73c02b95086560c1be878") (:url . "https://github.com/syohex/emacs-git-gutter"))]) (git-gutter+ . [(0 4) ((git-commit (0))) "Manage Git hunks straight from the buffer" single ((:commit . "f8daebb6569bb116086d8653da3505382e03d940") (:url . "https://github.com/nonsequitur/git-gutter-plus") (:keywords "git" "vc"))]) (git-commit-insert-issue . [(0 3 1) ((helm (0)) (projectile (0)) (s (0)) (github-issues (0)) (gitlab (0)) (bitbucket (0))) "Get issues list when typing \"Fixes #\"" single ((:commit . "5f08c17bf93b17915415d435ee41923d924fe20b") (:url . "https://gitlab.com/emacs-stuff/git-commit-insert-issue/") (:keywords "git" "github" "gitlab" "bitbucket" "commit" "issues"))]) (git-commit . [(2 10 3) ((emacs (24 4)) (dash (2 13 0)) (with-editor (2 5 10))) "Edit Git commit messages" single ((:commit . "d5b747473ab0bf0f0034fca2f57f6497d476b67e") (:url . "https://github.com/magit/magit") (:keywords "git" "tools" "vc"))]) (git-command . [(0 2 0) ((term-run (0 1 4)) (with-editor (2 3 1)) (git-ps1-mode (0 2 0))) "Yet another Git interface" single ((:commit . "6cc5c17ca3cc1967b5402bb9a0538fb90933428d") (:url . "https://github.com/10sr/git-command-el") (:keywords "utility" "git"))]) (git-auto-commit-mode . [(4 4 0) nil "Emacs Minor mode to automatically commit and push" single ((:commit . "075e5f9ded66c2035581a7b216896556cc586814") (:url . "http://projects.ryuslash.org/git-auto-commit-mode/") (:keywords "vc"))]) (git-annex . [(1 1) nil "Mode for easy editing of git-annex'd files" single ((:commit . "7d41775a1709b5754a7779e9f64f15d336ea5c8c") (:url . "https://github.com/jwiegley/git-annex-el") (:keywords "files" "data" "git" "annex"))]) (git . [(0 1 1) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single ((:commit . "8b7f1477ef367b5b7de452589dd9a8ab30150d0a") (:url . "http://github.com/rejeep/git.el") (:keywords "git"))]) (gist . [(1 4 0) ((emacs (24 1)) (gh (0 10 0))) "Emacs integration for gist.github.com" single ((:commit . "a03f142455e8b39f77fbd57ee1c1e44478c1f9e2") (:url . "https://github.com/defunkt/gist.el") (:keywords "tools"))]) (ghub . [(1 2 0) ((emacs (25))) "minuscule client for the Github API" single ((:commit . "da60fa2316bf829cab18676afd5a43088ac06b60") (:url . "https://github.com/tarsius/ghub") (:keywords "tools"))]) (ghub+ . [(0 1 4) ((emacs (25)) (ghub (1 2)) (apiwrap (0 1 2))) "a thick GitHub API client built on ghub" single ((:commit . "44a5558eb299adee1463b7120c23b26b1d914ea8") (:url . "https://github.com/vermiculus/ghub-plus") (:keywords "extensions" "multimedia" "tools"))]) (ghq . [(0 1 2) nil "Ghq interface for emacs" single ((:commit . "aae4b8cb22fd6c24d2c9e3962c7e8e9dac6d9825") (:keywords "ghq"))]) (ghc-imported-from . [(0 1 2) ((emacs (24 1))) "Haskell documentation lookup with ghc-imported-from" single ((:commit . "fcff08628a19f5d26151564659218cc677779b79") (:keywords "languages"))]) (ghc . [(5 8 0 0) ((haskell-mode (13 0))) "Sub mode for Haskell mode" tar ((:commit . "35690941aadbe44d9401102ab44a39753e0bb2b5"))]) (gh . [(0 10 0) ((emacs (24 4)) (pcache (0 3 1)) (logito (0 1))) "A GitHub library for Emacs" tar ((:commit . "d0471dd1ba279072cbf8caf6368f3008d7120f25"))]) (ggtags . [(0 8 12) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single ((:commit . "7a7ee76a8055531482927e6abf7e0ef676165dd2") (:url . "https://github.com/leoliu/ggtags") (:keywords "tools" "convenience"))]) (ggo-mode . [(20130521) nil "Gengetopt major mode" single ((:commit . "ea5097f87072309c7b77204888d459d084bf630f") (:keywords "extensions" "convenience" "local"))]) (german-holidays . [(0 2 0) nil "German holidays for Emacs calendar" single ((:commit . "8388b3bf5b5c38f9b9fcc9216ca26ef0640c6edc") (:url . "https://github.com/rudolfochrist/german-holidays"))]) (genrnc . [(0 1 0) ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar ((:commit . "da75b1966a73ad215ec2ced4522c25f4d0bf1f9a") (:url . "https://github.com/aki2o/emacs-genrnc") (:keywords "xml"))]) (geiser . [(0 9) nil "GNU Emacs and Scheme talk to each other" tar ((:commit . "8ef6a9321d81ff478cfd376023eb84b8a819a991") (:url . "http://www.nongnu.org/geiser/"))]) (geben-helm-projectile . [(0 0 4) ((emacs (24)) (geben (0 26)) (helm-projectile (0 13 0))) "Integrate helm-projectile with geben" single ((:commit . "31ce0faca5dcc71924884f03fd5a7a25d00ccd9b") (:url . "https://github.com/ahungry/geben-helm-projectile") (:keywords "ahungry" "emacs" "geben" "helm" "projectile" "debug"))]) (geben . [(1 1 1) ((emacs (24 3)) (cl-lib (0 5))) "DBGp protocol frontend, a script debugger" tar ((:commit . "003abd23a7468daa133dfbc7ef85d0d61a0410dc") (:url . "https://github.com/ahungry/geben") (:keywords "c" "comm" "tools"))]) (gather . [(1 1 0) nil "Gather string in buffer." single ((:commit . "303af57dd2ae0fc1363a3d1a84d475167f58c84a") (:url . "https://github.com/mhayashi1120/Emacs-gather/raw/master/gather.el") (:keywords "matching" "convenience" "tools"))]) (gams-mode . [(6 2) nil "Major mode for editing GAMS (General Algebraic Modeling System) files." single ((:commit . "ce51aa1afec78bf96aedb4badf33463383b7593e") (:url . "http://shirotakeda.org/en/gams/gams-mode/") (:keywords "gams"))]) (fzf . [(0 2) ((emacs (24 4))) "A front-end for fzf." single ((:commit . "383a050920e9b99d37c21d041deb7f38b202485c") (:url . "https://github.com/bling/fzf.el") (:keywords "fzf" "fuzzy" "search"))]) (fxrd-mode . [(0 8) ((s (1 2))) "Major mode for editing fixed field width files" tar ((:commit . "8a1a0d5a08527ec8dee9bbe135803ed7ad297d9d") (:url . "https://github.com/msherry/fxrd-mode") (:keywords "convenience"))]) (fwb-cmds . [(1 0 0) nil "misc frame, window and buffer commands" single ((:commit . "57973f99cf4a185b5cccbf941478fad25e8428c3") (:url . "https://github.com/tarsius/fwb-cmds") (:keywords "convenience"))]) (fvwm-mode . [(1 6 4) nil "major mode for editing Fvwm configuration files" single ((:commit . "d48a309bb7db21f5404b6619c6ee861fe0457704") (:keywords "files"))]) (fuzzy . [(0 1) nil "Fuzzy Matching" single ((:commit . "939f4e9a3f08d83925b41dd3d23b2321f3f6b09c") (:keywords "convenience"))]) (function-args . [(0 5 1) ((swiper (0 2 0))) "C++ completion for GNU Emacs" tar ((:commit . "25e447d8a8930a8c515077de57a7693c6a642514") (:url . "https://github.com/abo-abo/function-args"))]) (fullframe . [(0 4 0) ((cl-lib (0 5))) "Generalized automatic execution in a single frame" single ((:commit . "3c046dd4c27a5c96d9dc3bc50a44eb1e7fd68912") (:keywords "fullscreen"))]) (full-ack . [(1 0) nil "a front-end for ack" single ((:commit . "0aef4be1686535f83217cafb1524818071bd8325") (:url . "http://nschum.de/src/emacs/full-ack/") (:keywords "tools" "matching"))]) (fuel . [(0 96) nil "No description available." tar ((:commit . "905ec06d864537fb6be9c46ad98f1b6d101dfbf0"))]) (fstar-mode . [(0 9 4 0) ((emacs (24 3)) (dash (2 11))) "Support for F* programming" single ((:commit . "3a9be64827bbed8e34d38803b5c44d8d4f6cd688") (:url . "https://github.com/FStarLang/fstar.el") (:keywords "convenience" "languages"))]) (fsharp-mode . [(1 9 8) ((company (0 8 0)) (company-quickhelp (1 2 0)) (popup (0 5 3)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0)) (flycheck (0 25))) "F# mode for Emacs" tar ((:commit . "9766952bd7830cb0d319736961af8e42e67d42fe"))]) (fsbot-data-browser . [(0 3) nil "browse the fsbot database using tabulated-list-mode" single ((:commit . "6bca4f7de63e31839d2542f6c678b79931dec344") (:url . "http://github.com/benaiah/fsbot-data-browser") (:keywords "fsbot" "irc" "tabulated-list-mode"))]) (fringe-helper . [(1 0 1) nil "helper functions for fringe bitmaps" single ((:commit . "0f10a196c6e57222b8d4c94eafc40a96e7b20f1b") (:url . "http://nschum.de/src/emacs/fringe-helper/") (:keywords "lisp"))]) (free-keys . [(1 0 0) ((cl-lib (0 3))) "Show free keybindings for modkeys or prefixes" single ((:commit . "edfd69dc369b2647447b7c28c7c1163b1ddf45b4") (:url . "https://github.com/Fuco1/free-keys") (:keywords "convenience"))]) (fountain-mode . [(2 3 0) ((emacs (24 4))) "Major mode for screenwriting in Fountain markup" single ((:commit . "37289bb68f01dd49b1192032ade6b0741d024a54") (:url . "https://github.com/rnkn/fountain-mode") (:keywords "wp"))]) (format-sql . [(0 4) nil "Use format-sql to make your SQL readable in directly Emacs." single ((:commit . "97f475c245cd6c81a72a265678e2087cee66ac7b") (:url . "https://github.com/paetzke/format-sql.el"))]) (form-feed . [(0 2 2) nil "Display ^L glyphs as horizontal lines" single ((:commit . "eac6724c093458745e9ae0e37221077fa2ad0ff6") (:url . "https://github.com/wasamasa/form-feed") (:keywords "faces"))]) (foreman-mode . [(0 0 1) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "View and manage Procfile-based applications" single ((:commit . "e90d2b56e83ab914f9ba9e78126bd7a534d5b8fb") (:url . "http://github.com/zweifisch/foreman-mode") (:keywords "foreman"))]) (forecast . [(0 6 2) ((emacs (24 4))) "Weather forecasts" single ((:commit . "1eb60db1760572e3b1b87f6d672e3aa0812d6d94") (:url . "http://gkayaalp.com/emacs.html#forecast.el") (:keywords "weather" "forecast"))]) (fontawesome . [(0 4) ((helm-core (1 7 7)) (emacs (24 4))) "fontawesome utility" tar ((:commit . "72b4f2f83c7fdacd225aee58f93acefc53166626") (:url . "https://github.com/syohex/emacs-fontawesome"))]) (font-utils . [(0 7 8) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Utility functions for working with fonts" single ((:commit . "9192d3f8ee6a4e75f34c3fed10378674cc2b11d3") (:url . "http://github.com/rolandwalker/font-utils") (:keywords "extensions"))]) (fold-this . [(0 3 0) nil "Just fold this region please" single ((:commit . "90b41d7b588ab1c3295bf69f7dd87bf31b543a6a") (:keywords "convenience"))]) (fold-dwim-org . [(0 6) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single ((:commit . "c09bb2b46d65afbd1d0febc6fded7495be7a3037") (:url . "https://github.com/mlf176f2/fold-dwim-org") (:keywords "folding" "emacs" "org-mode"))]) (fold-dwim . [(1 2) nil "No description available." single ((:commit . "4764b0246a722d37eb8ec9f204ffaccaad1755d0"))]) (focus . [(0 1 1) ((emacs (24)) (cl-lib (0 5))) "Dim the font color of text in surrounding sections" single ((:commit . "75202c9445f52eab6fb82f00006f37cd20dae6b2") (:url . "http://github.com/larstvei/Focus"))]) (fn . [(0 1 2) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (dash-functional (1 2 0))) "Concise anonymous functions for Emacs Lisp" single ((:commit . "2842e3c6d1b5c96184fa638c37b25ce5b347a1a6") (:keywords "functional"))]) (fm . [(1 0) nil "follow mode for compilation/output buffers" single ((:commit . "6266840de17ac396dd7275a71da72cd5120c35a6") (:keywords "outlines"))]) (flyspell-popup . [(0 3) ((popup (0 5 0))) "Correcting words with Flyspell in popup menus" single ((:commit . "29311849bfd253b9b689bf331860b4c4d3bd4dde") (:url . "https://github.com/xuchunyang/flyspell-popup") (:keywords "convenience"))]) (flyspell-lazy . [(0 6 10) nil "Improve flyspell responsiveness using idle timers" single ((:commit . "31786fe04a4732d2f845e1c7e96fcb030182ef10") (:url . "http://github.com/rolandwalker/flyspell-lazy") (:keywords "spelling"))]) (flyspell-correct-popup . [(0 4) ((flyspell-correct (0 4 0)) (popup (0 5 3))) "correcting words with flyspell via popup interface" single ((:commit . "7e7f94a36699c7e7bba728df722e13a7b4af4b73") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flyspell-correct-ivy . [(0 4) ((flyspell-correct (0 4 0)) (ivy (0 8 0))) "correcting words with flyspell via ivy interface" single ((:commit . "7e7f94a36699c7e7bba728df722e13a7b4af4b73") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flyspell-correct-helm . [(0 4) ((flyspell-correct (0 4 0)) (helm (1 9 0))) "correcting words with flyspell via helm interface" single ((:commit . "7e7f94a36699c7e7bba728df722e13a7b4af4b73") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flyspell-correct . [(0 4) nil "correcting words with flyspell via custom interface" tar ((:commit . "7e7f94a36699c7e7bba728df722e13a7b4af4b73") (:url . "https://github.com/d12frosted/flyspell-correct"))]) (flymake-shell . [(0 8) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single ((:commit . "ec097bd77db5523a04ceb15a128e01689d36fb90") (:url . "https://github.com/purcell/flymake-shell"))]) (flymake-sass . [(0 6) ((flymake-easy (0 1))) "Flymake handler for sass files" single ((:commit . "1c7664818db539de7f3dab396c013528a3f5b8b4") (:url . "https://github.com/purcell/flymake-sass"))]) (flymake-ruby . [(0 8) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single ((:commit . "e14e8e2abda223bd3920dbad0eefd5af5973ae6d") (:url . "https://github.com/purcell/flymake-ruby"))]) (flymake-python-pyflakes . [(0 9) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single ((:commit . "78806a25b0f01f03df4210a79a6eaeec59511d7a") (:url . "https://github.com/purcell/flymake-python-pyflakes"))]) (flymake-php . [(0 5) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single ((:commit . "91f867e209011af31a2ca2d8f6874b994403bcb2") (:url . "https://github.com/purcell/flymake-php"))]) (flymake-perlcritic . [(1 0 3) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar ((:commit . "0692d6ad5495f6e5438bde0a10345829b8e1def8") (:url . "https://github.com/illusori/emacs-flymake-perlcritic"))]) (flymake-less . [(0 3) ((less-css-mode (0 15))) "Flymake handler for LESS stylesheets (lesscss.org)" single ((:commit . "8cbb5e41c8f4b988cee3ef4449cfa9aea3540893") (:keywords "languages"))]) (flymake-json . [(0 1) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single ((:commit . "ad8e482db1ad29e23bdd9d089b9bc3615649ce65") (:url . "https://github.com/purcell/flymake-json"))]) (flymake-jslint . [(0 23) nil "Flymake support for javascript using jslint" single ((:commit . "30693f75059bab53a9d2eb676c68751f4d8b091c") (:url . "https://github.com/purcell/flymake-jslint"))]) (flymake-hlint . [(0 2) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single ((:commit . "d540e250a80a09da3036c16bf86f9deb6d738c9c") (:url . "https://github.com/purcell/flymake-hlint"))]) (flymake-haskell-multi . [(0 3) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar ((:commit . "d2c9aeffd33440d360c1ea0c5aef6d1f171599f9"))]) (flymake-haml . [(0 8) ((flymake-easy (0 1))) "A flymake handler for haml files" single ((:commit . "343449920866238db343d61343bc845cc8bc5e1b") (:url . "https://github.com/purcell/flymake-haml"))]) (flymake-gjshint . [(0 0 6) nil "A flymake handler for javascript using both jshint and gjslint" single ((:commit . "71495ee5303de18293decd57ab9f9abdbaabfa05") (:keywords "flymake" "javascript" "jshint" "gjslint"))]) (flymake-easy . [(0 10) nil "Helpers for easily building flymake checkers" single ((:commit . "2a24f260cdc3b9c8f9263b653a475d90efa1d392") (:url . "https://github.com/purcell/flymake-easy") (:keywords "convenience" "internal"))]) (flymake-cursor . [(1 0 2) ((flymake (0 3))) "Show flymake messages in the minibuffer after delay" single ((:commit . "5cac5045398b1436ceb143d48961b50d38ae1396") (:url . "https://github.com/illusori/emacs-flymake-cursor") (:keywords "languages" "mode" "flymake"))]) (flymake-css . [(0 3) ((flymake-easy (0 1))) "Flymake support for css using csslint" single ((:commit . "3e56d47d3c53e39741aa4f702bb9fb827cce22ed") (:url . "https://github.com/purcell/flymake-css"))]) (flymake-coffee . [(0 12) ((flymake-easy (0 1))) "A flymake handler for coffee script" single ((:commit . "d4ef325255ea36d1dd622f29284fe72c3fc9abc0") (:url . "https://github.com/purcell/flymake-coffee"))]) (flycheck-ycmd . [(1 2) ((emacs (24)) (dash (2 13 0)) (flycheck (0 22)) (ycmd (1 2)) (let-alist (1 0 5))) "flycheck integration for ycmd" single ((:commit . "d042a673b4d717c3ca9d641f120bfe16c994c740") (:url . "https://github.com/abingham/emacs-ycmd"))]) (flycheck-yamllint . [(0 1 0) ((flycheck (30))) "Flycheck integration for YAMLLint" single ((:commit . "aa211b1243168a4f752888c0014c5b9d2da178b1") (:url . "https://github.com/krzysztof-magosa/flycheck-yamllint") (:keywords "convenience" "languages" "tools"))]) (flycheck-title . [(1 0) ((flycheck (30)) (emacs (24))) "show flycheck errors in the frame title" single ((:commit . "2b7a11c39420e517a07d0c95126455c1617f2c61"))]) (flycheck-tip . [(0 5 0) ((flycheck (0 13)) (emacs (24 1)) (popup (0 5 0))) "Show flycheck/flymake errors by tooltip" tar ((:commit . "0bfddf52ae4ec48d970324f8336a5d62986bbc9e") (:url . "https://github.com/yuutayamada/flycheck-tip") (:keywords "flycheck"))]) (flycheck-swift3 . [(1 1 0) ((emacs (24 4)) (flycheck (26))) "Flycheck: Swift support for Apple swift-mode" single ((:commit . "6b0b7c6fffc86809d0535afebd6b0972059992d5") (:url . "https://github.com/GyazSquare/flycheck-swift3") (:keywords "convenience" "languages" "tools"))]) (flycheck-swift . [(2 0) ((emacs (24 4)) (flycheck (0 25))) "Flycheck extension for Apple's Swift." single ((:commit . "822d1415eabfd464adc52063f9c44da1c87f0ff9") (:keywords "languages" "swift"))]) (flycheck-status-emoji . [(1 2 2) ((cl-lib (0 1)) (emacs (24)) (flycheck (0 20)) (let-alist (1 0))) "Show flycheck status using cute, compact emoji" single ((:commit . "2f323cb210a280fc05061f3fc689c627b40bfcb3") (:url . "https://github.com/liblit/flycheck-status-emoji") (:keywords "convenience" "languages" "tools"))]) (flycheck-rtags . [(2 10) ((emacs (24)) (flycheck (0 23)) (rtags (2 10))) "RTags Flycheck integration." single ((:commit . "3b3ace901f53827daef81d4c13658ec4feb318b4") (:url . "http://rtags.net"))]) (flycheck-rebar3 . [(1 1 0) ((flycheck (27))) "Rebar3 flycheck integration for Erlang projects" single ((:commit . "56a7c94857f0a0ea6a2a73c476a1a2faadc0f7c6") (:url . "https://github/joedevivo/flycheck-rebar3") (:keywords "erlang" "flycheck" "rebar3"))]) (flycheck-pos-tip . [(0 3) ((emacs (24 1)) (flycheck (0 22)) (pos-tip (0 4 6))) "Display Flycheck errors in GUI tooltips" single ((:commit . "3f1d5297fdff44a14ee624160eefdc678e2bd0bd") (:url . "https://github.com/flycheck/flycheck-pos-tip") (:keywords "tools" "convenience"))]) (flycheck-pony . [(0 2 1) ((flycheck (0 25 1))) "Pony support in Flycheck" single ((:commit . "3d3387133a44f5b3f0fb178ef4addf6e1ce1df2f") (:url . "https://github.com/seantallen/flycheck-pony") (:keywords "tools" "convenience"))]) (flycheck-package . [(0 12) ((flycheck (0 22)) (package-lint (0 2))) "A Flycheck checker for elisp package authors" single ((:commit . "afe8a49343d90d08ee72ac6f993d424dcc39cc38") (:keywords "lisp"))]) (flycheck-ocaml . [(0 3) ((emacs (24 1)) (flycheck (0 22)) (merlin (2 3)) (let-alist (1 0 3))) "Flycheck: OCaml support" single ((:commit . "9b4cd83ad2a87cc94b5d4e1ac26ac235475f1e6c") (:url . "https://github.com/flycheck/flycheck-ocaml") (:keywords "convenience" "tools" "languages"))]) (flycheck-objc-clang . [(1 1 0) ((emacs (24 4)) (flycheck (26))) "Flycheck: Objective-C support using Clang" single ((:commit . "b16b77f95e4e53a8951ebee6209a5de311748447") (:url . "https://github.com/GyazSquare/flycheck-objc-clang") (:keywords "convenience" "languages" "tools"))]) (flycheck-mix . [(1 0 0) ((flycheck (27)) (elixir-mode (1 8 0))) "Elixir mix flycheck integration" single ((:commit . "c565ebb12a48fcd49cc65656d79295c3288fcb84") (:url . "https://github.com/tomekowal/flycheck-mix") (:keywords "elixir" "flycheck" "mix"))]) (flycheck-ledger . [(0 4) ((flycheck (0 15))) "Flycheck integration for ledger files" single ((:commit . "9401b6c83f60bfd29edfc62fee76f75e17a3a41e") (:keywords "convenience" "languages" "tools"))]) (flycheck-kotlin . [(0 3) ((flycheck (0 18))) "Support kotlin in flycheck" single ((:commit . "cbb9fbf70dbe8efcc3971b3606ee95c97469b1fe"))]) (flycheck-julia . [(0 0 3) ((emacs (25)) (flycheck (0 22))) "Julia support for Flycheck" single ((:commit . "67cdef277741f06c884525636a1cf1349efebbb4") (:url . "https://github.com/gdkrmr/flycheck-julia") (:keywords "convenience" "tools" "languages"))]) (flycheck-joker . [(1 0 0) ((flycheck (0 18))) "Add Clojure syntax checker (via Joker) to flycheck" single ((:commit . "e7964140cbb0ee7badfc3d67c6412f5c3a461f76"))]) (flycheck-irony . [(0 1 0) ((emacs (24 1)) (flycheck (0 22)) (irony (0 2 0))) "Flycheck: C/C++ support via Irony" single ((:commit . "34940ae5ab8f4c721d9c1118ebfc3496d7e67a84") (:url . "https://github.com/Sarcasm/flycheck-irony/") (:keywords "convenience" "tools" "c"))]) (flycheck-hdevtools . [(0 3) ((flycheck (0 15))) "A flycheck checker for Haskell using hdevtools" single ((:commit . "fbf90b9a7d2d90f69ac55b57d18f0f4a47afed61") (:url . "https://github.com/flycheck/flycheck-hdevtools") (:keywords "convenience" "languages" "tools"))]) (flycheck-haskell . [(0 8) ((emacs (24 3)) (flycheck (0 25)) (haskell-mode (13 7)) (dash (2 4 0)) (seq (1 11)) (let-alist (1 0 1))) "Flycheck: Automatic Haskell configuration" tar ((:commit . "ee3401d97cc5e8edc216f2369e9dea3d363e462c") (:url . "https://github.com/flycheck/flycheck-haskell") (:keywords "tools" "convenience"))]) (flycheck-gometalinter . [(0 1 4) ((emacs (24)) (flycheck (0 22))) "flycheck checker for gometalinter" single ((:commit . "2e863429cc953cf4c14783e249df56d1ae669868") (:url . "https://github.com/favadi/flycheck-gometalinter") (:keywords "convenience" "tools" "go"))]) (flycheck-dmd-dub . [(0 9) ((flycheck (0 24))) "Sets flycheck-dmd-include-paths from dub package information" single ((:commit . "e8744adaba010415055ac15c702f780dd6e13e14") (:url . "http://github.com/atilaneves/flycheck-dmd-dub") (:keywords "languages"))]) (flycheck-color-mode-line . [(0 3) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single ((:commit . "c85319f8d2579e770c9060bfef11bedc1370d8be") (:keywords "convenience" "language" "tools"))]) (flycheck-clojure . [(0 1 5) ((cider (0 8 1)) (flycheck (0 22 -3 1)) (let-alist (1 0 1)) (emacs (24))) "Flycheck: Clojure support" single ((:commit . "fc0f1473c85b5287c8a62c1eee86894c98fbb84c") (:url . "https://github.com/clojure-emacs/squiggly-clojure"))]) (flycheck-checkpatch . [(0 1) ((emacs (25)) (flycheck (30))) "Flyckeck support for checkpatch.pl tool" single ((:commit . "aca98ea79f8b26a95f9dbdd4142b01fdd2def866") (:url . "https://github.com/zpp0/flycheck-checkpatch"))]) (flycheck-checkbashisms . [(1 5) ((emacs (24)) (flycheck (0 25))) "checkbashisms checker for flycheck" single ((:commit . "39362240b8e38e6ddc1da2e2c2229e3fecdf6057") (:url . "https://github.com/Gnouc/flycheck-checkbashisms") (:keywords "convenience" "tools" "sh" "unix"))]) (flycheck-cask . [(0 4) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" single ((:commit . "b4667500dcf52f96ec7e0fa10dd07edf191cbf5b") (:url . "https://github.com/flycheck/flycheck-cask") (:keywords "tools" "convenience"))]) (flycheck-apertium . [(0 2) ((flycheck (0 25))) "Apertium checkers in flycheck" tar ((:commit . "71cf49d5aaee962b995583384bfa045a1d4c3db7") (:url . "http://wiki.apertium.org/wiki/Emacs") (:keywords "convenience" "tools" "xml"))]) (flycheck . [(30) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "On-the-fly syntax checking" tar ((:commit . "9c063965e893f0cc7c97fabb810ac41ec22f82fb") (:url . "http://www.flycheck.org") (:keywords "convenience" "languages" "tools"))]) (flx-ido . [(0 6 1) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single ((:commit . "7fce6a4cdb65ac1b52e2b409ba548767581ce34c") (:url . "https://github.com/lewang/flx"))]) (flx . [(0 6 1) ((cl-lib (0 3))) "fuzzy matching with good sorting" single ((:commit . "7fce6a4cdb65ac1b52e2b409ba548767581ce34c") (:url . "https://github.com/lewang/flx"))]) (floobits . [(1 9 0) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar ((:commit . "fdac635ecc57ac7743f74678147aca2e956561de") (:url . "http://github.com/Floobits/floobits-emacs") (:keywords "comm" "tools"))]) (flatui-dark-theme . [(0 3 0) ((emacs (24))) "Dark color theme with colors from https://flatuicolors.com/" single ((:commit . "af5c84e2a2810748cc71a68ec7ba333097cc1f63") (:url . "https://github.com/theasp/flatui-dark-theme") (:keywords "color" "theme" "dark" "flatui" "faces"))]) (fixmee . [(0 8 6) ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) "Quickly navigate to FIXME notices in code" single ((:commit . "aa3be8ad9fcc9c0c7ff15f70cda4ba77de96dd74") (:url . "http://github.com/rolandwalker/fixmee") (:keywords "navigation" "convenience"))]) (fix-word . [(0 1 2) ((emacs (24 1)) (cl-lib (0 5))) "Convenient word transformation" single ((:commit . "91552cbceac8e2b7c23036f044fc84f5c6f8e338") (:url . "https://github.com/mrkkrp/fix-word") (:keywords "word" "convenience"))]) (fix-muscle-memory . [(0 93) nil "Simple hacks to fix muscle memory problems" single ((:commit . "df687aea23c6eac4b751f993893c2fd56e5a8a3b") (:keywords "spelling" "typing"))]) (fix-input . [(0 1 1) ((emacs (24 4))) "Make input methods play nicely with alternative keyboard layout on OS level" single ((:commit . "a70edfa7880ff9b082f358607d2a9ad6a8dcc8f3") (:url . "https://github.com/mrkkrp/fix-input") (:keywords "input" "method"))]) (fish-mode . [(0 1 2) ((emacs (24))) "Major mode for fish shell scripts" single ((:commit . "22aabbccd564883684f6d224b8e0a512f334be41") (:keywords "fish" "shell"))]) (firestarter . [(0 2 5) nil "Execute (shell) commands on save" single ((:commit . "4d6b106f325ac1802eabce3c8a7cd0a4c7a32864") (:url . "https://github.com/wasamasa/firestarter") (:keywords "convenience"))]) (fireplace . [(1 1 2) nil "A cozy fireplace for emacs" single ((:commit . "2b966ed65b714c613f79e9144d004dfa3b28f1ed") (:url . "https://github.com/johanvts/emacs-fireplace") (:keywords "games"))]) (firefox-controller . [(2 1) ((moz (0)) (popwin (1 0 0)) (cl-lib (0 5))) "An improved Firefox controller" single ((:commit . "a8af8cbf70afaf6b89a26d6ac69af8e92afc181f") (:url . "https://github.com/cute-jumper/emacs-firefox-controller") (:keywords "extensions"))]) (fiplr . [(0 2 4) ((grizzl (0 1 0))) "Fuzzy Search for Files in Projects" tar ((:commit . "100dfc33f43da8c49e50e8a2222b9d95532f6e24"))]) (find-file-in-repository . [(1 2) nil "Quickly find files in a git, mercurial or other repository" single ((:commit . "8b888f85029a2ff9159a724b42aeacdb051c3420") (:url . "https://github.com/hoffstaetter/find-file-in-repository") (:keywords "files" "convenience" "repository" "project" "source control"))]) (find-file-in-project . [(5 3 2) ((ivy (0 7 0)) (emacs (24 3))) "Find file/directory and review Diff/Patch/Commit efficiently everywhere" single ((:commit . "1378b98b2c1349b47fbf76414ac0e5adc7886bbe") (:url . "https://github.com/technomancy/find-file-in-project") (:keywords "project" "convenience"))]) (find-by-pinyin-dired . [(0 0 3) ((pinyinlib (0 1 0))) "Find file by first PinYin character of Chinese Hanzi" single ((:commit . "2c48434637bd63840fca4d2c6cf9ebd5dd44658f") (:url . "http://github.com/redguardtoo/find-by-pinyin-dired") (:keywords "hanzi" "chinese" "dired" "find" "file" "pinyin"))]) (finalize . [(2 0 0) ((emacs (24 1)) (cl-generic (0 3)) (cl-lib (0 3)) (eieio (1 4))) "finalizers for Emacs Lisp" tar ((:commit . "0f7d47c4d50f1c76fc3b43bfc2d4886dd3e8ca27"))]) (fill-column-indicator . [(1 87) nil "Graphically indicate the fill column" single ((:commit . "0e755319451dd9c6c99c2a2ef82c890ba93343b6") (:keywords "convenience"))]) (feature-mode . [(0 4) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar ((:commit . "4bd8f19da816115094beb4b0e085822eb298ac37"))]) (fcitx . [(0 2 2) nil "Make fcitx better in Emacs" single ((:commit . "77f1e187b9cecb6975bedcfe91c8c81f1b133686") (:url . "https://github.com/cute-jumper/fcitx.el") (:keywords "extensions"))]) (faust-mode . [(0 1) nil "Basic faust syntax colorizer for emacs." single ((:commit . "41379dd52a8be01cdfac06996ea1593877fdaf58") (:url . "https://github.com/magnetophon/emacs-faust-mode") (:keywords "languages"))]) (fastnav . [(1 0 7) nil "Fast navigation and editing routines." single ((:commit . "54626e9e7cc7be5bc2bd01732e95ed2afc2312a1") (:keywords "nav" "fast" "fastnav" "navigation"))]) (fastdef . [(0 2 0) ((ivy (0 7 0)) (w3m (0 0))) "Insert terminology from Google top search results" single ((:commit . "0696f41dc150d35ce31fe8d2ea74f4173818bb55") (:url . "http://github.com/redguardtoo/fastdef") (:keywords "terminology" "org-mode" "markdown"))]) (fancy-narrow . [(0 9 4) nil "narrow-to-region with more eye candy." single ((:commit . "cd381c1acd5e0d9b6acd7f3e76c3b1de21e8b6df") (:url . "http://github.com/Bruce-Connor/fancy-narrow-region") (:keywords "faces" "convenience"))]) (fancy-battery . [(0 2) ((emacs (24 1))) "Fancy battery display" single ((:commit . "5b8115bbeb67c52d4202a12dcd5726fb66e0a1ff") (:url . "https://github.com/lunaryorn/fancy-battery.el") (:keywords "convenience" "tools" "hardware"))]) (factlog . [(0 0 1) nil "File activity logger" single ((:commit . "c834fdab81ec5b1bdc0ee2721a12cecb48a319bf"))]) (fabric . [(0 2 0) nil "Launch Fabric using Emacs" tar ((:commit . "004934318f63d8cf955022f87b2c33eb97ada280") (:url . "https://github.com/nlamirault/fabric.el") (:keywords "python" "fabric"))]) (f . [(0 19 0) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single ((:commit . "541cb518afa5010029492847292c248f88b3ea42") (:url . "http://github.com/rejeep/f.el") (:keywords "files" "directories"))]) (eziam-theme . [(0 4 1) nil "A mostly monochrome theme, inspired by Tao and Leuven, with dark and light versions." tar ((:commit . "df2ae56e1ee5cc41c335ca6fd7ead3b99b3c5edd"))]) (eyebrowse . [(0 7 5) ((dash (2 7 0)) (emacs (24 3 1))) "Easy window config switching" single ((:commit . "56af9e96cfc8c03cfdcf3a60b581a8db9fdcbb20") (:url . "https://github.com/wasamasa/eyebrowse") (:keywords "convenience"))]) (exwm-x . [(1 7 2) ((cl-lib (0 5)) (exwm (0 1)) (switch-window (0 10)) (swiper (0 9 0)) (bind-key (1 0))) "A derivative wm based on EXWM (emacs x window manager)" tar ((:commit . "e50edd9e4174b729fdbc5750221c5e49b772e9c5") (:url . "https://github.com/tumashu/exwm-x") (:keywords "window-manager" "exwm"))]) (extend-dnd . [(0 5) nil "R drag and Drop" tar ((:commit . "a1923d57f8f5e862cc66c189b5e6627bc84a2119") (:url . "https://github.com/mlf176f2/extend-dnd") (:keywords "extend" "drag and drop"))]) (exsqlaim-mode . [(0 0 1) ((s (1 10 0))) "Use variables inside sql queries" single ((:commit . "e77d2a07addffd7df4393019d9c3dad1ab1925d9") (:url . "https://github.com/ahmadnazir/exsqlaim-mode"))]) (express . [(0 6 0) ((string-utils (0 3 2))) "Alternatives to `message'" single ((:commit . "e6dc9abdc395ef537408befebeb4fd3ed4ee5c60") (:url . "http://github.com/rolandwalker/express") (:keywords "extensions" "message" "interface"))]) (expand-region . [(0 11 0) nil "Increase selected region by semantic units." tar ((:commit . "0bc14fc7fbbcca5da4fdd9695cfd7cbd36eb3b96"))]) (exiftool . [(0 3) ((emacs (25))) "Elisp wrapper around ExifTool" single ((:commit . "8dd70ba5214a73960361a0c6220bb4aa72b9e478") (:url . "https://git.systemreboot.net/exiftool.el") (:keywords "data"))]) (exec-path-from-shell . [(1 11) nil "Get environment variables such as $PATH from the shell" single ((:commit . "4d6a6aa18031a4bbdd5b3bfad8686dc5ff942ab2") (:url . "https://github.com/purcell/exec-path-from-shell") (:keywords "environment"))]) (eww-lnum . [(1 1) nil "Conkeror-like functionality for eww" single ((:commit . "daef49974446ed4c1001e0549c3f74679bca6bd3") (:url . "https://github.com/m00natic/eww-lnum") (:keywords "eww" "browse" "conkeror"))]) (evm . [(0 4 2) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single ((:commit . "d0623b2355436a5fd9f7238b419782080c79196b") (:url . "http://github.com/rejeep/evm"))]) (evil-visualstar . [(0 2 0) ((evil (0))) "Starts a * or # search from the visual selection" single ((:commit . "eb996eca0081b6e8bab70b2c0a86ef1c71087bf6") (:url . "https://github.com/bling/evil-visualstar") (:keywords "evil" "vim" "visualstar"))]) (evil-visual-replace . [(0 0 4) ((evil (1 0 0))) "search/replace commands for evil visual state, inc. blocks" single ((:commit . "9bfbaf71898294e25d588a887fb4753641edfbe9") (:url . "https://github.com/troyp/evil-visual-replace") (:keywords "evil" "search" "replace" "regexp" "block" "rectangular" "region" "visual"))]) (evil-visual-mark-mode . [(0 0 3) ((evil (1 0 9)) (dash (2 10))) "Display evil marks on buffer" single ((:commit . "094ee37599492885ff3144918fcdd9b74dadaaa0") (:keywords "evil"))]) (evil-tutor . [(1 0) ((evil (1 0 9))) "Vimtutor adapted to Evil and wrapped in a major-mode" tar ((:commit . "909273bac88b98a565f1b89bbb13d523b7edce2b") (:url . "https://github.com/syl20bnr/evil-tutor") (:keywords "convenience" "editing" "evil"))]) (evil-textobj-anyblock . [(0 1) ((cl-lib (0 5)) (evil (1 1 0))) "Textobject for the closest user-defined blocks." single ((:commit . "068d26a625cd6202aaf70a8ff399f9130c0ffa68") (:url . "https://github.com/noctuid/evil-textobj-anyblock") (:keywords "evil"))]) (evil-text-object-python . [(1 0 1) ((emacs (24)) (evil (1 2 12))) "Python specific evil text objects" single ((:commit . "3b3fb01e7ad7eeeeae1143695547fe75148cc44f") (:url . "https://github.com/wbolster/evil-text-object-python") (:keywords "evil" "python" "text-object"))]) (evil-surround . [(1 0 0) ((evil (1 2 12))) "emulate surround.vim from Vim" single ((:commit . "7a0358ce3eb9ed01744170fa8a1e12d98f8b8839") (:keywords "emulation" "vi" "evil"))]) (evil-space . [(0 0 6) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single ((:commit . "f77860fa00662e2def3e1885adac777f051e1e61") (:url . "http://github.com/linktohack/evil-space") (:keywords "space" "repeat" "motion"))]) (evil-snipe . [(2 0 8) ((emacs (24 4)) (evil (1 2 12)) (cl-lib (0 5))) "emulate vim-sneak & vim-seek" single ((:commit . "dc62ac317fd29f018e9785c1b3b7dd7ad57b3938") (:url . "https://github.com/hlissner/evil-snipe") (:keywords "emulation" "vim" "evil" "sneak" "seek"))]) (evil-smartparens . [(0 3 0) ((evil (1 0)) (cl-lib (0 3)) (emacs (24 4)) (smartparens (1 6 3))) "Evil support for smartparens" single ((:commit . "12521212b8e4a02cbec733882bb89c6fac37301f") (:url . "https://www.github.com/expez/evil-smartparens") (:keywords "evil" "smartparens"))]) (evil-search-highlight-persist . [(1 8) ((highlight (0))) "Persistent highlights after search" single ((:commit . "0e2b3d4e3dec5f38ae95f62519eb2736f73c0b85"))]) (evil-rsi . [(2 0 0) ((evil (1 0 0))) "Use emacs motion keys in evil, inspired by vim-rsi" single ((:commit . "236bf6ed1e2285698db808463e5f2f69f5f5e7c0") (:url . "http://github.com/linktohack/evil-rsi") (:keywords "evil" "rsi" "evil-rsi"))]) (evil-quickscope . [(0 1 4) ((evil (0))) "Highlight unique characters in words for f,F,t,T navigation" single ((:commit . "37a20e4c56c6058abf186ad4013c155e695e876f") (:url . "http://github.com/blorbx/evil-quickscope") (:keywords "faces" "emulation" "vim" "evil"))]) (evil-org . [(0 1 1) ((evil (0)) (org (0))) "evil keybindings for org-mode" single ((:commit . "2d7c58dbeca0d4ac7b4eab5f47b77946951f27e9") (:url . "https://github.com/edwtjo/evil-org-mode.git") (:keywords "evil" "vim-emulation" "org-mode" "key-bindings" "presets"))]) (evil-opener . [(0 2 2) ((evil (1 2 12)) (opener (0 2 2))) "opening urls as buffers in evil" tar ((:commit . "c384f67278046fdcd220275fdd212ab85672cbeb") (:url . "https://github.com/0robustus1/opener.el") (:keywords "url" "http" "files"))]) (evil-numbers . [(0 4) nil "increment/decrement numbers like in vim" single ((:commit . "8834eb2e8bd93561a706363946701d0d90546a9f") (:url . "http://github.com/cofi/evil-numbers") (:keywords "numbers" "increment" "decrement" "octal" "hex" "binary"))]) (evil-nerd-commenter . [(3 0 2) nil "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar ((:commit . "cac2f7945fc90f43d1282dfe4aca24ded9f7cd03") (:url . "http://github.com/redguardtoo/evil-nerd-commenter") (:keywords "commenter" "vim" "line" "evil"))]) (evil-multiedit . [(1 3 8) ((emacs (24 4)) (evil (1 2 12)) (iedit (0 97)) (cl-lib (0 5))) "multiple cursors for evil-mode" single ((:commit . "c0cb6858399863e51935dae62c7c61ebc68f92eb") (:url . "https://github.com/hlissner/evil-multiedit") (:keywords "multiple cursors" "editing" "iedit"))]) (evil-mc . [(0 0 3) ((emacs (24 3)) (evil (1 2 12)) (cl-lib (0 5))) "Multiple cursors for evil-mode" tar ((:commit . "be2259b8cedd62011b25ddbcc1774bbbe9a66c61") (:url . "https://github.com/gabesoft/evil-mc") (:keywords "evil" "editing" "multiple-cursors" "vim" "evil-multiple-cursors" "evil-mc" "evil-mc"))]) (evil-matchit . [(2 2 3) ((evil (1 0 7))) "Vim matchit ported to Evil" tar ((:commit . "bed39041b1181ec26cf2601a8a7aa4afe2510f5b") (:url . "http://github.com/redguardtoo/evil-matchit") (:keywords "matchit" "vim" "evil"))]) (evil-mark-replace . [(0 0 4) ((evil (1 0 8))) "replace the thing in marked area" single ((:commit . "56cf191724a3e82239ca47a17b071c20aedb0617") (:url . "http://github.com/redguardtoo/evil-mark-replace") (:keywords "mark" "replace" "evil"))]) (evil-magit . [(0 4 1) ((evil (1 2 3)) (magit (2 6 0))) "evil-based key bindings for magit" single ((:commit . "077354f8ebd5da76937bf8f5df5d484f8a0ccc62") (:url . "https://github.com/justbur/evil-magit"))]) (evil-lisp-state . [(8 2) ((evil (1 0 9)) (bind-map (0)) (smartparens (1 6 1))) "An evil state to edit Lisp code" single ((:commit . "3c65fecd9917a41eaf6460f22187e2323821f3ce") (:url . "https://github.com/syl20bnr/evil-lisp-state") (:keywords "convenience" "editing" "evil" "smartparens" "lisp" "mnemonic"))]) (evil-leader . [(0 4 3) ((evil (0))) "let there be <leader>" single ((:commit . "753b01eb4958370ae2226b3780ff31fe157c2852") (:url . "http://github.com/cofi/evil-leader") (:keywords "evil" "vim-emulation" "leader"))]) (evil-iedit-state . [(1 1) ((evil (1 0 9)) (iedit (0 97))) "Evil states to interface iedit mode." single ((:commit . "eab7d5e3e7d25c4a852fedb6c0c7f50dd9e9bd7c") (:url . "https://github.com/syl20bnr/evil-iedit-state") (:keywords "convenience" "editing" "evil" "iedit" "mnemonic"))]) (evil-escape . [(3 14) ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) "Escape from anything with a customizable key sequence" single ((:commit . "b4d44fc5015341e484495fc86b73d09b2ac062ec") (:url . "https://github.com/syl20bnr/evil-escape") (:keywords "convenience" "editing" "evil"))]) (evil-embrace . [(0 1 1) ((emacs (24 4)) (embrace (0 1 0)) (evil-surround (0))) "Evil integration of embrace.el" single ((:commit . "4379adea032b25e359d01a36301b4a5afdd0d1b7") (:keywords "extensions"))]) (evil-commentary . [(2 1 1) ((evil (1 0 0))) "Comment stuff out. A port of vim-commentary." tar ((:commit . "395f91014b69844b81660c155f42eb9b1b3d199d") (:url . "http://github.com/linktohack/evil-commentary") (:keywords "evil" "comment" "commentary" "evil-commentary"))]) (evil-colemak-basics . [(2 1 0) ((emacs (24)) (evil (1 2 12)) (evil-snipe (2 0 3))) "Basic Colemak key bindings for evil-mode" single ((:commit . "7844079b47f47bb1dc24c885b0ac2e67524fa960") (:url . "https://github.com/wbolster/evil-colemak-basics") (:keywords "colemak" "evil"))]) (evil-args . [(1 0) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single ((:commit . "2a88b4d19953a11227cc1e91973b92149116f44c") (:url . "http://github.com/wcsmith/evil-args") (:keywords "evil" "vim-emulation"))]) (evil-anzu . [(0 3) ((evil (1 0 0)) (anzu (0 46))) "anzu for evil-mode" single ((:commit . "64cc08a3546373f28cd7bfd76a3e93bd78efa251") (:url . "https://github.com/syohex/emacs-evil-anzu"))]) (evil . [(1 2 12) ((undo-tree (0 6 3)) (goto-chg (1 6))) "Extensible Vi layer for Emacs." tar ((:commit . "0ad4c2dae1249558f7b59a78a685e4f8092009c9"))]) (evalator . [(1 0 0) ((helm-core (1 9 1))) "Package for interactive transformation of data with helm" tar ((:commit . "edf3840f5aa025cf38d0c2677b2f88f59079409e") (:url . "http://www.github.com/seanirby/evalator") (:keywords "languages" "elisp" "helm"))]) (eval-sexp-fu . [(0 4 0) nil "Tiny functionality enhancements for evaluating sexps." single ((:commit . "b28d9c4d57511072aa17b2464693e38b769482e0") (:keywords "lisp" "highlight" "convenience"))]) (eval-in-repl . [(0 9 4) ((dash (0 0 0)) (paredit (0 0 0)) (ace-window (0 0 0))) "Consistent ESS-like eval interface for various REPLs" tar ((:commit . "674873139ebde439fbeecaf0fb217d54f470bc14") (:url . "https://github.com/kaz-yos/eval-in-repl/"))]) (ethan-wspace . [(0 7 1) nil "whitespace customizations for emacs" single ((:commit . "e055ee6730c0b03525d32e67511ef6c51e4c29e4") (:keywords "whitespace" "tab" "newline" "trailing" "clean"))]) (esxml . [(0 3 2) nil "Library for working with xml via esxml and sxml" single ((:commit . "fd0f0185cd579b00c3d76d2c383cd33fe642bb93") (:keywords "tools" "lisp" "comm"))]) (esup . [(0 5) ((cl-lib (0 5)) (emacs (24))) "the Emacs StartUp Profiler (ESUP)" tar ((:commit . "6faef1fe1b5ff2fb761722ef1972a16395d9a10b") (:url . "http://github.com/jschaf/esup") (:keywords "convenience" "processes"))]) (ess-smart-underscore . [(0 79) nil "Ess Smart Underscore" tar ((:commit . "ef18a160aeb3b1a7ae5fe93759f8e92147da8746") (:url . "http://github.com/mlf176f2/ess-smart-underscore.el") (:keywords "ess" "underscore"))]) (ess-R-object-popup . [(1 0) ((popup (20130117 1954)) (ess (20130225 1754))) "popup description of R object" single ((:commit . "7e1f601bfba72de0fda44d9c82f96028ecbb9948") (:url . "https://github.com/myuhe/ess-R-object-popup.el") (:keywords "convenience" "ess"))]) (ess-R-data-view . [(1 0) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single ((:commit . "d6e98d3ae1e2a2ea39a56eebcdb73e99d29562e9") (:url . "https://github.com/myuhe/ess-R-data-view.el") (:keywords "convenience"))]) (ess . [(16 10) ((julia-mode (0 3))) "Emacs Speaks Statistics" tar ((:commit . "abacd7538e1bbfdd6ef2b5f11d4f5f4cc74782ee") (:url . "http://ess.r-project.org"))]) (espuds . [(0 3 3) ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) "Ecukes step definitions" single ((:commit . "1405972873339e056517217136de4ad3202d744a") (:url . "http://github.com/ecukes/espuds") (:keywords "test"))]) (eslintd-fix . [(1 0 0) nil "use eslint_d to automatically fix js files" single ((:commit . "555fdad8ebee4ca0d990b8c80151c77c8bd6b773") (:url . "https://github.com/aaronjensen/eslintd-fix"))]) (eslint-fix . [(1 0 0) nil "Fix JavaScript files using ESLint" single ((:commit . "be90d1e78b1dfd43b6b3b1c06868539e2ac27d3a") (:url . "https://github.com/codesuki/eslint-fix") (:keywords "javascript" "eslint" "lint" "formatting" "style"))]) (eshell-z . [(0 3 2) ((cl-lib (0 5))) "cd to frequent directory in eshell" single ((:commit . "96ec3f5f8a801c893d2c6a6b140e333ef2bfd8b5") (:url . "https://github.com/xuchunyang/eshell-z") (:keywords "convenience"))]) (eshell-up . [(0 0 3) ((emacs (24))) "Quickly go to a specific parent directory in eshell" single ((:commit . "653121392acd607d5dfbca0832927e06806a2d39") (:url . "https://github.com/peterwvj/eshell-up") (:keywords "eshell"))]) (eshell-git-prompt . [(0 1 1) ((emacs (24 1)) (cl-lib (0 5)) (dash (2 11 0))) "Some Eshell prompt for Git users" single ((:commit . "fb56e851c1baac68249c34043bd5db9c9420141e") (:url . "https://github.com/xuchunyang/eshell-git-prompt") (:keywords "eshell" "git"))]) (eshell-did-you-mean . [(0 1) ((emacs (24 1)) (cl-lib (0 5))) "command not found (\"did you mean…\" feature) in Eshell" single ((:commit . "7cb6ef8e2274d0a50a9e114d412307a6543533d5") (:url . "https://github.com/xuchunyang/eshell-did-you-mean") (:keywords "eshell"))]) (eshell-autojump . [(0 2) nil "autojump command for Eshell" single ((:commit . "c0866d7f2789831665ebb01b812bae89d085bff0") (:url . "http://github.com/coldnew/eshell-autojump"))]) (esh-help . [(1 0 0) ((dash (1 4 0))) "Add some help functions and support for Eshell" single ((:commit . "03bf6fc7ef9ac46304e37524fdaf7ebfee317695") (:url . "https://github.com/tom-tan/esh-help/") (:keywords "eshell" "extensions"))]) (esa . [(0 8 13) ((cl-lib (0 3))) "Emacs integration for esa.io" single ((:commit . "0f69f9f45ac15018c48853509ac38e68286f9c0e") (:url . "https://github.com/nabinno/esa.el") (:keywords "tools" "esa"))]) (es-windows . [(0 3) ((cl-lib (0 3)) (emacs (24))) "Window-management utilities" single ((:commit . "7ebe6c6e0831373847d7adbedeaa2e506b54b2af") (:url . "https://github.com/sabof/es-windows"))]) (es-mode . [(4 3 0) ((dash (2 11 0)) (cl-lib (0 5)) (spark (1 0))) "A major mode for editing Elasticsearch queries" tar ((:commit . "996730ebce57d810d2c275c7fadb11c2b1134dea") (:url . "http://www.github.com/dakrone/es-mode") (:keywords "elasticsearch"))]) (es-lib . [(0 4) ((cl-lib (0 3))) "A collection of emacs utilities" tar ((:commit . "753b27363e39c10edc9e4e452bdbbbe4d190df4a") (:url . "https://github.com/sabof/es-lib"))]) (ert-runner . [(0 7 0) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar ((:commit . "00056c37817f15b1870ccedd13cedf102e3194dd") (:url . "http://github.com/rejeep/ert-runner.el") (:keywords "test"))]) (ert-junit . [(0 1 1) ((ert (0))) "JUnit XML reports from ert results" single ((:commit . "341c755e7b60f8d2081303951377968b1d1a6c23") (:url . "http://bitbucket.org/olanilsson/ert-junit") (:keywords "tools" "test" "unittest" "ert"))]) (ert-async . [(0 1 2) nil "Async support for ERT" single ((:commit . "f64a7ed5b0d2900c9a3d8cc33294bf8a79bc8526") (:url . "http://github.com/rejeep/ert-async.el") (:keywords "test"))]) (erlang . [(20 0 1) ((emacs (24 1))) "Erlang major mode" tar ((:commit . "a01de6873844ba510084090abec734c4166d71fa"))]) (ergoemacs-mode . [(5 16 10 12) ((emacs (24 1)) (undo-tree (0 6 5)) (cl-lib (0 5))) "Emacs mode based on common modern interface and ergonomics." tar ((:commit . "ac70b2563fb6e3d69ea382fddc87b5721c20c292") (:url . "https://github.com/ergoemacs/ergoemacs-mode") (:keywords "convenience"))]) (erefactor . [(0 7 0) ((cl-lib (0 3))) "Emacs-Lisp refactoring utilities" single ((:commit . "fde3fd42c815c76e8015f69518a92f6bfcfde990") (:url . "https://github.com/mhayashi1120/Emacs-erefactor") (:keywords "extensions" "tools" "maint"))]) (ercn . [(1 1 1) nil "Flexible ERC notifications" single ((:commit . "73b00dadf83b97dd9edd8381a4b27f583c08b7f6") (:url . "http://www.github.com/leathekd/ercn"))]) (erc-youtube . [(0 1) nil "Show info about a YouTube URL in an ERC buffer." single ((:commit . "97054ba8475b442e2aa81e5a291f668b7f28697f") (:keywords "multimedia"))]) (erc-twitch . [(1 1) ((json (1 3)) (erc (5 0))) "Support for Twitch emotes for ERC." single ((:commit . "6938191c787d66fef4c13674e0a98a9d64eff364") (:url . "https://github.com/vibhavp/erc-twitch") (:keywords "twitch" "erc" "emotes"))]) (erc-hl-nicks . [(1 3 2) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single ((:commit . "be181920ce6af0ab5d00d1c638e4e598b3998643") (:url . "http://www.github.com/leathekd/erc-hl-nicks"))]) (erc-hipchatify . [(0 1) ((emacs (24 2)) (s (1 10 0)) (company (0 8 11)) (alert (1 2)) (request (0 2 0)) (flx-ido (0 6 1))) "Provide emoticons and html rendering for HipChat" single ((:url . "https://bitbucket.org/seanfarley/erc-hipchatify") (:keywords "erc" "bitlbee" "hipchat" "multimedia"))]) (erc-crypt . [(1 6) ((cl-lib (0 5))) "Symmetric Encryption for ERC" single ((:commit . "731f9264a5bf08a8fc0b5ce69e72058c86f873a5") (:url . "https://github.com/atomontage/erc-crypt") (:keywords "comm"))]) (epm . [(0 1 -2 2) ((emacs (24 3)) (epl (0 8))) "Emacs Package Manager" tar ((:commit . "ee004d00c8c8fbe32c4e5baf6279c5e68dc5f201") (:url . "https://github.com/xuchunyang/epm"))]) (epl . [(0 8) ((cl-lib (0 3))) "Emacs Package Library" single ((:commit . "a76ec344a7fee3ca7e7dfb98b86ebc3b8c1a3837") (:url . "http://github.com/cask/epl") (:keywords "convenience"))]) (epkg . [(2 3 0) ((closql (0 3 3)) (dash (2 13 0)) (emacs (25 1))) "browse the Emacsmirror package database" tar ((:commit . "deb9affaadce11c356df53b6b62ab376ef652d16") (:url . "https://github.com/emacscollective/epkg") (:keywords "tools"))]) (epc . [(0 1 1) ((concurrent (0 3 1)) (ctable (0 1 2))) "A RPC stack for the Emacs Lisp" tar ((:commit . "16e975efad63093a1f1f7b59f8fda5a3cf34f2a0") (:url . "https://github.com/kiwanami/emacs-epc") (:keywords "lisp" "rpc"))]) (eopengrok . [(0 5 0) ((s (1 9 0)) (dash (2 10 0)) (magit (2 1 0)) (cl-lib (0 5))) "opengrok interface for emacs" single ((:commit . "11c99f7e1e2c1c7d70cbda496cb5b6c7f6e4082a") (:keywords "tools"))]) (ensime . [(1 0 1) ((scala-mode (0 22)) (sbt-mode (0 2)) (yasnippet (0 9 1)) (company (0 8 12)) (dash (2 11 0)) (s (1 10 0)) (popup (0 5 3))) "ENhanced Scala Interaction Mode for Emacs" tar ((:commit . "2b4d4cd764b9fa4757738a6dae87f4d1e99686d6") (:url . "https://github.com/ensime/ensime-emacs") (:keywords "languages"))]) (enotify . [(0 1 3) nil "No description available." tar ((:commit . "75c84b53703e5d52cb18acc9251b87ffa400f388"))]) (enlive . [(0 0 1) nil "query html document with css selectors" single ((:commit . "60facaf8bc48b660d209551c0ce4d17e5c907ab8") (:url . "http://github.com/zweifisch/enlive") (:keywords "css" "selector" "query"))]) (enh-ruby-mode . [(20170417) ((emacs (24))) "Major mode for editing Ruby files" tar ((:commit . "2e483fe316ff993c80eafcf4ce4defd87d97776d") (:url . "http://github.com/zenspider/Enhanced-Ruby-Mode") (:keywords "languages elisp" "ruby"))]) (engine-mode . [(2 0 0) nil "Define and query search engines from within Emacs." single ((:commit . "243d04691475b47a4453ad7106d8268ca14d9f28") (:url . "https://github.com/hrs/engine-mode/engine-mode.el"))]) (emr . [(0 3 6) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1))) "Emacs refactoring system." tar ((:commit . "fd20fc1887e2ebcf752f0170b1f3bf697043fd4b") (:keywords "tools" "convenience" "refactoring"))]) (emojify . [(0 4) ((seq (1 11)) (ht (2 0)) (emacs (24 3))) "Display emojis in Emacs" tar ((:commit . "4eccfc7ce43d4dfd3cf65ea86b2975abb4b4e9ad") (:url . "https://github.com/iqbalansari/emacs-emojify") (:keywords "multimedia" "convenience"))]) (emoji-fontset . [(0 1 1) nil "Set font face for Emoji." single ((:commit . "e460c9a08e48ec4103e38a7a04acae20880149a9") (:keywords "emoji" "font" "config"))]) (emoji-cheat-sheet-plus . [(1 2 1) ((emacs (24)) (helm (1 6 4))) "emoji-cheat-sheet for emacs" tar ((:commit . "96a003127d646a2683d81ca906a17eace0a6413e") (:url . "https://github.com/syl20bnr/emacs-emoji-cheat-sheet-plus") (:keywords "emacs" "emoji"))]) (emms-state . [(0 2) ((emms (0))) "Display track description and playing time in the mode line" single ((:commit . "77930300222333b71eafd495cc1fee3a3585eb23") (:url . "https://github.com/alezost/emms-state.el") (:keywords "emms"))]) (emms-player-simple-mpv . [(0 4 0) ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) "An extension of emms-player-simple.el for mpv JSON IPC" tar ((:commit . "bcc056364df5f405716006a8b7bb90102a57f62f") (:url . "https://github.com/momomo5717/emms-player-simple-mpv") (:keywords "emms" "mpv"))]) (emms-player-mpv . [(0 0 12) ((emms (0))) "mpv support for EMMS" single ((:commit . "8c72282c98f9b10601e9a6901277040cda4b33aa") (:url . "https://github.com/dochang/emms-player-mpv/") (:keywords "multimedia" "emms" "mpv"))]) (emms-mode-line-cycle . [(0 2 5) ((emacs (24)) (emms (4 0))) "Display the emms mode line as a ticker" single ((:commit . "2c2f395e484a1d345050ddd61ff5fab71a92a6bc") (:url . "https://github.com/momomo5717/emms-mode-line-cycle") (:keywords "emms" "mode-line"))]) (emms . [(4 3) nil "The Emacs Multimedia System" tar ((:commit . "4cb3ae341847e8e8586373a95a458a453469812d") (:keywords "emms" "mp3" "mpeg" "multimedia"))]) (emmet-mode . [(1 0 8) nil "Unofficial Emmet's support for emacs" single ((:commit . "bf76d717c60f33d223cdac35513105e9f9244885") (:url . "https://github.com/smihica/emmet-mode") (:keywords "convenience"))]) (embrace . [(0 1 3) ((cl-lib (0 5)) (expand-region (0 10 0))) "Add/Change/Delete pairs based on `expand-region'" single ((:commit . "a57b4be5d60daf8c176f9bd35770540c2d3963c9") (:keywords "extensions"))]) (emamux . [(0 14) ((emacs (24 3))) "Interact with tmux" single ((:commit . "573dd1cf18584a1fd240efb16c7726b6fd790b73") (:url . "https://github.com/syohex/emacs-emamux"))]) (emacsshot . [(0 4) nil "Snapshot a frame or window from within Emacs" single ((:commit . "f2f8996d877ece5469c459c9bb7f33fe43c95822") (:url . "https://github.com/marcowahl/emacsshot") (:keywords "convenience"))]) (emacsql-sqlite . [(2 0 2) ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) "EmacSQL back-end for SQLite" tar ((:commit . "c93f52159fc5117f2ba1fbdc16876ae4d8edf12b") (:url . "https://github.com/skeeto/emacsql"))]) (emacsql-psql . [(2 0 2) ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) "EmacSQL back-end for PostgreSQL via psql and pg" tar ((:commit . "c93f52159fc5117f2ba1fbdc16876ae4d8edf12b") (:url . "https://github.com/skeeto/emacsql"))]) (emacsql-mysql . [(2 0 2) ((emacs (24 3)) (cl-lib (0 3)) (emacsql (2 0 0))) "EmacSQL back-end for MySQL" single ((:commit . "c93f52159fc5117f2ba1fbdc16876ae4d8edf12b") (:url . "https://github.com/skeeto/emacsql"))]) (emacsql . [(2 0 2) ((emacs (24 3)) (cl-lib (0 3)) (finalize (1 0 0))) "high-level SQL database front-end" tar ((:commit . "c93f52159fc5117f2ba1fbdc16876ae4d8edf12b") (:url . "https://github.com/skeeto/emacsql"))]) (emacsc . [(1 2 20131027) nil "helper for emacsc(1)" tar ((:commit . "69607bdc3a0c070e924a3bcac93180f917992368") (:url . "https://github.com/knu/emacsc") (:keywords "tools"))]) (emacsagist . [(1 0 0) ((cl-lib (0 5))) "Search Packagist.org packages without leaving Emacs" single ((:commit . "aba342ba59c254a88017f25e9fb7a8cd6f2fda83") (:url . "http://github.com/echosa/emacsagist") (:keywords "tools"))]) (emacs-setup . [(1 0) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar ((:commit . "cc36ad5318c6c0e65d1b9ff8dff5ea2437675de2"))]) (elx . [(1 1 0) ((emacs (24 4))) "extract information from Emacs Lisp libraries" single ((:commit . "6ce9a2f14ecf7263e71a699e058293f0343bfe4d") (:url . "https://github.com/tarsius/elx") (:keywords "docs" "libraries" "packages"))]) (elwm . [(0 0 2) ((dash (1 1 0))) "Minimalistic window manager for emacs" single ((:commit . "c33b183f006ad476c3a44dab316f580f8b369930") (:url . "https://github.com/Fuco1/elwm") (:keywords "docs"))]) (elscreen-persist . [(0 2 0) ((elscreen (1 4 6)) (revive (2 19))) "persist the elscreen across sessions" single ((:commit . "652b4c738f92c518ead69343ebfcf66bc2a0254c") (:keywords "elscreen" "frames"))]) (elscreen-mew . [(1 0 2) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single ((:commit . "89871fad690ae161dc076e16ef481b1965612077") (:url . "https://github.com/masutaka/elscreen-mew"))]) (elscreen-fr . [(0 0 3) ((elscreen (0)) (seq (1 11))) "Use frame title as screen tab" single ((:commit . "b9c11f80d277086d5d5bf88623e15fc7adbbbe3c") (:url . "http://github.com/rocher/elscreen-fr"))]) (elpy . [(1 15 1) ((company (0 9 2)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0)) (s (1 11 0))) "Emacs Python Development Environment" tar ((:commit . "55ee3d57872c87cb640abd5d63ac1887f9e8dc5d"))]) (elpa-mirror . [(2 1 0) nil "Create local package repository" single ((:commit . "9cf096448b69c795b20aab89557e9add6029b13c") (:url . "http://github.com/redguardtoo/elpa-mirror") (:keywords "cloud" "mirror" "elpa"))]) (elpa-clone . [(0 0 6) ((emacs (24 4)) (cl-lib (0))) "Clone ELPA archive" single ((:commit . "92f4c9d3570ad002575a90d0cc4a522c203a1110") (:url . "https://github.com/dochang/elpa-clone") (:keywords "comm" "elpa" "clone" "mirror"))]) (elpa-audit . [(0 4) nil "Handy functions for inspecting and comparing package archives" single ((:commit . "a7a1806278c73ea6cb6d235714e7bc8088971df5") (:url . "https://github.com/purcell/elpa-audit") (:keywords "maint"))]) (elmine . [(0 3) nil "No description available." single ((:commit . "091f61c70c9e7630a74b7b127488051d143a35e7"))]) (elmacro . [(1 1 0) ((s (1 11 0)) (dash (2 13 0))) "Convert keyboard macros to emacs lisp" single ((:commit . "9ed19a362b63d9c7436a78feb91bc694194cfefe") (:url . "https://github.com/Silex/elmacro") (:keywords "macro" "elisp" "convenience"))]) (elm-mode . [(0 20 3) ((f (0 17)) (let-alist (1 0 4)) (s (1 7 0)) (emacs (24))) "Major mode for Elm" tar ((:commit . "29f50a940113d793a21998f3bb414fdd9b0c5daa") (:url . "https://github.com/jcollard/elm-mode"))]) (elixir-yasnippets . [(0 0 1) ((yasnippet (0 8 0))) "Yasnippets for Elixir" tar ((:commit . "6b55c88ce483932f226b6bca0212b589d1d393ea"))]) (elixir-mode . [(2 3 1) ((emacs (24)) (pkg-info (0 4))) "Major mode for editing Elixir files" tar ((:commit . "a1f4d60ec555574c945201359d2e32b183c69f4b") (:url . "https://github.com/elixir-lang/emacs-elixir") (:keywords "languages" "elixir"))]) (elisp-slime-nav . [(0 9) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single ((:commit . "0e96d9f1f0d334f09414b509d44d5c000b51f432") (:url . "https://github.com/purcell/elisp-slime-nav") (:keywords "navigation" "slime" "elisp" "emacs-lisp"))]) (elisp-refs . [(1 1) ((dash (2 12 0)) (f (0 18 2)) (list-utils (0 4 4)) (loop (2 1)) (s (1 11 0))) "find callers of elisp functions or macros" single ((:commit . "e309c87a91012305ecb37124a758609c64e0ca4a") (:keywords "lisp"))]) (elisp-format . [(0 5 7) nil "Format elisp code" single ((:url . "http://www.emacswiki.org/emacs/download/elisp-format.el"))]) (elfeed-web . [(2 2 0) ((simple-httpd (1 4 3)) (elfeed (1 4 0)) (emacs (24 1))) "web interface to Elfeed" tar ((:commit . "79077efc34aad25bb43cf46a28a69a308196c972"))]) (elfeed . [(2 2 0) ((emacs (24 3))) "an Emacs Atom/RSS feed reader" tar ((:commit . "79077efc34aad25bb43cf46a28a69a308196c972"))]) (elf-mode . [(0 1 0) ((emacs (24 3))) "Show symbols in binaries" single ((:commit . "cd280d683cd3341d8bb31af6db7e3b74a133e6ab") (:url . "https://github.com/abo-abo/elf-mode") (:keywords "matching"))]) (electric-operator . [(1 0 0) ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) "Automatically add spaces around operators" single ((:commit . "16df9e16da8efe25d410ba17165d7f5c1ad4e043") (:url . "https://github.com/davidshepherd7/electric-operator") (:keywords "electric"))]) (eldoc-eval . [(1 1) nil "Enable eldoc support when minibuffer is in use." single ((:commit . "deca5e39f31282a06531002d289258cd099433c0"))]) (el-x . [(0 3 1) nil "main entry point for el-x package" tar ((:commit . "e96541c1f32e0a3aca4ad0a0eb382bd898250163") (:keywords "lisp"))]) (el-spice . [(0 2 2) ((thingatpt+ (0))) "Extra spice for emacs lisp programming" tar ((:commit . "53921ffe9a84d9395eea90709309d3d5529921ea") (:url . "https://github.com/vedang/el-spice") (:keywords "configuration"))]) (el-patch . [(1 1 2) ((emacs (25))) "Future-proof your Emacs Lisp customizations!" single ((:commit . "ad6a64e9f24f6b58f0a08e11f76b5152da46c74c") (:url . "https://github.com/raxod502/el-patch") (:keywords "extensions"))]) (el-mock . [(1 25 1) nil "Tiny Mock and Stub framework in Emacs Lisp" single ((:commit . "3069931de75bb6704ecf565af5390009dc4dae00") (:url . "http://github.com/rejeep/el-mock.el") (:keywords "lisp" "testing" "unittest"))]) (el-init-viewer . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) "Record viewer for el-init" single ((:commit . "dcc595ba51b5aff972292278aa528c7ddb46f1b5"))]) (el-init . [(0 2 0) ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) "A loader inspired by init-loader" single ((:commit . "25fd21d820bca1cf576b8f70c8d5a3bc76792597") (:url . "https://github.com/HKey/el-init"))]) (el-get . [(5 1) nil "Manage the external elisp bits and pieces you depend upon" tar ((:commit . "bfffd553f4c72b818e9ee94f05458eae7a16056b") (:url . "http://www.emacswiki.org/emacs/el-get") (:keywords "emacs" "package" "elisp" "install" "elpa" "git" "git-svn" "bzr" "cvs" "svn" "darcs" "hg" "apt-get" "fink" "pacman" "http" "http-tar" "emacswiki"))]) (el-autoyas . [(0 5) nil "Automatically create Emacs-Lisp Yasnippets" tar ((:commit . "bde0251ecb504f585dfa27c205c8e312655310cc") (:url . "https://github.com/mlf176f2/el-autoyas.el") (:keywords "emacs" "lisp" "mode" "yasnippet"))]) (eink-theme . [(1 0 0) nil "E Ink color theme" single ((:commit . "93d25c097b105594472c4f99d693f439b4b709f0") (:url . "http://github.com/maio/eink-emacs"))]) (ein . [(0 12 8) ((websocket (1 6)) (request (0 3)) (deferred (0 3)) (cl-generic (0 3)) (dash (2 13 0))) "Emacs IPython Notebook" tar ((:commit . "2dcec6a2c4d3258a92f77a35de1899cc00d2f537"))]) (eide . [(2 1 2) nil "IDE interface" tar ((:commit . "5f046ea74eee7af9afbd815c2bfd11fa9c72e6b3"))]) (egison-mode . [(3 6 4) nil "Egison editing mode" single ((:commit . "62c99118f32dd23a088e2d9c0d6b7b755206cac6") (:url . "https://github.com/egisatoshi/egison3/blob/master/elisp/egison-mode.el"))]) (egg . [(1 0 9) nil "Emacs Got Git - Emacs interface to Git" tar ((:commit . "499894195528203cfcf309228bf7578dd8cd5698") (:keywords "git" "version control" "release management"))]) (edts . [(0 1 0) nil "No description available." tar ((:commit . "61855db6f1315ea45f97ed95b47a3f182ec4c6be"))]) (edn . [(1 1 2) ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) "Support for reading and writing the edn data format from elisp" single ((:commit . "bb035dcbeccccdb2c899d2cce8e81486764d0ad7") (:url . "https://www.github.com/expez/edn.el") (:keywords "edn" "clojure"))]) (editorconfig-custom-majormode . [(0 0 1) ((editorconfig (0 6 0))) "Decide major-mode from EditorConfig" single ((:commit . "338742889240bad23f8e90c0a89b8e641ce2befa") (:url . "https://github.com/10sr/editorconfig-custom-major-mode-el") (:keywords "editorconfig" "util"))]) (editorconfig . [(0 7 10) ((cl-lib (0 5))) "EditorConfig Emacs Plugin" tar ((:commit . "1543835ce00412c3cd34a61497af5f68ead250a6") (:url . "https://github.com/editorconfig/editorconfig-emacs#readme"))]) (edit-server . [(1 13) nil "server that responds to edit requests from Chrome" single ((:commit . "f0db18f0d6e9885e4aef3ace8342fd6f635fadf6") (:url . "https://github.com/stsquad/emacs_chrome"))]) (edit-list . [(0 3) nil "edit a single list" single ((:commit . "f460d3f9e208a4e606fe6ded307f1b011916ca71") (:url . "http://mwolson.org/static/dist/elisp/edit-list.el"))]) (edit-indirect . [(0 1 4) ((emacs (24 3))) "Edit regions in separate buffers" single ((:commit . "1d1dae842505e5ff09644529deec87c056e1b14e") (:url . "https://github.com/Fanael/edit-indirect"))]) (ede-php-autoload-drupal . [(0 1 1) ((ede-php-autoload (1 0 0)) (f (0 19 0)) (s (1 7 0))) "Drupal support for ede-php-autoload" single ((:commit . "6b62ffa7a69f52aab79067eaed80b2720f7e3fc2") (:keywords "programming" "php" "drupal"))]) (ede-php-autoload-composer-installers . [(0 1 0) ((ede-php-autoload (20170212 450)) (f (0 19 0)) (s (1 7 0))) "Composer installers support for ede-php-autoload" single ((:commit . "f9942e07d0773444040084ac84652e69f0fd46d5") (:url . "https://github.com/xendk/ede-php-autoload-composer-installers") (:keywords "programming" "php"))]) (ede-php-autoload . [(1 1 0) nil "Simple EDE PHP Project" tar ((:commit . "28a989232c276ee7fc5112c9050b1c29f628be9f") (:url . "https://github.com/stevenremot/ede-php-autoload") (:keywords "php" "project" "ede"))]) (edbi-minor-mode . [(0 1) ((edbi (0 1 3))) "Use edbi with regular SQL files." single ((:commit . "566a2141a6eb9d9d5d7e1bd7c251d1c5e8f0d2ec") (:url . "https://github.com/proofit404/edbi-minor-mode"))]) (edbi . [(0 1 2) ((concurrent (0 3 1)) (ctable (0 1 1)) (epc (0 1 1))) "Emacs Database Interface" tar ((:commit . "39b833d2e51ae5ce66ebdec7c5425ff0d34e02d2"))]) (ecukes . [(0 6 15) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar ((:commit . "2bba6266a3fff772cd54a6cd1b1aee2c36872aa5"))]) (eclim . [(0 4) ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0)) (cl-lib (0 5)) (yasnippet (0 10 0))) "An interface to the Eclipse IDE." tar ((:commit . "8203fbf8544e65324a948a67718f7a16ba2d52e6"))]) (ecb . [(2 24) nil "a code browser for Emacs" tar ((:keywords "browser" "code" "programming" "tools"))]) (ebib . [(2 11 6) ((dash (2 5 0)) (seq (2 15)) (parsebib (2 3)) (emacs (24 4))) "a BibTeX database manager" tar ((:commit . "9e5f3377a5e9c6956300de3872c89cd902c2cfc6") (:keywords "text" "bibtex"))]) (ebf . [(1 0 0) ((dash (2 11 0)) (dash-functional (1 2 0)) (cl-lib (0 5))) "brainfuck language transpiler to Emacs Lisp" tar ((:commit . "d0bd4fe1abbe327e7d9228eff09927fec57e8378") (:url . "http://github.com/rexim/ebf"))]) (ebal . [(0 2 1) ((emacs (24 4)) (f (0 18 0)) (ido-completing-read+ (3 6))) "Emacs interface to Cabal and Stack" single ((:commit . "2d274ee56d5a61152e846f9a759ebccd70dc8eb1") (:url . "https://github.com/mrkkrp/ebal") (:keywords "convenience" "cabal" "haskell"))]) (easy-repeat . [(0 2) ((emacs (24 4))) "Repeat easily" single ((:commit . "060f0e6801c82c40c06961dc0528a00e18947a8c") (:url . "https://github.com/xuchunyang/easy-repeat.el") (:keywords "repeat" "convenience"))]) (easy-kill-extras . [(0 9 4 1) ((easy-kill (0 9 4))) "Extra functions for easy-kill." tar ((:commit . "e60a74d7121eff7c263098aea2901cc05a5f6acd") (:url . "https://github.com/knu/easy-kill-extras.el") (:keywords "killing" "convenience"))]) (easy-kill . [(0 9 3) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" single ((:commit . "e3b2442e2096cefff94ea8656e49af07fee58f47") (:url . "https://github.com/leoliu/easy-kill") (:keywords "killing" "convenience"))]) (easy-hugo . [(1 0 0) ((emacs (24 4))) "Write blogs made with hugo by markdown or org-mode" single ((:commit . "226fa5c661391c7f8317a24c9f757396e1900371") (:url . "https://github.com/masasam/emacs-easy-hugo"))]) (e2wm-term . [(0 0 5) ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perspective of e2wm.el for work in terminal" single ((:commit . "65b5ac88043d5c4048920a048f3599904ca55981") (:url . "https://github.com/aki2o/e2wm-term") (:keywords "tools" "window manager"))]) (e2wm-sww . [(0 0 2) ((e2wm (1 2))) "Plugin of e2wm.el to switch plugin quickly" single ((:commit . "1063f9854bd34db5ac771cd1036cecc89834729d") (:url . "https://github.com/aki2o/e2wm-sww") (:keywords "tools" "window manager"))]) (e2wm-pkgex4pl . [(0 0 1) ((e2wm (1 2)) (plsense-direx (0 2 0))) "Plugin of e2wm.el for package explorer of Perl" single ((:commit . "7ea994450727190c4f3cb46cb429ba41b692ecc0") (:url . "https://github.com/aki2o/e2wm-pkgex4pl") (:keywords "tools" "window manager" "perl"))]) (e2wm-direx . [(0 0 5) ((e2wm (1 2)) (direx (0 1 -3))) "Plugin of e2wm.el for direx.el" single ((:commit . "f319625b56c44e601af7c17fc6dbb88e5d70ebae") (:url . "https://github.com/aki2o/e2wm-direx") (:keywords "tools" "window manager" "convenience"))]) (e2wm-R . [(0 4) ((e2wm (1 2))) "some e2wm plugin and perspective for GNU R" single ((:commit . "fe17906bf48324032a1beaec9af32b9b49ea9125") (:keywords "window manager" "convenience" "e2wm"))]) (e2wm . [(1 4) ((window-layout (1 4))) "simple window manager for emacs" tar ((:commit . "4353d3394c77a49f8f0291c239858c8c5e877549") (:keywords "tools" "window manager"))]) (dynamic-ruler . [(0 1 6) nil "Displays a dynamic ruler at point." single ((:commit . "c9c0de6fe5721f06b50e01d9b4684b519c71b367") (:url . "http://rocher.github.io/dynamic-ruler") (:keywords "ruler" "tools" "convenience"))]) (dynamic-fonts . [(0 6 4) ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Set faces based on available fonts" single ((:commit . "d318498b377d8941c7420f51616c78e3440d00f5") (:url . "http://github.com/rolandwalker/dynamic-fonts") (:keywords "faces" "frames"))]) (dyalog-mode . [(0 7) ((cl-lib (0 2))) "Major mode for editing Dyalog APL source code" tar ((:url . "https://bitbucket.org/harsman/dyalog-mode/") (:keywords "languages"))]) (dummy-h-mode . [(1 0 1) nil "switch major mode to c-/c++-/objc-mode on .h file" single ((:keywords "c-mode" "c++-mode" "objc-mode"))]) (dumb-jump . [(0 5 0) ((emacs (24 3)) (f (0 17 3)) (s (1 11 0)) (dash (2 9 0)) (popup (0 5 3))) "jump to definition for multiple languages without configuration." single ((:commit . "c96467b3079495353350a6b00fd2e6052b3a3fd0") (:keywords "programming"))]) (ducpel . [(0 1) ((cl-lib (0 5))) "Logic game with sokoban elements" tar ((:commit . "ece785baaa102bd2e9d54257af3a92bacc5757bc") (:url . "https://github.com/alezost/ducpel") (:keywords "games"))]) (dtrt-indent . [(0 2 1) nil "Adapt to foreign indentation offsets" tar ((:commit . "a54871bedadabede505b3913ee1039f5ab36cad2") (:keywords "convenience" "files" "languages" "c"))]) (drupal-spell . [(0 2 2) nil "Aspell extra dictionary for Drupal" tar ((:commit . "a69f5e3b62c4c0da74ce26c1d00d5b8f7395e4ae") (:url . "https://github.com/arnested/drupal-spell") (:keywords "wp"))]) (drupal-mode . [(0 7 1) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar ((:commit . "1e6f973ed5dfdbbfda96c4ab266bd8ef3d6436d7") (:url . "https://github.com/arnested/drupal-mode") (:keywords "programming" "php" "drupal"))]) (drag-stuff . [(0 3 0) nil "Drag stuff (lines, words, region, etc...) around" tar ((:commit . "d49fe376d24f0f8ac5ade67b6d7fccc2487c81db"))]) (draft-mode . [(0 1 1) nil "Rough drafting for Emacs." single ((:commit . "4779fb32daf53746459da2def7e08004492d4f18") (:url . "https://github.com/gaudecker/draft-mode") (:keywords "draft" "drafting"))]) (dracula-theme . [(1 2 5) ((emacs (24))) "Dracula Theme" single ((:commit . "509293bebeaf26ee662ff35a28a7af019190f286") (:url . "https://github.com/zenorocha/dracula-theme"))]) (dr-racket-like-unicode . [(1 1 0) ((emacs (24 1))) "DrRacket-style unicode input" single ((:commit . "4953f1c8a68472e157a0dcd0a7e35a4ec2577133") (:keywords "i18n" "tools"))]) (downplay-mode . [(0 1) nil "focus attention on a region of the buffer" single ((:commit . "225a4b3ca09e6f463dfdd54941c98b02be8d574c") (:url . "https://github.com/tobias/downplay-mode/"))]) (doom-themes . [(1 2 5) ((emacs (24 4)) (all-the-icons (1 0 0)) (cl-lib (0 5))) "a pack of themes inspired by Atom One" tar ((:commit . "d04875c9c7ce21d5f51dfc541a5d03efddac7728") (:url . "https://github.com/hlissner/emacs-doom-theme") (:keywords "dark" "blue" "atom" "one" "theme" "neotree" "nlinum" "icons"))]) (doom . [(1 3) ((cl-lib (0 5))) "DOM implementation and manipulation library" single ((:commit . "5e2d3f54e5b84eaa533cbdb6cf17b1b6009f0730") (:url . "http://www.github.com/toroidal-code/doom.el/") (:keywords "xml" "doom"))]) (dokuwiki-mode . [(0 1 1) nil "Major mode for DokuWiki document" single ((:commit . "e4e116f6fcc373e3f5937c1a7daa5c2c9c6d3fa1") (:url . "https://github.com/kai2nenobu/emacs-dokuwiki-mode") (:keywords "hypermedia" "text" "dokuwiki"))]) (dockerfile-mode . [(1 2) nil "Major mode for editing Docker's Dockerfiles" single ((:commit . "9a75fcd119c5b2a1d723d440bbe4b1db56df90cc"))]) (docker-tramp . [(0 1) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for docker containers" tar ((:commit . "d8b510365d8e65551f4f792f251e7212411708c3") (:url . "https://github.com/emacs-pe/docker-tramp.el") (:keywords "docker" "convenience"))]) (docker . [(0 5 2) ((emacs (24 4)) (dash (2 12 1)) (docker-tramp (0 1)) (magit-popup (2 6 0)) (s (1 11 0)) (tablist (0 70)) (json-mode (1 7 0))) "Emacs interface to Docker" tar ((:commit . "2e9438cf132da1bbb25b93769754c29bd7e48a6c") (:url . "https://github.com/Silex/docker.el") (:keywords "filename" "convenience"))]) (dix-evil . [(0 3 5) ((dix (0 3 0)) (evil (1 0 7))) "optional evil-integration with dix.el" single ((:commit . "86880826a0cc878e2e5d50bc835eed5c8e2f001a") (:url . "http://wiki.apertium.org/wiki/Emacs") (:keywords "languages"))]) (dix . [(0 3 5) ((cl-lib (0 5))) "minor mode for editing Apertium XML dictionary files" tar ((:commit . "86880826a0cc878e2e5d50bc835eed5c8e2f001a") (:url . "http://wiki.apertium.org/wiki/Emacs") (:keywords "languages"))]) (ditz-mode . [(0 3) nil "Emacs interface to Ditz issue tracking system" single ((:keywords "tools"))]) (dispass . [(1 1 2) nil "Emacs wrapper for DisPass" single ((:commit . "38b880e72cfe5e65179b16791903b0900c73eff4") (:url . "http://projects.ryuslash.org/dispass.el/") (:keywords "processes"))]) (discover-my-major . [(1 0) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" single ((:commit . "57d76fd21ec54706289cf9396fc871250569951e") (:url . "https://github.com/steckerhalter/discover-my-major") (:keywords "discover" "help" "major-mode" "keys"))]) (discover . [(0 3) ((makey (0 3))) "discover more of Emacs" single ((:commit . "bbfda2b4e429985a8fa7971d264c942767cfa816"))]) (disable-mouse . [(0 2) nil "Disable mouse commands globally" single ((:commit . "d1c52d80ed2149d0751afd948ffc2d9f80f589ac") (:url . "https://github.com/purcell/disable-mouse") (:keywords "mouse"))]) (direx-grep . [(0 1 0) ((direx (0 1 -3))) "Grep node of direx.el using incremental search like anything.el/helm.el" single ((:commit . "1109a512a80b2673a70b18b8568514049017faad") (:url . "https://github.com/aki2o/direx-grep") (:keywords "convenience"))]) (direx . [(1 0 0) nil "Simple Directory Explorer" tar ((:commit . "423caeed13249e37afc937dc8134cb3c53e0f111") (:keywords "convenience"))]) (direnv . [(1 2 1) ((emacs (24 4)) (dash (2 13 0)) (with-editor (2 5 10))) "direnv support for emacs" single ((:commit . "3c632dd1fdf0ad1edb6d9b0a4a09cdbb420c27aa") (:url . "https://github.com/wbolster/emacs-direnv") (:keywords "direnv" "environment"))]) (diredful . [(1 10) nil "colorful file names in dired buffers" single ((:commit . "b17b3087e0084a5571a9ac4d47ccfc36d96b109e") (:url . "https://github.com/thamer/diredful") (:keywords "dired" "colors" "extension" "widget"))]) (dired-toggle-sudo . [(1 0) nil "Browse directory with sudo privileges." single ((:commit . "02449dbda4e168f99fe5352c9628df5d39e11483") (:keywords "emacs" "dired"))]) (dired-single . [(0 1 3) nil "Reuse the current dired buffer to visit a directory" single ((:commit . "5b002927fd8c7f954eec187227ac59dcaa8edfa3") (:keywords "dired" "reuse" "buffer"))]) (dired-quick-sort . [(0 1) ((hydra (0 13 0))) "Persistent quick sorting of dired buffers in various ways." single ((:commit . "fe39cfb2d4a7ba6b30f98134548b4e4bac67c469") (:url . "https://gitlab.com/xuhdev/dired-quick-sort#dired-quick-sort") (:keywords "convenience" "files"))]) (dired-k . [(0 19) ((emacs (24 3))) "highlight dired buffer by file size, modified time, git status" tar ((:commit . "3f0b9315f87b0f930d51089e311d41282d5f8b15") (:url . "https://github.com/syohex/emacs-dired-k"))]) (dired-imenu . [(0 5 0) nil "imenu binding for dired mode" single ((:commit . "610e21fe0988c85931d34894d3eee2442c79ab0a") (:url . "https://github.com/DamienCassou/dired-imenu") (:keywords "dired" "imenu"))]) (dired-icon . [(0 5) ((emacs (24 3))) "A minor mode to display a list of associated icons in dired buffers." tar ((:commit . "dbace8d2250f84487d31b39050fcdc260fcde804") (:url . "https://gitlab.com/xuhdev/dired-icon") (:keywords "dired" "files"))]) (dired-hide-dotfiles . [(0 1) ((emacs (25 1))) "Hde dotfiles in dired" single ((:commit . "32cf3b6f90dc56f6ff271c28d827aab303bc6221") (:url . "https://github.com/mattiasb/.emacs.d") (:keywords "files"))]) (dired-fdclone . [(1 5 2) nil "dired functions and settings to mimic FDclone" single ((:commit . "8144c013d46c55b0471f31cdc3b5ead303286cbf") (:url . "https://github.com/knu/dired-fdclone.el") (:keywords "unix" "directories" "dired"))]) (dired-efap . [(0 8) nil "Edit Filename At Point in a dired buffer" single ((:commit . "2b849bc5c09d0b752a177495ea1b851ee821f5bf") (:keywords "dired" "environment" "files" "renaming"))]) (dired-atool . [(1 1 0) ((emacs (24))) "Pack/unpack files with atool on dired." single ((:commit . "a2470f805c8cfbeee459b000edaaa5474bac35f9") (:url . "https://github.com/HKey/dired-atool") (:keywords "files"))]) (dionysos . [(0 6 0) ((libmpdee (2 1 0)) (alert (1 2)) (s (1 11 0)) (dash (2 12 1)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Dionysos, a music player for Emacs" tar ((:commit . "98bc789d20e41020d6e62d63d3c78f8032fa4bf2") (:url . "https://github.com/nlamirault/dionysos") (:keywords "music"))]) (diminish . [(0 45) nil "Diminished modes are minor modes with no modeline display" single ((:commit . "0211de96b7cfba9c9dc8d2d392dbd4ccdb22bc65") (:url . "https://github.com/myrjola/diminish.el") (:keywords "extensions" "diminish" "minor" "codeprose"))]) (dim-autoload . [(2 0 0) nil "dim or hide autoload cookie lines" single ((:commit . "c91edab065f413910354940742b35bdffeb52029") (:url . "https://github.com/tarsius/dim-autoload") (:keywords "convenience"))]) (dim . [(0 1) ((emacs (24 4))) "Change mode-line names of major/minor modes" single ((:commit . "0c19a510580ebdc77e6db536f0f8ed2840b9b33e") (:url . "https://github.com/alezost/dim.el") (:keywords "convenience"))]) (digistar-mode . [(0 4) nil "major mode for Digistar scripts" single ((:commit . "0dcde58ec6e473042e55d4f283b223554546de5b") (:keywords "languages"))]) (diffview . [(1 0) nil "View diffs in side-by-side format" single ((:commit . "471dc36af93e68849bf2da0db991e186283b3546") (:url . "https://github.com/mgalgs/diffview-mode") (:keywords "convenience" "diff"))]) (diff-hl . [(1 8 4) ((cl-lib (0 2))) "Highlight uncommitted changes using VC" tar ((:commit . "e93367512080e540dc5dd126dfcb38b4a5e9415b") (:url . "https://github.com/dgutov/diff-hl") (:keywords "vc" "diff"))]) (dictionary . [(1 10) nil "No description available." single ((:commit . "9ef1672ecd367827381bbbc9af93685980083c5c"))]) (desktop-registry . [(1 2 0) nil "Keep a central registry of desktop files" single ((:commit . "244c2e7f9f0a1050aa8a47ad0b38f4e4584682dd") (:url . "http://projects.ryuslash.org/desktop-registry/") (:keywords "convenience"))]) (desktop+ . [(0 2) ((emacs (24 4)) (dash (2 11 0)) (f (0 17 2))) "Handle special buffers when saving & restoring sessions" single ((:commit . "a9cb8dd0af5071d9f148211b408c54306239381c") (:url . "https://github.com/ffevotte/desktop-plus"))]) (describe-number . [(0 3 1) ((yabin (1 1))) "Describe arbitrarily large number at point." single ((:commit . "40618345a37831804b29589849a785ef5aa5ac24") (:url . "https://github.com/netromdk/describe-number") (:keywords "describe" "value" "help"))]) (demangle-mode . [(1 2 1) ((cl-lib (0 1)) (emacs (24))) "Automatically demangle C++ symbols" single ((:commit . "0f9436f98225e0f5a5deecea4680c173e76f0322") (:url . "https://github.com/liblit/demangle-mode") (:keywords "c" "tools"))]) (deft . [(0 7) nil "quickly browse, filter, and edit plain text notes" single ((:commit . "4001a55cf5f79cdbfa00f1405e8a4645af4acd40") (:url . "http://jblevins.org/projects/deft/") (:keywords "plain text" "notes" "simplenote" "notational velocity"))]) (define-word . [(0 1 0) ((emacs (24 1))) "display the definition of word at point." single ((:commit . "38e2f94779652fc6280a51b68dc910431513a8e1") (:url . "https://github.com/abo-abo/define-word") (:keywords "dictionary" "convenience"))]) (deferred . [(0 5 1) ((emacs (24 4))) "Simple asynchronous functions for emacs lisp" single ((:commit . "d012a1ab50edcc2c44e3e49006f054dbff47cb6c") (:url . "https://github.com/kiwanami/emacs-deferred") (:keywords "deferred" "async"))]) (default-text-scale . [(0 1) nil "Easily adjust the font size in all frames" single ((:commit . "c90c08b9fe5f25474067a00c4a4babdb413b25b1") (:keywords "frames" "faces"))]) (dedicated . [(1 0 0) nil "A very simple minor mode for dedicated buffers" single ((:commit . "8275fb672f9cc4ba6682ebda0ef91db827e32992") (:keywords "dedicated" "buffer"))]) (decide . [(0 7) nil "rolling dice and other random things" single ((:commit . "90133687118c236142b8110571c463304b3192f9"))]) (debpaste . [(0 1 5) ((xml-rpc (1 6 7))) "Interface for getting/posting/deleting pastes from paste.debian.net" single ((:commit . "6f2a400665062468ebd03a2ce1de2a73d9084958") (:url . "http://github.com/alezost/debpaste.el") (:keywords "paste"))]) (datetime . [(0 2 1) ((emacs (24 1))) "Parsing, formatting and matching timestamps" single ((:commit . "3ecf9985250ecd441e91614b44cf12323af907c0") (:url . "https://github.com/doublep/datetime") (:keywords "lisp" "i18n"))]) (date-field . [(0 0 1) ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) "Date widget" single ((:commit . "11c9170d1f7b343233f7716d4c0a62be024c1654") (:url . "https://github.com/aki2o/emacs-date-field") (:keywords "widgets"))]) (date-at-point . [(0 1) nil "Add `date' to `thing-at-point' function" single ((:commit . "662f8350a83311503dc0aae47a28752f9f1270c9") (:url . "https://gitorious.org/alezost-emacs/date-at-point") (:keywords "convenience"))]) (dashboard . [(1 0 3) ((emacs (24 4)) (page-break-lines (0 11))) "A startup screen extracted from Spacemacs" single ((:commit . "cd9899342bc94e59aa42275554810e50d045aaa4") (:url . "https://github.com/rakanalh/emacs-dashboard") (:keywords "startup" "screen" "tools"))]) (dash-functional . [(2 13 0) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single ((:commit . "4ae329aa2160411c8b47794de067fcf29bc38a22") (:keywords "lisp" "functions" "combinators"))]) (dash . [(2 13 0) nil "A modern list library for Emacs" single ((:commit . "4ae329aa2160411c8b47794de067fcf29bc38a22") (:keywords "lists"))]) (dart-mode . [(0 15) ((cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23))) "Major mode for editing Dart files" single ((:commit . "e6635b390235cf16a8081763768cf925ca2d9133") (:url . "http://code.google.com/p/dart-mode") (:keywords "language"))]) (darktooth-theme . [(0 3 5) ((autothemer (0 2))) "From the darkness... it watches" single ((:url . "http://github.com/emacsfodder/emacs-theme-darktooth"))]) (darcula-theme . [(1 1) nil "Inspired by IntelliJ's Darcula theme" single ((:commit . "834202004507221c3bdf49457219a56760b13d22") (:url . "https://github.com/fommil/darcula-theme-emacs") (:keywords "faces"))]) (darcsum . [(1 3) nil "a pcl-cvs like interface for managing darcs patches" tar ((:keywords "completion" "convenience" "tools" "vc"))]) (dante . [(1 2) ((flycheck (0 30)) (emacs (25 1)) (dash (2 13 0))) "Development mode for Haskell" single ((:commit . "385dd8114bb9eaba44943f00f9f7aea71af7bf34") (:url . "https://github.com/jyp/dante") (:keywords "haskell" "tools"))]) (dad-joke . [(1 2) ((emacs (24))) "Get/display dad jokes" single ((:commit . "98e5e5ed4c57f6076afb55d75af66e787867d9f9") (:url . "https://github.com/davep/dad-joke.el") (:keywords "games"))]) (d-mode . [(2 0 9) nil "D Programming Language major mode for (X)Emacs" single ((:commit . "98af62e67026fee1dda9155e1a463917fc83802e") (:keywords "d" "programming" "language" "emacs" "cc-mode"))]) (cython-mode . [(0 26 2 2) nil "Major mode for editing Cython files" single ((:commit . "3ea17b707dde432c7b7b155aa227851eb2ef3eab"))]) (cyphejor . [(0 1 2) ((emacs (24 4))) "Shorten major mode names using user-defined rules" single ((:commit . "ef1e9d5067b5ae82af3c9f1d595d2751abc6fd0b") (:url . "https://github.com/mrkkrp/cyphejor") (:keywords "mode-line" "major-mode"))]) (cyberpunk-theme . [(1 19) nil "Cyberpunk Color Theme" single ((:commit . "8c3cc39bcff5def0d476c080b5248436da7f990f") (:keywords "color" "theme" "cyberpunk"))]) (cuda-mode . [(1 0 0) nil "NVIDIA CUDA Major Mode" single ((:commit . "c8cf7d92b8039cdd0bd525c258ab42f49a0f91cf") (:keywords "c" "languages"))]) (cubicaltt . [(1 0) ((emacs (24 1)) (cl-lib (0 5))) "Mode for cubical type theory" single ((:commit . "3257eadf70826fb3ef060c46f85b7a4d60464b1d") (:url . "https://github.com/mortberg/cubicaltt") (:keywords "languages"))]) (ctxmenu . [(0 3 0) ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) "Provide a context menu like right-click." tar ((:commit . "5c2376859562b98c07c985d2b483658e4c0e888e") (:url . "https://github.com/aki2o/emacs-ctxmenu") (:keywords "popup"))]) (ctags-update . [(1 0) nil "(auto) update TAGS in parent directory using exuberant-ctags" single ((:commit . "ff4f211e42df94fdeba376e62b65dc67f0388589") (:url . "https://github.com/jixiuf/ctags-update") (:keywords "exuberant-ctags" "etags"))]) (ctable . [(0 1 2) nil "Table component for Emacs Lisp" single ((:commit . "08a017bde6d24ea585e39ce2637bebe28774d316") (:url . "https://github.com/kiwanami/emacs-ctable") (:keywords "table"))]) (csv . [(2 1) nil "Functions for reading and parsing CSV files." single ((:commit . "aa1dfa1263565d5fac3879c21d8ddf5f8915e411") (:keywords "extensions" "data" "csv"))]) (csharp-mode . [(0 9 0) nil "C# mode derived mode" single ((:commit . "6c0a0d6cf602666d63a06c3652ce522b3a5a7661") (:url . "https://github.com/josteink/csharp-mode") (:keywords "c#" "languages" "oop" "mode"))]) (cryptol-mode . [(0 1 0) nil "Cryptol major mode for Emacs" single ((:commit . "a54d000d24757fad2a91ae2853b16a97ebe52771") (:url . "http://github.com/thoughtpolice/cryptol-mode") (:keywords "cryptol" "cryptography"))]) (crux . [(0 3 0) ((seq (1 11))) "A Collection of Ridiculously Useful eXtensions" single ((:commit . "5b3c8155a9e9fe6f189645d175976026a2dc7b8d") (:url . "https://github.com/bbatsov/crux") (:keywords "convenience"))]) (crm-custom . [(0 5) ((cl-lib (0 5))) "Alternate `completing-read-multiple' that uses `completing-read'" single ((:commit . "f1aaccf64306a5f99d9bf7ba815d7ea41c15518d") (:url . "https://github.com/DarwinAwardWinner/crm-custom") (:keywords "completion" "minibuffer" "multiple elements"))]) (cricbuzz . [(0 2 8) ((enlive (0 0 1)) (dash (2 13 0)) (s (1 11 0))) "Cricket scores from cricbuzz in emacs" single ((:commit . "5fe51347f5d6e7636ece5e904e4bdec0be21db45") (:url . "https://github.com/lepisma/cricbuzz.el") (:keywords "cricket" "score"))]) (creds . [(0 0 6 1) ((s (1 9 0)) (dash (2 5 0))) "A parser credentials file library (not limited to credentials entries)" tar ((:commit . "00ebefd10005c170b790a01380cb6a98f798ce5c"))]) (creamsody-theme . [(0 3 7) ((autothemer (0 2))) "Straight from the soda fountain." single ((:commit . "32fa3f4e461da92700523b1b20e7b28974c19a26") (:url . "http://github.com/emacsfodder/emacs-theme-creamsody"))]) (cpputils-cmake . [(5 5) nil "Easy real time C++ syntax check and intellisense if you use CMake" tar ((:commit . "55e5c69554379632692a0fa20bfadeef9194fbdd"))]) (coverlay . [(0 4 0) nil "Test coverage overlay for Emacs" single ((:commit . "b4d5d4dd702152bc7e7ca788d22e4feb74dc32fe") (:url . "https://github.com/twada/coverlay.el") (:keywords "coverage" "overlay"))]) (coverage . [(0 2) ((ov (1 0)) (cl-lib (0 5))) "Code coverage line highlighting" single ((:commit . "f7e78bb9502d3893ef876274c992743f49c0a1a7") (:url . "https://github.com/trezona-lecomte/coverage") (:keywords "coverage" "metrics" "simplecov" "ruby" "rspec"))]) (counsel-gtags . [(0 1) ((emacs (24 3)) (counsel (0 8 0))) "ivy for GNU global" single ((:commit . "8066dd4cd6eb157345fb43788bacf2c5d746b497") (:url . "https://github.com/syohex/emacs-counsel-gtags"))]) (counsel-dash . [(0 1 3) ((emacs (24 4)) (dash (2 12 1)) (dash-functional (1 2 0)) (helm-dash (1 3 0)) (counsel (0 8 0))) "Browse dash docsets using Ivy" single ((:commit . "a342340bbd8e50e4d1015e0b91d8ecd8f6cdf9f2") (:url . "https://github.com/nathankot/counsel-dash") (:keywords "dash" "ivy" "counsel"))]) (counsel-bbdb . [(0 0 1) ((ivy (0 8 0)) (emacs (24 3))) "Quick search&input email from BBDB based on ivy" single ((:commit . "297d0c7e6e1eaafcd5e188724fea8e8f26b95555") (:url . "https://github.com/redguard/counsel-bbdb") (:keywords "bbdb" "email" "completion"))]) (counsel . [(0 9 1) ((emacs (24 3)) (swiper (0 9 0))) "Various completion functions using Ivy" single ((:commit . "f4b433436668ac09f3d1815fbfb4b71f3e0690fa") (:url . "https://github.com/abo-abo/swiper") (:keywords "completion" "matching"))]) (corral . [(0 3 20) nil "Quickly surround text with delimiters" single ((:commit . "e7ab6aa118e46b93d4933d1364bc273f57cd6911") (:url . "http://github.com/nivekuil/corral"))]) (copyit-pandoc . [(0 0 2) ((emacs (24)) (copyit (0 0 1)) (pandoc (0 0 1))) "Copy it, yank anything!" single ((:commit . "c973d3650208a033aaf845989d023f9c6e572ddd") (:url . "https://github.com/zonuexe/emacs-copyit") (:keywords "convinience" "yank" "clipboard"))]) (copyit . [(0 0 2) ((emacs (24)) (cl-lib (0 5))) "Copy it, yank anything!" single ((:commit . "c973d3650208a033aaf845989d023f9c6e572ddd") (:url . "https://github.com/zonuexe/emacs-copyit") (:keywords "convinience" "yank" "clipboard"))]) (copy-as-format . [(0 0 6) ((cl-lib (0 5))) "Copy buffer locations as GitHub/Slack/JIRA/HipChat/... formatted code" single ((:commit . "fba9fe57a310a71c5aac90a26434df4c08214833") (:url . "https://github.com/sshaw/copy-as-format") (:keywords "github" "slack" "jira" "hipchat" "gitlab" "bitbucket" "org-mode" "pod" "rst" "tools" "convenience"))]) (contextual . [(1 0 1) ((emacs (24)) (dash (2 12 1)) (cl-lib (0 5))) "Contextual profile management system" single ((:commit . "8134a2d8034c624f4fdbbb0b3893de12f4257909") (:url . "https://github.com/lshift-de/contextual") (:keywords "convenience" "tools"))]) (connection . [(1 10) nil "No description available." single ((:commit . "9ef1672ecd367827381bbbc9af93685980083c5c"))]) (conkeror-minor-mode . [(1 6 2) nil "Mode for editing conkeror javascript files." single ((:commit . "476e81c27b056e21c192391fe674a2bf875466b0") (:url . "http://github.com/Bruce-Connor/conkeror-minor-mode") (:keywords "programming" "tools"))]) (conda . [(0 0 7) ((emacs (24 4)) (pythonic (0 1 0)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2))) "Work with your conda environments" single ((:commit . "6ba9ef5d72ef613f478e07e2ebf57b47066beee7") (:url . "http://github.com/necaris/conda.el") (:keywords "python" "environment" "conda"))]) (concurrent . [(0 5 1) ((emacs (24 3)) (deferred (0 5 0))) "Concurrent utility functions for emacs lisp" single ((:commit . "d012a1ab50edcc2c44e3e49006f054dbff47cb6c") (:url . "https://github.com/kiwanami/emacs-deferred/blob/master/README-concurrent.markdown") (:keywords "deferred" "async" "concurrent"))]) (composer . [(0 0 8) ((emacs (24)) (s (1 9 0)) (f (0 17)) (request (0 2 0)) (seq (1 9))) "Interface to PHP Composer" single ((:commit . "2d16d3bb65c53e9e26f4b7b22ad38590a4a48ee1") (:keywords "tools" "php" "dependency" "manager"))]) (composable . [(0 0 1) ((emacs (24 4))) "composable editing" tar ((:commit . "4739b6a730498e7526d06222810c3ccf3723d509") (:keywords "lisp"))]) (company-ycmd . [(1 2) ((ycmd (1 2)) (company (0 9 3)) (deferred (0 5 1)) (s (1 11 0)) (dash (2 13 0)) (let-alist (1 0 5)) (f (0 19 0))) "company-mode backend for ycmd" single ((:commit . "d042a673b4d717c3ca9d641f120bfe16c994c740") (:url . "https://github.com/abingham/emacs-ycmd"))]) (company-web . [(0 9) ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" tar ((:commit . "ffb6b969813041d2d90680a7696a9e0208eaed61") (:url . "https://github.com/osv/company-web") (:keywords "html" "company"))]) (company-tern . [(0 3 0) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single ((:commit . "b20b3e490bf277c8480712210e3c92ea489859ef") (:url . "https://github.com/proofit404/company-tern"))]) (company-statistics . [(0 2 2) ((emacs (24 3)) (company (0 8 5))) "Sort candidates using completion history" single ((:commit . "906d8137224c1a5bd1dc913940e0d32ffecf5523") (:url . "https://github.com/company-mode/company-statistics") (:keywords "abbrev" "convenience" "matching"))]) (company-sourcekit . [(0 2 0) ((emacs (24 3)) (company (0 8 12)) (dash (2 12 1)) (dash-functional (1 2 0)) (sourcekit (0 2 0))) "company-mode completion backend for SourceKit" single ((:commit . "8ba62ac25bf533b7f148f333bcb5c1db799f749b") (:url . "https://github.com/nathankot/company-sourcekit") (:keywords "abbrev"))]) (company-shell . [(1 2 1) ((emacs (24 4)) (company (0 8 12)) (dash (2 12 0)) (cl-lib (0 5))) "Company mode backend for shell functions" single ((:commit . "acdbf8cba6ad9831d81a77bab7bbfd50f19edd86") (:url . "https://github.com/Alexander-Miller/company-shell") (:keywords "company" "shell" "auto-completion"))]) (company-rtags . [(2 10) ((emacs (24 3)) (company (0 8 1)) (rtags (2 10))) "RTags back-end for company" single ((:commit . "3b3ace901f53827daef81d4c13658ec4feb318b4") (:url . "http://rtags.net"))]) (company-restclient . [(0 1 0) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) "company-mode completion back-end for restclient-mode" single ((:commit . "98e4b2af0e84ba4192c16288123aed96541c6401") (:url . "https://github.com/iquiw/company-restclient"))]) (company-quickhelp . [(2 3 0) ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" single ((:commit . "b2953c725654650677e3d66eaeec666826d5f65f") (:url . "https://www.github.com/expez/company-quickhelp") (:keywords "company" "popup" "documentation" "quickhelp"))]) (company-php . [(1 7 9) ((cl-lib (0 5)) (ac-php-core (1)) (company (0 9))) "company completion source for php" single ((:commit . "e0aaae30e4e5f18390e5d00953db02c1f03c44f6") (:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense"))]) (company-nixos-options . [(0 0 1) ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) "Company Backend for nixos-options" single ((:commit . "5fc8fa29bea9dd8e9c822af92f9bc6ddc223635f") (:url . "http://www.github.com/travisbhartwell/nix-emacs/") (:keywords "unix"))]) (company-ngram . [(0 8 0) ((cl-lib (0 5)) (company (0 8 0))) "N-gram based completion" tar ((:commit . "d15182df3eac72b29772802759b77c9eafef5066") (:url . "https://github.com/kshramt/company-ngram"))]) (company-math . [(1 2) ((company (0 8 0)) (math-symbol-lists (1 2))) "Completion backends for unicode math symbols and latex tags" single ((:commit . "2cb03c48f44a5b3cbbbbe05e9841b2c61bd8ed81") (:url . "https://github.com/vspinu/company-math") (:keywords "unicode" "symbols" "completion"))]) (company-jedi . [(0 4) ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 7))) "company-mode completion back-end for Python JEDI" single ((:commit . "ad49407451c7f28fe137f9c8f3a7fc89e8693a1b"))]) (company-irony-c-headers . [(1 0 0) ((cl-lib (0 5)) (company (0 9 0)) (irony (0 2 0))) "Company mode backend for C/C++ header files with Irony" single ((:commit . "ba304fe7eebdff90bbc7dea063b45b82638427fa") (:url . "https://github.com/hotpxl/company-irony-c-headers") (:keywords "c" "company"))]) (company-irony . [(1 0 0) ((emacs (24 1)) (company (0 8 0)) (irony (1 0 0)) (cl-lib (0 5))) "company-mode completion back-end for irony-mode" single ((:commit . "cebd82506c59d21a9c436bd8e8a33dfa8be84955") (:url . "https://github.com/Sarcasm/company-irony/") (:keywords "convenience"))]) (company-go . [(20150303) ((company (0 8 0))) "company-mode backend for Go (using gocode)" single ((:commit . "eef10fdde96a12528a6da32f51bf638b2863a3b1") (:keywords "languages"))]) (company-ghc . [(1 1 0) ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 1 0)) (emacs (24))) "company-mode ghc-mod backend" single ((:commit . "64e4f9d0cf9377138a8dee34c69e7d578fd71090") (:url . "https://github.com/iquiw/company-ghc") (:keywords "haskell" "completion"))]) (company-erlang . [(0 1 1) ((emacs (24 4)) (ivy-erlang-complete (0 1)) (company (0 9 2))) "company backend based on ivy-erlang-complete" single ((:commit . "bc0524a16f17b66c7397690e4ca0e004f09ea6c5") (:keywords "tools"))]) (company-emoji . [(2 5 0) ((cl-lib (0 5)) (company (0 8 0))) "company-mode backend for emoji" tar ((:commit . "8dc88ffe0773ef44321f245d39430c14a1bc2b82") (:url . "https://github.com/dunn/company-emoji.git") (:keywords "emoji" "company"))]) (company-emacs-eclim . [(0 4) ((eclim (0 3)) (company (0 7)) (cl-lib (0 5))) "company-mode backend for eclim" single ((:commit . "8203fbf8544e65324a948a67718f7a16ba2d52e6"))]) (company-edbi . [(0 1) ((company (0 8 5)) (edbi (0 1 3)) (cl-lib (0 5 0)) (s (1 9 0))) "Edbi backend for company-mode" single ((:commit . "08dc69ccfbcf10ca83f7075e9b735c6885cd7e11") (:url . "https://github.com/proofit404/company-edbi"))]) (company-dict . [(1 2 7) ((emacs (24 4)) (company (0 8 12)) (parent-mode (2 3))) "A backend that emulates ac-source-dictionary" single ((:commit . "d51b801fe319e7984cbc202c4745214d84039942") (:url . "https://github.com/hlissner/emacs-company-dict") (:keywords "company" "dictionary" "ac-source-dictionary"))]) (company-coq . [(1 0) ((company-math (1 0 1)) (company (0 8 12)) (yasnippet (0 9 0 1)) (dash (2 10 0)) (cl-lib (0 5))) "A collection of extensions for Proof General's Coq mode" tar ((:commit . "bb507a11b088a8c9bb6500b384ed588bc690fcea"))]) (company-cabal . [(0 1 1) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) "company-mode cabal backend" tar ((:commit . "a570559ff92522598b5ed40e21c4539fffb3e976") (:url . "https://github.com/iquiw/company-cabal"))]) (company-ansible . [(0 6 0) ((emacs (24 4)) (company (0 8 12))) "A company back-end for ansible" tar ((:commit . "2c30c3bdb8316b27d5c1832b944cb146d00de456") (:url . "https://github.com/krzysztof-magosa/company-ansible") (:keywords "ansible"))]) (company-anaconda . [(0 2 0) ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) "Anaconda backend for company-mode" single ((:commit . "182a8fdabc01630f255beeb2708728c0cd5c6316") (:url . "https://github.com/proofit404/anaconda-mode"))]) (company . [(0 9 4) ((emacs (24 3))) "Modular text completion framework" tar ((:commit . "a197b072dc93dbad238f1dc70da01e3775ebfb56") (:url . "http://company-mode.github.io/") (:keywords "abbrev" "convenience" "matching"))]) (common-lisp-snippets . [(0 1 2) ((yasnippet (0 8 0))) "Yasnippets for Common Lisp" tar ((:commit . "5811564d0b08311bb0e70fa125cd60bdc246115c") (:url . "https://github.com/mrkkrp/common-lisp-snippets") (:keywords "snippets"))]) (commenter . [(0 5 2) ((emacs (24 4)) (let-alist (1 0 4))) "multiline-comment support package" single ((:commit . "6d1885419434ba779270c6fda0e30d390bb074bd") (:url . "https://github.com/yuutayamada/commenter") (:keywords "comment"))]) (comment-dwim-2 . [(1 2 2) nil "An all-in-one comment command to rule them all" single ((:commit . "8cedecde018b5872195bfead6511af822776a430") (:url . "https://github.com/remyferre/comment-dwim-2") (:keywords "convenience"))]) (commander . [(0 7 0) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single ((:commit . "2c8a57b9c619e29ccbe2d5a85921b9c689e95bf9") (:url . "http://github.com/rejeep/commander.el") (:keywords "cli" "argv"))]) (color-theme-sanityinc-tomorrow . [(1 17) nil "A version of Chris Kempson's various Tomorrow themes" tar ((:commit . "81d8990085960824f700520d08027e6aca58feaa"))]) (color-theme-sanityinc-solarized . [(2 29) nil "A version of Ethan Schoonover's Solarized themes" tar ((:commit . "554e941131d009c0a5d7129ed96796182b4cc590"))]) (color-theme-modern . [(0 0 2) ((emacs (24))) "Reimplement colortheme with Emacs 24 theme framework." tar ((:commit . "7107540d22e8ff045e0707de84c8b179fd829302") (:url . "https://github.com/emacs-jp/replace-colorthemes/"))]) (color-identifiers-mode . [(1 0 0) ((dash (2 5 0)) (emacs (24))) "Color identifiers based on their names" single ((:commit . "536151410dbb198b328dc62b829d9692cec0b1bd") (:url . "https://github.com/ankurdave/color-identifiers-mode") (:keywords "faces" "languages"))]) (coffee-mode . [(0 6 3) ((emacs (24 1)) (cl-lib (0 5))) "Major mode for CoffeeScript code" single ((:commit . "adfb7ae73d6ee2ef790c780dd3c967e62930e94a") (:url . "http://github.com/defunkt/coffee-mode") (:keywords "coffeescript" "major" "mode"))]) (codic . [(0 3) ((emacs (24)) (cl-lib (0 5))) "Search Codic (codic.jp) naming dictionaries" tar ((:commit . "52bbb6997ef4ab9fb7fea43bbfff7f04671aa557") (:url . "https://github.com/syohex/emacs-codic"))]) (cmake-project . [(0 7) nil "Integrates CMake build process with Emacs" single ((:commit . "ec61f687772cccdb699f64ebe1e8dc8ba83f790f") (:url . "http://github.com/alamaison/emacs-cmake-project") (:keywords "c" "cmake" "languages" "tools"))]) (cmake-mode . [(3 9 0) nil "major-mode for editing CMake sources" single ((:commit . "f15cfd891d1e01247ed285320ae32b6c3182ac8f"))]) (cmake-ide . [(0 5) ((emacs (24 1)) (cl-lib (0 5)) (seq (1 11)) (levenshtein (0))) "Calls CMake to find out include paths and other compiler flags" single ((:commit . "a2e476ad42e61075cae9beb35fb83e3c1bf8619e") (:url . "http://github.com/atilaneves/cmake-ide") (:keywords "languages"))]) (cm-mode . [(1 6) ((cl-lib (0 5))) "Minor mode for CriticMarkup" single ((:commit . "276d49c859822265070ae5dfbb403fd7d8d06436") (:keywords "text" "markdown"))]) (clues-theme . [(1 0 1) ((emacs (24 0))) "an Emacs 24 theme which may well be fully awesome..." single ((:commit . "abd61f2b7f3e98de58ca26e6d1230e70c6406cc7") (:url . "https://github.com/emacsfodder/emacs-clues-theme"))]) (closql . [(0 3 3) ((emacs (25 1)) (emacsql-sqlite (2 0 2))) "store EIEIO objects using EmacSQL" single ((:commit . "0bb0fa3dd1e545cbf025d42e253ddb00107156a3") (:url . "https://github.com/emacscollective/closql") (:keywords "extensions"))]) (clojure-snippets . [(1 0 1) ((yasnippet (0 8 0))) "Yasnippets for clojure" tar ((:commit . "83785faa607884308a42b81f160854f2cecfd098"))]) (clojure-quick-repls . [(0 1 0) ((cider (0 8 1)) (dash (2 9 0))) "Quickly create Clojure and ClojureScript repls for a project." single ((:commit . "90f82e294cfdfb65231adc456177580cd69bfc00") (:url . "https://github.com/symfrog/clojure-quick-repls") (:keywords "languages" "clojure" "cider" "clojurescript"))]) (clojure-mode-extra-font-locking . [(5 6 1) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single ((:commit . "fdbdfb91e0a5731bf9a739b70c5f217c5d12ae6d") (:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "lisp"))]) (clojure-mode . [(5 6 1) ((emacs (24 4))) "Major mode for Clojure code" single ((:commit . "fdbdfb91e0a5731bf9a739b70c5f217c5d12ae6d") (:url . "http://github.com/clojure-emacs/clojure-mode") (:keywords "languages" "clojure" "clojurescript" "lisp"))]) (clojure-cheatsheet . [(0 4 0) ((helm (1 7 7)) (cider (0 9 0))) "The Clojure Cheatsheet for Emacs" single ((:commit . "f8db406b7b13a580c142d08865c9a03c101235fa") (:url . "https://github.com/krisajenkins/clojure-cheatsheet") (:keywords "clojure" "nrepl" "cheatsheet" "helm"))]) (clocker . [(0 0 11) ((projectile (0 11 0)) (dash (2 10))) "Note taker and clock-in enforcer" single ((:commit . "4a4831ed4e42e18976edd16b844cb16cb78f3c17") (:keywords "org"))]) (cljr-helm . [(0 11) ((clj-refactor (0 13 0)) (helm-core (1 7 7)) (cl-lib (0 5))) "Wraps clojure refactor commands with helm" single ((:commit . "f2fc7b698a56e4a44d5dfbc6a55d77a93c0fa9a4") (:url . "https://github.com/philjackson/cljr-helm") (:keywords "helm" "clojure" "refactor"))]) (clj-refactor . [(2 3 1) ((emacs (24 4)) (s (1 8 0)) (seq (2 19)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (clojure-mode (5 6 1)) (cider (0 11 0)) (edn (1 1 2)) (inflections (2 3)) (hydra (0 13 2))) "A collection of clojure refactoring functions" tar ((:commit . "9005de31ed05122d3db9f503fbc69722abf3634b") (:keywords "convenience" "clojure" "cider"))]) (clips-mode . [(0 7) nil "Major mode for editing CLIPS code and REPL" tar ((:commit . "a3ab4a3e958d54a16544ec38fe6338f27df20817"))]) (cliphist . [(0 5 3) ((popup (0 5 0))) "Read data from clipboard managers at Linux and Mac" tar ((:commit . "acbd9782d82d7ae6bfb22fb0955597b9c5fcbb6c") (:url . "http://github.com/redguardtoo/cliphist") (:keywords "clipboard" "manager" "history"))]) (click-mode . [(0 0 4) ((emacs (24))) "Major mode for the Click Modular Router Project" single ((:commit . "c074e7b5b0a88434d0d3411f18884d1f6e288b33") (:url . "https://github.com/bmalehorn/click-mode") (:keywords "click" "router"))]) (cl-lib-highlight . [(1 0 0) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single ((:commit . "c117451df8455769701af6c8e92a8fb29c05e1fa") (:url . "https://github.com/skeeto/cl-lib-highlight"))]) (cl-format . [(1 1) nil "CL format routine." tar ((:commit . "4380cb8009c47cc6d9098b383082b93b1aefa460"))]) (circe-notifications . [(1 0) ((emacs (24 4)) (circe (2 3)) (alert (1 2))) "Add desktop notifications to Circe." single ((:commit . "80c44441ecd3ae04ae63760aa20afa837c1ed05b") (:url . "https://github.com/eqyiel/circe-notifications"))]) (circe . [(2 5) ((cl-lib (0 5))) "Client for IRC in Emacs" tar ((:commit . "13c605e639194c3da0c2e685056fac685f8c76a0") (:url . "https://github.com/jorgenschaefer/circe"))]) (cil-mode . [(0 4) nil "Common Intermediate Language mode" single ((:commit . "a78a88ca9a66a82f069329a96e34b67478ae2d9b") (:url . "https://github.com/ForNeVeR/cil-mode") (:keywords "languages"))]) (cider-eval-sexp-fu . [(1 1) ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) "Briefly highlights an evaluated sexps." single ((:commit . "6b437bf073b21543e72d76fd0392a28fba7cbfbe") (:keywords "languages" "clojure" "cider"))]) (cider . [(0 14 0) ((emacs (24 3)) (clojure-mode (5 5 2)) (pkg-info (0 4)) (queue (0 1 1)) (spinner (1 7)) (seq (2 16))) "Clojure Interactive Development Environment that Rocks" tar ((:commit . "f3c396ff8cf4baf331b0e19e18e33b795b66ee3e") (:url . "http://www.github.com/clojure-emacs/cider") (:keywords "languages" "clojure" "cider"))]) (choice-program . [(0 1) ((emacs (24)) (cl-lib (0 5))) "parameter based program" tar ((:commit . "154c12ed7e2afc2d5dae031698be4787d7d647b0") (:url . "https://github.com/plandes/choice-program") (:keywords "exec" "execution" "parameter" "option"))]) (chinese-word-at-point . [(0 2 3) ((cl-lib (0 5))) "Add `chinese-word' thing to `thing-at-point'" single ((:commit . "36a03cce32fe059d2b581cb2e029715c0be81074") (:url . "https://github.com/xuchunyang/chinese-word-at-point.el") (:keywords "convenience" "chinese"))]) (chinese-pyim-greatdict . [(0 1) nil "A chinese-pyim dict, which include three million words." tar ((:commit . "11cf5145710349e9d928eb9197bebb426025fd58") (:url . "https://github.com/tumashu/chinese-pyim-greatdict") (:keywords "convenience" "chinese" "pinyin" "input-method" "complete"))]) (chinese-pyim-basedict . [(0 1) nil "The default pinyin dict of chinese-pyim" tar ((:commit . "f13b6d20629a0b691ead626cca249b227622fa83") (:url . "https://github.com/tumashu/chinese-pyim-basedict") (:keywords "convenience" "chinese" "pinyin" "input-method" "complete"))]) (chinese-pyim . [(1 5 3) ((cl-lib (0 5)) (pos-tip (0 4)) (popup (0 1)) (async (1 6)) (chinese-pyim-basedict (0 1))) "A Chinese input method which support quanpin, shuangpin and wubi." tar ((:commit . "ed2ccea3d827084b3c80afbd5d7b9345f31243d1") (:url . "https://github.com/tumashu/chinese-pyim") (:keywords "convenience" "chinese" "pinyin" "input-method"))]) (chinese-fonts-setup . [(0 1) ((cl-lib (0 5))) "Emacs fonts config tool enforcing double-width Chinese character display" single ((:commit . "6f4423664e55d5470c4f239d04b88da5d6acb34d") (:url . "https://github.com/tumashu/chinese-fonts-setup") (:keywords "convenience" "chinese" "font"))]) (checkbox . [(0 2 1) ((emacs (24)) (cl-lib (0 5))) "Quick manipulation of textual checkboxes" single ((:commit . "2afc2011fa35ccfa0ce9ef46cb1896911fa340d1") (:url . "http://github.com/camdez/checkbox.el") (:keywords "convenience"))]) (cheat-sh . [(1 7) ((emacs (24))) "Interact with cheat.sh" single ((:commit . "6409bb66241255cc9a0362f2acdcb0b34344f9f2") (:url . "https://github.com/davep/cheat-sh.el") (:keywords "docs" "help"))]) (chatwork . [(0 3) nil "ChatWork client for Emacs" single ((:commit . "fea231d479f06bf40dbfcf45de143eecc9ed744c") (:url . "https://github.com/ataka/chatwork") (:keywords "web"))]) (charmap . [(0 0 1) nil "Unicode table for Emacs" single ((:commit . "165193d91ef96f563ae8366ed4c1a2df5a4eaed2") (:url . "https://github.com/lateau/charmap") (:keywords "unicode" "character" "ucs"))]) (char-menu . [(0 1 1) ((emacs (24 3)) (avy-menu (0 1))) "Create your own menu for fast insertion of arbitrary symbols" single ((:commit . "48aef5e4687e7831676e677f34f7b93aa3e0d472") (:url . "https://github.com/mrkkrp/char-menu") (:keywords "convenience" "editing"))]) (chapel-mode . [(1 0 0) nil "a CC Mode for Chapel derived from derived-mode-ex.el" single ((:commit . "936a76a26bdc4f9570c4d54369f74bcd1cb0a698") (:keywords "chapel" "languages" "oop"))]) (cfengine-code-style . [(3 11 0 2 1) nil "C code style for CFEngine project." single ((:commit . "c3648188b8a9527090da9f2bb642f784a31ee22c") (:url . "https://github.com/cfengine/core"))]) (ceylon-mode . [(0 2) ((emacs (24))) "Major mode for editing Ceylon source code" single ((:commit . "00f790b3ed5ec48e2461e20a4d466ba45c634e13") (:url . "https://github.com/lucaswerkmeister/ceylon-mode") (:keywords "languages" "ceylon"))]) (cerbere . [(0 1 0) ((s (1 9 0)) (f (0 16 0)) (go-mode (20140409)) (pkg-info (0 5))) "Unit testing in Emacs for several programming languages" tar ((:commit . "11de1e7ec5126083ae697f5a9993facdb9895f9d") (:url . "https://github.com/nlamirault/cerbere") (:keywords "python" "go" "php" "tests" "tdd"))]) (celery . [(0 0 3) ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) "a minor mode to draw stats from celery and more?" single ((:commit . "163ebede3f6a7f59202ff319675b0873dd1de365") (:url . "https://github.com/ardumont/emacs-celery") (:keywords "celery" "convenience"))]) (cdnjs . [(0 2 1) ((dash (2 13 0)) (deferred (0 4)) (f (0 17 2)) (pkg-info (0 5))) "A front end for http://cdnjs.com" single ((:commit . "ce19880d3ec3d81e6c665d0b1dfea99cc7a3f908") (:url . "https://github.com/yasuyk/cdnjs.el") (:keywords "tools"))]) (cdlatex . [(4 7) nil "Fast input methods for LaTeX environments and math" single ((:commit . "b7183c2200392b6d85fca69390f4a65fac7a7b19") (:keywords "tex"))]) (cbm . [(0 5) ((cl-lib (0 5))) "Switch to similar buffers." single ((:commit . "bf8cbbcef82e4643c5f0399f0198f606275af08c") (:url . "http://github.com/akermu/cbm.el") (:keywords "buffers"))]) (caskxy . [(0 0 5) ((log4e (0 2 0)) (yaxception (0 1))) "Control Cask in Emacs" single ((:commit . "279f3ab79bd77fe69cb3148a79896b9bf118a9b3") (:url . "https://github.com/aki2o/caskxy") (:keywords "convenience"))]) (cask-package-toolset . [(0 9 1) ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Toolsettize your package" tar ((:commit . "1e972739dbdf3af5b60a250c99414e76db238f78") (:url . "http://github.com/AdrieanKhisbe/cask-package-toolset.el") (:keywords "convenience" "tools"))]) (cask-mode . [(0 1) ((emacs (24 3))) "major mode for editing Cask files" single ((:commit . "5203b1beac4dd2ee07a6e993bc86719f5f35dbbf"))]) (cask . [(0 8 1) ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (0 1))) "Cask: Project management for Emacs package development" tar ((:commit . "58f641960bcb152b33fcd27d41111291702e2da6") (:url . "http://github.com/cask/cask") (:keywords "speed" "convenience"))]) (caseformat . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (s (1 10 0))) "Format based letter case converter" single ((:commit . "72707c9f0f0819b4e2aa45876432a293aa07f814") (:url . "https://github.com/HKey/caseformat") (:keywords "convenience"))]) (cargo . [(0 4 1) ((emacs (24 3)) (rust-mode (0 2 0))) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar ((:commit . "b0487f95a7de7a1d6f03cdd05220f633977d65a2") (:keywords "tools"))]) (camcorder . [(0 2) ((emacs (24)) (names (20150000)) (cl-lib (0 5))) "Record screencasts in gif or other formats." single ((:commit . "a2b5e0629ee3c01ead684e148965ac68e533efbd") (:url . "http://github.com/Bruce-Connor/camcorder.el") (:keywords "multimedia" "screencast"))]) (calfw-org . [(1 6) nil "calendar view for org-agenda" single ((:commit . "c538d3746449b4f0e16b16aad3073d4f7379d805") (:keywords "calendar" "org"))]) (calfw-ical . [(1 6) nil "calendar view for ical format" single ((:commit . "c538d3746449b4f0e16b16aad3073d4f7379d805") (:keywords "calendar"))]) (calfw-howm . [(1 6) nil "calendar view for howm" single ((:commit . "c538d3746449b4f0e16b16aad3073d4f7379d805") (:keywords "calendar"))]) (calfw-cal . [(1 6) nil "calendar view for emacs diary" single ((:commit . "c538d3746449b4f0e16b16aad3073d4f7379d805") (:keywords "calendar"))]) (calfw . [(1 6) nil "Calendar view framework on Emacs" single ((:commit . "c538d3746449b4f0e16b16aad3073d4f7379d805") (:url . "https://github.com/kiwanami/emacs-calfw") (:keywords "calendar"))]) (calendar-norway . [(0 9 3) nil "Norwegian calendar" single ((:commit . "8501b2ee515e995f345365391b03f44c812cabdf") (:keywords "calendar" "norwegian" "localization"))]) (cake2 . [(2 1 0) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (ht (2 0)) (json (1 2)) (cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP2 Minor Mode" tar ((:commit . "0a9d0b3a1c49ba1730088416f50507f53221c70b") (:url . "http://code.101000lab.org"))]) (cake-inflector . [(1 1 1) ((s (1 9 0))) "Lazy porting CakePHP infrector.php to el" single ((:commit . "40bf11890842ba305954528694e1c39a8b73737b") (:url . "https://github.com/k1LoW/emacs-cake-inflector"))]) (cake . [(1 4 3) ((cake-inflector (1 1 0)) (historyf (0 0 8)) (anything (1 3 9))) "CakePHP Minor Mode" tar ((:commit . "a7c9f3bee71eb3865060123d4d98e5397c2f967e") (:url . "https://github.com/k1LoW/emacs-cake"))]) (cacoo . [(2 1 2) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar ((:commit . "c2e6a8830144810cd4e51de3646cb8200bcebbc6"))]) (button-lock . [(1 0 2) nil "Clickable text defined by regular expression" single ((:commit . "cd0bf4a3c2f224d851e6ed8a54a6e80c129b225f") (:url . "http://github.com/rolandwalker/button-lock") (:keywords "mouse" "button" "hypermedia" "extensions"))]) (buttercup . [(1 7) nil "Behavior-Driven Emacs Lisp Testing" tar ((:commit . "d8dc80da12cc1e71fcf54b0f4deb8d229bc97beb"))]) (butler . [(0 2 4) ((deferred (3 2)) (json (1 2)) (emacs (24))) "Emacs client for Jenkins" tar ((:commit . "0e91e0f01ac9c09422f076a096ee567ee138e7a4"))]) (bury-successful-compilation . [(0 1) nil "Bury the *compilation* buffer after successful compilation" single ((:commit . "ca58a5df0aa3f266a8df0e3e5d3d962c086be0a9") (:keywords "compilation"))]) (bundler . [(1 1 0) ((inf-ruby (2 1))) "Interact with Bundler from Emacs" single ((:commit . "4cb4fafe092d587cc9e58ff61cf900fb7f409adf") (:url . "http://github.com/tobiassvn/") (:keywords "bundler" "ruby"))]) (bui . [(1 1 0) ((emacs (24 3)) (dash (2 11 0))) "Buffer interface library" tar ((:commit . "3bf8af2f339d2483203eda2c97a61b8771c3269d") (:url . "https://github.com/alezost/bui.el") (:keywords "tools"))]) (bug-reference-github . [(0 2 0) nil "Automatically set `bug-reference-url-format' in Github repositories." single ((:commit . "671d32083aad5cf813a5e61075b70889bc95dec5") (:url . "https://github.com/arnested/bug-reference-github") (:keywords "programming" "tools"))]) (bufshow . [(0 1 0) nil "No description available." single ((:commit . "d8424e412d63dcc721c64fbd2ddd2420a03b4e8b"))]) (buffer-utils . [(0 1 0) nil "Buffer-manipulation utility functions" single ((:commit . "b4d325543e25518d725a2122b49cd72a0d6a079a") (:url . "http://github.com/rolandwalker/buffer-utils") (:keywords "extensions"))]) (buffer-move . [(0 6 2) nil "" single ((:commit . "9bf3ff940011c7af3fdd172fa3ea2511c7a8a190") (:url . "https://github.com/lukhas/buffer-move") (:keywords "lisp" "convenience"))]) (buffer-manage . [(0 1) ((emacs (25)) (choice-program (0 1))) "manage buffers" single ((:commit . "09c7e652010ce84ea43c0ac20a943e7733bea0af") (:url . "https://github.com/plandes/buffer-manage") (:keywords "interactive" "buffer" "management"))]) (buffer-flip . [(1 2) ((key-chord (20150808))) "Use key-chord to cycle through buffers like Alt-Tab in Windows" single ((:commit . "386067141ca77848b266e068f8c6baf6b4c2ab5b") (:url . "https://github.com/killdash9/buffer-flip.el") (:keywords "convenience"))]) (bshell . [(0 1) ((emacs (25)) (buffer-manage (0 1))) "manage and track multiple inferior shells" single ((:commit . "0abd93439895851c1ad3037b0df7443e577ed1ba") (:url . "https://github.com/plandes/bshell") (:keywords "interactive" "shell" "management"))]) (browse-url-dwim . [(0 6 8) ((string-utils (0 3 2))) "Context-sensitive external browse URL or Internet search" single ((:commit . "11f1c53126619c7ef1bb5f5d6914ce0b3cce0e30") (:url . "http://github.com/rolandwalker/browse-url-dwim") (:keywords "hypermedia"))]) (browse-kill-ring . [(2 0 0) nil "interactively insert items from kill-ring" single ((:commit . "2a7acf98c348c4f405a6b2ab216224ca14915be8") (:url . "https://github.com/browse-kill-ring/browse-kill-ring") (:keywords "convenience"))]) (boxquote . [(2 1) ((cl-lib (0 5))) "Quote text with a semi-box." single ((:commit . "b6a4ad3ee5b327bd3b1bf65f8733bd301fe59883") (:url . "https://github.com/davep/boxquote.el") (:keywords "quoting"))]) (boon . [(1 0) ((emacs (25 1)) (expand-region (0 10 0)) (dash (2 12 0)) (multiple-cursors (1 3 0))) "Ergonomic Command Mode for Emacs." tar ((:commit . "d9f0545708bbbbe3df23b2b91cdd2824beb0df56"))]) (bool-flip . [(1 0 1) ((emacs (24 3))) "flip the boolean under the point" single ((:commit . "0f7cc9b387429239fb929896511727d4e49a795b") (:url . "http://github.com/michaeljb/bool-flip/") (:keywords "boolean" "convenience" "usability"))]) (bongo . [(1 0) nil "play music with Emacs" tar ((:commit . "c5280a11fe8ff39fba4b09ec4a39b0f799d2b59c"))]) (bog . [(1 3 0) ((cl-lib (0 5))) "Extensions for research notes in Org mode" single ((:commit . "cf7817de3f37ce2404ee637a655f1a511b829585") (:url . "https://github.com/kyleam/bog") (:keywords "bib" "outlines"))]) (bnfc . [(0 4) ((emacs (24 3))) "Define context-free grammars for the BNFC tool" single ((:commit . "1b58df1dd0cb9b81900632fb2843a03b94f56fdb") (:url . "https://github.com/jmitchell/bnfc-mode") (:keywords "languages" "tools"))]) (bm . [(201610) nil "Visible bookmarks in buffer." single ((:commit . "c77ea49f5632b5d987243eddb4b36e84b870bf42") (:url . "https://github.com/joodland/bm") (:keywords "bookmark" "highlight" "faces" "persistent"))]) (birds-of-paradise-plus-theme . [(0 1 1) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single ((:commit . "ba2c4443388a73f2c5e2de0c24d3106676aeb6fa") (:url . "https://github.com/jimeh/birds-of-paradise-plus-theme.el") (:keywords "themes"))]) (bing-dict . [(0 2 3) nil "Minimalists' English-Chinese Bing dictionary" single ((:commit . "7c067b7a3a1a4797476f03a65f4a0b4a269a70c7") (:url . "https://github.com/cute-jumper/bing-dict.el") (:keywords "extensions"))]) (bind-map . [(1 1 1) ((emacs (24 3))) "Bind personal keymaps in multiple locations" single ((:commit . "bf4181e3a41463684adfffc6c5c305b30480e30f") (:url . "https://github.com/justbur/emacs-bind-map"))]) (bind-key . [(2 3) nil "A simple way to manage personal keybindings" single ((:commit . "cd58b268a8a025451c11c3cb1ba18d4f27f245da") (:url . "https://github.com/jwiegley/use-package") (:keywords "keys" "keybinding" "config" "dotemacs"))]) (binclock . [(1 10) ((cl-lib (0 5))) "Display the current time using a binary clock." single ((:commit . "2e529ace67a04e6872a2328769782ef33b0e463a") (:url . "https://github.com/davep/binclock.el") (:keywords "games" "time" "display"))]) (bifocal . [(0 0 1) ((emacs (24 4))) "Split-screen scrolling for comint-mode buffers" single ((:commit . "19b54d1de8938448c88afd495d749fc7b6f6d281") (:url . "https://github.com/riscy/bifocal-mode") (:keywords "frames" "processes" "tools"))]) (biblio-core . [(0 1) ((emacs (24 3)) (let-alist (1 0 4)) (seq (1 11)) (dash (2 12 1))) "A framework for looking up and displaying bibliographic entries" single ((:commit . "2550042b647b2b5c400c9cd8ec5fc80adb0fa6df") (:url . "http://github.com/cpitclaudel/biblio.el") (:keywords "bib" "tex" "convenience" "hypermedia"))]) (biblio . [(0 1) ((emacs (24 3)) (biblio-core (0 0))) "Browse and import bibliographic references from CrossRef, arXiv, DBLP, and doi.org" tar ((:commit . "2550042b647b2b5c400c9cd8ec5fc80adb0fa6df"))]) (better-shell . [(1 1) ((emacs (24 4))) "Better shell management" single ((:commit . "6ae157da700a4473734dca75925f6bf60e6b3ba7") (:url . "https://github.com/killdash9/better-shell") (:keywords "convenience"))]) (better-defaults . [(0 1 3) nil "Fixing weird quirks and poor defaults" single ((:commit . "90df5752a0a0602feb47aadfd3542aa7fc841bd8") (:url . "https://github.com/technomancy/better-defaults") (:keywords "convenience"))]) (beginend . [(2 0 0) ((emacs (24 4))) "Redefine M-< and M-> for some modes" single ((:commit . "a06a479c2279da9e852cf42628b6dfa466fff0bd"))]) (beeminder . [(1 0 0) nil "Emacs interface for Beeminder" single ((:commit . "54cc1277f2a7667a7b0d999dc49ceffcf2862b44") (:keywords "beeminder"))]) (beacon . [(1 3 3) ((seq (2 14))) "Highlight the cursor whenever the window scrolls" single ((:commit . "f1a3ff5ea8fecf9bf250205de66aedf0bf49c35b") (:url . "https://github.com/Malabarba/beacon") (:keywords "convenience"))]) (bbdb2erc . [(0 1 3) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single ((:commit . "f39a36351e1e6f1105c9e32970e7502b77b0dbcd") (:keywords "irc" "contacts" "chat" "client" "internet"))]) (bbdb-vcard . [(0 3) nil "vCard import/export for BBDB" tar ((:commit . "9e11fafef1a94bc6395bd1eeacd00f94848ac560") (:url . "http://github.com/trebb/bbdb-vcard") (:keywords "data" "calendar" "mail" "news"))]) (bbdb- . [(0 0 2) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." single ((:commit . "2839e84c894de2513af41053e80a277a1b483d22") (:url . "https://github.com/aki2o/bbdb-") (:keywords "bbdb" "news" "mail"))]) (bbcode-mode . [(2 0 0) nil "Major mode for writing BBCode markup" single ((:commit . "e693ab09c3f34cabfd185e7c249c0b5403f0a7e0") (:url . "https://github.com/ejmr/bbcode-mode"))]) (bash-completion . [(2 0 0) nil "BASH completion for the shell buffer" tar ((:commit . "9588a9c0ddf18f9869d4145a67e6446a4b66eba2"))]) (base16-theme . [(2 1) nil "Collection of themes built on combinations of 16 base colors" tar ((:commit . "f6d3d45a88d8fa2d70eaa26d8ebcef741b370dd1") (:url . "https://github.com/belak/base16-emacs"))]) (badwolf-theme . [(1 2) ((emacs (24))) "Bad Wolf color theme" single ((:commit . "24a557f92a702f632901a5b7bee59945a0a8cde9") (:url . "https://github.com/bkruczyk/badwolf-emacs") (:keywords "themes"))]) (back-button . [(0 6 6) ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Visual navigation through mark rings" single ((:commit . "c7b50a3e087a8dc5588d7292379cd387a1afff87") (:url . "http://github.com/rolandwalker/back-button") (:keywords "convenience" "navigation" "interface"))]) (babel . [(1 4) nil "interface to web translation services such as Babelfish" single ((:commit . "65b55ad89017c9b3a1c8c241ac4b4541eabdaf5f") (:keywords "translation" "web"))]) (avy-zap . [(0 1 4) ((avy (0 2 0))) "Zap to char using `avy'" single ((:commit . "67fed60d0dfe9087ca4fe3332f4a78e775b8d239") (:url . "https://github.com/cute-jumper/avy-zap") (:keywords "extensions"))]) (avy-migemo . [(0 3 2) ((emacs (24 4)) (avy (0 4 0)) (migemo (1 9))) "avy with migemo" tar ((:commit . "ce87777bea76c45be5f185e9fe356a8efe5c2d16") (:url . "https://github.com/momomo5717/avy-migemo") (:keywords "avy" "migemo"))]) (avy-menu . [(0 1 1) ((emacs (24 3)) (avy (0 3 0))) "Library providing avy-powered popup menu" single ((:commit . "0560e57d7f07b655aa73946f5a2066a42c3af0b7") (:url . "https://github.com/mrkkrp/avy-menu") (:keywords "popup" "menu"))]) (avy . [(0 4 0) ((emacs (24 1)) (cl-lib (0 5))) "tree-based completion" single ((:commit . "369af594e5ea28be1d91b22753aace16baadc046") (:url . "https://github.com/abo-abo/avy") (:keywords "point" "location"))]) (autothemer . [(0 2 2) ((dash (2 10 0)) (emacs (24)) (cl-lib (0 5))) "Conveniently define themes." single ((:commit . "8c467f57571c154129d660dfccebd151c998f2d9") (:url . "https://github.com/sebastiansturm/autothemer"))]) (autopair . [(0 6 1) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single ((:commit . "2d1eb81d12f71248ad305e70cceddf08d4fe2b39") (:url . "http://autopair.googlecode.com") (:keywords "convenience" "emulations"))]) (autodisass-llvm-bitcode . [(1 1) nil "Automatically disassemble LLVM bitcode" tar ((:commit . "14bb1bfe2be3b04d6e0c87a7a9d1e88ce15506d0"))]) (autodisass-java-bytecode . [(1 3) nil "Automatically disassemble Java bytecode" tar ((:commit . "3d61dbe266133c950b39e880f78d142751c7dc4c"))]) (auto-yasnippet . [(0 3 0) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single ((:commit . "5cc54edbe03c0061bf69883a3e39d3bb16019e0f") (:url . "https://github.com/abo-abo/auto-yasnippet"))]) (auto-shell-command . [(1 0 2) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single ((:commit . "59d4abce779a3ce3e920592bf5696b54b2e192c7") (:keywords "shell" "save" "async" "deferred" "auto"))]) (auto-package-update . [(1 6 1) ((emacs (24 4)) (dash (2 1 0))) "Automatically update Emacs packages." single ((:commit . "cdef79f9fc6f8347fdd05664978fb9a948ea0410") (:url . "http://github.com/rranelli/auto-package-update.el") (:keywords "package" "update"))]) (auto-minor-mode . [(20170716) ((emacs (25))) "Enable minor modes by file name and contents" single ((:commit . "06fa6975a9fb171b91a8b8234d65ef72374d64e2") (:keywords "convenience"))]) (auto-indent-mode . [(0 126) nil "Auto indent Minor mode" tar ((:commit . "ad7032ee058a74405d04d775b0b384351536bc53") (:url . "https://github.com/mlf176f2/auto-indent-mode.el/") (:keywords "auto" "indentation"))]) (auto-dictionary . [(1 1) nil "automatic dictionary switcher for flyspell" single ((:commit . "0e3567a81f7bb0ad53ed9f20c7d3d1ac40c26ad1") (:url . "http://nschum.de/src/emacs/auto-dictionary/") (:keywords "wp"))]) (auto-complete-sage . [(0 0 5) ((auto-complete (1 5 0)) (sage-shell-mode (0 0 8))) "An auto-complete source for sage-shell-mode." single ((:commit . "a61a4e58b14134712e0737280281c0b10e56da93") (:url . "https://github.com/stakemori/auto-complete-sage") (:keywords "sage" "math" "auto-complete"))]) (auto-complete-pcmp . [(0 0 2) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide auto-complete sources using pcomplete results" single ((:commit . "2595d3dab1ef3549271ca922f212928e9d830eec") (:url . "https://github.com/aki2o/auto-complete-pcmp") (:keywords "completion"))]) (auto-complete-nxml . [(0 5 0) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single ((:commit . "ac7b09a23e45f9bd02affb31847263de4180163a") (:url . "https://github.com/aki2o/auto-complete-nxml") (:keywords "completion" "html" "xml"))]) (auto-complete-exuberant-ctags . [(0 0 7) ((auto-complete (1 4 0))) "Exuberant ctags auto-complete.el source" single ((:commit . "ff6121ff8b71beb5aa606d28fd389c484ed49765") (:url . "http://code.101000lab.org") (:keywords "anto-complete" "exuberant ctags"))]) (auto-complete-clang-async . [(0 5) nil "Auto Completion source for clang for GNU Emacs" single ((:commit . "a5114e3477793ccb9420acc5cd6a1cb26be65964") (:keywords "completion" "convenience"))]) (auto-complete . [(1 5 1) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar ((:commit . "0655b7f1e6c0f8475adc55f2b86404a877f26a77"))]) (auto-compile . [(1 4 0) ((emacs (24 3)) (dash (2 13 0)) (packed (2 0 0))) "automatically compile Emacs Lisp libraries" single ((:commit . "0cbebd8fd22c88a57a834797e4841900ea1bae1c") (:url . "https://github.com/tarsius/auto-compile") (:keywords "compile" "convenience" "lisp"))]) (auth-password-store . [(2 0 0) ((emacs (24 4)) (password-store (0 1)) (seq (1 9)) (cl-lib (0 5))) "Integrate auth-source with password-store" single ((:commit . "5ca6a838489c1175de3df7af025751559eb13cb3") (:keywords "pass" "password-store" "auth-source" "username" "password" "login"))]) (aurora-config-mode . [(0 0 2) nil "Major mode for Apache Aurora configuration files" single ((:commit . "0a7ca7987c3a0824e25470389c7d25c337a81593") (:url . "https://github.com/bdd/aurora-config.el") (:keywords "languages" "configuration"))]) (aurel . [(0 9) ((emacs (24 3)) (bui (1 1 0)) (dash (2 11 0))) "Search, get info, vote for and download AUR packages" single ((:commit . "fc7ad208f43f8525f84a18941c9b55f956df8961") (:url . "https://github.com/alezost/aurel") (:keywords "tools"))]) (auctex-latexmk . [(1 0 2) ((auctex (11 87))) "Add LatexMk support to AUCTeX" single ((:commit . "4d353522650d7685acbf1d38f7dbc504f734bd84") (:url . "https://github.com/tom-tan/auctex-latexmk/") (:keywords "tex"))]) (atomic-chrome . [(2 0 0) ((emacs (24 3)) (let-alist (1 0 4)) (websocket (1 4))) "Edit Chrome text area with Emacs using Atomic Chrome" single ((:commit . "38ce9127285e1ff45f0f39b9da36a682103bdb96") (:url . "https://github.com/alpha22jp/atomic-chrome") (:keywords "chrome" "edit" "textarea"))]) (atom-one-dark-theme . [(0 4 0) nil "Atom One Dark color theme" single ((:commit . "c2ae343971f8cda7f5b5392552ce9281f52e53de") (:url . "https://github.com/jonathanchu/atom-one-dark-theme"))]) (async . [(1 9 2) nil "Asynchronous processing in Emacs" tar ((:commit . "d6222c2959caaca5c4980038756097da8a51e505") (:keywords "async") (:url . "https://github.com/jwiegley/emacs-async"))]) (assess . [(0 4) ((emacs (24 1)) (m-buffer (0 15))) "Test support functions" tar ((:commit . "87118057b3ae0e6542fa5e22050eb44d6efe8baa"))]) (asilea . [(0 2 1) ((emacs (24)) (cl-lib (0 5))) "Find best compiler options using simulated annealing" single ((:commit . "2aab1cc63b64ef08d12e84fd7ba5c94065f6039f") (:url . "https://github.com/Fanael/asilea"))]) (arview . [(1 2) nil "extract and view archives in the temporary directory" single ((:commit . "5437b4221b64b238c273a651d4792c577dba6d45") (:url . "https://github.com/afainer/arview") (:keywords "files"))]) (artbollocks-mode . [(1 1 2) nil "Improve your writing (especially about art)" single ((:commit . "583c7048a1b09cd79554423d5115f5ddd129d190") (:url . "https://github.com/sachac/artbollocks-mode"))]) (apropospriate-theme . [(0 1 0) nil "A colorful, low-contrast, light & dark theme set for Emacs with a fun name." tar ((:commit . "0d918da74a7a225fe5a586e26f5d834e579c5323") (:keywords "color" "theme") (:url . "https://github.com/waymondo/apropospriate-theme"))]) (aproject . [(0 3) nil "Basic project framework for Emacs" tar ((:commit . "3c7d23c341862dfd77fd0a64775df12ddb44ab54") (:url . "https://github.com/vietor/aproject") (:keywords "environment" "project"))]) (apples-mode . [(0 0 2) nil "Major mode for editing and executing AppleScript code" tar ((:commit . "fac47b6255e79a373c5d5e1abe66ea5d74588e9f") (:keywords "applescript" "languages"))]) (apiwrap . [(0 1 2) ((emacs (25))) "api-wrapping macros" single ((:commit . "2feb4a9c58a105867197f92c0b27f1de8d213f45") (:url . "https://github.com/vermiculus/apiwrap.el") (:keywords "tools" "maint" "convenience"))]) (apib-mode . [(0 7) ((markdown-mode (2 1))) "Major mode for API Blueprint files" single ((:commit . "6cc7c6f21b8e415b1718bb6a07ab2182e9e9dde6") (:url . "http://github.com/w-vi/apib-mode") (:keywords "tools" "api-blueprint"))]) (apache-mode . [(2 1) nil "major mode for editing Apache configuration files" single ((:commit . "0906559e0cb2997405d98ea6b2195954e3935d3b") (:keywords "languages" "faces"))]) (anzu . [(0 62) ((cl-lib (0 5)) (emacs (24))) "Show number of matches in mode-line while searching" single ((:commit . "3328619fec138862302bbe1b9acf2eea624a4c5e") (:url . "https://github.com/syohex/emacs-anzu"))]) (anything-tramp . [(0 5 4) ((emacs (24 3)) (anything (1 0))) "Tramp with anything for ssh and docker and vagrant" single ((:commit . "c6d0e9bfa0f71c7c0bb75f6df0c82dd81c486f43") (:url . "https://github.com/masasam/emacs-anything-tramp"))]) (anything-sage . [(0 0 1) ((cl-lib (0 5)) (anything (1 3 9)) (sage-shell-mode (0 0 1))) "An anything extension for sage-shell-mode." single ((:commit . "8335657d3f0611bd5fc8858160bbe87dfdbaf0f2") (:url . "https://github.com/stakemori/anything-sage") (:keywords "sage" "math" "anything"))]) (anything-replace-string . [(0 9 2) ((anything (1 3 9))) "`replace-string' and `query-replace' `anything.el' interface" single ((:commit . "1962f24243d6013bcef7e8d23136277d42e13130") (:url . "http://code.101000lab.org"))]) (anything-exuberant-ctags . [(0 1 2) ((anything (1 3 9))) "Exuberant ctags anything.el interface" single ((:commit . "97fa91eb04df11bdf4558fe7bb2f6aebf8be0d6c") (:url . "http://code.101000lab.org") (:keywords "anything" "exuberant ctags"))]) (anything . [(1 3 9) nil "open anything / QuickSilver-like candidate-selection framework" tar ((:commit . "6b9718fba257e6c2912ba70f9895251ab1926928") (:url . "http://repo.or.cz/w/anything-config.git") (:keywords "files" "frames" "help" "matching" "outlines"))]) (anyins . [(0 1 1) nil "Insert content at multiple places from shell command or kill-ring" single ((:commit . "1ff4673ca197c9bf64c65f718573bf7d478fc562") (:url . "http://github.com/antham/anyins") (:keywords "insert" "rectangular"))]) (anti-zenburn-theme . [(2 4) nil "Low-contrast Zenburn-inverted theme" single ((:commit . "53591a18aee564c6d08a5be69b4060a299903255") (:url . "https://github.com/m00natic/anti-zenburn-theme"))]) (ansible-vault . [(0 3 4) ((emacs (24 3))) "Minor mode for editing ansible vault files" single ((:commit . "57cf7e6da30250587c28ebf592d7bca9a3bae1df") (:url . "http://github.com/zellio/ansible-vault-mode") (:keywords "ansible" "ansible-vault" "tools"))]) (ansible-doc . [(0 4) ((emacs (24 3))) "Ansible documentation Minor Mode" single ((:commit . "bc8128a85a79b14f4a121105d87a5eddc33975ad") (:url . "https://github.com/lunaryorn/ansible-doc.el") (:keywords "tools" "help"))]) (ansible . [(0 1 0) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar ((:commit . "e9b9431738de4808d8ef70871069f68885cc0d98") (:url . "http://101000lab.org"))]) (ansi . [(0 4 1) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" single ((:commit . "a042c5954453bab9a74177e2b78ad17a824caebc") (:url . "http://github.com/rejeep/ansi") (:keywords "color" "ansi"))]) (annoying-arrows-mode . [(0 1 0) nil "Ring the bell if using arrows too much" single ((:commit . "fe59f3fd464e7a87cc43fb8a1f135b3bdf8a2fb3"))]) (annotate . [(0 4 7) nil "annotate files without changing them" single ((:commit . "e6af7f8ef7d241fdc9f866d57dce24beb4bb6b87") (:url . "https://github.com/bastibe/annotate.el"))]) (angular-snippets . [(0 2 3) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar ((:commit . "8f737c2cf5fce758a7a3833ebad2952b5398568d"))]) (angular-mode . [(1 0) nil "No description available." tar ((:commit . "7c0fb37f59dfd9e69f00b50e90a0e88c4e25d8c2"))]) (android-mode . [(0 5 0) nil "Minor mode for Android application development" single ((:commit . "f274da87429617b0b9c5889d46b36de64d982da4") (:url . "https://github.com/remvee/android-mode") (:keywords "tools" "processes"))]) (anaphora . [(1 0 0) nil "anaphoric macros providing implicit temp variables" single ((:commit . "20bf7dcfa502538d23525f0905b4f845d97993d3") (:url . "http://github.com/rolandwalker/anaphora") (:keywords "extensions"))]) (anaconda-mode . [(0 1 8) ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" single ((:commit . "95fdfab07600171daccb0e9e98fb91c11237fd48") (:url . "https://github.com/proofit404/anaconda-mode"))]) (amd-mode . [(2 8) ((emacs (25)) (projectile (20161008 47)) (s (1 9 0)) (f (0 16 2)) (seq (2 16)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) "Minor mode for handling JavaScript AMD module requirements." single ((:commit . "977b53e28b3141408fff4814be8b67ee23650cac") (:keywords "javascript" "amd" "projectile"))]) (all-the-icons-ivy . [(0 1 2) ((emacs (24 4)) (all-the-icons (2 4 0)) (ivy (0 8 0))) "Shows icons while using ivy and counsel" single ((:commit . "aa791d6b0055bce3ac68970a8ef6abf0726edf0f") (:keywords "faces"))]) (all-the-icons . [(3 1 1) ((emacs (24 3)) (font-lock+ (0)) (memoize (1 0 1))) "A library for inserting Developer icons" tar ((:commit . "bb69345ead914345faad582723a2b61618f13289") (:url . "https://github.com/domtronn/all-the-icons.el") (:keywords "convenient" "lisp"))]) (alert . [(1 2) ((gntp (0 1)) (log4e (0 3 0))) "Growl-style notification system for Emacs" single ((:commit . "b301478e34a5c8bd27c17fc7605e6dd576e97935") (:url . "https://github.com/jwiegley/alert") (:keywords "notification" "emacs" "message"))]) (alect-themes . [(0 8) ((emacs (24 0))) "Configurable light, dark and black themes for Emacs 24 or later" tar ((:commit . "1812abbe0079d1075525d9fb2da6fcfec7db3766") (:url . "https://github.com/alezost/alect-themes") (:keywords "color" "theme"))]) (alda-mode . [(0 1 0) ((emacs (24 0))) "A simple major mode for the musical programming language Alda" single ((:commit . "921b1d39ee1122c0f6935598dc17aaa904e74819") (:url . "http://github.com/jgkamat/alda-mode") (:keywords "alda" "highlight"))]) (alchemist . [(1 8 2) ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4))) "Elixir tooling integration into Emacs" tar ((:commit . "34caeed1bd231c7dfa8d2b9aa5c5de2b2a059601") (:url . "http://www.github.com/tonini/alchemist.el") (:keywords "languages" "elixir" "elixirc" "mix" "hex" "alchemist"))]) (airline-themes . [(1 7) ((powerline (2 3))) "vim-airline themes for emacs powerline" tar ((:commit . "bd9624a94618f4144762032a93549f53ffc1e7b3") (:url . "http://github.com/AnthonyDiGirolamo/airline-themes") (:keywords "evil" "mode-line" "powerline" "airline" "themes"))]) (ahungry-theme . [(1 4 0) ((emacs (24))) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." single ((:commit . "e3d7e22cb10582a443b0e245be68aca936cd6abf") (:url . "https://github.com/ahungry/color-theme-ahungry") (:keywords "ahungry" "palette" "color" "theme" "emacs" "color-theme" "deftheme"))]) (ahk-mode . [(1 5 6) ((emacs (24 3))) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" single ((:commit . "bf3205efe7b7a40f3c8978f68f14ea3a939cffa8") (:url . "https://github.com/ralesi/ahk-mode") (:keywords "ahk" "autohotkey" "hotkey" "keyboard shortcut" "automation"))]) (aggressive-indent . [(1 8 3) ((emacs (24 1)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single ((:commit . "998407f56009f441a7cb83d678118d4d8e68f661") (:url . "https://github.com/Malabarba/aggressive-indent-mode") (:keywords "indent" "lisp" "maint" "tools"))]) (ag . [(0 47) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "A front-end for ag ('the silver searcher'), the C ack replacement." single ((:commit . "f2cfea210b165564e8d44f4c980b2fedac2462c1"))]) (aes . [(0 8) nil "Implementation of AES" single ((:commit . "d78796facc034b09f379cda5f27090f3139305ec") (:url . "https://github.com/Sauermann/emacs-aes") (:keywords "data" "tools"))]) (adoc-mode . [(0 6 6) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single ((:commit . "995785538489e573ad208f73c4e833ba60c5cfdb") (:url . "https://github.com/sensorflo/adoc-mode/wiki") (:keywords "wp" "asciidoc"))]) (addressbook-bookmark . [(1 0) ((emacs (24))) "An address book based on Standard Emacs bookmarks." single ((:commit . "ad3c73369b804a48803fdfdf2ab613e6220260de") (:url . "https://github.com/thierryvolpiatto/addressbook-bookmark"))]) (add-node-modules-path . [(1 1 0) nil "Add node_modules to your exec-path" single ((:commit . "8eef7fa6765af1716fc21db08f19f3d3e9b68998") (:url . "https://github.com/codesuki/add-node-modules-path") (:keywords "javascript" "node" "node_modules" "eslint"))]) (add-hooks . [(3 1 0) nil "Functions for setting multiple hooks" single ((:commit . "edd4cb032a509b576d88f4cc0521ebfe66a9e6c7") (:url . "https://github.com/nickmccurdy/add-hooks") (:keywords "lisp"))]) (actionscript-mode . [(7 2 2) nil "A simple mode for editing Actionscript 3 files" single ((:commit . "fddd7220342d29e7eca734f6b798b7a2849717a5") (:keywords "language" "modes"))]) (ace-window . [(0 9 0) ((avy (0 2 0))) "Quickly switch windows." single ((:commit . "eef897e590c4ce63c28fd29ebff3c97aec8a69ae") (:url . "https://github.com/abo-abo/ace-window") (:keywords "window" "location"))]) (ace-popup-menu . [(0 2 1) ((emacs (24 3)) (avy-menu (0 1))) "Replace GUI popup menu with something more efficient" single ((:commit . "7330fb1a5953e0f1783a6e4db6dae73201139aed") (:url . "https://github.com/mrkkrp/ace-popup-menu") (:keywords "convenience" "popup" "menu"))]) (ace-pinyin . [(0 2 5) ((ace-jump-mode (2 0)) (avy (0 2 0)) (pinyinlib (0 1 0))) "Jump to Chinese characters using ace-jump-mode or avy" single ((:commit . "c444d8d6861dafd06dd41e694dc9db32652e3b7c") (:url . "https://github.com/cute-jumper/ace-pinyin") (:keywords "extensions"))]) (ace-link . [(0 4 0) ((avy (0 2 0))) "Quickly follow links" single ((:commit . "5bf301e2c74960246427d3e48889a49f9f8ec6ba") (:url . "https://github.com/abo-abo/ace-link") (:keywords "convenience" "links"))]) (ace-jump-zap . [(0 1 1) ((ace-jump-mode (1 0)) (dash (2 10 0))) "Character zapping, `ace-jump-mode` style" single ((:commit . "0acdd83a5abd59606495e67a4ee01f7856e5d359") (:url . "https://github.com/waymondo/ace-jump-zap") (:keywords "convenience" "tools" "extensions"))]) (ace-jump-mode . [(2 0) nil "a quick cursor location minor mode for emacs" single ((:commit . "a62a6867811cd739dd98a5e00a2d2e17edfb5b71") (:url . "https://github.com/winterTTr/ace-jump-mode/") (:keywords "motion" "location" "cursor"))]) (ace-jump-helm-line . [(0 5 0) ((avy (0 4 0)) (helm (1 6 3))) "Ace-jump to a candidate in helm window" single ((:commit . "8779050e4794279946892b6a156d0086554a9c9e") (:url . "https://github.com/cute-jumper/ace-jump-helm-line") (:keywords "extensions"))]) (ace-jump-buffer . [(0 3 1) ((ace-jump-mode (1 0)) (dash (2 4 0))) "fast buffer switching extension to `ace-jump-mode'" single ((:commit . "41f8bb0744cdf9c219d25b417f2ffbd0883469e7") (:url . "https://github.com/waymondo/ace-jump-buffer"))]) (ace-isearch . [(0 1 4) ((ace-jump-mode (2 0)) (avy (0 3)) (helm-swoop (1 4)) (emacs (24))) "A seamless bridge between isearch, ace-jump-mode, avy and helm-swoop" single ((:commit . "7e041d058492c5c35ec70de0e7c5586043e7e5ec") (:url . "https://github.com/tam17aki/ace-isearch"))]) (ace-flyspell . [(0 1 3) ((avy (0 4 0))) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" single ((:commit . "044d38fb8eb390ef1f51cf92cfe5c4ffd103044c") (:url . "https://github.com/cute-jumper/ace-flyspell") (:keywords "extensions"))]) (ac-slime . [(0 8) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) "An auto-complete source using slime completions" single ((:commit . "df6c4e88b5ba2d15d47a651ecf7edc0986624112") (:url . "https://github.com/purcell/ac-slime"))]) (ac-rtags . [(2 10) ((auto-complete (1 4 0)) (rtags (2 10))) "auto-complete back-end for RTags" single ((:commit . "3b3ace901f53827daef81d4c13658ec4feb318b4") (:url . "http://rtags.net"))]) (ac-racer . [(0 2) ((emacs (24 3)) (auto-complete (1 5 0)) (racer (0 0 2))) "auto-complete source of racer" single ((:commit . "4408c2d652dec0432e20c05e001db8222d778c6b") (:url . "https://github.com/syohex/emacs-ac-racer"))]) (ac-php-core . [(1 7 9) ((emacs (24)) (dash (1)) (php-mode (1)) (xcscope (1)) (s (1)) (f (0 17 0)) (popup (0 5 0))) "gen tags for php" tar ((:commit . "e0aaae30e4e5f18390e5d00953db02c1f03c44f6") (:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense"))]) (ac-php . [(1 7 9) ((ac-php-core (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0))) "auto-completion source for php" single ((:commit . "e0aaae30e4e5f18390e5d00953db02c1f03c44f6") (:url . "https://github.com/xcwen/ac-php") (:keywords "completion" "convenience" "intellisense"))]) (ac-octave . [(0 6) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single ((:commit . "f131ed6859a0945ac0c0520d2ab076f16ce7314c") (:url . "https://github.com/coldnew/ac-octave") (:keywords "octave" "auto-complete" "completion"))]) (ac-mozc . [(0 0 4) ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) "auto-complete sources for Japanese input using Mozc" single ((:commit . "4c6c8be4701010d9362184437c0f783e0335c631") (:url . "https://github.com/igjit/ac-mozc"))]) (ac-ispell . [(0 7) ((auto-complete (1 4)) (cl-lib (0 5))) "ispell completion source for auto-complete" single ((:commit . "a8c84f7f0b96dc091abc51b1698f24e9c994e6aa") (:url . "https://github.com/syohex/emacs-ac-ispell"))]) (ac-inf-ruby . [(0 4) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single ((:commit . "3e22b66d3d3e2712a0fe783b5cdd0583a0d4c318") (:keywords "languages" "tools"))]) (ac-html-csswatcher . [(0 1 7) ((web-completion-data (0 1))) "css/less class/id completion with `ac-html' or `company-web'" single ((:commit . "dadc3c595cf1708291096c03987f1981f3cabc6b") (:url . "https://github.com/osv/ac-html-csswatcher") (:keywords "html" "css" "less" "auto-complete"))]) (ac-html-bootstrap . [(0 9 3) ((web-completion-data (0 1))) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" tar ((:commit . "591e1e996c820da218ea1eee0a500c556769f128") (:url . "https://github.com/osv/ac-html-bootstrap") (:keywords "html" "auto-complete" "bootstrap" "cssx"))]) (ac-html . [(0 31) ((auto-complete (1 4)) (web-completion-data (0 1))) "auto complete source for html tags and attributes" tar ((:commit . "415a78c3b84855b0c0411832d21a0fb63239b184") (:url . "https://github.com/cheunghy/ac-html") (:keywords "html" "auto-complete" "rails" "ruby"))]) (ac-helm . [(2 1) ((helm (20130328)) (auto-complete (1 4 0)) (popup (0 5 0))) "Auto Complete with Helm" single ((:commit . "f2110576b0eb35850a7f638c1a991a9fa0c8da3a") (:keywords "completion" "convenience" "helm"))]) (ac-haskell-process . [(0 7) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single ((:commit . "0362d4323511107ec70e7165cb612f3ab01b712f") (:keywords "languages"))]) (ac-geiser . [(0 1) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar ((:commit . "0e2e36532336f27e3dc3b01fff55ad1a4329817d"))]) (ac-etags . [(0 6) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single ((:commit . "8cd188b2e4908285ba8178bbd18a555edd7282e8") (:url . "https://github.com/syohex/emacs-ac-etags"))]) (ac-emoji . [(0 2) ((auto-complete (1 5 0)) (cl-lib (0 5))) "auto-complete source of Emoji" tar ((:commit . "53677f754929ead403ccde64b714ebb6b8fc808e") (:url . "https://github.com/syohex/emacs-ac-emoji"))]) (ac-emacs-eclim . [(0 4) ((eclim (0 3)) (auto-complete (1 5))) "auto-complete source for eclim" single ((:commit . "8203fbf8544e65324a948a67718f7a16ba2d52e6"))]) (ac-dcd . [(0 4) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) "Auto Completion source for dcd for GNU Emacs" single ((:commit . "4cb14b1e9fcfc4bf4a084765bc1eb10abfbbbd49") (:url . "http://github.com/atilaneves/ac-dcd") (:keywords "languages"))]) (ac-clang . [(1 9 2) ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) "Auto Completion source by libclang for GNU Emacs" tar ((:commit . "8fdfbbebf096017ab45cedcff2c43a0a5d8b9686") (:url . "https://github.com/yaruopooner/ac-clang") (:keywords "completion" "convenience" "intellisense"))]) (ac-cider . [(0 2 3) ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) "Clojure auto-complete sources using CIDER" single ((:commit . "4be034e5f82421b0a836ec7ff45815c67caffcee") (:url . "https://github.com/clojure-emacs/ac-cider") (:keywords "languages" "clojure" "nrepl" "cider" "compliment"))]) (ac-capf . [(0 1) ((auto-complete (1 4)) (cl-lib (0 5))) "auto-complete source with completion-at-point" single ((:commit . "17571dba0a8f98111f2ab758e9bea285b263781b") (:url . "https://github.com/syohex/emacs-ac-capf"))]) (ac-cake2 . [(1 0 1) ((cake2 (1 1 2)) (auto-complete (1 4 0))) "CakePHP 2 Minor Mode auto-complete.el source" single ((:commit . "ffbb679c0d5c261b05abde06d8d1d1e5d5990b6a") (:url . "http://code.101000lab.org"))]) (ac-cake . [(1 0 0) ((cake (1 4 2)) (auto-complete (1 4))) "CakePHP Minor Mode auto-complete.el source" single ((:commit . "f01b3da7e2d20ea5a62daf62412c7dc1ad0130ff") (:url . "http://code.101000lab.org"))]) (ac-anaconda . [(0 1 0) ((auto-complete (1 4 0)) (anaconda-mode (0 1 1)) (dash (2 6 0))) "Anaconda sources for auto-complete-mode" single ((:commit . "d0dec5c026235f65f9fd6594540df8886ed1b6a8") (:url . "https://github.com/proofit404/ac-anaconda"))]) (ac-alchemist . [(0 1) ((auto-complete (1 5 0)) (alchemist (1 3 1)) (cl-lib (0 5))) "auto-complete source for alchemist" single ((:commit . "31114f3e1e7cc1e101d0b81819d7876d8861df92") (:url . "https://github.com/syohex/emacs-ac-alchemist"))]) (abyss-theme . [(0 5) ((emacs (24))) "A dark theme with contrasting colours." single ((:commit . "e860499a0b2ae0d6d2a27eab12b67dec896a7afc") (:url . "https://github.com/mgrbyte/emacs-abyss-theme") (:keywords "theme" "dark" "contrasting colours"))]) (abc-mode . [(20140225 944) nil "Major mode for editing abc music files" single ((:commit . "6b5ab7402287dab5a091e94fec9982dc45d9d287") (:keywords "local" "docs"))]) (aa-edit-mode . [(0 0 2) ((emacs (24 3)) (navi2ch (2 0 0))) "Major mode for editing AA(S_JIS Art) and .mlt file" single ((:commit . "2e56f3b627f0f19fbfce4968180b4d736f7afb5d") (:keywords "wp" "text" "shiftjis" "mlt" "yaruo"))]) (0blayout . [(1 0 2) nil "Layout grouping with ease" single ((:commit . "b8bb44b5336965b5519b9a826a0f46f8ee31c471") (:url . "https://github.com/etu/0blayout") (:keywords "convenience" "window-management"))]))
