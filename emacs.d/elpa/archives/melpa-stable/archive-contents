
(1 (zzz-to-char . [(0 1 2) ((emacs (24 4)) (cl-lib (0 5)) (avy (0 3 0))) "Fancy version of `zap-to-char' command" single]) (zygospore . [(0 0 3) nil "reversible C-x 1 (delete-other-windows)" single]) (zotxt . [(0 1 34) ((request-deferred (0 2 0))) "Tools to integrate emacs with Zotero via the zotxt plugin." tar]) (zotelo . [(1 3) nil "Manage Zotero collections from emacs" single]) (zop-to-char . [(1 1) ((cl-lib (0 5))) "A replacement of zap-to-char." single]) (zoom-window . [(0 5) ((emacs (24 3))) "Zoom window like tmux" single]) (zoom . [(0 2 1) ((emacs (24 4))) "Fixed and automatic balanced window layout" single]) (zone-nyan . [(0 2 2) ((esxml (0 3 1))) "Zone out with nyan cat" single]) (zombie-trellys-mode . [(0 2 1) ((emacs (24)) (cl-lib (0 5)) (haskell-mode (1 5))) "A minor mode for interaction with Zombie Trellys" single]) (zerodark-theme . [(4 5) ((all-the-icons (2 0 0)) (magit (2 8 0)) (flycheck (29))) "A dark, medium contrast theme for Emacs" single]) (zephir-mode . [(0 3 3) ((emacs (24 3))) "Major mode for editing Zephir code" single]) (zenburn-theme . [(2 5) nil "A low contrast color theme for Emacs." single]) (zel . [(0 1 2) ((emacs (25)) (frecency (0 1))) "Access frecent files easily" single]) (youdao-dictionary . [(0 4) ((popup (0 5 0)) (chinese-word-at-point (0 2)) (names (0 5)) (emacs (24))) "Youdao Dictionary interface for Emacs" single]) (yoshi-theme . [(6 1 0) nil "Theme named after my cat" single]) (yesql-ghosts . [(0 1 0) ((s (1 9 0)) (dash (2 10 0)) (cider (0 8 0))) "Display ghostly yesql defqueries inline" single]) (ydk-mode . [(1 0 0) nil "Language support for Yu-Gi-Oh! deck files" single]) (ycmd . [(1 2) ((emacs (24 4)) (dash (2 13 0)) (s (1 11 0)) (deferred (0 5 1)) (cl-lib (0 6 1)) (let-alist (1 0 5)) (request (0 3 0)) (request-deferred (0 3 0)) (pkg-info (0 6))) "emacs bindings to the ycmd completion server" tar]) (yaxception . [(0 3 3) nil "Provide framework about exception like Java for Elisp" single]) (yatex . [(1 80) nil "Yet Another tex-mode for emacs //野鳥//" tar nil]) (yatemplate . [(3 0) ((yasnippet (0 8 1)) (emacs (24 3))) "File templates with yasnippet" tar]) (yasnippet-snippets . [(0 5) ((yasnippet (0 8 0))) "Collection of yasnippet snippets" tar]) (yasnippet . [(0 13 0) ((cl-lib (0 5))) "Yet another snippet extension for Emacs." tar]) (yascroll . [(0 1) nil "Yet Another Scroll Bar Mode" single]) (yarn-mode . [(1 0) ((emacs (24 3))) "Major mode for yarn.lock files." single]) (yard-mode . [(0 1) nil "Minor mode for Ruby YARD comments" single]) (yapfify . [(0 0 6) nil "(automatically) format python buffers using YAPF." single]) (yankpad . [(1 6) nil "Paste snippets from an org-mode file" single]) (yang-mode . [(0 9 8) nil "major mode for editing YANG files" single]) (yaml-mode . [(0 0 13) ((emacs (24 1))) "Major mode for editing YAML files" single]) (yagist . [(0 8 12) ((cl-lib (0 3))) "Yet Another Emacs integration for gist.github.com" single]) (yafolding . [(0 4 0) nil "Yet another folding extension for Emacs" single]) (xtest . [(1 1 0) ((cl-lib (0 5))) "Simple Testing with Emacs & ERT" single]) (xterm-color . [(1 7) ((cl-lib (0 5))) "ANSI & XTERM 256 color support" single]) (xref-js2 . [(1 5) ((emacs (25)) (js2-mode (20150909))) "Jump to references/definitions using ag & js2-mode's AST" single]) (xquery-tool . [(0 1 10) nil "A simple interface to saxonb's xquery." single]) (xmlgen . [(0 5) nil "A DSL for generating XML." single]) (xml-rpc . [(1 6 12) nil "An elisp implementation of clientside XML-RPC" single]) (xkcd . [(1 1) ((json (1 3))) "View xkcd from Emacs" single]) (xcscope . [(1 3) nil "cscope interface for (X)Emacs" single]) (xcode-project . [(1 0 0) ((emacs (25))) "A package for reading Xcode project files." tar]) (xbm-life . [(0 1 3) nil "A XBM version of Conway's Game of Life" single]) (x86-lookup . [(1 2 0) ((emacs (24 3)) (cl-lib (0 3))) "jump to x86 instruction documentation" single]) (wttrin . [(0 1 0) ((emacs (24 4)) (xterm-color (1 0))) "Emacs frontend for weather web service wttr.in" single]) (wsd-mode . [(0 5 0) nil "Emacs major-mode for www.websequencediagrams.com" tar]) (ws-butler . [(0 6) nil "Unobtrusively remove trailing whitespace." single]) (writeroom-mode . [(3 7) ((emacs (24 1)) (visual-fill-column (1 9))) "Minor mode for distraction-free writing" tar]) (writegood-mode . [(2 0 3) nil "Polish up poor writing on the fly" single]) (wrap-region . [(0 7 3) ((dash (1 0 3))) "Wrap text with punctation or tag" single]) (worf . [(0 1 0) ((swiper (0 7 0)) (ace-link (0 1 0)) (hydra (0 13 0))) "A warrior does not press so many keys! (in org-mode)" single]) (wordsmith-mode . [(1 0 0) nil "Syntax analysis and NLP text-processing in Emacs (OSX-only)" single]) (wordgen . [(0 1 4) ((emacs (24)) (cl-lib (0 5))) "Random word generator" single]) (wonderland . [(0 1 1) ((dash (2 0 0)) (dash-functional (1 0 0)) (multi (2 0 0)) (emacs (24))) "declarative configuration for Emacsen" single]) (wolfram . [(1 1 1) nil "Wolfram Alpha Integration" single]) (wn-mode . [(1 4) ((emacs (24))) "numeric window switching shortcuts" single]) (with-simulated-input . [(2 2) ((emacs (24 4)) (seq (2 0)) (s (0))) "A macro to simulate user input non-interactively" single]) (with-editor . [(2 7 3) ((emacs (24 4)) (async (1 9))) "Use the Emacsclient as $EDITOR" tar]) (wispjs-mode . [(0 2 0) ((clojure-mode (0))) "Major mode for Wisp code." single]) (wisp-mode . [(0 9 8) nil "Tools for wisp: the Whitespace-to-Lisp preprocessor" single ((:keywords "languages" "lisp"))]) (winum . [(2 0 0) ((cl-lib (0 5)) (dash (2 13 0))) "Navigate windows and frames using numbers." single]) (winring . [(5 1) nil "Window configuration rings" single]) (windsize . [(0 1) nil "Simple, intuitive window resizing" single]) (window-purpose . [(1 6) ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) "Purpose-based window management for Emacs" tar]) (window-numbering . [(1 1 2) nil "No description available." single]) (window-layout . [(1 4) nil "window layout manager" single]) (window-end-visible . [(0 1 0) nil "Find the last visible point in a window" single]) (win-switch . [(1 1 4) nil "fast, dynamic bindings for window-switching/resizing" single]) (wiki-nav . [(1 0 2) ((button-lock (1 0 2)) (nav-flash (1 0 0))) "Simple file navigation using [[WikiStrings]]" single]) (widget-mvc . [(0 0 2) nil "MVC framework for the emacs widgets" single]) (whole-line-or-region . [(1 3 1) nil "operate on current line if region undefined" single]) (whizzml-mode . [(0 3 0) ((emacs (24 4))) "Programming mode for editing WhizzML files" tar]) (whitespace-cleanup-mode . [(0 10) nil "Intelligently call whitespace-cleanup on save" single]) (whitaker . [(0 3) ((dash (2 10 0))) "Comint interface for Whitaker's Words" single]) (which-key . [(3 3 0) ((emacs (24 4))) "Display available keybindings in popup" single]) (wgrep-pt . [(2 1 10) ((wgrep (2 1 5))) "Writable pt buffer and apply the changes to files" single]) (wgrep-helm . [(2 1 10) ((wgrep (2 1 1))) "Writable helm-grep-mode buffer and apply the changes to files" single]) (wgrep-ag . [(2 1 10) ((wgrep (2 1 5))) "Writable ag buffer and apply the changes to files" single]) (wgrep-ack . [(2 1 10) ((wgrep (2 1 1))) "Writable ack-and-a-half buffer and apply the changes to files" single]) (wgrep . [(2 1 10) nil "Writable grep buffer and apply the changes to files" single]) (weibo . [(1 0) nil "No description available." tar]) (weechat . [(0 4 0) ((s (1 3 1)) (cl-lib (0 2)) (emacs (24)) (tracking (1 2))) "Chat via WeeChat's relay protocol in Emacs" tar]) (websocket . [(1 10) ((cl-lib (0 5))) "Emacs WebSocket client and server" single]) (webpaste . [(2 1 0) ((emacs (24 4)) (request (0 2 0)) (cl-lib (0 5))) "Paste to pastebin-like services" single]) (weblogger . [(1 4 5) ((xml-rpc (1 6 8))) "Weblog maintenance via XML-RPC APIs" single ((:url . "http://launchpad.net/weblogger-el") (:keywords "weblog" "blogger" "cms" "movable" "type" "openweblog" "blog"))]) (web-search . [(0 1 1) ((emacs (24 3))) "Open a web search" tar]) (web-mode-edit-element . [(2 1) ((emacs (24 4)) (web-mode (14))) "Helper-functions for attribute- and element-handling" tar]) (web-mode . [(16) ((emacs (23 1))) "major mode for editing web templates" single]) (web-completion-data . [(0 2) nil "Shared completion data for ac-html and company-web" tar]) (web-beautify . [(0 3 2) nil "Format HTML, CSS and JavaScript/JSON by js-beautify" single]) (weather-metno . [(0 1 0) ((emacs (24)) (cl-lib (0 3))) "Weather data from met.no in Emacs" tar]) (wcheck-mode . [(2016 1 30) nil "General interface for text checkers" tar]) (wc-mode . [(1 3) nil "Running word count with goals (minor mode)" single]) (wc-goal-mode . [(2 1) nil "Running word count with goals (minor mode)" single]) (wandbox . [(0 6 4) ((emacs (24)) (request (0 3 0)) (s (1 10 0))) "Wandbox client" tar]) (wacspace . [(0 4 2) ((dash (1 2 0)) (cl-lib (0 2))) "The WACky WorkSPACE manager for emACS" tar]) (w32-browser . [(235) nil "Run Windows application associated with a file." single]) (vue-mode . [(0 4) ((mmm-mode (0 5 5)) (vue-html-mode (0 2)) (ssass-mode (0 2)) (edit-indirect (0 1 4))) "Major mode for vue component based on mmm-mode" single]) (vue-html-mode . [(0 2) nil "Major mode for editing Vue.js templates" single]) (volatile-highlights . [(1 11) nil "Minor mode for visual feedback on some operations." single]) (voca-builder . [(0 2 0) nil "No description available." single]) (vlf . [(1 7 1) nil "View Large Files" tar]) (visual-regexp-steroids . [(1 1 0) ((visual-regexp (1 1))) "Extends visual-regexp to support other regexp engines" tar]) (visual-regexp . [(1 1 1) ((cl-lib (0 2))) "A regexp/replace command for Emacs with interactive visual feedback" single]) (visual-fill-column . [(1 11) ((emacs (24 3))) "fill-column for visual-line-mode" single]) (visible-mark . [(0 1) nil "Make marks visible." single]) (virtualenvwrapper . [(0 1 0) ((dash (1 5 0)) (s (1 6 1))) "a featureful virtualenv tool for Emacs" single]) (vimish-fold . [(0 2 3) ((emacs (24 4)) (cl-lib (0 5)) (f (0 18 0))) "Fold text like in Vim" single]) (vim-region . [(0 3 0) ((expand-region (20140127))) "Select region as vim" single]) (vhdl-tools . [(5 9) ((ggtags (0 8 12)) (emacs (26 1)) (outshine (2 0)) (helm (2 9 6))) "Utilities for navigating vhdl sources." single]) (vertigo . [(1 0) ((dash (2 11 0))) "Jump across lines using the home row." single]) (vector-utils . [(0 1 2) nil "Vector-manipulation utility functions" single]) (vdirel . [(0 2 0) ((emacs (24 4)) (org-vcard (0 1 0)) (helm (1 7 0)) (seq (1 11))) "Manipulate vdir (i.e., vCard) repositories" single]) (vdiff-magit . [(0 3 1) ((emacs (24 4)) (vdiff (0 3)) (magit (2 10 0))) "magit integration for vdiff" single]) (vdiff . [(0 2 2) ((emacs (24 4)) (hydra (0 13 0))) "A diff tool similar to  vimdiff" single]) (vcomp . [(0 3 1) nil "compare version strings" single]) (vc-msg . [(0 0 4) ((emacs (24 3)) (popup (0 5 0))) "Show commit information of current line" tar]) (vc-darcs . [(1 19) nil "a VC backend for darcs" single ((:keywords "vc"))]) (vbasense . [(0 1 1) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a environment like Visual Basic Editor." tar]) (vagrant . [(0 6 1) nil "Manage a vagrant box from emacs" single]) (v2ex-mode . [(0 2) ((cl-lib (0 5)) (request (0 2)) (let-alist (1 0 3))) "Major mode for visit http://v2ex.com/ site." single]) (utop . [(2 2 0) ((emacs (24))) "Universal toplevel for OCaml" single]) (usql . [(0 0 3) ((emacs (25 1))) "U-SQL support for sql-mode" single]) (use-package-el-get . [(0 1) ((use-package (1 0))) "el-get support for use package" single]) (use-package . [(2 3) ((bind-key (1 0)) (diminish (0 44))) "A use-package declaration for simplifying your .emacs" single]) (uptimes . [(3 6) ((cl-lib (0 5)) (emacs (24))) "Track and display emacs session uptimes." single]) (unkillable-scratch . [(0 1) nil "Disallow buffers from being killed by regexp -- default is *scratch* buffer" single]) (unify-opening . [(2 1 0) ((emacs (24 4))) "Unify the mechanism to open files" single]) (unicode-whitespace . [(0 2 4) ((ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "teach whitespace-mode about fancy characters" single]) (unicode-progress-reporter . [(0 5 4) ((emacs (24 1 0)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Progress-reporter with fancy characters" single]) (unicode-fonts . [(0 4 8) ((font-utils (0 7 8)) (ucs-utils (0 8 2)) (list-utils (0 4 2)) (persistent-soft (0 8 10)) (pcache (0 3 1))) "Configure Unicode fonts" single]) (unicode-escape . [(1 1) ((emacs (24)) (names (20151201 0)) (dash (2 12 1))) "Escape/Unescape unicode notations" single]) (unicode-enbox . [(0 1 4) ((string-utils (0 3 2)) (ucs-utils (0 7 6)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Surround a string with box-drawing characters" single]) (unfill . [(0 2) nil "Unfill paragraphs or regions, and toggle between filled & unfilled" single]) (underwater-theme . [(1 1 0) nil "A gentle, deep blue color theme" single]) (underline-with-char . [(3 0 0) ((emacs (24))) "Underline with a char" single]) (undercover . [(0 6 1) ((emacs (24)) (dash (2 0 0)) (shut-up (0 3 2))) "Test coverage library for Emacs Lisp" single]) (ucs-utils . [(0 8 4) ((persistent-soft (0 8 8)) (pcache (0 2 3)) (list-utils (0 4 2))) "Utilities for Unicode characters" tar]) (ubuntu-theme . [(4 2) nil "A theme inspired by the default terminal colors in Ubuntu" single]) (typo . [(1 1) nil "Minor mode for typographic editing" single]) (typit . [(0 2 1) ((emacs (24 4)) (f (0 18)) (mmt (0 1 1))) "Typing game similar to tests on 10 fast fingers" tar]) (typescript-mode . [(0 3) nil "Major mode for editing typescript" single]) (typed-clojure-mode . [(1 0 0) ((clojure-mode (2 1 1)) (cider (0 5 0))) "Typed Clojure minor mode for Emacs" single]) (twittering-mode . [(3 0 0) nil "Major mode for Twitter" single]) (twilight-anti-bright-theme . [(0 3 0) nil "A soothing Emacs 24 light-on-dark theme" single]) (turing-machine . [(0 2 0) ((emacs (24 4))) "Single-tape Turing machine simulator" single]) (tup-mode . [(1 3 1) nil "Major mode for editing files for Tup" single]) (tumble . [(1 5) nil "an Tumblr mode for Emacs" single]) (tuareg . [(2 1 0) ((caml (3 12 0 1))) "OCaml mode for Emacs." tar]) (tss . [(0 6 0) ((auto-complete (1 4 0)) (json-mode (1 1 0)) (log4e (0 2 0)) (yaxception (0 1))) "provide a interface for auto-complete.el/flymake.el on typescript-mode." tar]) (try . [(0 0 1) ((emacs (24))) "Try out Emacs packages." single]) (truthy . [(0 2 8) ((list-utils (0 4 2))) "Test the content of a value" single]) (trr . [(2 0 0) nil "a type-writing training program on GNU Emacs." tar]) (treepy . [(1 0 0) ((emacs (25 1))) "Generic tree traversal tools" single]) (treemacs-projectile . [(2 2) ((projectile (0 14 0)) (treemacs (0))) "Projectile integration for treemacs" single]) (treemacs-evil . [(2 2) ((evil (1 2 12)) (treemacs (0))) "Evil mode integration for treemacs" single]) (treemacs . [(2 2) ((emacs (25 2)) (cl-lib (0 5)) (dash (2 11 0)) (s (1 10 0)) (f (0 11 0)) (ace-window (0 9 0)) (pfuture (1 2)) (hydra (0 13 2)) (ht (2 2))) "A tree style file explorer package" tar]) (travis . [(0 6 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Travis" tar]) (transmission . [(0 12 1) ((emacs (24 4)) (let-alist (1 0 5))) "Interface to a Transmission session" single]) (tracking . [(2 10) nil "Buffer modification tracking" tar]) (traad . [(3 1 1) ((dash (2 13 0)) (deferred (0 3 2)) (popup (0 5 0)) (request (0 2 0)) (request-deferred (0 2 0)) (virtualenvwrapper (20151123))) "emacs interface to the traad refactoring server." single]) (toxi-theme . [(0 1 2) ((emacs (24))) "A dark color theme by toxi" single ((:url . "http://bitbucket.org/postspectacular/toxi-theme/"))]) (tox . [(0 4 0) nil "Launch current python test with tox" single]) (total-lines . [(0 2 0) ((emacs (24 3))) "Keep track of a buffer's total number of lines" single]) (toc-org . [(1 0 1) nil "add table of contents to org-mode files (formerly, org-toc)" single]) (timonier . [(0 1 0) ((s (1 11 0)) (dash (2 12 0)) (pkg-info (0 5 0)) (hydra (0 13 6)) (request (0 2 0)) (all-the-icons (2 0 0))) "Timonier, Manage Kubernetes Applications from Emacs" tar]) (timesheet . [(0 4 0) ((s (1)) (org (7)) (auctex (11))) "Timesheet management add-on for org-mode" tar]) (timer-revert . [(0 1) nil "minor mode to revert buffer for a given time interval." single]) (tide . [(2 8 3 1) ((dash (2 10 0)) (s (1 11 0)) (flycheck (27)) (typescript-mode (0 1)) (cl-lib (0 5))) "Typescript Interactive Development Environment" tar]) (tidal . [(0 9 8) ((haskell-mode (16)) (emacs (24))) "Interact with TidalCycles for live coding patterns" single]) (tickscript-mode . [(0 4 1) ((emacs (24 1))) "A major mode for Tickscript files" single]) (thrift . [(0 11 0) nil "Major mode for Apache Thrift files" single]) (thinks . [(1 12) ((cl-lib (0 5))) "Insert text in a think bubble." single]) (theme-looper . [(1 0 0) ((cl-lib (0 5))) "Loop thru the available color-themes" single]) (theme-changer . [(2 1 0) nil "Sunrise/Sunset Theme Changer for Emacs" single]) (textx-mode . [(0 0 2) ((emacs (24 3))) "Major mode for editing TextX files" single]) (textmate-to-yas . [(0 21) nil "Import Textmate macros into yasnippet syntax" tar]) (textmate . [(1) nil "No description available." single]) (tex-smart-umlauts . [(1 4 0) nil "Smart umlaut conversion for TeX." single ((:url . "http://hub.darcs.net/lyro/tex-smart-umlauts") (:keywords "tex" "wp"))]) (test-simple . [(1 0) nil "Simple Unit Test Framework for Emacs Lisp" single]) (test-kitchen . [(0 3 0) nil "Run test-kitchen inside of emacs" single]) (test-case-mode . [(1 0) ((fringe-helper (0 1 1))) "unit test front-end" single]) (terraform-mode . [(0 6) ((emacs (24 3)) (hcl-mode (0 3))) "Major mode for terraform configuration file" single]) (tern-django . [(0 1 0) ((emacs (24)) (tern (0 0 1)) (f (0 17 1))) "Create tern projects for django applications." tar]) (tern-context-coloring . [(1 0 1) ((emacs (24 3)) (context-coloring (8 1 0)) (tern (0 0 1))) "Use Tern for context coloring" single]) (tern-auto-complete . [(0 21 0) ((tern (0 0 1)) (auto-complete (1 4)) (cl-lib (0 5)) (emacs (24))) "Tern Completion by auto-complete.el" single]) (tern . [(0 21 0) ((json (1 2)) (cl-lib (0 5)) (emacs (24))) "Tern-powered JavaScript integration" single]) (terminal-here . [(1 0) ((emacs (24)) (cl-lib (0 5))) "Run an external terminal in current directory" single]) (termbright-theme . [(1 0) ((emacs (24 1))) "a more usable theme for white-on-black terminals" single]) (term-run . [(0 1 5) nil "Run arbitrary command in terminal buffer" single]) (term-projectile . [(0 1 1) ((term-manager (0 1 0)) (projectile (0 13 0))) "projectile terminal management" single]) (term-manager . [(0 1 1) ((dash (2 12 0)) (emacs (24 4))) "Contextual terminal management" tar]) (term-cmd . [(1 1) ((emacs (24 0)) (dash (2 12 0)) (f (0 18 2))) "Send commands from programs running in term.el." tar]) (term-alert . [(1 2) ((emacs (24 0)) (term-cmd (1 1)) (alert (1 1)) (f (0 18 2))) "Notifications when commands complete in term.el." tar]) (ten-hundred-mode . [(1 0 1) ((cl-lib (0 5))) "use only the ten hundred most usual words" tar]) (telephone-line . [(0 4) ((emacs (24 4)) (cl-lib (0 5)) (cl-generic (0 2)) (seq (1 8))) "Rewrite of Powerline" tar]) (telepathy . [(1 0) nil "Access Telepathy from Emacs" single]) (tdd-status-mode-line . [(0 1 2) nil "TDD status on the mode-line" single]) (tawny-mode . [(2 0 0) ((cider (0 12)) (emacs (25))) "Ontology Editing with Tawny-OWL" single]) (tagedit . [(1 4 0) ((s (1 3 1)) (dash (1 0 3))) "Some paredit-like features for html-mode" single]) (tablist . [(0 70) ((emacs (24 3))) "Extended tabulated-list-mode" tar]) (tabbar-ruler . [(0 45) ((tabbar (2 0 1))) "Pretty tabbar, autohide, use both tabbar/ruler" tar]) (ta . [(1 5) ((emacs (24 3)) (cl-lib (0 5))) "A tool to deal with Chinese homophonic characters" single]) (systemd . [(1 6) ((emacs (24 4))) "Major mode for editing systemd units" tar]) (system-specific-settings . [(0 2) nil "Apply settings only on certain systems" single]) (system-packages . [(1 0 5) ((emacs (24 3))) "functions to manage system packages" single]) (syntax-subword . [(0 2) nil "make operations on words more fine-grained" single nil]) (syntactic-sugar . [(0 9 4) nil "Effect-free forms such as if/then/else" single]) (synosaurus . [(0 1 0) ((cl-lib (0 5))) "An extensible thesaurus supporting lookup and substitution." tar]) (syndicate . [(1 0) ((evil (1 0))) "evil keybindings for org-mode" single]) (symon . [(20160630) nil "tiny graphical system monitor" single]) (symbolword-mode . [(1 0) nil "No description available." tar]) (sx . [(0 4) ((emacs (24 1)) (cl-lib (0 5)) (json (1 3)) (markdown-mode (2 0)) (let-alist (1 0 3))) "StackExchange client. Ask and answer questions on Stack Overflow, Super User, and the likes" tar]) (sws-mode . [(1 0 0) nil "(S)ignificant (W)hite(S)pace mode" single]) (switch-window . [(1 6 1) ((emacs (24))) "A *visual* way to switch window" tar]) (switch-buffer-functions . [(0 0 1) nil "Hook run when current buffer changed" single]) (swiper-helm . [(0 2 0) ((emacs (24 1)) (swiper (0 1 0)) (helm (1 5 3))) "Helm version of Swiper." single]) (swiper . [(0 10 0) ((emacs (24 1)) (ivy (0 9 0))) "Isearch with an overview. Oh, man!" single]) (swift3-mode . [(2 1 1) ((emacs (24 4))) "Major-mode for Apple's Swift programming language." tar]) (swift-mode . [(5 0 0) ((emacs (24 4)) (seq (2 3))) "Major-mode for Apple's Swift programming language." tar]) (sweetgreen . [(0 5) ((dash (2 12 1)) (helm (1 5 6)) (request (0 2 0)) (cl-lib (0 5))) "Order Salads from sweetgreen.com" single]) (swagger-to-org . [(0 0 2) ((emacs (24)) (cl-lib (0 5)) (json (1 4))) "Convert a swagger.json file into an org-mode file" single]) (svg-mode-line-themes . [(0 1 3) ((xmlgen (0 4))) "SVG-based themes for mode-line" tar]) (super-save . [(0 2 0) ((emacs (24 4))) "Auto-save buffers, based on your activity." single]) (suomalainen-kalenteri . [(2017 8 1) nil "Finnish national and Christian holidays for calendar" tar]) (suggest . [(0 5) ((emacs (24 4)) (loop (1 3)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2))) "suggest elisp functions that give the output requested" single]) (sudo-edit . [(0 1 0) ((emacs (24)) (cl-lib (0 5))) "Open files as another user" single]) (sudden-death . [(0 2 1) nil "Totsuzen-no-Shi" single]) (sublimity . [(20160629) nil "smooth-scrolling, minimap and distraction-free mode" tar]) (subemacs . [(1 0) nil "Evaluating expressions in a fresh Emacs subprocess" single]) (subatomic-theme . [(1 8 1) nil "Low contrast bluish color theme" single]) (stylus-mode . [(1 0 0) ((sws-mode (0))) "Major mode for editing .jade files" single]) (stumpwm-mode . [(0 9 8) nil "special lisp mode for evaluating code into running stumpwm" single]) (stripe-buffer . [(0 2 5) ((cl-lib (1 0))) "Use a different background for even and odd lines" single]) (string-utils . [(0 3 2) ((list-utils (0 4 2))) "String-manipulation utilities" single]) (string-inflection . [(1 0 7) nil "underscore -> UPCASE -> CamelCase -> lowerCamelCase conversion of names" single]) (string-edit . [(0 1 0) ((dash (1 2 0))) "Avoid escape nightmares by editing string in separate buffer" single]) (stgit . [(0 18) nil "major mode for StGit interaction" single]) (status . [(0 3) nil "This package adds support for status icons to Emacs." tar]) (stash . [(0 4 1) nil "lightweight persistent caching" single]) (stan-snippets . [(9 2 0) ((stan-mode (9 2 0)) (yasnippet (0 8 0))) "Yasnippets for Stan" tar]) (stan-mode . [(9 2 0) nil "Major mode for editing Stan files" tar]) (ssh-deploy . [(1 6) ((emacs (24))) "Deployment via TRAMP, global or per directory." tar]) (ssh-config-mode . [(20170413 20 10) nil "Mode for fontification of ~/.ssh/config" tar]) (ssh-agency . [(0 4) ((emacs (24 4)) (dash (2 10 0))) "manage ssh-agent from Emacs" single]) (ssass-mode . [(0 2) ((emacs (24 3))) "Edit Sass without a Turing Machine" single]) (srefactor . [(0 5) ((emacs (24 4))) "A refactoring tool based on Semantic parser framework" tar]) (srcery-theme . [(0 1 0) nil "Colorscheme that focus ease of use and clearly defined contrasting colors with a slightly earthy tone." tar]) (sr-speedbar . [(20140914 2339) nil "Same frame speedbar" single]) (sqlup-mode . [(0 8 0) nil "Upcase SQL words for you" single]) (sql-impala . [(1 0) nil "comint support for Cloudera Impala" single]) (sprunge . [(0 1 1) ((request (0 2 0)) (cl-lib (0 5))) "Upload pastes to sprunge.us" single]) (sprintly-mode . [(0 0 4) ((furl (0 0 2))) "Major mode for dealing with sprint.ly" single]) (spotify . [(0 3 3) ((cl-lib (0 5))) "Control the spotify application from emacs" single]) (splitjoin . [(0 1) ((cl-lib (0 5))) "splitjoin" single]) (sphinx-mode . [(0 1 1) nil "Minor mode providing sphinx support." tar]) (sphinx-doc . [(0 1 0) ((s (1 9 0)) (cl-lib (0 5))) "Sphinx friendly docstrings for Python functions" single]) (speed-type . [(1 1) ((cl-lib (0 3))) "Practice touch and speed typing" single]) (speech-tagger . [(0 0 0) nil "No description available." single]) (sparql-mode . [(4 0 2) ((cl-lib (0 5)) (emacs (24 3))) "Edit and interactively evaluate SPARQL queries." tar]) (sparkline . [(1 0 2) ((cl-lib (0 3))) "Make sparkline images from a list of numbers" single]) (spaceline-all-the-icons . [(1 4 0) ((emacs (24 4)) (all-the-icons (2 6 0)) (spaceline (2 0 0)) (memoize (1 0 1))) "A Spaceline theme using All The Icons" tar]) (spaceline . [(2 0 1) ((emacs (24 3)) (cl-lib (0 5)) (powerline (2 3)) (dash (2 11 0)) (s (1 10 0))) "Modeline configuration library for powerline" tar]) (sourcemap . [(0 3) ((emacs (24 3))) "Sourcemap parser" single]) (sourcekit . [(0 2 0) ((emacs (24 3)) (dash (2 12 1)) (dash-functional (1 2 0)) (request (0 2 0))) "Library to interact with sourcekittendaemon" single]) (sound-wav . [(0 2) ((deferred (0 3 1)) (cl-lib (0 5))) "Play wav file" single]) (sotlisp . [(1 6 2) ((emacs (24 1))) "Write lisp at the speed of thought." single]) (sotclojure . [(1 3 1) ((emacs (24 1)) (clojure-mode (4 0 0)) (cider (0 8)) (sotlisp (1 3))) "Write clojure at the speed of thought." tar]) (sos . [(0 1) ((org (7))) "StackOverflow Search" single]) (solidity-mode . [(0 1 9) nil "Major mode for ethereum's solidity language" tar]) (solarized-theme . [(1 2 2) ((dash (2 6 0))) "The Solarized color theme, ported to Emacs." tar]) (solaire-mode . [(1 0 6) ((emacs (24 4)) (cl-lib (0 5))) "make certain buffers grossly incandescent" single]) (socyl . [(0 3 0) ((s (1 11 0)) (dash (2 12 0)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Frontend for several search tools" tar]) (snoopy . [(0 2 0) ((emacs (24)) (cl-lib (0 6))) "minor mode for number row unshifted character insertion" single]) (snazzy-theme . [(1 0) ((emacs (24)) (base16-theme (2 1))) "An elegant syntax theme with bright colors" single]) (snapshot-timemachine-rsnapshot . [(0 4) ((snapshot-timemachine (20160222 132)) (seq (2 19))) "rsnapshot backend for snapshot-timemachine" single]) (snakemake-mode . [(1 3 0) ((emacs (24)) (cl-lib (0 5)) (magit-popup (2 4 0))) "Major mode for editing Snakemake files" tar]) (smooth-scrolling . [(2 0 0) nil "Make emacs scroll smoothly" single]) (smooth-scroll . [(1 2) nil "Minor mode for smooth scrolling and in-place scrolling." single]) (smmry . [(0 0 3) nil "SMMRY client" single]) (smex . [(3 0) nil "M-x interface with Ido-style fuzzy matching." single]) (smeargle . [(0 3) ((emacs (24 3))) "Highlighting region by last updated time" single]) (smbc . [(0 2 1) nil "View SMBC from Emacs" single]) (smartscan . [(0 2) nil "Jumps between other symbols found at point" single]) (smartrep . [(1 0 0) nil "Support sequential operation which omitted prefix keys." single]) (smartparens . [(1 11 0) ((dash (2 13 0)) (cl-lib (0 3))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar]) (smart-tabs-mode . [(1 0) nil "Intelligently indent with tabs, align with spaces!" single]) (smart-semicolon . [(0 2 1) ((emacs (25))) "Insert semicolon smartly" single]) (smart-mode-line-powerline-theme . [(2 11 0) ((emacs (24 3)) (powerline (2 2)) (smart-mode-line (2 5))) "smart-mode-line theme that mimics the powerline appearance." tar]) (smart-mode-line . [(2 11 0) ((emacs (24 3)) (rich-minority (0 1 1))) "A color coded smart mode-line." tar]) (sly-company . [(0 8) ((sly (1 0 0 -3)) (company (0 7)) (emacs (24 3))) "sly completion backend for company mode" single ((:commit . "930e14fee9cdc837ae26299c7f5e379c53cee1af") (:keywords "convenience" "lisp" "abbrev"))]) (sly . [(2 14) nil "No description available." tar]) (slstats . [(1 10) ((cl-lib (0 5)) (emacs (24))) "Acquire and display stats about Second Life" single]) (slime-volleyball . [(1 1) nil "An SVG Slime Volleyball Game" tar]) (slime-docker . [(0 7) ((emacs (24)) (slime (2 16)) (docker-tramp (0 1)) (cl-lib (0 5))) "Integration of SLIME with Docker containers." tar]) (slime-company . [(1 1) ((slime (2 13)) (company (0 9 0))) "slime completion backend for company mode" single]) (slime . [(2 21) ((cl-lib (0 5)) (macrostep (0 9))) "Superior Lisp Interaction Mode for Emacs" tar]) (slim-mode . [(1 1) nil "Major mode for editing Slim files" single]) (slideview . [(0 6 1) nil "File slideshow" single]) (sl . [(0 2) ((cl-lib (0 5))) "An Emacs clone of sl(1)" tar]) (skewer-mode . [(1 8 0) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar]) (skewer-less . [(0 2) ((skewer-mode (1 5 3))) "Skewer support for live LESS stylesheet updates" single]) (skeletor . [(1 6 1) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar]) (simplezen . [(0 1 1) nil "A simple subset of zencoding-mode for Emacs." single]) (simplenote2 . [(3 0 0) ((request-deferred (0 2 0))) "Interact with simple-note.appspot.com" tar]) (simpleclip . [(1 0 4) nil "Simplified access to the system clipboard" single]) (simple-httpd . [(1 5 1) ((cl-lib (0 3))) "pure elisp HTTP server" single]) (simple-bookmarks . [(1 8) ((cl-lib (0 5))) "Bookmark / functioncall manager" tar]) (silkworm-theme . [(0 1) ((emacs (24))) "Light theme with pleasant, low contrast colors." single]) (sift . [(0 2 0) nil "Front-end for sift, a fast and powerful grep alternative" single]) (side-notes . [(0 1 1) ((emacs (24 5))) "Easy access to a directory notes file" single]) (shx . [(0 0 16) ((emacs (24 4))) "\"Extras\" for the (comint-mode) shell" single]) (shut-up . [(0 3 2) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" single]) (shrink-whitespace . [(0 0 1) nil "Whitespace removal DWIM key" single]) (shrink-path . [(0 3 1) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0))) "fish-style path" single]) (shr-tag-pre-highlight . [(2) ((emacs (24)) (language-detection (0 1 0))) "Syntax highlighting code block in HTML" single]) (shpec-mode . [(0 1 0) nil "Minor mode for shpec specification" single]) (showtip . [(0 1) nil "Show tip at cursor" single]) (shm . [(1 0 20) nil "Structured Haskell Mode" tar]) (shift-number . [(0 1) nil "Increase/decrease the number at point" single]) (shen-elisp . [(0 1) ((emacs (24 4))) "Shen implementation in Elisp" tar]) (shelltest-mode . [(1 1) nil "Major mode for shelltestrunner" single]) (shelldoc . [(0 0 5) ((cl-lib (0 3)) (s (1 9 0))) "shell command editing support with man page." single]) (shell-toggle . [(1 3 1) nil "Toggle to and from the shell buffer" single]) (shell-switcher . [(1 0 1) nil "Provide fast switching between shell buffers." tar]) (shell-split-string . [(0 1) nil "Split strings using shell-like syntax" single]) (shell-pop . [(0 64) ((emacs (24)) (cl-lib (0 5))) "helps you to use shell easily on Emacs. Only one key action to work." single]) (shampoo . [(0 0 1) nil "Shampoo, a remote Smalltalk developemnt" tar]) (shakespeare-mode . [(0 0 2) nil "A major mode for editing Shakespearean templates." single]) (shackle . [(1 0 1) ((cl-lib (0 5))) "Enforce rules for popups" single]) (sexy-monochrome-theme . [(3 1) nil "A sexy dark Emacs >= 24 theme for your sexy code" single]) (sexp-move . [(0 2 6) nil "Improved S-Expression Movement" single]) (session . [(2 3 1) nil "use variables, registers and buffer places across sessions" single]) (sesman . [(0 1 1) ((emacs (25))) "Generic Session Manager" single]) (services . [(1 7) ((cl-lib (0 5))) "Services database access functions." single]) (serverspec . [(0 0 7) ((dash (2 6 0)) (s (1 9 0)) (f (0 16 2)) (helm (1 6 1))) "Serverspec minor mode" tar]) (servant . [(0 3 0) ((s (1 8 0)) (dash (2 2 0)) (f (0 11 0)) (ansi (0 3 0)) (commander (0 5 0)) (epl (0 2)) (shut-up (0 2 1)) (web-server (0 0 1))) "ELPA server written in Emacs Lisp" tar]) (selectric-mode . [(1 4 1) nil "IBM Selectric mode for Emacs" tar]) (select-themes . [(0 1 4) nil "Color theme selection with completing-read" single]) (sekka . [(1 8 0) ((cl-lib (0 3)) (concurrent (0 3 1)) (popup (0 5 2))) "A client for Sekka IME server" single]) (secretaria . [(0 2 7) ((emacs (24 4)) (org (9 0)) (alert (1 2)) (s (1 11 0)) (f (0 19 0))) "A personal assistant based on org-mode" tar]) (search-web . [(1 1) nil "Post web search queries using `browse-url'." single]) (scss-mode . [(0 5 0) nil "Major mode for editing SCSS files" single]) (scpaste . [(0 6 5) ((htmlize (1 39))) "Paste to the web via scp." single]) (schrute . [(0 2 2) ((emacs (24 3))) "Help you remember there is a better way to do something." single]) (scala-mode . [(1 0 0) nil "Major mode for editing Scala" tar]) (sbt-mode . [(2 0 0) ((emacs (24 4))) "Interactive support for sbt projects" tar]) (sayid . [(0 0 16) ((cider (0 14 0))) "sayid nREPL middleware client" single]) (say-what-im-doing . [(0 2) nil "dictate what you're doing with text to speech" single]) (sauron . [(0 10) nil "Track (erc/org/dbus/...) events and react to them." tar]) (sass-mode . [(3 0 18) ((haml-mode (3 0 15))) "Major mode for editing Sass files" single]) (salt-mode . [(0 1) ((yaml-mode (0 0 12)) (mmm-mode (0 5 4)) (mmm-jinja2 (0 1))) "Major mode for Salt States" single]) (sage-shell-mode . [(0 3) ((cl-lib (0 5)) (emacs (24 1)) (let-alist (1 0 4)) (deferred (0 4 0))) "A front-end for Sage Math" tar]) (sackspace . [(0 8 2) nil "A better backspace" single]) (s . [(1 12 0) nil "The long lost Emacs string manipulation library." single]) (rvm . [(1 4 0) nil "Emacs integration for rvm" single]) (rust-playground . [(0 2 1) ((emacs (24 3)) (rust-mode (0 3 0))) "Local Rust playground for short code snippets." single]) (rust-mode . [(0 3 0) ((emacs (24 0))) "A major emacs mode for editing Rust source code" single]) (russian-holidays . [(0 4) nil "Russian holidays for the calendar" single]) (runner . [(1 8) nil "Improved \"open with\" suggestions for dired" single]) (rufo . [(0 3 0) ((emacs (24 3))) "use rufo to automatically format ruby files" single]) (ruby-tools . [(0 1 2) nil "Collection of handy functions for ruby-mode." tar]) (ruby-test-mode . [(1 0) nil "Minor mode for Behaviour and Test Driven" single]) (ruby-hash-syntax . [(0 5) nil "Toggle ruby hash syntax between classic and 1.9 styles" single]) (ruby-end . [(0 4 1) nil "Automatic insertion of end blocks for Ruby" single]) (ruby-electric . [(2 3 1) nil "Minor mode for electrically editing ruby code" single]) (ruby-compilation . [(2 11) ((inf-ruby (2 2 1))) "run a ruby process in a compilation buffer" single]) (rubocopfmt . [(0 2 2) ((cl-lib (0 5))) "Minor-mode to format Ruby code with RuboCop on save" single]) (rubocop . [(0 5 0) ((emacs (24))) "An Emacs interface for RuboCop" single]) (rubik . [(1 2) ((cl-lib (0)) (calc (0)) (emacs (25 3))) "Rubik's Cube" single]) (rtags . [(2 18) nil "A front-end for rtags" single]) (rspec-mode . [(1 11) ((ruby-mode (1 0)) (cl-lib (0 4))) "Enhance ruby-mode for RSpec" tar]) (rsense . [(0 3) nil "RSense client for Emacs" single]) (rope-read-mode . [(0 3 4) nil "Rearrange lines to read text smoothly" single]) (roguel-ike . [(0 1 1) ((popup (0 5 0))) "A coffee-break roguelike" tar]) (robots-txt-mode . [(0 0 2) nil "Major mode for editing robots.txt" single]) (robe . [(0 8 1) ((inf-ruby (2 5 1)) (emacs (24 4))) "Code navigation, documentation lookup and completion for Ruby" tar]) (rjsx-mode . [(0 4 0) ((emacs (24 4)) (js2-mode (20170504))) "Real support for JSX" single]) (ripgrep . [(0 4 0) nil "Front-end for ripgrep, a command line search tool" single]) (rinari . [(2 11) ((ruby-mode (1 0)) (inf-ruby (2 2 5)) (ruby-compilation (0 16)) (jump (2 0))) "Rinari Is Not A Rails IDE" single]) (rigid-tabs . [(1 0) ((emacs (24 3))) "Rigidify and adjust the visual alignment of TABs" single]) (rich-minority . [(1 0 2) ((cl-lib (0 5))) "Clean-up and Beautify the list of minor-modes." single]) (rib-mode . [(1 0 2) ((emacs (24))) "RenderMan® Interface Bytestream (RIB) Major Mode" single]) (rg . [(1 5 0) ((cl-lib (0 5)) (emacs (24 3)) (s (1 10 0))) "A search tool based on ripgrep." single]) (reverse-theme . [(0 3) nil "Reverse theme for Emacs" single]) (reveal-in-osx-finder . [(0 3 3) nil "Reveal file associated with buffer in OS X Finder" single]) (restclient-test . [(0 2) ((emacs (24 4)) (restclient (0))) "Run tests with restclient.el" single]) (restart-emacs . [(0 1 1) nil "Restart emacs from within emacs" single]) (resize-window . [(0 7) ((emacs (24)) (cl-lib (0 5))) "easily resize windows" single]) (requirejs . [(1 1) ((js2-mode (20150713)) (popup (0 5 3)) (s (1 9 0)) (cl-lib (0 5))) "Requirejs import manipulation and source traversal." single]) (request-deferred . [(0 3 0) ((deferred (0 3 1)) (request (0 2 0))) "Wrap request.el by deferred" single]) (request . [(0 3 0) ((emacs (24 4))) "Compatible layer for URL request in Emacs" single]) (req-package . [(1 2) ((use-package (1 0)) (dash (2 7 0)) (log4e (0 2 0)) (ht (0))) "A use-package wrapper for package runtime dependencies management" tar]) (repo . [(0 1 3) ((emacs (24 3))) "Running repo from Emacs" single]) (replace-with-inflections . [(0 3 0) ((string-inflection (1 0 5)) (inflections (1 1))) "Inflection aware `query-replace'" single]) (replace-symbol . [(1 1) nil "Rename symbols in expressions or buffers" single]) (repl-toggle . [(0 5 0) ((fullframe (0 0 5))) "Switch to/from repl buffer for current major-mode" single]) (repeatable-motion . [(0 2) ((emacs (24))) "Make repeatable versions of motions" tar]) (relax . [(0 2) ((json (1 2))) "For browsing and interacting with CouchDB" single]) (region-convert . [(0 0 1) nil "Convert string in region by Lisp function" single]) (refine . [(0 3) ((emacs (24 3)) (s (1 11 0)) (dash (2 12 0)) (list-utils (0 4 4)) (loop (1 2))) "interactive value editing" single]) (redtick . [(0 1 1) ((emacs (24))) "Smallest pomodoro timer (1 char)" single]) (redprl . [(0 1 0) ((emacs (24 3))) "Major mode for editing RedPRL proofs and interacting with RedPRL" single ((:commit . "d06d39486348a74981b2c4c4c2ed3af95b01d5ca") (:keywords "languages"))]) (redpen-paragraph . [(0 42) ((emacs (24)) (cl-lib (0 5)) (json (1 4))) "RedPen interface." single]) (rectangle-utils . [(1 1) ((emacs (24)) (cl-lib (0 5))) "Some useful rectangle functions." single]) (rect+ . [(1 0 10) nil "Extensions to rect.el" single]) (recover-buffers . [(1 0) nil "revisit all buffers from an auto-save file" tar]) (rebecca-theme . [(1 2 1) ((emacs (24))) "Rebecca Purple Theme" single]) (reason-mode . [(0 3 0) ((emacs (24 0))) "A major emacs mode for editing Reason (based on rust-mode)" tar]) (realgud . [(1 4 5) ((load-relative (1 2)) (loc-changes (1 2)) (test-simple (1 2 0)) (cl-lib (0 5)) (emacs (24))) "A modular front-end for interacting with external debuggers" tar]) (real-auto-save . [(0 4) nil "enable real auto save" single]) (react-snippets . [(0 1) ((yasnippet (0 7 0))) "Yasnippets for React" tar]) (rdf-prefix . [(1 10) nil "Prefix lookup for RDF" single]) (rcirc-styles . [(1 3 2) ((cl-lib (0 5))) "support mIRC-style color and attribute codes" single]) (rc-mode . [(1 0 13) nil "Major mode for the Plan9 rc shell" single]) (rbenv . [(0 0 3) nil "Emacs integration for rbenv" single]) (rats . [(0 2 0) ((s (1 10 0)) (go-mode (1 3 1)) (cl-lib (0 5))) "Rapid testing suite for Go" tar]) (rase . [(1 1) nil "Run At Sun Event daemon" single]) (ranger . [(0 9 8 5) ((emacs (24 4))) "Make dired more like ranger" single]) (rake . [(0 4 1) ((f (0 13 0)) (dash (1 5 0)) (cl-lib (0 5))) "Run rake commands" single]) (rainbow-identifiers . [(0 2 2) ((emacs (24))) "Highlight identifiers according to their names" single]) (rainbow-delimiters . [(2 1 3) nil "Highlight brackets according to their depth" single]) (rainbow-blocks . [(1 0 0) nil "Block syntax highlighting for lisp code" single]) (railscasts-reloaded-theme . [(1 5 0) nil "Railscasts Reloaded color theme" single]) (racer . [(1 2) ((emacs (24 3)) (rust-mode (0 2 0)) (dash (2 11 0)) (s (1 10 0)) (f (0 18 2))) "The official Emacs package for Racer" single]) (r-autoyas . [(0 28) nil "Provides automatically created yasnippets for R function argument lists." tar]) (quiz . [(1 4) ((cl-lib (0 5)) (emacs (25))) "Multiple choice quiz game" single]) (quickrun . [(2 2 8) ((emacs (24 3))) "Run commands quickly" single]) (quasi-monochrome-theme . [(1 1) nil "Quasi Monochrome theme" tar]) (qt-pro-mode . [(1 0 0) ((emacs (24))) "Qt Pro/Pri major mode" single]) (qml-mode . [(0 4) nil "Major mode for editing QT Declarative (QML) code." single]) (ql . [(1 1) ((emacs (24))) "Control Quod Libet" single]) (qiita . [(0 0 1) nil "No description available." single]) (pyvenv . [(1 16) nil "Python virtual environment interface" single]) (pythonic . [(0 1 1) ((emacs (24)) (cl-lib (0 5)) (dash (2 11)) (s (1 9)) (f (0 17 2))) "Utility functions for writing pythonic emacs package." single]) (python-x . [(1 0) ((python (0 24)) (folding (0))) "python.el extras for interactive evaluation" single]) (python-pytest . [(0 3 1) ((emacs (24 4)) (dash (2 12 0)) (dash-functional (2 12 0)) (magit-popup (2 12 0)) (projectile (0 14 0)) (s (1 12 0))) "helpers to run pytest" single]) (python-mode . [(6 2 3) nil "Python major mode" tar]) (python-environment . [(0 0 2) ((deferred (0 3 1))) "virtualenv API for Emacs Lisp" tar]) (pynt . [(1 0 0) ((emacs (24 4)) (ein (0 13 1)) (epc (0 1 1)) (deferred (0 5 1)) (helm (2 8 8))) "Generate and scroll EIN buffers from python code" tar]) (pyimport . [(1 0) ((dash (2 8 0)) (s (1 9 0))) "Manage Python imports!" single]) (pyim-wbdict . [(0 1) ((pyim (1 0))) "Some wubi dicts for pyim" tar]) (pyim-basedict . [(0 3 1) nil "The default pinyin dict of pyim" tar]) (pyim . [(1 7) ((emacs (24 3)) (cl-lib (0 5)) (popup (0 1)) (async (1 6)) (pyim-basedict (0 1))) "A Chinese input method which support quanpin, shuangpin, wubi and cangjie." tar]) (pyenv-mode . [(0 1 0) ((pythonic (0 1 0))) "Integrate pyenv with python-mode" single]) (pydoc . [(0 1) nil "functional, syntax highlighted pydoc navigation" single]) (pycarddavel . [(1 0 1) ((helm (1 7 0)) (emacs (24 0))) "Integrate pycarddav" single]) (py-yapf . [(2016 1) nil "Use yapf to beautify a Python buffer" single]) (py-isort . [(2016 1) nil "Use isort to sort the imports in a Python buffer" single]) (py-autopep8 . [(2016 1) nil "Use autopep8 to beautify a Python buffer" single]) (pushbullet . [(0 5 2) ((grapnel (0 5 2)) (json (1 2))) "Emacs client for the PushBullet Android app" single]) (purescript-mode . [(13 10) nil "No description available." tar]) (puppet-mode . [(0 3) ((emacs (24 1)) (cl-lib (0 5)) (pkg-info (0 4))) "Major mode for Puppet manifests" single]) (pungi . [(1 1) ((jedi (0 2 0 -3 2)) (pyvenv (1 5))) "Integrates jedi with virtualenv and buildout python environments" single]) (punctuality-logger . [(0 8) nil "Punctuality logger for Emacs" single]) (pug-mode . [(1 0 7) ((emacs (24 4)) (cl-lib (0 5))) "Major mode for jade/pug template files" single]) (pt . [(0 0 3) nil "A front-end for pt, The Platinum Searcher." single]) (psysh . [(0 0 4) ((emacs (24 3)) (s (1 9 0)) (f (0 17))) "PsySH, PHP interactive shell (REPL)" single]) (psession . [(1 5) ((emacs (24)) (cl-lib (0 5)) (async (1 9 3))) "Persistent save of elisp objects." single]) (psci . [(0 0 6) ((purescript-mode (13 10)) (dash (2 9 0)) (s (1 9 0)) (f (0 17 1)) (deferred (0 3 2))) "Major mode for purescript repl psci" tar]) (protocols . [(1 6) ((cl-lib (0 5))) "Protocol database access functions." single]) (protobuf-mode . [(3 6 0 1) nil "major mode for editing protocol buffers." single]) (prop-menu . [(0 1 2) ((emacs (24 3)) (cl-lib (0 5))) "Create and display a context menu based on text and overlay properties" single]) (prompt-text . [(0 1 0) nil "Various information in minibuffer prompt" single]) (projekt . [(0 1) ((emacs (24))) "some kind of staging for CVS" single]) (projectile-variable . [(0 0 2) ((emacs (24)) (cl-lib (0 5))) "Store project local variables." single]) (projectile-trailblazer . [(0 2 0) ((emacs (24 4)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects using trailblazer" single]) (projectile-sift . [(0 2 0) ((sift (0 2 0)) (projectile (0 13 0))) "Run a sift with Projectile" single]) (projectile-ripgrep . [(0 4 0) ((ripgrep (0 3 0)) (projectile (0 14 0))) "Run ripgrep with Projectile" single]) (projectile-rails . [(0 16 0) ((emacs (24 3)) (projectile (0 12 0)) (inflections (1 1)) (inf-ruby (2 2 6)) (f (0 13 0)) (rake (0 3 2))) "Minor mode for Rails projects based on projectile-mode" single]) (projectile-git-autofetch . [(0 1 1) ((projectile (0 14 0)) (alert (1 2))) "automatically fetch git repositories" single]) (projectile . [(0 14 0) ((dash (2 11 0)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single]) (project-root . [(0 7) nil "Define a project root and take actions based upon it." single nil]) (project-persist-drawer . [(0 0 4) ((project-persist (0 3))) "Use a project drawer with project-persist." tar]) (project-persist . [(0 3 2) nil "A minor mode to allow loading and saving of project settings." tar]) (project-explorer . [(0 14 3) ((cl-lib (0 3)) (es-lib (0 3)) (es-windows (0 1)) (emacs (24))) "A project explorer sidebar" single]) (prog-fill . [(1 0 0) ((emacs (25 1)) (cl-lib (0 6 1))) "Smartly format lines to use vertical space." single]) (prodigy . [(0 7 0) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) "Manage external services from within Emacs" single]) (processing-mode . [(1 0) ((yasnippet (0 8 0))) "Major mode for Processing 2.0" single]) (pretty-mode . [(2 0 3) nil "Redisplay parts of the buffer as pretty symbols." single]) (presentation . [(0 1 1) ((emacs (24 4)) (cl-lib (0 5))) "Display large character for presentation" single]) (prescient . [(2 0) ((emacs (25 1))) "Better sorting and filtering." single]) (prassee-theme . [(1 0) nil "A dark contrast color theme for Emacs." single]) (ppd-sr-speedbar . [(0 0 6) ((sr-speedbar (20140914 2339)) (project-persist-drawer (0 0 4))) "Sr Speedbar adaptor for project-persist-drawer." tar]) (powershell . [(0 1) nil "No description available." single]) (powerline . [(2 4) ((cl-lib (0 2))) "Rewrite of Powerline" tar]) (pos-tip . [(0 4 6) nil "Show tooltip at point" single]) (popwin . [(1 0 0) nil "Popup Window Manager." single]) (popup-imenu . [(0 6) ((dash (2 12 1)) (popup (0 5 3)) (flx-ido (0 6 1))) "imenu index popup" single]) (popup-complete . [(0 2) ((popup (0 5 0))) "completion with popup" single]) (popup . [(0 5 3) ((cl-lib (0 3))) "Visual Popup User Interface" single]) (pophint . [(0 9 3) ((popup (0 5 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide navigation using pop-up tips, like Firefox's Vimperator Hint Mode" tar]) (ponylang-mode . [(0 0 9) ((dash (2 10 0))) "Major mode for Pony code" single]) (pony-snippets . [(0 0 1) ((yasnippet (0 8 0))) "Yasnippets for Pony" tar]) (pomidor . [(0 2) ((emacs (24 3)) (alert (1 2))) "Simple and cool pomodoro timer" tar]) (point-pos . [(0 1) nil "Save and restore point positions" single]) (pocket-reader . [(0 1 1) ((emacs (25 1)) (dash (2 13 0)) (kv (0 0 19)) (pocket-lib (0 1)) (s (1 10)) (ov (1 0 6)) (rainbow-identifiers (0 2 2)) (org-web-tools (0 1))) "Client for Pocket reading list" single]) (pocket-lib . [(0 1) ((emacs (25 1)) (request (0 2)) (dash (2 13 0)) (kv (0 0 19)) (s (1 12 0))) "Library for accessing getpocket.com API" single]) (po-mode . [(0 19 8 1) nil "No description available." single]) (plur . [(0 1) ((emacs (24 4))) "Easily search and replace multiple variants of a word" single]) (plsense-direx . [(0 2 0) ((direx (0 1 -3)) (plsense (0 3 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perl Package Explorer" single]) (plsense . [(0 4 7) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 2 0))) "provide interface for PlSense that is a development tool for Perl." single]) (plenv . [(0 32) nil "A plenv wrapper for Emacs" single]) (play-routes-mode . [(1 0) nil "Play Framework Routes File Support" single]) (play-crystal . [(0 1 2) ((emacs (24 4)) (dash (2 12 0)) (request (0 2 0))) "https://play.crystal-lang.org integration." single]) (platformio-mode . [(0 2 2) ((projectile (0 13 0))) "PlatformIO integration" single]) (plantuml-mode . [(1 2 5) nil "Major mode for PlantUML" single]) (plain-theme . [(8) ((emacs (24))) "Plain theme without syntax highlighting" single]) (pkgbuild-mode . [(0 14) nil "Interface to the ArchLinux package manager" single]) (pkg-info . [(0 6) ((epl (0 8))) "Information about packages" single]) (pixiv-novel-mode . [(0 0 3) nil "Major mode for pixiv novel" single]) (pip-requirements . [(0 5) ((dash (2 8 0))) "A major mode for editing pip requirements files." single]) (pinyinlib . [(0 1 1) nil "Convert first letter of Pinyin to Simplified/Traditional Chinese characters" single]) (pinyin-search . [(1 1 0) nil "Search Chinese by Pinyin" single]) (pinboard-popular . [(0 1 2) ((loop (1 4))) "Displays links from the pinboard.in popular page." single]) (pillar . [(1 0 0) ((makey (0 3))) "Major mode for editing Pillar files" tar]) (phpunit . [(0 16 0) ((s (1 9 0)) (f (0 16 0)) (pkg-info (0 5)) (cl-lib (0 5)) (emacs (24 3))) "Launch PHP unit tests using phpunit" tar]) (phpstan . [(0 2 1) ((emacs (24 3))) "Interface to PHPStan." single]) (phpcbf . [(0 9 2) ((s (1 9 0))) "Format PHP code in Emacs using PHP_CodeSniffer's phpcbf" single]) (phpactor . [(0 0 2) ((emacs (24 3)) (cl-lib (0 5))) "Interface to Phpactor" tar]) (php-runtime . [(0 1 0) ((emacs (25)) (cl-lib (0 5))) "Language binding bridge to PHP" single]) (php-mode . [(1 19 1) ((emacs (24)) (cl-lib (0 5))) "Major mode for editing PHP code" tar]) (php-cs-fixer . [(1 0 -2 4) ((cl-lib (0 5))) "php-cs-fixer wrapper." single]) (php-auto-yasnippets . [(2 3 1) ((php-mode (1 11)) (yasnippet (0 8 0))) "Creates snippets for PHP functions" tar]) (phi-search-mc . [(2 2 1) ((phi-search (2 0 0)) (multiple-cursors (1 2 1))) "multiple-cursors extension for phi-search" single]) (phi-search . [(20160630) nil "another incremental search & replace, compatible with \"multiple-cursors\"" tar]) (phan . [(0 0 4) ((emacs (24)) (composer (0 0 8)) (f (0 17))) "Utility functions for Phan (PHP static analizer)" single]) (ph . [(0 1 0) ((emacs (24 3))) "A global minor mode for managing multiple projects." tar]) (pfuture . [(1 2) ((emacs (24 4))) "a simple wrapper around asynchronous processes" single]) (perspeen . [(0 1) nil "An Emacs package for multi-workspace" single]) (perspective . [(2 2) ((cl-lib (0 5))) "switch between named \"perspectives\" of the editor" single]) (persp-projectile . [(0 2 0) ((perspective (1 9)) (projectile (0 11 0)) (cl-lib (0 3))) "Perspective integration with Projectile" single]) (persp-mode . [(2 9 6) nil "windows/buffers sets shared among frames + save/load." single]) (persp-fr . [(0 0 3) ((emacs (25 0)) (persp-mode (2 9 6))) "In persp-mode, show perspective list in the GUI window title" single]) (persistent-soft . [(0 8 10) ((pcache (0 3 1)) (list-utils (0 4 2))) "Persistent storage, returning nil on failure" single]) (persistent-scratch . [(0 3 1) ((emacs (24))) "Preserve the scratch buffer across Emacs sessions" single]) (per-buffer-theme . [(1 5) ((cl-lib (0 5))) "Change theme according to buffer name or major mode." single ((:url . "https://bitbucket.com/inigoserna/per-buffer-theme.el") (:keywords "themes"))]) (pelican-mode . [(20170808) ((emacs (25))) "Minor mode for editing Pelican sites" single]) (peg . [(0 6) nil "Parsing Expression Grammars in Emacs Lisp" single]) (pdf-tools . [(0 80) ((emacs (24 3)) (tablist (0 70)) (let-alist (1 0 4))) "Support library for PDF documents." tar]) (pcsv . [(1 3 6) nil "Parser of csv" single]) (pcre2el . [(1 8) ((emacs (24)) (cl-lib (0 3))) "regexp syntax converter" single]) (pcomplete-extension . [(1 0) ((emacs (24)) (cl-lib (0 5))) "additional completion for pcomplete" single]) (pcache . [(0 4 2) ((eieio (1 3))) "persistent caching for Emacs." single]) (paxedit . [(1 1 8) ((cl-lib (0 5)) (paredit (23))) "Structured, Context Driven LISP Editing and Refactoring" single]) (pathify . [(0 1) nil "Symlink your scripts into a PATH directory" single]) (pastery . [(0 2 1) ((emacs (24 4)) (request (0 2 0))) "paste snippets to pastery.net." tar]) (pastelmac-theme . [(1 0) ((emacs (24 1))) "a soothing theme with a pastel color palette" single]) (pastehub . [(0 5 2) nil "A client for the PasteHub cloud service" single]) (password-store-otp . [(0 1 5) ((emacs (25)) (s (1 9 0)) (password-store (0 1))) "Password store (pass) OTP extension support" single]) (password-store . [(1 7 2) ((emacs (24)) (f (0 11 0)) (s (1 9 0)) (with-editor (2 5 11))) "Password store (pass) support" single]) (passthword . [(1 4) ((cl-lib (0 5))) "Simple password manager" single]) (passmm . [(0 3 1) ((emacs (24 4)) (password-store (0))) "A minor mode for pass (Password Store)." single]) (pass . [(1 7) ((emacs (24)) (password-store (0 1)) (f (0 17))) "Major mode for password-store.el" single]) (parseclj . [(0 1 0) ((emacs (25)) (a (0 1 0 -3 4))) "Clojure/EDN parser" tar]) (parsec . [(0 1 3) ((emacs (24)) (cl-lib (0 5))) "Parser combinator library" single]) (parsebib . [(2 3 2) ((emacs (24 3))) "A library for parsing bib files" single]) (parinfer . [(0 4 10) ((dash (2 13 0)) (cl-lib (0 5))) "Simpler Lisp editing" tar]) (parent-mode . [(2 3) nil "get major mode's parent modes" single]) (paren-face . [(1 0 4) nil "a face for parentheses in lisp modes" single]) (paredit-everywhere . [(0 4) ((paredit (22))) "Enable some paredit features in non-lisp buffers" single]) (paredit . [(24) nil "minor mode for editing parentheses" single]) (paradox . [(2 5 2) ((emacs (24 4)) (seq (1 7)) (let-alist (1 0 3)) (spinner (1 7 3)) (hydra (0 13 2))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar]) (paper-theme . [(1 0 0) ((emacs (24)) (hexrgb (0))) "A minimal Emacs colour theme." single ((:commit . "15af5e31492f79dc0d47787150ef39d6318a2608") (:url . "http://gkayaalp.com/emacs.html#paper") (:keywords "theme" "paper"))]) (pangu-spacing . [(0 4) nil "Minor-mode to add space between Chinese and English characters." single]) (pandoc-mode . [(2 25) ((hydra (0 10 0)) (dash (2 10 0))) "Minor mode for interacting with Pandoc" tar]) (pandoc . [(0 0 1) ((emacs (24))) "Pandoc interface" single]) (panda-theme . [(0 1) ((emacs (24))) "Panda Theme" single]) (pallet . [(0 9 2) ((dash (2 10 0)) (s (1 9 0)) (f (0 17 1)) (cask (0 7))) "A package management tool for Emacs, using Cask." tar]) (page-break-lines . [(0 11) nil "Display ugly ^L page breaks as tidy horizontal lines" single]) (packed . [(3 0 0) ((emacs (24 3))) "package manager agnostic Emacs Lisp package utilities" single]) (package-utils . [(1 0 1) ((restart-emacs (0 1 1))) "Extensions for package.el" single]) (package-safe-delete . [(0 1 7) ((emacs (24)) (epl (0 7 -4))) "Safely delete package.el packages" single]) (package-lint . [(0 5) ((cl-lib (0 5)) (emacs (24))) "A linting library for elisp package authors" single]) (package-build . [(2 2) ((cl-lib (0 5))) "Tools for assembling a package archive" tar]) (package+ . [(1 1 0) nil "Extensions for the package library." single]) (pabbrev . [(4 1) nil "Predictive abbreviation expansion" single]) (ox-twbs . [(1 1 1) nil "Bootstrap compatible HTML Back-End for Org" single]) (ox-pandoc . [(1 150707) ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0))) "org exporter for pandoc." single]) (ox-ioslide . [(0 2) ((emacs (24 1)) (org (8 0)) (cl-lib (0 5)) (f (0 17 2))) "Export org-mode to Google I/O HTML5 slide." tar]) (ox-hugo . [(0 8) ((emacs (24 4)) (org (9 0))) "Hugo Markdown Back-End for Org Export Engine" tar]) (ox-gfm . [(1 0) nil "Github Flavored Markdown Back-End for Org Export Engine" single]) (ox-epub . [(0 3) ((emacs (24 3)) (org (9))) "Export org mode projects to EPUB" single]) (owdriver . [(0 0 6) ((smartrep (0 0 3)) (log4e (0 2 0)) (yaxception (0 2 0))) "Quickly perform various actions on other windows" single]) (overseer . [(0 3 0) ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4))) "Ert-runner Integration Into Emacs" single]) (overcast-theme . [(1 1 0) ((emacs (24))) "A dark but vibrant color theme for Emacs" single]) (ov . [(1 0 6) ((emacs (24 3))) "Overlay library for Emacs Lisp" single]) (outshine . [(2 0) nil "outline with outshine outshines outline" single]) (outorg . [(2 0) nil "Org-style comment editing" single]) (outlook . [(0 1) ((emacs (24 4))) "send emails in MS Outlook style" tar]) (osx-trash . [(0 2) ((emacs (24 1))) "System trash for OS X" tar]) (osx-pseudo-daemon . [(2 1) nil "Daemon mode that plays nice with OSX." single]) (osx-location . [(0 4) nil "Watch and respond to changes in geographical location on OS X" tar]) (osx-dictionary . [(0 4) ((cl-lib (0 5))) "Interface for OSX Dictionary.app" tar]) (osx-clipboard . [(0 1) nil "Use the OS X clipboard from terminal Emacs" single]) (osx-browse . [(0 8 8) ((string-utils (0 3 2)) (browse-url-dwim (0 6 6))) "Web browsing helpers for OS X" single]) (orgtbl-show-header . [(1 0 0) nil "Show the header of the current column in the minibuffer" single]) (orglink . [(1 1 3) ((emacs (24 3)) (dash (2 12 1)) (org (8 3))) "use Org Mode links in other modes" single]) (orgit . [(1 5 1) ((emacs (24 4)) (dash (2 13 0)) (magit (2 10 0)) (org (8 3 3))) "support for Org links to Magit buffers" single]) (orgbox . [(0 5 0) ((org (8 0)) (cl-lib (0 5))) "Mailbox-like task scheduling Org." single]) (org2web . [(0 9 1) ((cl-lib (1 0)) (ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8 0)) (dash (2 0 0)) (el2org (0 10)) (simple-httpd (0 1))) "A static site generator based on org mode." tar]) (org2jekyll . [(0 1 9) ((dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 1))) "Minor mode to publish org-mode post to jekyll without specific yaml" tar]) (org2blog . [(1 0 2) ((org (8 3)) (xml-rpc (1 6 12)) (metaweblog (1 0 1)) (htmlize (1 51))) "Blog from Org mode to wordpress" tar]) (org-wild-notifier . [(0 2 4) ((alert (1 2)) (dash (2 13 0)) (emacs (24 4))) "Customizable org-agenda notifications" single]) (org-vcard . [(0 2 0) nil "org-mode support for vCard export and import." tar]) (org-trello . [(0 8 1) ((request-deferred (0 2 0)) (deferred (0 4 0)) (s (1 11 0)) (dash-functional (2 12 1)) (dash (2 12 1))) "Minor mode to synchronize org-mode buffer and trello board" tar]) (org-tree-slide . [(2 8 4) nil "A presentation tool for org-mode" single]) (org-transform-tree-table . [(0 1 2) ((dash (2 10 0)) (s (1 3 0))) "Transform org-mode tree with properties to a table, and the other way around" single]) (org-tracktable . [(0 3 1) ((emacs (24)) (cl-lib (0 5))) "Track your writing progress in an org-table" single]) (org-toodledo . [(2 1 0) nil "No description available." tar]) (org-time-budgets . [(1 0 1) ((alert (0 5 10)) (cl-lib (0 5))) "Define time budgets and display clocked time." single]) (org-themis . [(0 4 1) ((cl-lib (0 4))) "Experimental project management mode for org-mode" single]) (org-tfl . [(0 4 0) ((org (0 16 2)) (cl-lib (0 5)) (emacs (24 1))) "Transport for London meets Orgmode" tar]) (org-table-sticky-header . [(0 1 1) ((org (8 2 10))) "Sticky header for org-mode tables" single]) (org-table-comment . [(0 2 0) nil "Org table comment modes." single]) (org-sync . [(0 3 0) ((cl-lib (0 5)) (org (8 2)) (emacs (24))) "Synchronize Org documents with External Issue Trackers" tar]) (org-static-blog . [(1 2 1) ((emacs (24 3))) "a simple org-mode based static blog generator" single]) (org-rich-yank . [(0 2 0) ((emacs (24 4))) "paste with org-mode markup and link to source" single]) (org-repo-todo . [(0 0 3) nil "Simple repository todo management with org-mode" single]) (org-ref . [(1 1 1) ((dash (2 11 0)) (helm (1 5 5)) (helm-bibtex (2 0 0)) (ivy (0 8 0)) (hydra (0 13 2)) (key-chord (0)) (s (1 10 0)) (f (0 18 0)) (emacs (24 4)) (pdf-tools (0 7))) "citations, cross-references and bibliographies in org-mode" tar]) (org-readme . [(20130322 926) ((http-post-simple (1 0)) (yaoddmuse (0 1 1)) (header2 (21 0)) (lib-requires (21 0))) "Integrates Readme.org and Commentary/Change-logs." tar]) (org-random-todo . [(0 5 2) ((emacs (24 3)) (alert (1 2))) "notify of random TODO's" single]) (org-protocol-jekyll . [(0 1) nil "Jekyll's handler for org-protocol" single]) (org-projectile-helm . [(1 1 0) ((org-projectile (1 0 0)) (helm (2 3 1)) (emacs (25))) "helm functions for org-projectile" single]) (org-projectile . [(1 1 0) ((projectile (0 11 0)) (dash (2 10 0)) (emacs (24)) (s (1 9 0)) (org-category-capture (0 0 0))) "Repository todo management for org-mode" single]) (org-pomodoro . [(2 1 0) ((alert (0 5 10)) (cl-lib (0 5))) "Pomodoro implementation for org-mode." tar]) (org-pdfview . [(0 4) ((org (6 1)) (pdf-tools (0 40))) "Support for links to documents in pdfview mode" single]) (org-password-manager . [(0 0 1) ((org (8 2 10)) (s (1 9 0))) "Minimal password manager for Emacs Org Mode." single]) (org-page . [(0 41) ((ht (1 5)) (mustache (0 22)) (htmlize (1 47)) (org (8))) "a static site generator based on org mode" tar]) (org-outlook . [(0 11) nil "Outlook org" tar]) (org-noter . [(1 1 0) ((emacs (24 4)) (cl-lib (0 6)) (org (9 0))) "A synchronized, Org-mode, document annotator" single]) (org-multiple-keymap . [(0 2) ((org (8 2 4)) (emacs (24)) (cl-lib (0 5))) "Set keymap to elements, such as timestamp and priority." single]) (org-mru-clock . [(0 2 1) ((emacs (24 3))) "clock in/out of tasks with completion and persistent history" single]) (org-mime . [(0 1 1) ((emacs (24 3)) (cl-lib (0 5))) "org html export for text/html MIME emails" single]) (org-make-toc . [(0 2) ((emacs (25 1)) (dash (2 12)) (s (1 10 0)) (org (9 0))) "Automatic tables of contents for Org files" single]) (org-linkany . [(0 0 2) ((log4e (0 2 0)) (yaxception (0 1))) "Insert link using anything.el/helm.el on org-mode" single]) (org-link-travis . [(0 0 1) ((org (7))) "Insert/Export the link of Travis CI on org-mode" single]) (org-kanban . [(0 4 6) ((dash (2 13 0)) (emacs (24 4)) (org (9 1))) "kanban dynamic block for org-mode." single]) (org-journal . [(1 14 2) ((emacs (25 1))) "a simple org-mode based journaling mode" single]) (org-jira . [(3 1 1) ((emacs (24 5)) (cl-lib (0 5)) (request (0 2 0)) (s (0 0 0))) "Syncing between Jira and Org-mode." tar]) (org-index . [(5 8 9) ((emacs (24 4))) "A personal adaptive index for org" single]) (org-if . [(0 2 0) nil "Interactive Fiction Authoring System for Org-Mode." tar]) (org-gnome . [(0 3) ((alert (1 2)) (telepathy (0 1)) (gnome-calendar (0 1))) "Orgmode integration with the GNOME desktop" single]) (org-gcal . [(0 2) ((request-deferred (0 2 0)) (alert (1 1)) (emacs (24)) (cl-lib (0 5)) (org (8 2 4))) "Org sync with Google Calendar" single]) (org-evil . [(0 5 0) ((dash (2 13 0)) (evil (0)) (monitor (0)) (org (0))) "Evil extensions for Org." tar]) (org-elisp-help . [(1 0 0) ((cl-lib (0 5)) (org (9 0))) "org links to emacs-lisp documentation" single]) (org-edit-latex . [(0 8 3) ((emacs (24 4)) (auctex (11 90))) "Edit embedded LaTeX in a dedicated buffer" single]) (org-dp . [(1) ((cl-lib (0 5))) "Declarative Local Programming with Org Elements" tar]) (org-download . [(0 1 0) ((async (1 2))) "Image drag-and-drop for Emacs org-mode" single]) (org-doing . [(0 1) nil "Keep track of what you're doing" tar]) (org-commentary . [(0 3 0) ((dash (2 0)) (emacs (24 4)) (org (8 0))) "generate or update conventional library headers using Org mode files" tar]) (org-clock-csv . [(1 1) ((org (8 3)) (s (1 0))) "Export `org-mode' clock entries to CSV format." single]) (org-category-capture . [(1 1 0) ((org (9 0 0)) (emacs (24))) "Contextualy capture of org-mode TODOs." single]) (org-bullets . [(0 2 4) nil "Show bullets in org-mode as UTF-8 characters" single]) (org-bookmark-heading . [(1 0 0) ((emacs (24 4))) "Emacs bookmark support for org-mode" single]) (org-board . [(1018) nil "bookmarking and web archival system for Org mode." single]) (org-beautify-theme . [(0 3 1) nil "A sub-theme to make org-mode more beautiful." single]) (org-babel-eval-in-repl . [(1 4) ((eval-in-repl (0 9 2)) (matlab-mode (3 3 6)) (ess (16 10)) (emacs (24))) "Eval org-mode babel code blocks in various REPLs." tar]) (org-autolist . [(0 14) nil "Improved list management in org-mode" single]) (org-alert . [(0 1 0) ((s (1 10 0)) (dash (2 12 0)) (alert (1 2))) "Notify org deadlines via notify-send" single]) (org-agenda-property . [(1 3 1) ((emacs (24 2))) "Display org properties in the agenda buffer." single]) (org-ac . [(0 0 2) ((auto-complete-pcmp (0 0 1)) (log4e (0 2 0)) (yaxception (0 1))) "Some auto-complete sources for org-mode" single]) (operate-on-number . [(1 1 0) nil "Operate on number at point with arithmetic functions" single]) (opensource . [(0 2 0) ((s (1 11 0)) (dash (2 12 1)) (pkg-info (0 6 0)) (request (0 2 0))) "Client for Opensource API" tar]) (opener . [(0 2 2) ((request (0 2 0)) (emacs (24)) (cl-lib (0 5))) "opening urls as buffers" tar]) (opencl-mode . [(1 0) nil "Syntax coloring for opencl kernels" single]) (opam . [(0 1) ((emacs (24 1))) "OPAM tools" single]) (omnisharp . [(4 2) ((emacs (24 4)) (flycheck (30)) (dash (2 12 0)) (auto-complete (1 4)) (popup (0 5 1)) (csharp-mode (0 8 7)) (cl-lib (0 5)) (s (1 10 0)) (shut-up (0 3 2)) (f (0 19 0))) "Omnicompletion (intellisense) and more for C#" tar]) (omni-tags . [(0 1 2) ((pcre2el (1 7)) (cl-lib (0 5))) "Highlight and Actions for 'Tags'" tar]) (omni-scratch . [(0 6 0) nil "Easy and mode-specific draft buffers" single]) (omni-quotes . [(0 5 0) ((dash (2 8)) (omni-log (0 3 3)) (f (0 19 0)) (s (1 11 0)) (ht (2 1))) "Random quotes displayer" tar]) (omni-log . [(0 3 6) ((emacs (24)) (ht (2 0)) (s (1 6 1)) (dash (2 13 0))) "Logging utilities" tar]) (omni-kill . [(0 6 0) nil "Kill all the things" single]) (olivetti . [(1 6 1) ((emacs (24 4))) "Minor mode for a nice writing environment" single]) (offlineimap . [(1) nil "Run OfflineIMAP from Emacs" single]) (octicons . [(0 1) ((cl-lib (0 5))) "octicons utility" tar]) (ocp-indent . [(1 6 1) nil "automatic indentation with ocp-indent" single]) (ocodo-svg-modelines . [(0 1 4) ((svg-mode-line-themes (0))) "A collection of beautiful SVG modelines" tar]) (obfusurl . [(2 1) ((cl-lib (0 5))) "Obfuscate URLs so they aren't spoilers" single]) (ob-uart . [(0 1 0) nil "org-babel support for UART communication" single]) (ob-translate . [(0 1 2) ((google-translate (0 4)) (org (8))) "Translation of text blocks in org-mode." single]) (ob-sml . [(0 2) ((sml-mode (6 4))) "org-babel functions for template evaluation" single]) (ob-sagemath . [(0 4) ((sage-shell-mode (0 0 8)) (s (1 8 0)) (emacs (24))) "org-babel functions for SageMath evaluation" tar]) (ob-prolog . [(1 0 2) nil "org-babel functions for prolog evaluation." single]) (ob-hy . [(1 0 1) ((emacs (24 4))) "org-babel functions for Hy-lang evaluation" tar]) (ob-http . [(0 2 0) ((s (1 9 0)) (cl-lib (0 5))) "http request in org-mode babel" tar]) (ob-coffeescript . [(1 0 0) nil "org-babel functions for coffee-script evaluation, and fully implementation!" single]) (ob-blockdiag . [(20170728 113) nil "org-babel functions for blockdiag evaluation" single]) (ob-async . [(1 0 0) ((async (1 9)) (org (9 0 1)) (emacs (24 4)) (dash (2 14 1))) "Asynchronous org-babel src block execution" single]) (o-blog . [(2 0) nil "" tar]) (nyan-mode . [(1 1 2) nil "Nyan Cat shows position in current buffer in mode-line." tar]) (nvm . [(0 2 0) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (dash-functional (2 4 0))) "Manage Node versions within Emacs" single]) (numbers . [(1 4) ((emacs (24))) "Display information and trivia about numbers" single]) (number-lock . [(1 0 0) nil "Enter symbols on your number keys without pressing shift" single]) (nsis-mode . [(0 44) nil "NSIS-mode" tar]) (nrepl-sync . [(0 3 1) ((cider (0 6))) "connect to nrepl port and eval .sync.clj." single]) (npm-mode . [(0 6 0) ((emacs (24 1))) "minor mode for working with npm projects" single]) (noxml-fold . [(0 0 2) nil "Fold away XML things." single]) (nov . [(0 2 4) ((dash (2 12 0)) (esxml (0 3 3)) (emacs (24 4))) "Featureful EPUB reader mode" single]) (notmuch-labeler . [(0 1) ((notmuch (0))) "Improve notmuch way of displaying labels" tar]) (notmuch . [(0 27) nil "run notmuch within emacs" tar]) (nose . [(0 1 1) nil "Easy Python test running in Emacs" single ((:keywords "nose" "python" "testing"))]) (nord-theme . [(0 3 0) ((emacs (24))) "An arctic, north-bluish clean and elegant theme" single]) (nofrils-acme-theme . [(0 1 0) ((emacs (24))) "Port of \"No Frils Acme\" Vim theme." single]) (nodemcu-mode . [(0 1 0) ((emacs (25))) "Minor mode for NodeMCU" single]) (nodejs-repl . [(0 1 6) nil "Run Node.js REPL" single]) (noccur . [(0 2) nil "Run multi-occur on project/dired files" single]) (no-littering . [(0 5 14) ((cl-lib (0 5))) "help keeping ~/.emacs.d clean" single]) (nixos-options . [(0 0 1) ((emacs (24)) (json (1 4))) "Interface for browsing and completing NixOS options." single]) (nix-mode . [(1 11 13) nil "Major mode for editing Nix expressions" single ((:commit . "0ec723375bc6008a8a88024962b052c3fbbaf4b8") (:url . "https://github.com/NixOS/nix/tree/master/misc/emacs"))]) (nix-buffer . [(3 1 1) ((f (0 17 3)) (emacs (24 4))) "Set up buffer environments with nix" single]) (ninja-mode . [(1 8 2) ((emacs (24))) "Major mode for editing .ninja files" single]) (nim-mode . [(0 4 1) ((emacs (24 4)) (epc (0 1 1)) (let-alist (1 0 1)) (commenter (0 5 1)) (flycheck (28))) "A major mode for the Nim programming language" tar]) (night-owl-theme . [(0 1 0) ((emacs (24))) "A color theme for the night owls out there" single]) (niceify-info . [(1 0 1) nil "improve usability of Info pages" single]) (nginx-mode . [(1 1 9) nil "major mode for editing nginx config files" single]) (netease-music . [(1 0) nil "listen netease music" single]) (neotree . [(0 5 2) ((cl-lib (0 5))) "A tree plugin like NerdTree for Vim" tar]) (neon-mode . [(1 3 0) nil "Simple major mode for editing neon files" single]) (nemerle . [(1 2) nil "major mode for editing nemerle programs" single]) (ncl-mode . [(0 99 2) ((emacs (24))) "Major Mode for editing NCL scripts and other goodies" tar]) (navorski . [(0 2 7) ((s (1 9 0)) (dash (1 5 0)) (multi-term (0 8 14))) "Helping you live in the terminal, like Viktor did." single]) (navi-mode . [(2 0) nil "major-mode for easy buffer-navigation" single]) (nav-flash . [(1 1 0) nil "Briefly highlight the current line" single]) (nasm-mode . [(1 1 1) ((emacs (24 3))) "NASM x86 assembly major mode" single]) (narrowed-page-navigation . [(0 1 0) ((emacs (24)) (cl-lib (0 5))) "A minor mode for showing one page at a time" single]) (narrow-reindent . [(0 2 0) ((emacs (24 4))) "Defines a minor mode to left-align narrowed regions." single]) (names . [(20151201 0) ((emacs (24 1)) (cl-lib (0 5))) "Namespaces for emacs-lisp. Avoid name clobbering without hiding symbols." tar]) (nameless . [(1 0 2) ((emacs (24 4))) "Hide package namespace in your emacs-lisp code" single]) (name-this-color . [(0 3 0) ((emacs (24)) (cl-lib (0 5)) (dash (2 11 0))) "Match RGB codes to names easily and precisely" single]) (myterminal-controls . [(1 0 0) ((emacs (24)) (cl-lib (0 5))) "Quick toggle controls at a key-stroke" single]) (mysql-to-org . [(1 0 0) ((emacs (24 3)) (s (1 11 0))) "Minor mode to output the results of mysql queries to org tables" single]) (mykie . [(0 3 1) ((emacs (24 3)) (cl-lib (0 5))) "Command multiplexer: Register multiple functions to a keybind" tar]) (mwim . [(0 4) nil "Switch between the beginning/end of line or code" single]) (mustache-mode . [(1 3) nil "A major mode for editing Mustache files." single]) (mustache . [(0 23) ((ht (0 9)) (s (1 3 0)) (dash (1 2 0))) "a mustache templating library in emacs lisp" tar]) (multiple-cursors . [(1 4 0) ((cl-lib (0 5))) "Multiple cursors for Emacs." tar]) (multi-web-mode . [(0 2 1) nil "multiple major mode support for web editing" tar]) (multi-term . [(1 2) nil "Managing multiple terminal buffers in Emacs." single]) (multi-run . [(1) ((emacs (24)) (window-layout (1 4))) "Manage multiple terminals and run commands on them" single]) (multi-project . [(0 0 26) ((emacs (25))) "Find files, compile, search, and switch between" single ((:url . "https://bitbucket.org/ellisvelo/multi-project/overview") (:keywords "convenience" "project" "management"))]) (multi-line . [(0 1 5) ((emacs (24 3)) (s (1 9 0)) (cl-lib (0 5)) (dash (2 12 0)) (shut-up (0 3 2))) "multi-line statements" tar]) (multi . [(2 0 1) ((emacs (24))) "Clojure-style multi-methods for emacs lisp" single]) (mu4e-maildirs-extension . [(0 8) nil "Show mu4e maildirs summary in mu4e-main-view" single]) (mu4e-alert . [(1 0) ((alert (1 2)) (s (1 10 0)) (ht (2 0)) (emacs (24 1))) "Desktop notification for mu4e" single]) (mtg-deck-mode . [(0 2) ((emacs (24 4))) "Major mode to edit MTG decks" tar]) (msvc . [(1 3 7) ((emacs (24)) (cl-lib (0 5)) (cedet (1 0)) (ac-clang (2 0 0))) "Microsoft Visual C/C++ mode" tar]) (mqtt-mode . [(0 1 0) ((emacs (25)) (dash (2 12 0))) "client for interaction with MQTT servers" single]) (mpv . [(0 1 0) ((cl-lib (0 5)) (emacs (24)) (json (1 3)) (names (0 5 4)) (org (8 0))) "control mpv for easy note-taking" single]) (mpmc-queue . [(0 1 1) ((emacs (26 0)) (queue (0 2 0))) "a multiple-producer-multiple-consumer queue" single]) (mpdel . [(0 6 0) ((emacs (25 1)) (libmpdel (0 7 0))) "Play and control your MPD music" tar]) (mozc-temp . [(1 0 0) ((emacs (24)) (dash (2 10 0)) (mozc (0))) "Use mozc temporarily" single]) (moz-controller . [(1 0) ((moz (0))) "Control Firefox from Emacs" single]) (moz . [(1 1 0) nil "Lets current buffer interact with inferior mozilla." single]) (mowedline . [(3 3 0) nil "elisp utilities for using mowedline" single]) (move-text . [(2 0 8) nil "Move current line or region with M-up or M-down." single]) (move-dup . [(1 0 0) nil "Eclipse-like moving and duplicating lines or rectangles." single]) (mosey . [(0 2) ((emacs (24 4))) "Mosey around your buffers" single]) (morlock . [(1 0 2) nil "more font-lock keywords for elisp" single]) (moom . [(1 2 0) ((emacs (25 1))) "Commands to control frame position and size" tar]) (moody . [(0 3 0) ((emacs (25 3))) "Tabs and ribbons for the mode line" single]) (monroe . [(0 3 1) nil "Yet another client for nREPL" single]) (monokai-theme . [(3 5 3) nil "A fruity color theme for Emacs." single]) (monitor . [(0 3 0) ((dash (2 13 0))) "Utilities for monitoring expressions." tar]) (moe-theme . [(1 0 0) nil "A colorful eye-candy theme. Moe, moe, kyun!" tar]) (modern-cpp-font-lock . [(0 1 3) nil "Font-locking for \"Modern C++\"" single]) (mode-line-debug . [(1 2 3) nil "show status of `debug-on-error' in the mode-line" single]) (mode-icons . [(0 4 0) ((emacs (24)) (cl-lib (0 5))) "Show icons for modes" tar]) (modalka . [(0 1 5) ((emacs (24 4))) "Easily introduce native modal editing of your own design" single]) (mocker . [(0 3 1) ((eieio (1 3)) (el-x (0 2 4))) "mocking framework for emacs" single]) (mocha-snippets . [(1 0 0) ((yasnippet (0 8 0))) "Yasnippets for the Mocha JS Testing Framework" tar]) (mocha . [(1 1) ((js2-mode (20150909))) "Run Mocha or Jasmine tests" single]) (mmt . [(0 2 0) ((emacs (24 1)) (cl-lib (0 3))) "Missing macro tools for Emacs Lisp" single]) (mmm-mako . [(1 1) ((mmm-mode (0 4 8))) "MMM submode class for Mako Templates" single ((:url . "https://bitbucket.org/pjenvey/mmm-mako"))]) (mmm-jinja2 . [(0 1) ((mmm-mode (0 5 4))) "MMM submode class for Jinja2 Templates" single]) (mips-mode . [(1 1 1) nil "Major-mode for MIPS assembly" single]) (minitest . [(0 8 0) ((dash (1 0 0))) "An Emacs mode for ruby minitest files" tar]) (minions . [(0 2 0) ((emacs (25 3)) (dash (2 13 0))) "A minor-mode menu for the mode line" single]) (minimal-session-saver . [(0 6 2) nil "Very lean session saver" single]) (miniedit . [(2 0) nil "Enhanced editing for minibuffer fields." single]) (minibuffer-cua . [(1 0 0) nil "Make CUA mode's S-up/S-down work in minibuffer" single]) (minibuffer-complete-cycle . [(1 25 20130814) nil "Cycle through the *Completions* buffer" single]) (milkode . [(0 4) nil "Command line search and direct jump with Milkode" single]) (migemo . [(1 9 1) nil "Japanese incremental search through dynamic pattern expansion" single]) (mic-paren . [(3 10) nil "advanced highlighting of matching parentheses" single ((:commit . "e4cf6e1a0ee91e849a9d42ecdcd6ed0287f8a521") (:keywords "languages" "faces" "parenthesis" "matching"))]) (mhc . [(1 2 0) ((calfw (20150703))) "Message Harmonized Calendaring system." tar]) (mgmtconfig-mode . [(0 0 15) ((emacs (24 3))) "mgmt configuration management language" single]) (mew . [(6 8) nil "Messaging in the Emacs World" tar]) (metaweblog . [(1 0 1) ((xml-rpc (1 6 8))) "An emacs library to access metaweblog based weblogs" tar]) (meta-presenter . [(1 0 0) nil "A simple multi-file presentation tool for Emacs" single]) (meson-mode . [(0 1) ((emacs (24 3))) "Major mode for the Meson build system files" single]) (merlin-eldoc . [(1 2) ((emacs (24 4))) "eldoc for OCaml and Reason" single]) (merlin . [(3 1 0) nil "Mode for Merlin, an assistant for OCaml." tar]) (mentor . [(0 3 1) ((xml-rpc (1 6 9)) (seq (1 11)) (cl-lib (0 5))) "Frontend for the rTorrent bittorrent client" tar]) (memoize . [(1 1) nil "Memoization functions" single]) (melpa-upstream-visit . [(1 0 0) ((s (1 6 0))) "A set of kludges to visit a melpa-hosted package's homepage" single]) (meghanada . [(1 0 8) ((emacs (24 3)) (yasnippet (0 6 1)) (company (0 9 0)) (flycheck (0 23))) "A better java development mode" tar]) (mediawiki . [(2 2 9) nil "mediawiki frontend" single]) (mc-extras . [(1 2 4) ((multiple-cursors (1 2 1))) "Extra functions for multiple-cursors mode." tar]) (mbe . [(0 1) ((emacs (24)) (cl-lib (0 5))) "Macros by Example" single]) (mb-url . [(0 1 0) ((cl-lib (0))) "Multiple Backends for Emacs URL package." tar]) (maxframe . [(0 5) nil "No description available." single]) (maven-test-mode . [(0 1 5) ((s (1 9)) (emacs (24))) "Utilities for navigating test files and running maven test tasks." single]) (math-symbol-lists . [(1 2) nil "Lists of Unicode math symbols and latex commands" tar]) (material-theme . [(1 2) ((emacs (24 1))) "A Theme based on the colors of the Google Material Design" tar]) (mastodon . [(0 7 2) ((emacs (24 4))) "Client for Mastodon" tar]) (marshal . [(0 8 2) ((eieio (1 4)) (json (1 3)) (ht (2 1))) "eieio extension for automatic (un)marshalling" single]) (markup-faces . [(1 0 0) nil "collection of faces for markup language modes" single]) (markup . [(2 0 1) ((cl-lib (0 5))) "Simple markup generation helpers." single]) (markdown-toc . [(0 1 2) ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 1))) "A simple TOC generator for markdown file" tar]) (markdown-preview-mode . [(0 9) ((emacs (24 3)) (websocket (1 6)) (markdown-mode (2 0)) (cl-lib (0 5)) (web-server (0 1 1)) (uuidgen (0 3))) "markdown realtime preview minor mode." tar]) (markdown-mode . [(2 3) ((emacs (24)) (cl-lib (0 5))) "Major mode for Markdown-formatted text" single]) (markdown-mode+ . [(0 8) ((markdown-mode (20111229))) "extra functions for markdown-mode" tar]) (mark-tools . [(0 3) nil "Some simple tools to access the mark-ring in Emacs" single]) (marcopolo . [(0 3 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Docker API" tar]) (map-regexp . [(0 3 0) ((cl-lib (0 2))) "map over matches of a regular expression" single]) (map-progress . [(0 5 0) nil "mapping macros that report progress" single]) (mallard-mode . [(0 3 0) nil "Major mode for editing Mallard files" tar]) (malinka . [(0 3 1) ((s (1 9 0)) (dash (2 4 0)) (f (0 11 0)) (cl-lib (0 3)) (rtags (0 0)) (projectile (0 11 0))) "A C/C++ project configuration package for Emacs" single]) (makey . [(0 3) ((cl-lib (0 2))) "interactive commandline mode" single]) (make-color . [(0 4) nil "Alternative to picking color - update fg/bg color by pressing r/g/b/... keys" single]) (magithub . [(0 1 7) ((emacs (25)) (magit (2 12)) (s (1 12 0)) (ghub+ (0 3)) (git-commit (2 12)) (markdown-mode (2 3))) "Magit interfaces for GitHub" tar]) (magit-topgit . [(2 1 2) ((emacs (24 4)) (magit (2 1 0))) "TopGit extension for Magit" single]) (magit-todos . [(1 0 3) ((emacs (25 2)) (a (0 1 0)) (anaphora (1 0 0)) (async (1 9 2)) (dash (2 13 0)) (f (0 17 2)) (hl-todo (1 9 0)) (magit (2 13 0)) (pcre2el (1 8)) (s (1 12 0))) "Show source file TODOs in Magit" single]) (magit-tbdiff . [(0 2 0) ((emacs (24 4)) (magit (2 10 0))) "Magit extension for git-tbdiff" single]) (magit-svn . [(2 2 1) ((emacs (24 4)) (magit (2 1 0))) "Git-Svn extension for Magit" single]) (magit-stgit . [(2 1 3) ((emacs (24 4)) (magit (2 1 0))) "StGit extension for Magit" single]) (magit-popup . [(2 12 3) ((emacs (24 4)) (async (1 9 2)) (dash (2 13 0))) "Define prefix-infix-suffix command combos" tar]) (magit-org-todos . [(0 1 2) ((magit (2 0 0)) (emacs (24))) "Add local todo items to the magit status buffer" single]) (magit-imerge . [(0 3 1) ((emacs (24 4)) (magit (2 10 0))) "Magit extension for git-imerge" single]) (magit-gitflow . [(2 2 3) ((magit (2 1 0)) (magit-popup (2 2 0))) "gitflow extension for magit" single]) (magit-gh-pulls . [(0 5 3) ((emacs (24 4)) (gh (0 9 1)) (magit (2 1 0)) (pcache (0 2 3)) (s (1 6 1))) "GitHub pull requests extension for Magit" single]) (magit-gerrit . [(0 3) ((magit (2 3 1))) "Magit plugin for Gerrit Code Review" single]) (magit-find-file . [(2 1 0) ((magit (2 1 0)) (dash (2 8 0))) "completing-read over all files in Git" single]) (magit-filenotify . [(0 1) ((magit (1 3 0)) (emacs (24 4))) "Refresh status buffer when git tree changes" single]) (magit-annex . [(1 6 0) ((cl-lib (0 3)) (magit (2 12 0))) "Control git-annex from Magit" single]) (magit . [(2 13 0) ((emacs (24 4)) (async (1 9 3)) (dash (2 14 1)) (ghub (2 0 1)) (git-commit (2 12 1)) (let-alist (1 0 5)) (magit-popup (2 12 3)) (with-editor (2 7 3))) "A Git porcelain inside Emacs." tar]) (magic-filetype . [(0 3 0) ((emacs (24)) (s (1 9 0))) "Enhance filetype major mode" single]) (macrostep . [(0 9) ((cl-lib (0 5))) "interactive macro expander" tar]) (macro-math . [(1 0) nil "in-buffer mathematical operations" single]) (mac-pseudo-daemon . [(2 1) ((cl-lib (2 0))) "Daemon mode that plays nice with Mac OS." single]) (m-buffer . [(0 15) ((seq (2 14))) "List-Oriented, Functional Buffer Manipulation" tar]) (lxc-tramp . [(0 1 0) ((emacs (24)) (cl-lib (0 6))) "TRAMP integration for LXC containers" single]) (lv . [(0 14 0) nil "Other echo area" single]) (lusty-explorer . [(3 0) nil "Dynamic filesystem explorer and buffer switcher" single]) (lua-mode . [(20151025) nil "a major-mode for editing Lua scripts" tar]) (lsp-ocaml . [(0 2 0) ((emacs (25 1)) (lsp-mode (3 0))) "OCaml support for lsp-mode" single]) (lsp-mode . [(4 2) ((emacs (25 1))) "Minor mode for interacting with Language Servers" tar]) (lsp-clangd . [(3 1 3) ((lsp-mode (3 0)) (emacs (24 3))) "clangd support for lsp-mode" single]) (love-minor-mode . [(1 2) ((lua-mode (20130419))) "Minor mode for working on LÖVE projects" single]) (loop . [(1 3) nil "friendly imperative loop structures" single]) (logview . [(0 11 1) ((emacs (24 4)) (datetime (0 3))) "Major mode for viewing log files" single]) (logito . [(0 1) ((eieio (1 3))) "logging library for Emacs" single]) (logalimacs . [(1 0 0) nil "Front-end to logaling-command for Ruby gems" single]) (log4j-mode . [(1 3) nil "major mode for viewing log files" single ((:keywords "log" "log4j" "java"))]) (log4e . [(0 3 0) nil "provide logging framework for elisp" single]) (loc-changes . [(1 1) nil "Helps users and programs keep track of positions even after buffer changes." single]) (load-relative . [(1 0) nil "relative file load (within a multi-file Emacs package)" tar]) (lms . [(0 7) ((emacs (25 1))) "Squeezebox / Logitech Media Server frontend" single ((:url . "https://bitbucket.com/inigoserna/lms.el") (:keywords "multimedia"))]) (lively . [(0 2) nil "interactively updating text" single]) (live-py-mode . [(2 22 0) ((emacs (24 3))) "Live Coding in Python" tar]) (live-code-talks . [(0 2 1) ((emacs (24)) (cl-lib (0 5)) (narrowed-page-navigation (0 1))) "Support for slides with live code in them" single]) (literate-coffee-mode . [(0 4) ((coffee-mode (0 5 0))) "major-mode for Literate CoffeeScript" single]) (literal-string . [(0 1) ((markdown-mode (2 0)) (emacs (25))) "edit string literals in a dedicated buffer" single]) (lit-mode . [(0 1 1) nil "Major mode for lit" single]) (list-utils . [(0 4 4) nil "List-manipulation utility functions" single]) (list-unicode-display . [(0 1) ((cl-lib (0 5))) "Search for and list unicode characters by name" single]) (list-packages-ext . [(0 1 0) ((s (1 6 0)) (ht (1 5 0)) (persistent-soft (0 8 6))) "Extras for list-packages" single]) (lispyscript-mode . [(0 3 5) nil "Major mode for LispyScript code." single]) (lispy . [(0 26 0) ((emacs (24 1)) (ace-window (0 8 0)) (hydra (0 12 1)) (iedit (0 97)) (multiple-cursors (1 3 0)) (swiper (0 2 0))) "vi-like Paredit" tar]) (linum-relative . [(0 6) nil "display relative line number in emacs." single]) (link . [(1 10) nil "No description available." single]) (lingr . [(0 2) nil "Lingr Client for GNU Emacs" single]) (line-up-words . [(1 0 0) nil "Align words in an intelligent way" single]) (lice . [(0 2) nil "License And Header Template" tar]) (libmpdel . [(0 7 0) ((emacs (25 1))) "Communication with an MPD server" single]) (libelcouch . [(0 8 0) ((emacs (25 1)) (request (0 3 0))) "Communication with CouchDB" single]) (lfe-mode . [(1 3) nil "Lisp Flavoured Erlang mode" tar]) (letcheck . [(0 4) nil "Check the erroneous assignments in let forms" single]) (less-css-mode . [(0 21) nil "Major mode for editing LESS CSS files (lesscss.org)" single]) (lentic . [(0 11) ((emacs (24 4)) (m-buffer (0 13)) (dash (2 5 0)) (f (0 17 2)) (s (1 9 0))) "One buffer as a view of another" tar]) (ledger-mode . [(3 1 1) nil "Helper code for use with the \"ledger\" command-line tool" tar]) (leanote . [(0 4 0) ((emacs (24 4)) (cl-lib (0 5)) (request (0 2)) (let-alist (1 0 3)) (pcache (0 4 0)) (s (1 10 0)) (async (1 9))) "A minor mode writing markdown leanote" single]) (lcr . [(0 9) ((dash (2 12 0)) (emacs (25 1))) "lightweight coroutines" single]) (lcb-mode . [(0 1 1) ((emacs (24))) "LiveCode Builder major mode" single]) (latex-unicode-math-mode . [(0 3 1) nil "Input method for Unicode math symbols" tar]) (latex-math-preview . [(0 7 2) nil "preview LaTeX mathematical expressions." single]) (latex-extra . [(1 14) ((auctex (11 86 1)) (cl-lib (0 5))) "Adds several useful functionalities to LaTeX-mode." single]) (langtool . [(2 0 0) ((cl-lib (0 3))) "Grammar check utility using LanguageTool" single]) (labburn-theme . [(1 0 0) nil "A lab color space zenburn theme." single]) (kurecolor . [(1 2 6) ((emacs (24 1)) (s (1 0))) "color editing goodies for Emacs" single]) (kubernetes-evil . [(0 12 0) ((kubernetes (0 12 0)) (evil (1 2 12))) "Kubernetes keybindings for evil-mode." single]) (kubernetes . [(0 12 0) ((emacs (25 1)) (dash (2 12 0)) (magit (2 8 0))) "Magit-like porcelain for Kubernetes." tar]) (ksp-cfg-mode . [(0 5 1) ((cl-lib (0 5))) "major mode for editing KSP CFG files" single]) (know-your-http-well . [(0 5 0) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar]) (kiwix . [(0 4 0) ((emacs (24 3)) (cl-lib (2 0))) "Kiwix interface and support." tar]) (kivy-mode . [(1 10 1) nil "Emacs major mode for editing Kivy files" single]) (killer . [(0 2 2) nil "kill and delete text" single]) (kill-ring-search . [(1 1) nil "incremental search for the kill ring" single]) (kill-or-bury-alive . [(0 1 3) ((emacs (24 4)) (cl-lib (0 5))) "Precise control over buffer killing in Emacs" single]) (kibit-helper . [(0 1 1) ((s (0 8)) (emacs (24))) "Conveniently use the Kibit Leiningen plugin from Emacs" single]) (keyset . [(0 1 2) ((dash (2 8 0)) (cl-lib (0 5))) "A small library for structuring key bindings." single]) (keymap-utils . [(3 0 1) ((cl-lib (0 3))) "keymap utilities" single]) (keyfreq . [(1 8) nil "track command frequencies" single]) (keydef . [(1 15) nil "a simpler way to define keys, with kbd syntax" single]) (keychain-environment . [(2 4 1) nil "load keychain environment variables" single]) (keycast . [(0 1 1) ((emacs (25 3))) "Show current command and its key in the mode line" single]) (key-seq . [(1 0 1) ((key-chord (0 6))) "map pairs of sequentially pressed keys to commands" single]) (key-combo . [(1 6) nil "map key sequence to commands" single]) (key-chord . [(0 6) nil "map pairs of simultaneously pressed keys to commands" single]) (karma . [(0 1 0) nil "Karma Test Runner Emacs Integration" single]) (kaolin-themes . [(1 3 5) ((emacs (25 1)) (autothemer (0 2 2)) (cl-lib (0 6))) "A set of eye pleasing themes" tar]) (kakapo-mode . [(1 2) ((cl-lib (0 5))) "TABS (hard or soft) for indentation (leading whitespace), and SPACES for alignment." single]) (kaesar-mode . [(0 9 0) ((kaesar (0 1 4)) (cl-lib (0 3))) "Encrypt/Decrypt buffer by AES with password." single]) (kaesar-file . [(0 9 0) ((kaesar (0 1 1))) "Encrypt/Decrypt file by AES with password." single]) (kaesar . [(0 9 0) ((cl-lib (0 3))) "Another AES algorithm encrypt/decrypt string with password." single]) (jvm-mode . [(0 2 0) ((dash (2 6 0)) (emacs (24))) "Monitor and manage your JVMs" single]) (jump-to-line . [(0 2 0) nil "Jump to line number at point." single]) (jump . [(2 5) ((findr (0 7)) (inflections (2 4)) (cl-lib (0 5))) "build functions which contextually jump between files" single]) (julia-mode . [(0 4 5) nil "Major mode for editing Julia source code" single ((:url . "https://github.com/JuliaLang/julia") (:keywords "languages"))]) (jsx-mode . [(0 1 10) nil "major mode for JSX" single]) (jsonnet-mode . [(0 0 1) ((emacs (24))) "Major mode for editing jsonnet files" single]) (json-snatcher . [(1 0 0) ((emacs (24))) "Grabs the path to JSON values in a JSON file" single]) (json-reformat . [(0 0 6) nil "Reformatting tool for JSON" single]) (json-navigator . [(0 1 0) ((emacs (24 3)) (hierarchy (0 6 0))) "View and navigate JSON structures" single]) (json-mode . [(1 7 0) ((json-reformat (0 0 5)) (json-snatcher (1 0 0))) "Major mode for editing JSON files" single]) (jsfmt . [(0 2 0) nil "No description available." single]) (js3-mode . [(1 1 0) nil "An improved JavaScript editing mode" tar]) (js2-refactor . [(0 9 0) ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) "A JavaScript refactoring library for emacs." tar]) (js2-mode . [(20180301) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar]) (js2-highlight-vars . [(0 1 0) ((js2-mode (20150909))) "highlight occurrences of the variable under cursor" single]) (js2-closure . [(2 2 1) ((js2-mode (20150909))) "Google Closure dependency manager" single]) (js-comint . [(1 1 1) ((emacs (24 3))) "JavaScript interpreter in window." single]) (js-auto-format-mode . [(1 1 0) ((emacs (24))) "Minor mode for auto-formatting JavaScript code" single]) (jq-mode . [(0 3 0) ((emacs (25 1))) "Edit jq scripts." tar]) (jpop . [(3 2 3) ((emacs (24)) (dash (2 11 0))) "Lightweight project cacheing and navigation framework" tar]) (jinja2-mode . [(0 2) nil "A major mode for jinja2" single]) (jetbrains . [(0 0 2) ((emacs (24 3)) (cl-lib (0 5)) (f (0 17))) "JetBrains IDE bridge" single]) (jedi-core . [(0 2 7) ((emacs (24)) (epc (0 1 0)) (python-environment (0 0 2)) (cl-lib (0 5))) "Common code of jedi.el and company-jedi.el" tar]) (jedi . [(0 2 7) ((emacs (24)) (jedi-core (0 2 2)) (auto-complete (1 4))) "a Python auto-completion for Emacs" single]) (jdecomp . [(0 2 0) ((emacs (24 5))) "Interface to Java decompilers" single]) (javadoc-lookup . [(1 1 0) ((cl-lib (0 3))) "Javadoc Emacs integration with Maven" tar]) (java-imports . [(0 1 0) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Java imports" single]) (japanlaw . [(0 9 1) nil "Japan law from law.e-gov.go.jp" single]) (jammer . [(0 1 1) nil "Punish yourself for using Emacs inefficiently" single]) (jade-mode . [(1 0 0) nil "Major mode for editing .jade files" single]) (jabber . [(0 8 92) nil "A Jabber client for Emacs." tar ((:commit . "2999f58619dd9c20cc6cac8060c4c850a504cbbd"))]) (j-mode . [(1 1 1) nil "Major mode for editing J programs" tar]) (iy-go-to-char . [(3 2 1) nil "Go to next CHAR which is similar to \"f\" and \"t\" in vim" single]) (ix . [(0 7) ((grapnel (0 5 3))) "Emacs client for http://ix.io pastebin" single]) (ivy-youtube . [(0 3 2) ((request (0 2 0)) (ivy (0 8 0)) (cl-lib (0 5))) "Query YouTube and play videos in your browser" single]) (ivy-rtags . [(2 18) ((ivy (0 7 0)) (rtags (2 10))) "RTags completion back-end for ivy" single]) (ivy-purpose . [(0 1) ((emacs (24)) (ivy (0 8)) (window-purpose (1 5))) "Ivy Interface for Purpose" single]) (ivy-prescient . [(2 0) ((emacs (25 1)) (prescient (2 0)) (ivy (0 10 0))) "prescient.el + Ivy" single]) (ivy-pages . [(0 1 1) ((emacs (24 1)) (ivy (0 8 0))) "Complete current buffer's pages with Ivy" single]) (ivy-mpdel . [(0 4 0) ((emacs (25 1)) (ivy (0 10 0)) (libmpdel (0 5 0)) (mpdel (0 4 0))) "Ivy interface to navigate MPD" single]) (ivy-hydra . [(0 10 0) ((emacs (24 1)) (ivy (0 9 0)) (hydra (0 13 4))) "Additional key bindings for Ivy" single]) (ivy-gitlab . [(0 8 0) ((s (1 9 0)) (dash (2 9 0)) (ivy (0 8 0)) (gitlab (0 8))) "Ivy interface to Gitlab" single]) (ivy-feedwrangler . [(0 4 2) nil "No description available." single]) (ivy-erlang-complete . [(0 3 1) ((async (1 9)) (counsel (0 8 0)) (ivy (0 8 0)) (erlang (19 2)) (emacs (24 4))) "Erlang context sensitive completion at point using ivy. It also support xref and eldoc." tar]) (ivy-dired-history . [(1 0) ((ivy (0 9 0)) (counsel (0 9 0)) (cl-lib (0 5))) "use ivy to open recent directories" single]) (ivy-bibtex . [(2 0 0) ((swiper (0 7 0)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A BibTeX bibliography manager based on Ivy" tar]) (ivy . [(0 10 0) ((emacs (24 1))) "Incremental Vertical completYon" tar]) (iter2 . [(0 9 7) ((emacs (25 1))) "Reimplementation of Elisp generators" single]) (isgd . [(1 1) nil "Shorten URLs using the isgd.com shortener service" single]) (irony . [(1 2 0) ((cl-lib (0 5)) (json (1 2))) "C/C++ minor mode powered by libclang" tar]) (ir-black-theme . [(1 0 1) nil "Port of ir-black theme" single]) (ipython-shell-send . [(1 0 2) ((emacs (24))) "Send code (including magics) to ipython shell" single]) (iplayer . [(0 1) nil "Browse and download BBC TV/radio shows" single]) (intero . [(0 1 31) ((flycheck (0 25)) (company (0 8)) (emacs (24 4)) (haskell-mode (13 0))) "Complete development mode for Haskell" single]) (interleave . [(1 1 0) nil "Interleaving text books since 2015" single]) (intellij-theme . [(1 3) nil "Inspired by IntelliJ's default theme" single]) (intel-hex-mode . [(0 1 3) nil "Mode for Intel Hex files." single]) (instapaper . [(0 9 5) nil "No description available." single nil]) (insert-shebang . [(0 9 6) nil "Insert shebang line automatically." single]) (inlineR . [(1 0) nil "insert Tag for inline image of R graphics" single]) (inline-crypt . [(0 1 4) nil "Simple inline encryption via openssl" tar]) (initsplit . [(1 6) nil "No description available." single]) (init-open-recentf . [(0 0 3) ((emacs (24 4))) "Open recentf immediately after Emacs is started" single]) (init-loader . [(0 2) nil "Loader for configuration files" single]) (inherit-local . [(1 1 1) ((emacs (24 3))) "Inherited buffer-local variables" single]) (info-colors . [(0 2) ((emacs (24))) "Extra colors for Info-mode" single]) (info-buffer . [(0 2) nil "Display info topics in separate buffers" single]) (inflections . [(2 5) ((cl-lib (0 5)) (emacs (24))) "convert english words between singular and plural" single]) (inf-ruby . [(2 5 1) nil "Run a Ruby process in a buffer" single]) (inf-crystal . [(0 1 0) ((emacs (24 3)) (crystal-mode (0 1 0))) "Run a Inferior-Crystal process in a buffer" single]) (inf-clojure . [(2 1 0) ((emacs (24 4)) (clojure-mode (5 6))) "Run an external Clojure process in an Emacs buffer" single]) (indium . [(1 2 0) ((emacs (25)) (seq (2 16)) (js2-mode (20140114)) (company (0 9 0)) (websocket (1 6))) "JavaScript Awesome Development Environment" tar]) (indent-guide . [(20160630) nil "show vertical lines to guide indentation" single]) (importmagic . [(1 1) ((f (0 11 0)) (epc (0 1 0)) (emacs (24 3))) "Fix Python imports using importmagic." tar]) (import-popwin . [(0 10) ((emacs (24 3)) (popwin (0 6))) "popwin buffer near by import statements with popwin" single]) (import-js . [(2 0 0) ((grizzl (0 1 0)) (emacs (24))) "Import Javascript dependencies" single]) (impatient-mode . [(1 1) ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) "Serve buffers live over HTTP" tar]) (immutant-server . [(1 2 0) nil "Run your Immutant server in Emacs" single]) (imenus . [(0 2) ((cl-lib (0 5))) "Imenu for multiple buffers and without subgroups" single]) (imenu-list . [(0 8) ((cl-lib (0 5))) "Show imenu entries in a seperate buffer" single]) (imenu-anywhere . [(1 1 4) ((cl-lib (0 5))) "ido/ivy/helm imenu across same mode/project/etc buffers" single]) (imapfilter . [(1 0 3) nil "run the imapfilter executable" single]) (imake . [(1 0 1) ((emacs (24 3))) "Simple, opinionated make target runner" single]) (image-dired+ . [(0 7 2) ((cl-lib (0 3))) "Image-dired extensions" single]) (image-archive . [(0 0 7) ((emacs (24)) (cl-lib (0 5))) "Image thumbnails in archive file with non-blocking" single]) (image+ . [(0 6 2) ((cl-lib (0 3))) "Image manipulate extensions for Emacs" single]) (ignoramus . [(0 7 4) nil "Ignore backups, build files, et al." single]) (iflipb . [(1 4) nil "interactively flip between recently visited buffers" single]) (iedit . [(0 9 9 9) nil "Edit multiple regions in the same way simultaneously." tar]) (idris-mode . [(0 9 19) ((emacs (24)) (prop-menu (0 1)) (cl-lib (0 5))) "Major mode for editing Idris code" tar]) (idomenu . [(0 1) nil "imenu tag selection with ido" single]) (ido-yes-or-no . [(1 4) ((ido-completing-read+ (0))) "Use Ido to answer yes-or-no questions" single]) (ido-vertical-mode . [(0 1 6) nil "Makes ido-mode display vertically." single]) (ido-occur . [(0 2 0) ((dash (2 13 0))) "Yet another `occur' with `ido'." single]) (ido-load-library . [(0 2 0) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Load-library alternative using ido-completing-read" single]) (ido-grid-mode . [(1 1 5) ((emacs (24 4))) "Display ido-prospects in the minibuffer in a grid." single]) (ido-describe-bindings . [(0 0 11) ((dash (2 13 0))) "Yet another `describe-bindings' with `ido'." single]) (ido-completing-read+ . [(4 11) ((emacs (24 4)) (cl-lib (0 5)) (s (0 1)) (memoize (1 1))) "A completing-read-function using ido" single]) (ido-complete-space-or-hyphen . [(1 1) nil "No description available." single]) (ido-at-point . [(1 0 0) ((emacs (24))) "ido-style completion-at-point" single]) (idle-highlight-mode . [(1 1 3) nil "highlight the word the point is on" single]) (identica-mode . [(1 3 1) nil "Major mode API client for status.net open microblogging" tar]) (ibuffer-vc . [(0 10) ((cl-lib (0 2))) "Group ibuffer's list by VC project, or show VC status" single]) (ibuffer-tramp . [(1 0 0) nil "Group ibuffer's list by TRAMP connection" single]) (ibuffer-projectile . [(0 2) ((projectile (0 11 0))) "Group ibuffer's list by projectile root" single]) (ialign . [(0 4 2) ((emacs (24 4))) "visual align-regexp" single]) (hydra . [(0 14 0) ((cl-lib (0 5))) "Make bindings that stick around." tar]) (hyde . [(0 2) nil "No description available." tar]) (hydandata-light-theme . [(0 9 0) nil "A light color theme that is easy on your eyes" single]) (hyai . [(1 0 0) ((cl-lib (0 5)) (emacs (24))) "Haskell Yet Another Indentation" single]) (hy-mode . [(1 0 3) ((dash (2 13 0)) (dash-functional (1 2 0)) (s (1 11 0)) (emacs (24))) "Major mode for Hylang" tar]) (hungry-delete . [(1 1 5) nil "hungry delete minor mode" single]) (hugsql-ghosts . [(0 1 3) ((s (1 9 0)) (dash (2 10 0)) (cider (0 14 0))) "Display hugsql defqueries in clojure code as an overlay." single]) (httprepl . [(1 1) ((s (1 9 0)) (dash (2 5 0)) (emacs (24))) "An HTTP REPL" single]) (httpcode . [(0 1) nil "explains the meaning of an HTTP status code" single]) (htmlize . [(1 53) nil "Convert buffer text and decorations to HTML." single]) (html-to-markdown . [(1 5 1) nil "HTML to Markdown converter written in Emacs-lisp." single]) (ht . [(2 2) ((dash (2 12 0))) "The missing hash table library for Emacs" single]) (hound . [(1 1 0) ((request (0 2 0)) (cl-lib (0 5))) "Display hound search results in a compilation window" single]) (hookify . [(0 2 1) ((s (1 9 0)) (dash (1 5 0))) "Interactive commands to create temporary hooks" single]) (homebrew-mode . [(1 3 6) ((emacs (24 4)) (inf-ruby (2 4 0)) (dash (1 2 0))) "minor mode for editing Homebrew formulae" single]) (hoa-pp-mode . [(0 3 0) ((emacs (24 1)) (names (20150723 0))) "Major mode for Hoa PP grammars" single]) (hl-todo . [(1 9 0) nil "highlight TODO and similar keywords" single]) (hl-sentence . [(3) nil "highlight a sentence based on customizable face" single]) (hl-anything . [(0 0 9) ((emacs (24 3))) "Highlight symbols, selections, enclosing parens and more." tar]) (historyf . [(0 0 9) nil "file history library like browser" single]) (history . [(1 0 0) ((emacs (24 3))) "History utility for source code navigation" tar]) (hippie-namespace . [(0 5 8) nil "Special treatment for namespace prefixes in hippie-expand" single]) (hippie-expand-slime . [(0 1) nil "Hook slime's completion into hippie-expand" single]) (hindent . [(5 2 6) ((cl-lib (0 5))) "Indent haskell code using the \"hindent\" program" single]) (highlight-symbol . [(1 3) nil "automatic and manual symbol highlighting" single]) (highlight-quoted . [(0 1) ((emacs (24))) "Highlight Lisp quotes and quoted symbols" single]) (highlight-parentheses . [(1 1 0) nil "highlight surrounding parentheses" single]) (highlight-numbers . [(0 2 3) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single]) (highlight-indentation . [(0 7 0) nil "Minor modes for highlighting indentation" single]) (highlight-defined . [(0 1 5) ((emacs (24))) "Syntax highlighting of known Elisp symbols" single]) (highlight-blocks . [(0 1 16) ((emacs (24))) "Highlight the blocks point is in" single]) (highlight . [(3704) nil "Highlighting commands." single ((:commit . "066ac05268185eb8a33acb1713784a9ae5cbbe5c") (:url . "http://www.emacswiki.org/highlight.el") (:keywords "faces" "help" "local"))]) (hierarchy . [(0 7 0) ((emacs (25 1))) "Library to create and display hierarchy structures" single]) (hide-mode-line . [(1 0 1) ((emacs (24 4))) "minor mode that hides/masks your modeline" single]) (hide-lines . [(20130623 1701) nil "Commands for hiding lines based on a regexp" single]) (hi2 . [(1 0) nil "indentation module for Haskell Mode" single]) (hfst-mode . [(0 4 0) nil "major mode for editing HFST files" single]) (helpful . [(0 12) ((emacs (25 1)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 11 0)) (f (0 20 0)) (elisp-refs (1 2)) (shut-up (0 3))) "a better *help* buffer" single]) (helm-zhihu-daily . [(0 3) ((helm (1 0)) (cl-lib (0 5)) (emacs (24 4))) "Helm interface for 知乎日报 (http://daily.zhihu.com)" single]) (helm-w3m . [(1 0) ((helm (1 5)) (w3m (0 0)) (cl-lib (0 5)) (emacs (24 1))) "W3m bookmark - helm interface." single]) (helm-w32-launcher . [(0 1 6) ((emacs (24)) (helm (1 6 5)) (cl-lib (0 5))) "Start Menu entry launcher using Helm" tar]) (helm-unicode . [(0 0 3) ((helm (1 6)) (emacs (24 4))) "Helm command for unicode characters." single]) (helm-tramp . [(1 0 5) ((emacs (24 3)) (helm (2 0))) "Tramp helm interface for ssh, docker, vagrant" single]) (helm-themes . [(0 5) ((helm (1 0))) "Color theme selection with helm interface" single]) (helm-system-packages . [(1 10 0) ((emacs (24 4)) (helm (2 8 6)) (seq (1 8))) "Helm UI wrapper for system package managers." tar]) (helm-swoop . [(1 7 4) ((helm (1 0)) (emacs (24 3))) "Efficiently hopping squeezed lines powered by helm interface" single]) (helm-spaces . [(0 4) ((helm-core (2 2)) (spaces (0 1 0))) "helm sources for spaces" single]) (helm-smex . [(0 3) ((emacs (24)) (smex (3 0)) (helm (1 7 7))) "Helm interface for smex" single]) (helm-sage . [(0 0 4) ((cl-lib (0 5)) (helm (1 5 6)) (sage-shell-mode (0 0 8))) "A helm extension for sage-shell-mode." single]) (helm-rubygems-org . [(0 0 1) ((emacs (24)) (helm (1 6 3)) (cl-lib (0 5))) "Use helm to search rubygems.org" single]) (helm-rtags . [(2 18) ((helm (2 0)) (rtags (2 10))) "A front-end for rtags" single]) (helm-robe . [(0 2) ((helm (1 7 7))) "completing read function for robe" single]) (helm-rg . [(0 1) ((emacs (25)) (helm (2 8 8)) (cl-lib (0 5)) (dash (2 13 0))) "a helm interface to ripgrep" single]) (helm-recoll . [(0 5) ((helm (1 9 9))) "helm interface for the recoll desktop search tool." single]) (helm-rdefs . [(1 0 1) ((emacs (24)) (helm (1 6 4))) "rdefs with helm interface" single]) (helm-qiita . [(1 0 2) ((helm (2 8 2))) "Qiita with helm interface" single]) (helm-pydoc . [(0 7) ((helm-core (1 7 4)) (cl-lib (0 5))) "pydoc with helm interface" tar]) (helm-purpose . [(0 1) ((emacs (24)) (helm (1 9 2)) (window-purpose (1 4))) "Helm Interface for Purpose" single]) (helm-pt . [(0 2) ((helm (1 5 6))) "Helm interface to the platinum searcher" tar]) (helm-projectile . [(0 14 0) ((helm (1 7 7)) (projectile (0 14 0)) (dash (1 5 0)) (cl-lib (0 3))) "Helm integration for Projectile" single]) (helm-project-persist . [(1 0 0) ((helm (1 5 2)) (project-persist (0 1 4))) "Helm integration for project-persist package" single]) (helm-proc . [(0 0 5) ((helm (1 6 0))) "Helm interface for managing system processes" tar]) (helm-perspeen . [(0 1 2) ((perspeen (0 1 0)) (helm (2 5 0))) "Helm interface for perspeen." single]) (helm-perldoc . [(0 7) ((helm (1 0)) (deferred (0 3 1)) (cl-lib (0 5))) "perldoc with helm interface" tar]) (helm-pages . [(0 1 1) ((helm (1 6 5)) (emacs (24)) (cl-lib (0 5))) "Pages in current buffer as Helm datasource" single]) (helm-orgcard . [(0 2) ((helm-core (1 7 7))) "browse the orgcard by helm" single]) (helm-org-rifle . [(1 6 0) ((emacs (24 4)) (dash (2 12)) (f (0 18 1)) (helm (1 9 4)) (s (1 10 0))) "Rifle through your Org files" single]) (helm-open-github . [(0 15) ((emacs (24 4)) (helm-core (1 7 7)) (gh (0 8 2))) "Utilities of Opening Github Page" single]) (helm-notmuch . [(1 1) ((helm (1 9 3)) (notmuch (0 21))) "Search emails with Notmuch and Helm" single]) (helm-nixos-options . [(0 0 1) ((nixos-options (0 0 1)) (helm (1 5 6))) "Helm Interface for nixos-options" single]) (helm-mt . [(0 9) ((emacs (24)) (helm (0 0)) (multi-term (0 0)) (cl-lib (0 5))) "helm multi-term management" single]) (helm-mode-manager . [(1 0 0) ((helm (1 5 3))) "Select and toggle major and minor modes with helm" single]) (helm-migemo . [(1 22) ((helm-core (1 7 8)) (migemo (1 9)) (cl-lib (0 5))) "Migemo plug-in for helm" single]) (helm-make . [(0 1 0) ((helm (1 5 3)) (projectile (0 11 0))) "Select a Makefile target with helm" single]) (helm-ls-hg . [(1 8 0) ((helm (1 7 8))) "List hg files in hg project." single]) (helm-ls-git . [(1 9 1) ((helm (1 7 8))) "list git files." single]) (helm-ispell . [(0 1) ((helm-core (1 7 7))) "ispell-complete-word with helm interface" single]) (helm-hayoo . [(0 0 5) ((helm (1 6 0)) (json (1 2)) (haskell-mode (13 7))) "Source and configured helm for searching hayoo" single]) (helm-hatena-bookmark . [(2 2 3) ((helm (2 8 2))) "Hatena::Bookmark with helm interface" single]) (helm-gtags . [(1 5 6) ((emacs (24 3)) (helm (1 7 7))) "GNU GLOBAL helm interface" single]) (helm-go-package . [(0 3 0) ((emacs (24 4)) (helm-core (2 2 1)) (go-mode (1 4 0)) (deferred (0 4 0))) "helm sources for Go programming language's package" single]) (helm-gitlab . [(0 8 0) ((s (1 9 0)) (dash (2 9 0)) (helm (1 0)) (gitlab (0 8 0))) "Helm interface to Gitlab" single]) (helm-github-stars . [(1 3 5) ((helm (1 6 8)) (emacs (24 4))) "Helm integration for your starred repositories on github" single]) (helm-git-grep . [(0 10 1) ((helm-core (2 2 0))) "helm for git grep, an incremental git-grep(1)" single]) (helm-ghq . [(1 7 0) ((helm (2 2 0))) "ghq with helm interface" single]) (helm-ghc . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (helm (1 6 4)) (ghc (5 2 1 0))) "A Helm datasource for ghc-mod errors" single]) (helm-flycheck . [(0 4) ((dash (2 12 1)) (flycheck (28)) (helm-core (1 9 8))) "Show flycheck errors with helm" single]) (helm-firefox . [(1 3) ((helm (1 5)) (cl-lib (0 5)) (emacs (24 1))) "Firefox bookmarks" single]) (helm-ext . [(0 1 2) ((emacs (24 4)) (helm (2 5 3))) "A few extensions to Helm" tar]) (helm-etags-plus . [(1 1) ((helm (1 7 8))) "Another Etags helm.el interface" single]) (helm-emms . [(1 3) ((helm (1 5)) (emms (0 0)) (cl-lib (0 5)) (emacs (24 1))) "Emms for Helm." single]) (helm-dired-history . [(1 3) ((helm (1 9 8)) (cl-lib (0 5))) "Show dired history with helm.el support." single]) (helm-directory . [(0 6 4) ((emacs (24 4)) (helm (2 0))) "selecting directory before select the file" single]) (helm-descbinds . [(1 13) ((helm (1 5))) "A convenient `describe-bindings' with `helm'" single]) (helm-dash . [(1 3 0) ((helm (1 9 2)) (cl-lib (0 5))) "Offline documentation browser for +150 APIs using Dash docsets." single]) (helm-cscope . [(0 1 1) ((xcscope (1 0)) (helm (1 6 7)) (cl-lib (0 5)) (emacs (24 1))) "Helm interface for xcscope.el." single]) (helm-core . [(2 9 8) ((emacs (24 4)) (async (1 9 3))) "Development files for Helm" tar]) (helm-company . [(0 2 2) ((helm (1 5 9)) (company (0 6 13))) "Helm interface for company-mode" single]) (helm-commandlinefu . [(0 3) ((emacs (24 1)) (helm (1 7 0)) (json (1 3)) (let-alist (1 0 3))) "Search and browse commandlinefu.com from helm" single]) (helm-codesearch . [(0 4 0) ((s (1 10 0)) (dash (2 12 0)) (helm (1 7 7)) (cl-lib (0 5))) "helm interface for codesearch" single]) (helm-circe . [(0 4) ((emacs (24)) (helm (0 0)) (circe (0 0)) (cl-lib (0 5))) "helm circe buffer management." single]) (helm-cider . [(0 4 0) ((emacs (24 4)) (cider (0 12)) (helm-core (2 4))) "Helm interface to CIDER" tar]) (helm-c-yasnippet . [(0 6 7) ((helm-core (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single]) (helm-bundle-show . [(1 1 5) ((helm (1 8 0))) "bundle show with helm interface" single]) (helm-books . [(1 0 1) ((helm (1 7 7))) "Helm interface for searching books" single]) (helm-bm . [(0 3) ((bm (1 0)) (cl-lib (0 5)) (helm (1 9 3)) (s (1 11 0))) "helm sources for bm.el" single]) (helm-bibtex . [(2 0 0) ((helm (1 5 5)) (parsebib (1 0)) (s (1 9 0)) (dash (2 6 0)) (f (0 16 2)) (cl-lib (0 5)) (biblio (0 2))) "A BibTeX bibliography manager based on Helm" tar]) (helm-bbdb . [(1 1) ((helm (1 5)) (bbdb (3 1 2))) "Helm interface for bbdb" single]) (helm-backup . [(1 0 0) ((helm (1 5 5)) (s (1 8 0)) (cl-lib (0))) "Backup each file change using git" single]) (helm-aws . [(1 0 0) ((helm (1 5 3))) "Manage AWS EC2 server instances directly from Emacs" single]) (helm-ag . [(0 58) ((emacs (24 4)) (helm (2 0))) "the silver searcher with helm interface" single]) (helm-ack . [(0 13) ((helm (1 0)) (cl-lib (0 5))) "Ack command with helm interface" single]) (helm . [(2 9 8) ((emacs (24 4)) (async (1 9 3)) (popup (0 5 3)) (helm-core (2 9 8))) "Helm is an Emacs incremental and narrowing framework" tar]) (heaven-and-hell . [(0 0 4) ((emacs (24 4))) "easy toggle light/dark themes" single]) (hcl-mode . [(0 3) ((emacs (24 3))) "Major mode for Hashicorp" single]) (haxor-mode . [(0 7 0) ((emacs (24 0))) "Major mode for editing Haxor Assembly Files" single]) (hasky-stack . [(0 8 0) ((emacs (24 4)) (f (0 18 0)) (magit-popup (2 10))) "Interface to the Stack Haskell development tool" single]) (hasky-extensions . [(0 2 0) ((emacs (24 4)) (avy-menu (0 2))) "Toggle Haskell language extensions" single]) (haskell-tab-indent . [(0 1 0) nil "tab-based indentation for haskell-mode" single]) (haskell-snippets . [(0 1 0) ((yasnippet (0 8 0))) "Yasnippets for Haskell" tar]) (haskell-mode . [(16 1) ((emacs (24 3))) "A Haskell editing mode" tar]) (haskell-emacs-text . [(4 0 3) ((haskell-emacs (2 4 0))) "Haskell functions from Data.Text" tar]) (haskell-emacs-base . [(4 0 3) ((haskell-emacs (2 4 0))) "Haskell functions from Prelude" tar]) (haskell-emacs . [(4 0 3) nil "Write emacs extensions in haskell" tar]) (harvest . [(0 3 8) ((swiper (0 7 0)) (hydra (0 13 0)) (s (1 11 0))) "Harvest integration" single]) (hardhat . [(0 4 6) ((ignoramus (0 7 0))) "Protect against clobbering user-writable files" single]) (hardcore-mode . [(0 1 0) nil "Disable arrow keys + optionally backspace and return" single]) (haml-mode . [(3 1 9) ((ruby-mode (1 0))) "Major mode for editing Haml files" single]) (hamburger-menu . [(1 0 5) ((emacs (24 5))) "Mode line hamburger menu" single]) (ham-mode . [(1 1 2) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown" single]) (hackernews . [(0 4 0) ((json (1 2))) "Access the Hacker News aggregator from Emacs" tar]) (hacker-typer . [(1 0 6) ((emacs (24))) "Pretend to write code like a pro" tar]) (gxref . [(0 1) ((emacs (25))) "xref backend using GNU Global." single]) (guru-mode . [(0 2) nil "Become an Emacs guru" single]) (gulp-task-runner . [(1 0) nil "Gulp task runner" single ((:commit . "8f5c52a7180634a99e16822bbc9f6d5e014c87d2") (:keywords "convenience" "javascript"))]) (guix . [(0 4 1 1) ((emacs (24 3)) (dash (2 11 0)) (geiser (0 8)) (bui (1 1 0)) (magit-popup (2 1 0)) (edit-indirect (0 1 4))) "Interface for GNU Guix" tar]) (guide-key-tip . [(0 0 1) ((guide-key (1 2 3)) (pos-tip (0 4 5))) "Show guide-key.el hints using pos-tip.el" single]) (guide-key . [(1 2 5) ((popwin (0 3 0))) "Guide the following key bindings automatically and dynamically" single]) (gscholar-bibtex . [(0 3 3) nil "Retrieve BibTeX from Google Scholar and other online sources(ACM, IEEE, DBLP)" single]) (gruvbox-theme . [(1 26 0) ((autothemer (0 2))) "A retro-groove colour theme for Emacs" tar]) (grunt . [(1 3 2) ((dash (2 9 0)) (ansi-color (3 4 2))) "Some glue to stick Emacs and Gruntfiles together" single]) (gruber-darker-theme . [(0 6) nil "Gruber Darker color theme for Emacs 24." single]) (groovy-mode . [(2 0) ((s (1 12 0)) (emacs (24 3))) "Major mode for Groovy source files" tar]) (groovy-imports . [(1 0) ((emacs (24 4)) (s (1 10 0)) (pcache (0 3 2))) "Code for dealing with Groovy imports" single]) (grizzl . [(0 1 1) nil "Fuzzy Search Library & Completing Read" tar]) (grin . [(1 0) nil "run grin and grind (python replacements for grep and find) putting hits in a grep buffer" single ((:url . "http://bitbucket.org/dariusp686/emacs-grin") (:keywords "python" "grin" "grind" "grep" "find"))]) (grep-context . [(0 1 0) ((emacs (24 4)) (dash (2 12 0)) (cl-lib (0 5 0))) "Increase context in compilation and grep buffers" single]) (green-screen-theme . [(1 0 24) nil "A nice color theme for those who miss green CRTs" single]) (green-is-the-new-black-theme . [(0 0 6) nil "A cool and minimalist green blackened theme engine" single]) (grass-mode . [(0 1) ((cl-lib (0 2))) "Provides Emacs modes for interacting with the GRASS GIS program" single ((:keywords "grass" "gis"))]) (grapnel . [(0 5 3) nil "HTTP request lib with flexible callback dispatch" single]) (graphviz-dot-mode . [(0 4) nil "Mode for the dot-language used by graphviz (att)." single]) (graphene-meta-theme . [(0 0 5) nil "Integrated theming for common packages" single]) (graphene . [(1 0 0) ((dash (2 10 0)) (exec-path-from-shell (1 9)) (ppd-sr-speedbar (0 0 6)) (sr-speedbar (20140505)) (ido-completing-read+ (4 3)) (smex (3 0)) (web-mode (11 2)) (smartparens (1 8 0)) (graphene-meta-theme (0 0 2)) (flycheck (0 23)) (company (0 8 12))) "Friendly Emacs defaults" tar]) (grandshell-theme . [(1 3) nil "Dark color theme for Emacs > 24 with intensive colors." tar]) (grails-projectile-mode . [(1 1 2) ((projectile (0 10 0)) (emacs (24)) (cl-lib (0 5))) "Grails mode with Projectile for projects management." tar]) (grails-mode . [(2 0) nil "minor-mode that adds some Grails project management to a grails project" single]) (grails . [(0 4 1) ((emacs (24))) "Minor mode for Grails projects" single]) (gradle-mode . [(0 5 5) ((s (1 8 0))) "Gradle integration with Emacs' compile" single]) (grab-x-link . [(0 5) ((emacs (24)) (cl-lib (0 5))) "Grab links from X11 apps and insert into Emacs" single]) (grab-mac-link . [(0 2) ((emacs (24))) "Grab link from Mac Apps and insert it into Emacs" single]) (gpastel . [(0 3 0) ((emacs (24 3))) "Integrates GPaste with the kill-ring" single]) (govc . [(0 18 0) ((emacs (24 3)) (dash (1 5 0)) (s (1 9 0)) (magit-popup (2 0 50)) (json-mode (1 6 0))) "Interface to govc for managing VMware ESXi and vCenter" single]) (goto-last-change . [(1 2 1) nil "Move point through buffer-undo-list positions" single]) (goto-gem . [(1 2) ((s (1 9 0))) "Open dired in gem directory" single]) (goto-chg . [(1 7 2) nil "goto last change" single]) (gotham-theme . [(1 1 8) nil "A very dark Emacs color theme." single]) (gotest . [(0 14 0) ((emacs (24 3)) (s (1 11 0)) (f (0 19 0)) (go-mode (1 5 0))) "Launch GO unit tests" single]) (gorepl-mode . [(1 0 0) ((emacs (24))) "Go REPL Interactive Development in top of Gore" single]) (goose-theme . [(1 0 0) ((emacs (24 1))) "A gray color theme for Emacs." single ((:commit . "52244bd5ee3e7b42599d9697007a5df3b026aafc") (:url . "https://github.com/thwg/goose-theme"))]) (google-translate . [(0 11 14) nil "Emacs interface to Google Translate." tar]) (google-this . [(1 12) ((emacs (24 1))) "A set of functions and bindings to google under point." single]) (google-maps . [(1 0 0) nil "Access Google Maps from Emacs" tar]) (golden-ratio . [(1 0) nil "Automatic resizing of Emacs windows to the golden ratio" single]) (godoctor . [(0 6 0) nil "Frontend for godoctor" single]) (go-tag . [(1 1 0) ((emacs (24 0)) (go-mode (1 5 0))) "Edit Golang struct field tag" single]) (go-scratch . [(0 0 1) ((go-mode (1 3 1)) (emacs (24))) "*scratch* buffer for Go" single]) (go-rename . [(1 5 0) ((go-mode (1 3 1))) "Integration of the 'gorename' tool into Emacs." single]) (go-playground . [(1 3) ((emacs (24)) (go-mode (1 4 0)) (gotest (0 13 0))) "Local Golang playground for short snippets." single]) (go-mode . [(1 5 0) nil "Major mode for the Go programming language" single]) (go-impl . [(0 14) ((emacs (24 3)) (go-mode (1 3 0))) "impl integration for go-mode" single]) (go-guru . [(1 5 0) ((go-mode (1 3 1)) (cl-lib (0 5))) "Integration of the Go 'guru' analysis tool into Emacs." single]) (go-fill-struct . [(0 1) ((emacs (24))) "Fill struct for golang." single]) (go-errcheck . [(1 1 2) nil "errcheck integration for go-mode" single]) (go-eldoc . [(0 30) ((emacs (24 3)) (go-mode (1 0 0))) "eldoc for go-mode" single]) (go-dlv . [(0 1 0) ((go-mode (1 3 1))) "Go Delve - Debug Go programs interactively with the GUD." single]) (go-direx . [(0 4) ((direx (1 0 0)) (cl-lib (0 5))) "Tree style source code viewer for Go language" single]) (go-autocomplete . [(20170907) ((auto-complete (1 4 0))) "auto-complete-mode backend for go-mode" single]) (go-add-tags . [(0 4) ((emacs (24 3)) (s (1 11 0))) "Add field tags for struct fields" single]) (gnus-x-gm-raw . [(0 0 1) ((log4e (0 2 0)) (yaxception (0 1))) "Search mail of Gmail using X-GM-RAW as web interface" single]) (gnus-desktop-notify . [(1 4) ((gnus (1 0))) "Gnus Desktop Notification global minor mode" single]) (gnuplot . [(0 7 0) nil "drive gnuplot from within emacs" tar]) (gntp . [(0 1) nil "Growl Notification Protocol for Emacs" single]) (gnome-calendar . [(0 2) nil "Integration with the GNOME Shell calendar" single ((:commit . "58c3a3c32aff9901c679bdf9091ed934897b84a0") (:keywords "gnome" "calendar"))]) (gmpl-mode . [(0 1 0) nil "Major mode for editing GMPL(MathProg) files" single]) (gmail2bbdb . [(0 0 6) nil "import email and name into bbdb from vcard." single]) (gmail-message-mode . [(1 4) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single]) (glab . [(2 0 1) ((emacs (24 4)) (ghub (2 0))) "minuscule client library for the Gitlab API" single]) (gl-conf-mode . [(0 3) nil "No description available." single]) (gitter . [(1) ((emacs (24 1)) (let-alist (1 0 4))) "An Emacs Gitter client" single]) (gitpatch . [(0 5 1) ((emacs (24 3))) "Git-format patch toolkit" single]) (gitlab-ci-mode-flycheck . [(20180304 1) ((emacs (25)) (flycheck (31)) (gitlab-ci-mode (1))) "Flycheck support for ‘gitlab-ci-mode’" single]) (gitlab-ci-mode . [(20180306 1) ((emacs (25)) (yaml-mode (0 0 12))) "mode for editing GitLab CI files" single]) (gitlab . [(0 8 0) ((s (1 9 0)) (dash (2 9 0)) (pkg-info (0 5 0)) (request (0 1 0))) "Emacs client for Gitlab" tar]) (gitignore-mode . [(1 2 7) nil "Major mode for editing .gitignore files" single]) (github-search . [(0 0 1) ((magit (2 1 0)) (gh (1 0 0))) "Clone repositories by searching github" single]) (github-notifier . [(0 1) ((emacs (24))) "Displays your GitHub notifications unread count in mode-line" single]) (github-elpa . [(0 0 1) ((package-build (1 0)) (commander (0 7 0)) (git (0 1 1))) "Build and publish ELPA repositories with GitHub Pages" tar]) (github-clone . [(0 2) ((gh (0 7 2)) (magit (1 2 0)) (emacs (24))) "Fork and clone github repos" single]) (github-browse-file . [(0 5 0) ((cl-lib (0 5))) "View the file you're editing on GitHub" single]) (gitconfig-mode . [(1 2 7) nil "Major mode for editing .gitconfig files" single]) (gitconfig . [(1 0 0) nil "Emacs lisp interface to work with git-config variables" single]) (gitattributes-mode . [(1 2 7) nil "Major mode for editing .gitattributes files" single]) (git-wip-timemachine . [(1 0) ((s (1 9 0))) "Walk through git-wip revisions of a file" single]) (git-timemachine . [(4 5) ((emacs (24 3))) "Walk through git revisions of a file" single]) (git-ps1-mode . [(0 2 2) nil "Global minor-mode to print __git_ps1" single]) (git-messenger . [(0 18) ((emacs (24 3)) (popup (0 5 0))) "Pop up last commit information of current line" single]) (git-link . [(0 7 1) ((emacs (24 3))) "Get the GitHub/Bitbucket/GitLab URL for a buffer location" single]) (git-lens . [(0 7 0) ((emacs (24 4))) "Show new, deleted or modified files in branch" single]) (git-gutter-fringe . [(0 23) ((git-gutter (0 88)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single]) (git-gutter-fringe+ . [(0 1) ((git-gutter+ (0 1)) (fringe-helper (20130519 1641))) "Fringe version of git-gutter+.el" single]) (git-gutter . [(0 90) ((cl-lib (0 5)) (emacs (24))) "Port of Sublime Text plugin GitGutter" single]) (git-gutter+ . [(0 4) ((git-commit (0))) "Manage Git hunks straight from the buffer" single]) (git-commit-insert-issue . [(0 3 1) ((helm (0)) (projectile (0)) (s (0)) (github-issues (0)) (gitlab (0)) (bitbucket (0))) "Get issues list when typing \"Fixes #\"" single]) (git-commit . [(2 13 0) ((emacs (24 4)) (dash (2 14 1)) (with-editor (2 7 3))) "Edit Git commit messages" single]) (git-command . [(0 2 0) ((term-run (0 1 4)) (with-editor (2 3 1)) (git-ps1-mode (0 2 0))) "Yet another Git interface" single]) (git-auto-commit-mode . [(4 4 0) nil "Emacs Minor mode to automatically commit and push" single]) (git-attr . [(0 0 3) ((emacs (24 3))) "Git attributes of buffer file" tar]) (git-annex . [(1 1) nil "Mode for easy editing of git-annex'd files" single]) (git . [(0 1 1) ((s (1 7 0)) (dash (2 2 0)) (f (0 10 0))) "An Elisp API for programmatically using Git" single]) (gist . [(1 4 0) ((emacs (24 1)) (gh (0 10 0))) "Emacs integration for gist.github.com" single]) (ghub . [(2 0 1) ((emacs (24 4)) (let-alist (1 0 5))) "minuscule client library for the Github API" tar]) (ghub+ . [(0 3) ((emacs (25)) (ghub (2 0)) (apiwrap (0 5))) "a thick GitHub API client built on ghub" single]) (ghq . [(0 1 2) nil "Ghq interface for emacs" single]) (ghc-imported-from . [(0 1 2) ((emacs (24 1))) "Haskell documentation lookup with ghc-imported-from" single]) (ghc . [(5 8 0 0) ((haskell-mode (13 0))) "Sub mode for Haskell mode" tar]) (gh . [(0 10 0) ((emacs (24 4)) (pcache (0 3 1)) (logito (0 1))) "A GitHub library for Emacs" tar]) (ggtags . [(0 8 12) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single]) (ggo-mode . [(20130521) nil "Gengetopt major mode" single]) (gf . [(1 0 1) ((s (1 0)) (ht (2 0))) "Major mode for editing GF code" single]) (german-holidays . [(0 2 0) nil "German holidays for Emacs calendar" single]) (genrnc . [(0 1 0) ((deferred (0 3 1)) (concurrent (0 3)) (log4e (0 2 0)) (yaxception (0 1))) "generate RELAX NG Compact Schema from RELAX NG Schema, XML Schema and DTD." tar]) (geiser . [(0 10) nil "GNU Emacs and Scheme talk to each other" tar]) (geben-helm-projectile . [(0 0 4) ((emacs (24)) (geben (0 26)) (helm-projectile (0 13 0))) "Integrate helm-projectile with geben" single]) (geben . [(1 1 1) ((emacs (24 3)) (cl-lib (0 5))) "DBGp protocol frontend, a script debugger" tar]) (gather . [(1 1 0) nil "Gather string in buffer." single]) (gams-mode . [(6 5) ((emacs (24 3))) "Major mode for General Algebraic Modeling System (GAMS)." single]) (fzf . [(0 2) ((emacs (24 4))) "A front-end for fzf." single]) (fxrd-mode . [(1 0) ((s (1 2))) "Major mode for editing fixed field width files" tar]) (fwb-cmds . [(1 1 1) nil "misc frame, window and buffer commands" single]) (fvwm-mode . [(1 6 4) nil "major mode for editing Fvwm configuration files" single]) (fuzzy . [(0 1) nil "Fuzzy Matching" single]) (futhark-mode . [(0 5 2) ((cl-lib (0 5))) "major mode for editing Futhark source files" single ((:commit . "c25d6bf26a8fa8a13e5658bee8defc72521852ab") (:keywords "languages") (:url . "https://github.com/diku-dk/futhark"))]) (function-args . [(0 6 0) ((ivy (0 9 1))) "C++ completion for GNU Emacs" tar]) (fullframe . [(0 5 0) ((cl-lib (0 5))) "Generalized automatic execution in a single frame" single]) (full-ack . [(1 0) nil "a front-end for ack" single]) (fuel . [(0 96) nil "No description available." tar ((:commit . "905ec06d864537fb6be9c46ad98f1b6d101dfbf0"))]) (fstar-mode . [(0 9 4 0) ((emacs (24 3)) (dash (2 11))) "Support for F* programming" single]) (fsharp-mode . [(1 9 12) ((company (0 8 0)) (company-quickhelp (1 2 0)) (popup (0 5 3)) (pos-tip (0 4 5)) (s (1 3 1)) (dash (1 1 0)) (flycheck (0 25))) "F# mode for Emacs" tar]) (fsbot-data-browser . [(0 3) nil "browse the fsbot database using tabulated-list-mode" single]) (fringe-helper . [(1 0 1) nil "helper functions for fringe bitmaps" single]) (free-keys . [(1 0 0) ((cl-lib (0 3))) "Show free keybindings for modkeys or prefixes" single]) (frameshot . [(0 1 1) ((emacs (25 3))) "Take screenshots of a frame" single]) (frames-only-mode . [(1 0 0) ((emacs (24 4)) (seq (2 3))) "Use frames instead of Emacs windows" single]) (fountain-mode . [(2 5 3) ((emacs (24 5))) "Major mode for screenwriting in Fountain markup" single]) (fortune-cookie . [(1 0 0) nil "Print a fortune in your scratch buffer." single]) (format-sql . [(0 4) nil "Use format-sql to make your SQL readable in directly Emacs." single]) (form-feed . [(0 2 2) nil "Display ^L glyphs as horizontal lines" single]) (foreman-mode . [(0 0 1) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "View and manage Procfile-based applications" single]) (forecast . [(0 6 4) ((emacs (24 4))) "Weather forecasts" single ((:commit . "5bfef1550e758000be900bda957aa41b49f5bd40") (:url . "http://gkayaalp.com/emacs.html#forecast.el") (:keywords "weather" "forecast"))]) (fontify-face . [(1 0 0) nil "Fontify symbols representing faces with that face." single]) (fontawesome . [(0 4) ((helm-core (1 7 7)) (emacs (24 4))) "fontawesome utility" tar]) (font-utils . [(0 7 8) ((persistent-soft (0 8 8)) (pcache (0 2 3))) "Utility functions for working with fonts" single]) (fold-this . [(0 3 0) nil "Just fold this region please" single]) (fold-dwim-org . [(0 6) ((fold-dwim (1 2))) "Fold DWIM bound to org key-strokes." single]) (fold-dwim . [(1 2) nil "No description available." single]) (focus . [(0 1 1) ((emacs (24)) (cl-lib (0 5))) "Dim the font color of text in surrounding sections" single]) (fn . [(0 1 2) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (dash-functional (1 2 0))) "Concise anonymous functions for Emacs Lisp" single]) (flyspell-popup . [(0 3) ((popup (0 5 0))) "Correcting words with Flyspell in popup menus" single]) (flyspell-lazy . [(0 6 10) nil "Improve flyspell responsiveness using idle timers" single]) (flyspell-correct-popup . [(0 4) ((flyspell-correct (0 4 0)) (popup (0 5 3))) "correcting words with flyspell via popup interface" single]) (flyspell-correct-ivy . [(0 4) ((flyspell-correct (0 4 0)) (ivy (0 8 0))) "correcting words with flyspell via ivy interface" single]) (flyspell-correct-helm . [(0 4) ((flyspell-correct (0 4 0)) (helm (1 9 0))) "correcting words with flyspell via helm interface" single]) (flyspell-correct . [(0 4) nil "correcting words with flyspell via custom interface" tar]) (flymake-shell . [(0 8) ((flymake-easy (0 1))) "A flymake syntax-checker for shell scripts" single]) (flymake-sass . [(0 6) ((flymake-easy (0 1))) "Flymake handler for sass files" single]) (flymake-ruby . [(0 8) ((flymake-easy (0 1))) "A flymake handler for ruby-mode files" single]) (flymake-python-pyflakes . [(0 9) ((flymake-easy (0 8))) "A flymake handler for python-mode files using pyflakes (or flake8)" single]) (flymake-php . [(0 5) ((flymake-easy (0 1))) "A flymake handler for php-mode files" single]) (flymake-perlcritic . [(1 0 3) ((flymake (0 3))) "Flymake handler for Perl to invoke Perl::Critic" tar]) (flymake-less . [(0 3) ((less-css-mode (0 15))) "Flymake handler for LESS stylesheets (lesscss.org)" single]) (flymake-json . [(0 1) ((flymake-easy (0 1))) "A flymake handler for json using jsonlint" single]) (flymake-jslint . [(0 23) nil "Flymake support for javascript using jslint" single]) (flymake-hlint . [(0 2) ((flymake-easy (0 1))) "A flymake handler for haskell-mode files using hlint" single]) (flymake-haskell-multi . [(0 3) ((flymake-easy (0 1))) "Syntax-check haskell-mode using both ghc and hlint" tar]) (flymake-haml . [(0 8) ((flymake-easy (0 1))) "A flymake handler for haml files" single]) (flymake-gjshint . [(0 0 6) nil "A flymake handler for javascript using both jshint and gjslint" single]) (flymake-easy . [(0 10) nil "Helpers for easily building flymake checkers" single]) (flymake-cursor . [(1 0 2) ((flymake (0 3))) "Show flymake messages in the minibuffer after delay" single]) (flymake-css . [(0 3) ((flymake-easy (0 1))) "Flymake support for css using csslint" single]) (flymake-coffee . [(0 12) ((flymake-easy (0 1))) "A flymake handler for coffee script" single]) (flycheck-ycmd . [(1 2) ((emacs (24)) (dash (2 13 0)) (flycheck (0 22)) (ycmd (1 2)) (let-alist (1 0 5))) "flycheck integration for ycmd" single]) (flycheck-yamllint . [(0 1 0) ((flycheck (30))) "Flycheck integration for YAMLLint" single]) (flycheck-title . [(1 0) ((flycheck (30)) (emacs (24))) "show flycheck errors in the frame title" single]) (flycheck-tip . [(0 5 0) ((flycheck (0 13)) (emacs (24 1)) (popup (0 5 0))) "Show flycheck/flymake errors by tooltip" tar]) (flycheck-swift3 . [(2 0 2) ((emacs (24 4)) (flycheck (26))) "Flycheck: Swift support for Apple swift-mode" single]) (flycheck-swift . [(2 0) ((emacs (24 4)) (flycheck (0 25))) "Flycheck extension for Apple's Swift." single]) (flycheck-status-emoji . [(1 3) ((cl-lib (0 1)) (emacs (24)) (flycheck (0 20)) (let-alist (1 0))) "Show flycheck status using cute, compact emoji" single]) (flycheck-rtags . [(2 18) ((emacs (24)) (flycheck (0 23)) (rtags (2 10))) "RTags Flycheck integration." single]) (flycheck-rebar3 . [(1 1 0) ((flycheck (27))) "Rebar3 flycheck integration for Erlang projects" single]) (flycheck-pycheckers . [(0 9) ((flycheck (0 18))) "multiple syntax checker for Python, using Flycheck" tar]) (flycheck-pos-tip . [(0 3) ((emacs (24 1)) (flycheck (0 22)) (pos-tip (0 4 6))) "Display Flycheck errors in GUI tooltips" single]) (flycheck-popup-tip . [(0 12 2) ((flycheck (0 22)) (popup (0 5)) (emacs (24))) "Display Flycheck error messages using popup.el" single]) (flycheck-pony . [(0 2 1) ((flycheck (0 25 1))) "Pony support in Flycheck" single]) (flycheck-phpstan . [(0 2 1) ((emacs (24 3)) (flycheck (26)) (phpstan (0 2 1))) "Flycheck integration for PHPStan" single]) (flycheck-package . [(0 12) ((flycheck (0 22)) (package-lint (0 2))) "A Flycheck checker for elisp package authors" single]) (flycheck-ocaml . [(0 3) ((emacs (24 1)) (flycheck (0 22)) (merlin (2 3)) (let-alist (1 0 3))) "Flycheck: OCaml support" single]) (flycheck-objc-clang . [(2 0 2) ((emacs (24 4)) (flycheck (26))) "Flycheck: Objective-C support using Clang" single]) (flycheck-nimsuggest . [(0 8 1) ((flycheck (0 23)) (nim-mode (0 4 1)) (emacs (24))) "flycheck backend for Nim using nimsuggest" single]) (flycheck-mmark . [(0 1 0) ((emacs (24 4)) (flycheck (0 29))) "Flycheck checker for MMark markdown processor" single]) (flycheck-mix . [(1 0 0) ((flycheck (27)) (elixir-mode (1 8 0))) "Elixir mix flycheck integration" single]) (flycheck-ledger . [(0 4) ((flycheck (0 15))) "Flycheck integration for ledger files" single]) (flycheck-kotlin . [(0 3) ((flycheck (0 18))) "Support kotlin in flycheck" single]) (flycheck-julia . [(0 1 1) ((emacs (24)) (flycheck (0 22))) "Julia support for Flycheck" single]) (flycheck-joker . [(1 2 0) ((flycheck (0 18))) "Add Clojure syntax checker (via Joker) to flycheck" single]) (flycheck-irony . [(0 1 0) ((emacs (24 1)) (flycheck (0 22)) (irony (0 2 0))) "Flycheck: C/C++ support via Irony" single]) (flycheck-hdevtools . [(0 3) ((flycheck (0 15))) "A flycheck checker for Haskell using hdevtools" single]) (flycheck-haskell . [(0 8) ((emacs (24 3)) (flycheck (0 25)) (haskell-mode (13 7)) (dash (2 4 0)) (seq (1 11)) (let-alist (1 0 1))) "Flycheck: Automatic Haskell configuration" tar]) (flycheck-gometalinter . [(0 1 4) ((emacs (24)) (flycheck (0 22))) "flycheck checker for gometalinter" single]) (flycheck-dmd-dub . [(0 12) ((flycheck (0 24)) (f (0 18 2))) "Sets flycheck-dmd-include-paths from dub package information" single]) (flycheck-crystal . [(0 1 0) ((flycheck (30))) "Add support for Crystal to Flycheck" single]) (flycheck-color-mode-line . [(0 3) ((flycheck (0 15)) (dash (1 2)) (emacs (24 1))) "Change mode line color with Flycheck status" single]) (flycheck-clojure . [(0 1 5) ((cider (0 8 1)) (flycheck (0 22 -4 1)) (let-alist (1 0 1)) (emacs (24))) "Flycheck: Clojure support" single]) (flycheck-checkpatch . [(0 1) ((emacs (25)) (flycheck (30))) "Flyckeck support for checkpatch.pl tool" single]) (flycheck-checkbashisms . [(1 5) ((emacs (24)) (flycheck (0 25))) "checkbashisms checker for flycheck" single]) (flycheck-cask . [(0 4) ((emacs (24 1)) (flycheck (0 14)) (dash (2 4 0))) "Cask support in Flycheck" single]) (flycheck-apertium . [(0 2) ((flycheck (0 25))) "Apertium checkers in flycheck" tar]) (flycheck . [(31) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "On-the-fly syntax checking" tar]) (flx-ido . [(0 6 1) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single]) (flx . [(0 6 1) ((cl-lib (0 3))) "fuzzy matching with good sorting" single]) (flower . [(0 4 2) ((emacs (24 4)) (clomacs (0 0 3))) "Emacs task tracker client." tar]) (flow-minor-mode . [(0 3) ((emacs (25 1))) "Flow type mode based on web-mode." single]) (floobits . [(1 9 2) ((json (1 2)) (highlight (0))) "Floobits plugin for real-time collaborative editing" tar]) (flex-compile . [(0 2) ((emacs (25)) (buffer-manage (0 6)) (dash (2 13 0))) "Run, evaluate and compile for a many languages and modes." tar]) (flatui-dark-theme . [(0 3 0) ((emacs (24))) "Dark color theme with colors from https://flatuicolors.com/" single]) (fixmee . [(0 8 6) ((button-lock (1 0 2)) (nav-flash (1 0 0)) (back-button (0 6 0)) (smartrep (0 0 3)) (string-utils (0 3 2)) (tabulated-list (0))) "Quickly navigate to FIXME notices in code" single]) (fix-word . [(0 1 2) ((emacs (24 1)) (cl-lib (0 5))) "Convenient word transformation" single]) (fix-muscle-memory . [(0 93) nil "Simple hacks to fix muscle memory problems" single]) (fix-input . [(0 1 1) ((emacs (24 4))) "Make input methods play nicely with alternative keyboard layout on OS level" single]) (fish-mode . [(0 1 4) ((emacs (24))) "Major mode for fish shell scripts" single]) (firestarter . [(0 2 5) nil "Execute (shell) commands on save" single]) (fireplace . [(1 1 2) nil "A cozy fireplace for emacs" single]) (firefox-controller . [(2 1) ((moz (0)) (popwin (1 0 0)) (cl-lib (0 5))) "An improved Firefox controller" single]) (fiplr . [(0 2 4) ((grizzl (0 1 0))) "Fuzzy Search for Files in Projects" tar]) (find-file-in-repository . [(1 2) nil "Quickly find files in a git, mercurial or other repository" single]) (find-file-in-project . [(5 6 8) ((ivy (0 10 0)) (emacs (24 3))) "Find file/directory and review Diff/Patch/Commit efficiently everywhere" single]) (find-by-pinyin-dired . [(0 0 3) ((pinyinlib (0 1 0))) "Find file by first PinYin character of Chinese Hanzi" single]) (finalize . [(2 0 0) ((emacs (24 1)) (cl-generic (0 3)) (cl-lib (0 3)) (eieio (1 4))) "finalizers for Emacs Lisp" tar]) (fill-function-arguments . [(0 9) ((emacs (24 4))) "Convert function arguments to/from single line" single]) (fill-column-indicator . [(1 90) nil "Graphically indicate the fill column" single]) (feature-mode . [(0 4) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar]) (fcitx . [(0 2 3) nil "Make fcitx better in Emacs" single]) (faustine . [(0 4) ((emacs (24 3)) (faust-mode (0 3))) "Edit, visualize, build and run Faust code" single]) (faust-mode . [(0 6) nil "Faust syntax colorizer for Emacs." single]) (fastnav . [(1 0 7) nil "Fast navigation and editing routines." single]) (fastdef . [(0 2 0) ((ivy (0 7 0)) (w3m (0 0))) "Insert terminology from Google top search results" single]) (fancy-narrow . [(0 9 5) nil "narrow-to-region with more eye candy." single]) (fancy-battery . [(0 2) ((emacs (24 1))) "Fancy battery display" single]) (faff-theme . [(2 2) nil "Light Emacs color theme on ivory3 background" single]) (factlog . [(0 0 1) nil "File activity logger" single]) (fabric . [(0 2 0) nil "Launch Fabric using Emacs" tar]) (f3 . [(0 1) ((emacs (24 3)) (helm (2 8 8)) (cl-lib (0 5))) "a helm interface to find" tar]) (f . [(0 20 0) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single]) (eziam-theme . [(1 0) nil "A mostly monochrome theme, inspired by Tao and Leuven, with dark and light versions." tar]) (eyebrowse . [(0 7 7) ((dash (2 7 0)) (emacs (24 3 1))) "Easy window config switching" single]) (exwm-x . [(1 8 1) ((cl-lib (0 5)) (exwm (0 17)) (switch-window (0 10)) (swiper (0 9 0)) (bind-key (1 0)) (counsel (0 9 0)) (ivy (0 9 0))) "A derivative wm based on EXWM (emacs x window manager)" tar]) (extmap . [(1 0) ((emacs (24 1))) "Externally-stored constant mapping for Elisp" single]) (extend-dnd . [(0 5) nil "R drag and Drop" tar]) (exsqlaim-mode . [(0 0 1) ((s (1 10 0))) "Use variables inside sql queries" single]) (express . [(0 6 0) ((string-utils (0 3 2))) "Alternatives to `message'" single]) (expand-region . [(0 11 0) nil "Increase selected region by semantic units." tar]) (exiftool . [(0 3) ((emacs (25))) "Elisp wrapper around ExifTool" single]) (exec-path-from-shell . [(1 11) nil "Get environment variables such as $PATH from the shell" single]) (exato . [(0 0 6) ((evil (1 2 13)) (emacs (24))) "EXATO: Evil XML/HTML Attributes Text Object" single]) (eww-lnum . [(1 1) nil "Conkeror-like functionality for eww" single]) (evm . [(0 4 2) ((dash (2 3 0)) (f (0 13 0))) "Emacs Version Manager" single]) (evil-visualstar . [(0 2 0) ((evil (0))) "Starts a * or # search from the visual selection" single]) (evil-visual-replace . [(0 0 5) ((evil (1 0 0))) "search/replace commands for evil visual state, inc. blocks" single]) (evil-visual-mark-mode . [(0 0 3) ((evil (1 0 9)) (dash (2 10))) "Display evil marks on buffer" single]) (evil-tutor . [(1 0) ((evil (1 0 9))) "Vimtutor adapted to Evil and wrapped in a major-mode" tar]) (evil-textobj-anyblock . [(0 1) ((cl-lib (0 5)) (evil (1 1 0))) "Textobject for the closest user-defined blocks." single]) (evil-text-object-python . [(1 0 1) ((emacs (24)) (evil (1 2 12))) "Python specific evil text objects" single]) (evil-test-helpers . [(1 2 13) ((evil (1 2 13))) "unit test helpers for Evil" single]) (evil-swap-keys . [(1 0 0) ((emacs (24))) "intelligently swap keys on text input with evil" single]) (evil-surround . [(1 0 1) ((evil (1 2 12))) "emulate surround.vim from Vim" single]) (evil-string-inflection . [(1 0 0) ((emacs (24)) (evil (1 2 13)) (string-inflection (1 0 6))) "snake_case -> CamelCase -> etc. for text objects" single]) (evil-space . [(0 0 6) ((evil (1 0 0))) "Repeat motion in Evil. Correct the behaviour of what SPC should do." single]) (evil-snipe . [(2 0 8) ((emacs (24 4)) (evil (1 2 12)) (cl-lib (0 5))) "emulate vim-sneak & vim-seek" single]) (evil-smartparens . [(0 4 0) ((evil (1 0)) (emacs (24 4)) (smartparens (1 10 1))) "Evil support for smartparens" single]) (evil-search-highlight-persist . [(1 8) ((highlight (0))) "Persistent highlights after search" single]) (evil-rsi . [(2 0 0) ((evil (1 0 0))) "Use emacs motion keys in evil, inspired by vim-rsi" single]) (evil-replace-with-char . [(1 0 0) ((evil (1 2 13)) (emacs (24))) "replace chars of a text object with a char" single]) (evil-quickscope . [(0 1 4) ((evil (0))) "Highlight unique characters in words for f,F,t,T navigation" single]) (evil-org . [(0 1 1) ((evil (0)) (org (0))) "evil keybindings for org-mode" single]) (evil-opener . [(0 2 2) ((evil (1 2 12)) (opener (0 2 2))) "opening urls as buffers in evil" tar]) (evil-numbers . [(0 4) nil "increment/decrement numbers like in vim" single]) (evil-nerd-commenter . [(3 2 3) ((emacs (24 4))) "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar]) (evil-multiedit . [(1 3 8) ((emacs (24 4)) (evil (1 2 12)) (iedit (0 97)) (cl-lib (0 5))) "multiple cursors for evil-mode" single]) (evil-mc . [(0 0 3) ((emacs (24 3)) (evil (1 2 12)) (cl-lib (0 5))) "Multiple cursors for evil-mode" tar]) (evil-matchit . [(2 2 8) ((evil (1 0 7))) "Vim matchit ported to Evil" tar]) (evil-mark-replace . [(0 0 4) ((evil (1 0 8))) "replace the thing in marked area" single]) (evil-magit . [(0 4 2) ((evil (1 2 3)) (magit (2 6 0))) "evil-based key bindings for magit" single]) (evil-lisp-state . [(8 2) ((evil (1 0 9)) (bind-map (0)) (smartparens (1 6 1))) "An evil state to edit Lisp code" single]) (evil-leader . [(0 4 3) ((evil (0))) "let there be <leader>" single]) (evil-iedit-state . [(1 1) ((evil (1 0 9)) (iedit (0 97))) "Evil states to interface iedit mode." single]) (evil-escape . [(3 14) ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) "Escape from anything with a customizable key sequence" single]) (evil-embrace . [(0 1 1) ((emacs (24 4)) (embrace (0 1 0)) (evil-surround (0))) "Evil integration of embrace.el" single]) (evil-commentary . [(2 1 1) ((evil (1 0 0))) "Comment stuff out. A port of vim-commentary." tar]) (evil-colemak-basics . [(2 1 0) ((emacs (24)) (evil (1 2 12)) (evil-snipe (2 0 3))) "Basic Colemak key bindings for evil-mode" single]) (evil-args . [(1 0) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single]) (evil-anzu . [(0 3) ((evil (1 0 0)) (anzu (0 46))) "anzu for evil-mode" single]) (evil . [(1 2 13) ((emacs (24 1)) (undo-tree (0 6 3)) (goto-chg (1 6)) (cl-lib (0 5))) "Extensible Vi layer for Emacs." tar]) (evalator . [(1 0 0) ((helm-core (1 9 1))) "Package for interactive transformation of data with helm" tar]) (eval-sexp-fu . [(0 4 2) ((cl-lib (0)) (highlight (0))) "Tiny functionality enhancements for evaluating sexps." single]) (eval-in-repl . [(0 9 6) ((dash (0 0 0)) (paredit (0 0 0)) (ace-window (0 0 0))) "Consistent ESS-like eval interface for various REPLs" tar]) (ethan-wspace . [(0 7 1) nil "whitespace customizations for emacs" single]) (eterm-256color . [(0 3 13) ((emacs (24 4)) (xterm-color (1 7)) (f (0 19 0))) "Customizable 256 colors for term." tar]) (esxml . [(0 3 4) nil "Library for working with xml via esxml and sxml" tar]) (esup . [(0 6) ((cl-lib (0 5)) (emacs (24))) "the Emacs StartUp Profiler (ESUP)" tar]) (ess-smart-underscore . [(0 79) nil "Ess Smart Underscore" tar]) (ess-R-data-view . [(1 0) ((ctable (20130313 1743)) (popup (20130324 1305)) (ess (20130225 1754))) "Data viewer for GNU R" single]) (ess . [(17 11) ((julia-mode (0 3))) "Emacs Speaks Statistics" tar]) (espuds . [(0 3 3) ((s (1 7 0)) (dash (2 2 0)) (f (0 12 1))) "Ecukes step definitions" single]) (eslintd-fix . [(1 1 0) ((dash (2 12 0)) (emacs (24 3))) "use eslint_d to automatically fix js files" single]) (eslint-fix . [(1 0 0) nil "Fix JavaScript files using ESLint" single]) (eshell-z . [(0 3 2) ((cl-lib (0 5))) "cd to frequent directory in eshell" single]) (eshell-up . [(0 0 3) ((emacs (24))) "Quickly go to a specific parent directory in eshell" single]) (eshell-prompt-extras . [(0 96) nil "Display extra information for your eshell prompt." single]) (eshell-git-prompt . [(0 1 2) ((emacs (24 1)) (cl-lib (0 5)) (dash (2 11 0))) "Some Eshell prompt for Git users" single]) (eshell-did-you-mean . [(0 1) ((emacs (24 1)) (cl-lib (0 5))) "command not found (\"did you mean…\" feature) in Eshell" single]) (eshell-bookmark . [(2 0 0) ((emacs (24 3))) "Integrate bookmarks with eshell." single]) (eshell-autojump . [(0 2) nil "autojump command for Eshell" single]) (esh-help . [(1 0 1) ((dash (1 4 0))) "Add some help functions and support for Eshell" single]) (esh-autosuggest . [(2 0 0) ((emacs (24 4)) (company (0 9 4))) "History autosuggestions for eshell" single]) (esa . [(0 8 13) ((cl-lib (0 3))) "Emacs integration for esa.io" single]) (es-windows . [(0 3) ((cl-lib (0 3)) (emacs (24))) "Window-management utilities" single]) (es-mode . [(4 3 0) ((dash (2 11 0)) (cl-lib (0 5)) (spark (1 0))) "A major mode for editing Elasticsearch queries" tar]) (es-lib . [(0 4) ((cl-lib (0 3))) "A collection of emacs utilities" tar]) (ert-runner . [(0 7 0) ((s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Opinionated Ert testing workflow" tar]) (ert-junit . [(0 3) ((ert (0))) "JUnit XML reports from ert results" single]) (ert-async . [(0 1 2) nil "Async support for ERT" single]) (erlang . [(21 0 3) ((emacs (24 1))) "Erlang major mode" tar]) (ergoemacs-mode . [(5 16 10 12) ((emacs (24 1)) (undo-tree (0 6 5)) (cl-lib (0 5))) "Emacs mode based on common modern interface and ergonomics." tar]) (erefactor . [(0 7 0) ((cl-lib (0 3))) "Emacs-Lisp refactoring utilities" single]) (ercn . [(1 1 1) nil "Flexible ERC notifications" single]) (erc-youtube . [(0 1) nil "Show info about a YouTube URL in an ERC buffer." single]) (erc-twitch . [(1 1) ((json (1 3)) (erc (5 0))) "Support for Twitch emotes for ERC." single]) (erc-scrolltoplace . [(0 1 0) ((emacs (24 0)) (switch-buffer-functions (0 0 1))) "An Erc module to scrolltobottom better with keep-place" single]) (erc-hl-nicks . [(1 3 3) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single]) (erc-hipchatify . [(0 1) ((emacs (24 2)) (s (1 10 0)) (company (0 8 11)) (alert (1 2)) (request (0 2 0)) (flx-ido (0 6 1))) "Provide emoticons and html rendering for HipChat" single ((:url . "https://bitbucket.org/seanfarley/erc-hipchatify") (:keywords "erc" "bitlbee" "hipchat" "multimedia"))]) (erc-crypt . [(1 6) ((cl-lib (0 5))) "Symmetric Encryption for ERC" single]) (epm . [(0 1 -2 2) ((emacs (24 3)) (epl (0 8))) "Emacs Package Manager" tar]) (epl . [(0 9) ((cl-lib (0 3))) "Emacs Package Library" single]) (epkg . [(3 1 0) ((closql (0 4 0)) (dash (2 13 0)) (emacs (25 1))) "browse the Emacsmirror package database" tar]) (epc . [(0 1 1) ((concurrent (0 3 1)) (ctable (0 1 2))) "A RPC stack for the Emacs Lisp" tar]) (eopengrok . [(0 5 0) ((s (1 9 0)) (dash (2 10 0)) (magit (2 1 0)) (cl-lib (0 5))) "opengrok interface for emacs" single]) (ensime . [(2 0 2) ((scala-mode (0 23)) (sbt-mode (0 2)) (yasnippet (0 10 0)) (company (0 9 0)) (dash (2 12 1)) (s (1 11 0)) (popup (0 5 3))) "ENhanced Scala Interaction Mode for Emacs" tar]) (enotify . [(0 1 3) nil "No description available." tar]) (enlive . [(0 0 1) nil "query html document with css selectors" single]) (enh-ruby-mode . [(20180330) ((emacs (24))) "Major mode for editing Ruby files" tar]) (engine-mode . [(2 0 0) nil "Define and query search engines from within Emacs." single]) (emr . [(0 3 7) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1)) (clang-format (0)) (iedit (0 97))) "Emacs refactoring system." tar]) (emojify . [(1 0) ((seq (1 11)) (ht (2 0)) (emacs (24 3))) "Display emojis in Emacs" tar]) (emoji-fontset . [(0 1 1) nil "Set font face for Emoji." single]) (emoji-cheat-sheet-plus . [(1 2 1) ((emacs (24)) (helm (1 6 4))) "emoji-cheat-sheet for emacs" tar]) (emms-state . [(0 2) ((emms (0))) "Display track description and playing time in the mode line" single]) (emms-player-simple-mpv . [(0 4 0) ((emacs (24)) (cl-lib (0 5)) (emms (4 0))) "An extension of emms-player-simple.el for mpv JSON IPC" tar]) (emms-player-mpv . [(0 2 0) ((emms (0))) "mpv support for EMMS" single]) (emms-mode-line-cycle . [(0 2 5) ((emacs (24)) (emms (4 0))) "Display the emms mode line as a ticker" single]) (emms . [(5 0) ((cl-lib (0 5))) "The Emacs Multimedia System" tar]) (emmet-mode . [(1 0 8) nil "Unofficial Emmet's support for emacs" single]) (embrace . [(0 1 4) ((cl-lib (0 5)) (expand-region (0 10 0))) "Add/Change/Delete pairs based on `expand-region'" single]) (emaps . [(0 1 0) nil "utilities for working with keymaps." single]) (emamux . [(0 14) ((emacs (24 3))) "Interact with tmux" single]) (emacsshot . [(0 4) nil "Snapshot a frame or window from within Emacs" single]) (emacsql-sqlite . [(2 0 3) ((emacs (24 3)) (cl-generic (0 3)) (cl-lib (0 3)) (emacsql (2 0 0))) "EmacSQL back-end for SQLite" tar]) (emacsql-psql . [(2 0 3) ((emacs (24 3)) (cl-generic (0 3)) (cl-lib (0 3)) (emacsql (2 0 0)) (pg (0 12))) "EmacSQL back-end for PostgreSQL via psql and pg" tar]) (emacsql-mysql . [(2 0 3) ((emacs (24 3)) (cl-generic (0 3)) (cl-lib (0 3)) (emacsql (2 0 0))) "EmacSQL back-end for MySQL" single]) (emacsql . [(2 0 3) ((emacs (24 3)) (cl-generic (0 3)) (cl-lib (0 3)) (finalize (1 0 0))) "high-level SQL database front-end" tar]) (emacsc . [(1 2 20131027) nil "helper for emacsc(1)" tar]) (emacsagist . [(1 0 0) ((cl-lib (0 5))) "Search Packagist.org packages without leaving Emacs" single]) (emacs-setup . [(1 0) nil "Package for maintaining your emacs configuration. Clean up your .emacs!" tar]) (elx . [(1 2 4) ((emacs (26))) "extract information from Emacs Lisp libraries" single]) (elwm . [(0 0 2) ((dash (1 1 0))) "Minimalistic window manager for emacs" single]) (elscreen-mew . [(1 0 2) ((elscreen (20120413 807))) "ElScreen Add-On for Mew" single]) (elscreen-fr . [(0 0 3) ((elscreen (0)) (seq (1 11))) "Use frame title as screen tab" single]) (elscreen . [(2018 -3 3 -3 21) ((emacs (24))) "Emacs window session manager" tar ((:commit . "02164afab2c5fbff6e4aa7c59e0daedc6c504772") (:url . "https://github.com/knu/elscreen") (:keywords "window" "convenience"))]) (elpy . [(1 22 0) ((company (0 9 2)) (emacs (24 4)) (find-file-in-project (3 3)) (highlight-indentation (0 5 0)) (pyvenv (1 3)) (yasnippet (0 8 0)) (s (1 11 0))) "Emacs Python Development Environment" tar]) (elpa-mirror . [(2 1 1) ((emacs (24 4))) "Create local package repository so package upgrade never breaks" single]) (elpa-clone . [(0 0 6) ((emacs (24 4)) (cl-lib (0))) "Clone ELPA archive" single]) (elpa-audit . [(0 4) nil "Handy functions for inspecting and comparing package archives" single]) (elmine . [(0 3) nil "No description available." single]) (elmacro . [(1 1 0) ((s (1 11 0)) (dash (2 13 0))) "Convert keyboard macros to emacs lisp" single]) (elm-mode . [(0 20 3) ((f (0 17)) (let-alist (1 0 4)) (s (1 7 0)) (emacs (24))) "Major mode for Elm" tar]) (elixir-yasnippets . [(0 0 1) ((yasnippet (0 8 0))) "Yasnippets for Elixir" tar]) (elixir-mode . [(2 3 1) ((emacs (24)) (pkg-info (0 4))) "Major mode for editing Elixir files" tar]) (elisp-slime-nav . [(0 9) ((cl-lib (0 2))) "Make M-. and M-, work in elisp like they do in slime" single]) (elisp-refs . [(1 3) ((dash (2 12 0)) (loop (1 2)) (s (1 11 0))) "find callers of elisp functions or macros" single]) (elisp-lint . [(0 2 0) ((emacs (23))) "basic linting for Emacs Lisp" single]) (elisp-format . [(0 5 7) nil "Format elisp code" single ((:url . "http://www.emacswiki.org/emacs/download/elisp-format.el"))]) (elisp-def . [(1 0) ((dash (2 12 0)) (f (0 19 0)) (s (1 11 0)) (emacs (24 3))) "macro-aware go-to-definition for elisp" single]) (elfeed-web . [(3 0 0) ((simple-httpd (1 4 3)) (elfeed (1 4 0)) (emacs (24 1))) "web interface to Elfeed" tar]) (elfeed-protocol . [(0 5 3) ((emacs (24 4)) (elfeed (2 1 1)) (cl-lib (0 5))) "Provide owncloud/ttrss protocols for elfeed" tar]) (elfeed . [(3 0 0) ((emacs (24 3))) "an Emacs Atom/RSS feed reader" tar]) (elf-mode . [(0 1 0) ((emacs (24 3))) "Show symbols in binaries" single]) (electric-operator . [(1 0 0) ((dash (2 10 0)) (names (20150618 0)) (emacs (24 4))) "Automatically add spaces around operators" single]) (eldoc-eval . [(1 1) nil "Enable eldoc support when minibuffer is in use." single]) (elcouch . [(0 3 0) ((emacs (25 1)) (json-mode (1 0 0)) (libelcouch (0 8 0))) "View and manipulate CouchDB databases" single]) (elcord . [(1 0 0) ((emacs (25))) "Allows you to integrate Rich Presence from Discord" tar ((:commit . "91c665fd832ef3b79c3eb810b7a6b08979a352cd") (:url . "https://github.com/Zulu-Inuoe/elcord") (:keywords "games"))]) (elbank . [(1 2) ((emacs (25)) (seq (2 16))) "Personal finances reporting application" tar]) (el2org . [(0 6 0) ((emacs (25 1))) "Convert elisp file to org file" single]) (el-x . [(0 3 1) nil "main entry point for el-x package" tar]) (el-spice . [(0 3 0) nil "Extra spice for emacs lisp programming" tar]) (el-patch . [(2 1) ((emacs (25))) "Future-proof your Elisp." single]) (el-mock . [(1 25 1) nil "Tiny Mock and Stub framework in Emacs Lisp" single]) (el-init-viewer . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (ctable (0 1 2)) (dash (2 10 0)) (anaphora (1 0 0)) (el-init (0 1 4))) "Record viewer for el-init" single]) (el-init . [(0 2 0) ((emacs (24)) (cl-lib (0 5)) (anaphora (1 0 0))) "A loader inspired by init-loader" single]) (el-get . [(5 1) nil "Manage the external elisp bits and pieces you depend upon" tar]) (el-autoyas . [(0 5) nil "Automatically create Emacs-Lisp Yasnippets" tar]) (eink-theme . [(1 0 0) nil "E Ink color theme" single]) (ein . [(0 14 1) ((websocket (1 7)) (auto-complete (1 4 0)) (request (0 3)) (deferred (0 5)) (request-deferred (0 2 0)) (cl-generic (0 3)) (dash (2 13 0)) (s (1 11 0)) (skewer-mode (1 6 2))) "Emacs IPython Notebook" tar]) (eide . [(2 1 3) nil "IDE interface" tar]) (eglot . [(1 1) ((emacs (26 1)) (jsonrpc (1 0 0))) "Client for Language Server Protocol (LSP) servers" single]) (egison-mode . [(3 7 10) nil "Egison editing mode" single]) (egg . [(1 0 9) nil "Emacs Got Git - Emacs interface to Git" tar]) (eg . [(1 1) ((cl-lib (0 5)) (emacs (24 3))) "Norton Guide reader" single]) (edts . [(0 1 0) nil "No description available." tar]) (edn . [(1 1 2) ((cl-lib (0 3)) (emacs (24 1)) (dash (2 10 0)) (peg (0 6)) (s (1 8 0))) "Support for reading and writing the edn data format from elisp" single]) (editorconfig-custom-majormode . [(0 0 3) ((editorconfig (0 6 0))) "Decide major-mode and mmm-mode from EditorConfig" single]) (editorconfig . [(0 7 12) ((cl-lib (0 5))) "EditorConfig Emacs Plugin" tar]) (edit-server . [(1 15) nil "server that responds to edit requests from Chrome" single]) (edit-list . [(0 3) nil "edit a single list" single]) (edit-indirect . [(0 1 5) ((emacs (24 3))) "Edit regions in separate buffers" single]) (ede-php-autoload-drupal . [(0 1 1) ((ede-php-autoload (1 0 0)) (f (0 19 0)) (s (1 7 0))) "Drupal support for ede-php-autoload" single]) (ede-php-autoload-composer-installers . [(0 1 0) ((ede-php-autoload (20170212 450)) (f (0 19 0)) (s (1 7 0))) "Composer installers support for ede-php-autoload" single]) (ede-php-autoload . [(1 1 0) nil "Simple EDE PHP Project" tar]) (edbi-minor-mode . [(0 1) ((edbi (0 1 3))) "Use edbi with regular SQL files." single]) (edbi . [(0 1 2) ((concurrent (0 3 1)) (ctable (0 1 1)) (epc (0 1 1))) "Emacs Database Interface" tar]) (ecukes . [(0 6 17) ((commander (0 6 1)) (espuds (0 2 2)) (ansi (0 3 0)) (dash (2 2 0)) (s (1 8 0)) (f (0 11 0))) "Cucumber for Emacs." tar]) (eclim . [(0 4) ((dash (2 11 0)) (json (1 2)) (popup (0 5 2)) (s (1 9 0)) (cl-lib (0 5)) (yasnippet (0 10 0))) "An interface to the Eclipse IDE." tar]) (ecb . [(2 24) nil "a code browser for Emacs" tar ((:keywords "browser" "code" "programming" "tools"))]) (ebib . [(2 11 11) ((dash (2 5 0)) (seq (2 15)) (parsebib (2 3)) (emacs (24 4))) "a BibTeX database manager" tar]) (ebf . [(1 0 0) ((dash (2 11 0)) (dash-functional (1 2 0)) (cl-lib (0 5))) "brainfuck language transpiler to Emacs Lisp" tar]) (ebal . [(0 3 1) ((emacs (24 4)) (f (0 18 0))) "Emacs interface to Cabal and Stack" single]) (easy-repeat . [(0 2) ((emacs (24 4))) "Repeat easily" single]) (easy-kill-extras . [(0 9 4 1) ((easy-kill (0 9 4))) "Extra functions for easy-kill." tar]) (easy-kill . [(0 9 3) ((emacs (24)) (cl-lib (0 5))) "kill & mark things easily" single]) (easy-jekyll . [(1 6 15) ((emacs (24 4))) "Major mode managing jekyll blogs" single]) (easy-hugo . [(3 3 27) ((emacs (24 4)) (popup (0 5 3))) "Write blogs made with hugo by markdown or org-mode" single]) (eacl . [(1 1 3) ((emacs (24 3)) (ivy (0 9 1))) "Auto-complete line(s) by grepping project" single]) (e2wm-term . [(0 0 5) ((e2wm (1 2)) (log4e (0 2 0)) (yaxception (0 3 2))) "Perspective of e2wm.el for work in terminal" single]) (e2wm-sww . [(0 0 2) ((e2wm (1 2))) "Plugin of e2wm.el to switch plugin quickly" single]) (e2wm-pkgex4pl . [(0 0 1) ((e2wm (1 2)) (plsense-direx (0 2 0))) "Plugin of e2wm.el for package explorer of Perl" single]) (e2wm-direx . [(0 0 5) ((e2wm (1 2)) (direx (0 1 -3))) "Plugin of e2wm.el for direx.el" single]) (e2wm-R . [(0 4) ((e2wm (1 2))) "some e2wm plugin and perspective for GNU R" single]) (e2wm . [(1 4) ((window-layout (1 4))) "simple window manager for emacs" tar]) (dynamic-ruler . [(0 1 6) nil "Displays a dynamic ruler at point." single]) (dynamic-fonts . [(0 6 4) ((font-utils (0 7 0)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Set faces based on available fonts" single]) (dyalog-mode . [(0 7) ((cl-lib (0 2))) "Major mode for editing Dyalog APL source code" tar ((:url . "https://bitbucket.org/harsman/dyalog-mode/") (:keywords "languages"))]) (dumb-jump . [(0 5 2) ((emacs (24 3)) (f (0 20 0)) (s (1 11 0)) (dash (2 9 0)) (popup (0 5 3))) "jump to definition for multiple languages without configuration." single]) (ducpel . [(0 1) ((cl-lib (0 5))) "Logic game with sokoban elements" tar]) (dtrt-indent . [(0 7) nil "Adapt to foreign indentation offsets" tar]) (drupal-spell . [(0 2 2) nil "Aspell extra dictionary for Drupal" tar]) (drupal-mode . [(0 7 3) ((php-mode (1 5 0))) "Advanced minor mode for Drupal development" tar]) (drag-stuff . [(0 3 0) nil "Drag stuff (lines, words, region, etc...) around" tar]) (draft-mode . [(0 1 1) nil "Rough drafting for Emacs." single]) (dracula-theme . [(1 4 0) ((emacs (24))) "Dracula Theme" single]) (dr-racket-like-unicode . [(1 1 0) ((emacs (24 1))) "DrRacket-style unicode input" single]) (downplay-mode . [(0 1) nil "focus attention on a region of the buffer" single]) (dotenv-mode . [(0 2 4) ((emacs (24 3))) "Major mode for .env files" single]) (doom-themes . [(2 1 1) ((emacs (24 4)) (all-the-icons (1 0 0)) (cl-lib (0 5))) "an opinionated pack of modern color-themes" tar]) (doom-modeline . [(0 2 0) ((emacs (25 1)) (all-the-icons (1 0 0)) (projectile (0 10 0)) (shrink-path (0 2 0)) (eldoc-eval (0 1)) (dash (2 11 0))) "A minimal modeline from DOOM." single]) (doom . [(1 3) ((cl-lib (0 5))) "DOM implementation and manipulation library" single]) (dokuwiki-mode . [(0 1 1) nil "Major mode for DokuWiki document" single]) (dockerfile-mode . [(1 2) nil "Major mode for editing Docker's Dockerfiles" single]) (docker-tramp . [(0 1) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for docker containers" tar]) (docker-compose-mode . [(1 1 0) ((emacs (24 3)) (dash (2 12 0)) (yaml-mode (0 0 12))) "Major mode for editing docker-compose files" single]) (docker . [(0 7 0) ((emacs (24 5)) (dash (2 14 1)) (docker-tramp (0 1)) (magit-popup (2 12 3)) (s (1 12 0)) (tablist (0 70)) (json-mode (1 7 0))) "Emacs interface to Docker" tar]) (dix-evil . [(0 3 5) ((dix (0 3 0)) (evil (1 0 7))) "optional evil-integration with dix.el" single]) (dix . [(0 3 5) ((cl-lib (0 5))) "minor mode for editing Apertium XML dictionary files" tar]) (ditz-mode . [(0 3) nil "Emacs interface to Ditz issue tracking system" single ((:keywords "tools"))]) (dispass . [(1 1 2) nil "Emacs wrapper for DisPass" single]) (discover-my-major . [(1 0) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" single]) (discover . [(0 3) ((makey (0 3))) "discover more of Emacs" single]) (disable-mouse . [(0 3) nil "Disable mouse commands globally" single]) (direx-grep . [(0 1 0) ((direx (0 1 -3))) "Grep node of direx.el using incremental search like anything.el/helm.el" single]) (direx . [(1 0 0) nil "Simple Directory Explorer" tar]) (direnv . [(1 4 0) ((emacs (24 4)) (dash (2 12 0)) (with-editor (2 5 10))) "direnv support for emacs" single]) (diredful . [(1 10) nil "colorful file names in dired buffers" single]) (diredfl . [(0 4) ((emacs (24))) "Extra font lock rules for a more colourful dired" single]) (dired-toggle-sudo . [(1 0) nil "Browse directory with sudo privileges." single]) (dired-single . [(0 1 3) nil "Reuse the current dired buffer to visit a directory" single]) (dired-rsync . [(0 4) ((s (1 12 0)) (dash (2 0 0)) (emacs (24))) "Allow rsync from dired buffers" single]) (dired-quick-sort . [(0 1) ((hydra (0 13 0))) "Persistent quick sorting of dired buffers in various ways." single]) (dired-k . [(0 19) ((emacs (24 3))) "highlight dired buffer by file size, modified time, git status" tar]) (dired-imenu . [(0 5 0) nil "imenu binding for dired mode" single]) (dired-icon . [(0 5) ((emacs (24 3))) "A minor mode to display a list of associated icons in dired buffers." tar]) (dired-hide-dotfiles . [(0 1) ((emacs (25 1))) "Hde dotfiles in dired" single]) (dired-fdclone . [(1 5 4) nil "dired functions and settings to mimic FDclone" single]) (dired-explorer . [(0 6) ((cl-lib (0 5))) "minor-mode provides Explorer like select file at dired." single]) (dired-efap . [(0 8) nil "Edit Filename At Point in a dired buffer" single]) (dired-atool . [(1 1 0) ((emacs (24))) "Pack/unpack files with atool on dired." single]) (dionysos . [(0 6 0) ((libmpdee (2 1 0)) (alert (1 2)) (s (1 11 0)) (dash (2 12 1)) (pkg-info (0 5 0)) (cl-lib (0 5))) "Dionysos, a music player for Emacs" tar]) (dimmer . [(0 3 0) ((emacs (25))) "visually highlight the selected buffer" single]) (diminish . [(0 45) nil "Diminished modes are minor modes with no modeline display" single]) (dim-autoload . [(2 0 1) nil "dim or hide autoload cookie lines" single]) (dim . [(0 1) ((emacs (24 4))) "Change mode-line names of major/minor modes" single]) (digistar-mode . [(0 4) nil "major mode for Digistar scripts" single]) (diffview . [(1 0) nil "View diffs in side-by-side format" single]) (difflib . [(0 3 8) ((emacs (24 4)) (cl-generic (0 3)) (ht (2 2)) (s (1 12 0))) "Helpers for computing deltas between sequences." single]) (diff-hl . [(1 8 4) ((cl-lib (0 2))) "Highlight uncommitted changes using VC" tar]) (dictionary . [(1 10) nil "No description available." single]) (diary-manager . [(2 0 1) ((emacs (25))) "Simple personal diary." single]) (desktop-registry . [(1 2 0) nil "Keep a central registry of desktop files" single]) (desktop-environment . [(0 2 0) ((emacs (25 1))) "Helps you control your GNU/Linux computer" single]) (desktop+ . [(0 2) ((emacs (24 4)) (dash (2 11 0)) (f (0 17 2))) "Handle special buffers when saving & restoring sessions" single]) (describe-number . [(0 3 1) ((yabin (1 1))) "Describe arbitrarily large number at point." single]) (demangle-mode . [(1 2 2) ((cl-lib (0 1)) (emacs (24))) "Automatically demangle C++ symbols" single]) (deft . [(0 8) nil "quickly browse, filter, and edit plain text notes" single]) (define-word . [(0 1 0) ((emacs (24 1))) "display the definition of word at point." single]) (deferred . [(0 5 1) ((emacs (24 4))) "Simple asynchronous functions for emacs lisp" single]) (default-text-scale . [(0 1) nil "Easily adjust the font size in all frames" single]) (dedicated . [(1 0 0) nil "A very simple minor mode for dedicated buffers" single]) (decide . [(0 7) nil "rolling dice and other random things" single]) (debpaste . [(0 1 5) ((xml-rpc (1 6 7))) "Interface for getting/posting/deleting pastes from paste.debian.net" single]) (deadgrep . [(0 4) ((emacs (25 1)) (dash (2 12 0)) (s (1 11 0)) (spinner (1 7 3)) (projectile (0 14 0))) "fast, friendly searching with ripgrep" single]) (datetime . [(0 4 1) ((emacs (24 1)) (extmap (1 0))) "Parsing, formatting and matching timestamps" tar]) (date-field . [(0 0 1) ((dash (2 9 0)) (log4e (0 2 0)) (yaxception (0 3 2))) "Date widget" single]) (date-at-point . [(0 1) nil "Add `date' to `thing-at-point' function" single]) (dashboard . [(1 2 4) ((emacs (24 4)) (page-break-lines (0 11))) "A startup screen extracted from Spacemacs" tar]) (dash-functional . [(2 14 1) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single]) (dash . [(2 14 1) nil "A modern list library for Emacs" single]) (dart-mode . [(1 0 3) ((emacs (24 5)) (cl-lib (0 5)) (dash (2 10 0)) (flycheck (0 23)) (s (1 10))) "Major mode for editing Dart files" single]) (darktooth-theme . [(0 3 7) ((autothemer (0 2))) "From the darkness... it watches" single]) (darcula-theme . [(2 0) nil "Inspired by IntelliJ's Darcula theme" single]) (darcsum . [(1 3) nil "a pcl-cvs like interface for managing darcs patches" tar ((:keywords "completion" "convenience" "tools" "vc"))]) (dante . [(1 4) ((dash (2 13 0)) (emacs (25 1)) (f (0 19 0)) (flycheck (0 30)) (haskell-mode (13 14)) (s (1 11 0))) "Development mode for Haskell" single]) (daemons . [(1 2 0) ((emacs (25))) "UI for managing init system daemons (services)" tar]) (dad-joke . [(1 4) ((emacs (24))) "Get/display dad jokes" single]) (d-mode . [(2 0 9) nil "D Programming Language major mode for (X)Emacs" single]) (cython-mode . [(0 28 4) nil "Major mode for editing Cython files" single]) (cyphejor . [(0 1 2) ((emacs (24 4))) "Shorten major mode names using user-defined rules" single]) (cyberpunk-theme . [(1 21) nil "Cyberpunk Color Theme" single]) (cwl-mode . [(0 2 5) ((yaml-mode (0 0 13)) (emacs (24 4))) "A major mode for editing CWL" single]) (cuda-mode . [(1 0 0) nil "NVIDIA CUDA Major Mode" single]) (cubicle-mode . [(1 1 2) nil "Major mode for the Cubicle model checker" single]) (cubicaltt . [(1 0) ((emacs (24 1)) (cl-lib (0 5))) "Mode for cubical type theory" single]) (ctxmenu . [(0 3 0) ((popup (20140205 103)) (log4e (0 2 0)) (yaxception (0 1))) "Provide a context menu like right-click." tar]) (ctags-update . [(1 0) nil "(auto) update TAGS in parent directory using exuberant-ctags" single]) (ctable . [(0 1 2) nil "Table component for Emacs Lisp" single]) (csv . [(2 1) nil "Functions for reading and parsing CSV files." single]) (csound-mode . [(0 2 0) ((emacs (25)) (shut-up (0 3 2)) (multi (2 0 1))) "A major mode for interacting and coding Csound" tar]) (csharp-mode . [(0 9 2) nil "C# mode derived mode" single]) (crystal-mode . [(0 1 0) ((emacs (24 4))) "Major mode for editing Crystal files" single]) (cryptol-mode . [(0 1 0) nil "Cryptol major mode for Emacs" single]) (crux . [(0 3 0) ((seq (1 11))) "A Collection of Ridiculously Useful eXtensions" single]) (crm-custom . [(0 5) ((cl-lib (0 5))) "Alternate `completing-read-multiple' that uses `completing-read'" single]) (cricbuzz . [(0 3 5) ((enlive (0 0 1)) (f (0 19 0)) (dash (2 13 0)) (s (1 11 0))) "Cricket scores from cricbuzz in emacs" single]) (creds . [(0 0 6 1) ((s (1 9 0)) (dash (2 5 0))) "A parser credentials file library (not limited to credentials entries)" tar]) (creamsody-theme . [(0 3 7) ((autothemer (0 2))) "Straight from the soda fountain." single]) (cpputils-cmake . [(5 5) nil "Easy real time C++ syntax check and intellisense if you use CMake" tar]) (coverlay . [(3 0 1) ((emacs (24 1)) (cl-lib (0 5))) "Test coverage overlays" single]) (coverage . [(0 3) ((ov (1 0)) (cl-lib (0 5))) "Code coverage line highlighting" single]) (counsel-tramp . [(0 4 1) ((emacs (24 3)) (counsel (0 10))) "Tramp ivy interface for ssh, docker, vagrant" single]) (counsel-projectile . [(0 2 0) ((counsel (0 10 0)) (projectile (0 14 0))) "Ivy integration for Projectile" single]) (counsel-gtags . [(0 1) ((emacs (24 3)) (counsel (0 8 0))) "ivy for GNU global" single]) (counsel-etags . [(1 6 2) ((emacs (24 4)) (counsel (0 9 1))) "Fast and complete Ctags/Etags solution using ivy" single]) (counsel-dash . [(0 1 3) ((emacs (24 4)) (dash (2 12 1)) (dash-functional (1 2 0)) (helm-dash (1 3 0)) (counsel (0 8 0))) "Browse dash docsets using Ivy" single]) (counsel-bbdb . [(0 0 3) ((ivy (0 8 0)) (emacs (24 3))) "Quick search&input email from BBDB based on ivy" single]) (counsel . [(0 10 0) ((emacs (24 3)) (swiper (0 9 0))) "Various completion functions using Ivy" single]) (corral . [(0 3 20) nil "Quickly surround text with delimiters" single]) (copyit-pandoc . [(0 0 2) ((emacs (24)) (copyit (0 0 1)) (pandoc (0 0 1))) "Copy it, yank anything!" single]) (copyit . [(0 0 2) ((emacs (24)) (cl-lib (0 5))) "Copy it, yank anything!" single]) (copy-file-on-save . [(0 0 5) ((emacs (24 3)) (cl-lib (0 5)) (f (0 17)) (s (1 7 0))) "Copy file on save, automatic deployment it." single]) (copy-as-format . [(0 0 7) ((cl-lib (0 5))) "Copy buffer locations as GitHub/Slack/JIRA/HipChat/... formatted code" single]) (contextual-menubar . [(1 0 0) nil "display the menubar only on a graphical display" single]) (contextual . [(1 0 1) ((emacs (24)) (dash (2 12 1)) (cl-lib (0 5))) "Contextual profile management system" single]) (connection . [(1 10) nil "No description available." single]) (conllu-mode . [(0 1 0) ((emacs (25)) (parsec (0 1)) (cl-lib (0 5))) "editing mode for CoNLL-U files" tar]) (conkeror-minor-mode . [(1 6 2) nil "Mode for editing conkeror javascript files." single]) (conda . [(0 0 9) ((emacs (24 4)) (pythonic (0 1 0)) (dash (2 13 0)) (s (1 11 0)) (f (0 18 2))) "Work with your conda environments" single]) (concurrent . [(0 5 1) ((emacs (24 3)) (deferred (0 5 0))) "Concurrent utility functions for emacs lisp" single]) (composer . [(0 0 8) ((emacs (24)) (s (1 9 0)) (f (0 17)) (request (0 2 0)) (seq (1 9))) "Interface to PHP Composer" single]) (composable . [(0 0 1) ((emacs (24 4))) "composable editing" tar]) (company-ycmd . [(1 2) ((ycmd (1 2)) (company (0 9 3)) (deferred (0 5 1)) (s (1 11 0)) (dash (2 13 0)) (let-alist (1 0 5)) (f (0 19 0))) "company-mode backend for ycmd" single]) (company-web . [(2 1) ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" tar]) (company-terraform . [(1 2) ((emacs (24 4)) (company (0 8 12)) (terraform-mode (0 6))) "A company backend for terraform" tar]) (company-tern . [(0 3 0) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single]) (company-statistics . [(0 2 2) ((emacs (24 3)) (company (0 8 5))) "Sort candidates using completion history" single]) (company-sourcekit . [(0 2 0) ((emacs (24 3)) (company (0 8 12)) (dash (2 12 1)) (dash-functional (1 2 0)) (sourcekit (0 2 0))) "company-mode completion backend for SourceKit" single]) (company-shell . [(1 2 1) ((emacs (24 4)) (company (0 8 12)) (dash (2 12 0)) (cl-lib (0 5))) "Company mode backend for shell functions" single]) (company-rtags . [(2 18) ((emacs (24 3)) (company (0 8 1)) (rtags (2 10))) "RTags back-end for company" single]) (company-restclient . [(0 1 0) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) "company-mode completion back-end for restclient-mode" single]) (company-quickhelp . [(2 3 0) ((emacs (24 4)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" single]) (company-prescient . [(2 0) ((emacs (25 1)) (prescient (2 0)) (company (0 9 6))) "prescient.el + Company" single]) (company-php . [(2 0 5) ((cl-lib (0 5)) (ac-php-core (1)) (company (0 9))) "company completion source for php" single]) (company-nixos-options . [(0 0 1) ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) "Company Backend for nixos-options" single]) (company-ngram . [(0 8 0) ((cl-lib (0 5)) (company (0 8 0))) "N-gram based completion" tar]) (company-math . [(1 3) ((company (0 8 0)) (math-symbol-lists (1 2))) "Completion backends for unicode math symbols and latex tags" single]) (company-lsp . [(2 0 1) ((emacs (25 1)) (lsp-mode (3 4)) (company (0 9 0)) (s (1 2 0)) (dash (2 11 0))) "Company completion backend for lsp-mode." single]) (company-jedi . [(0 4) ((emacs (24)) (cl-lib (0 5)) (company (0 8 11)) (jedi-core (0 2 7))) "company-mode completion back-end for Python JEDI" single]) (company-irony-c-headers . [(1 0 0) ((cl-lib (0 5)) (company (0 9 0)) (irony (0 2 0))) "Company mode backend for C/C++ header files with Irony" single]) (company-irony . [(1 1 0) ((emacs (24 1)) (company (0 8 0)) (irony (1 1 0)) (cl-lib (0 5))) "company-mode completion back-end for irony-mode" single]) (company-go . [(20170907) ((company (0 8 0)) (go-mode (1 0 0))) "company-mode backend for Go (using gocode)" single]) (company-ghc . [(1 1 0) ((cl-lib (0 5)) (company (0 8 0)) (ghc (5 1 0)) (emacs (24))) "company-mode ghc-mod backend" single]) (company-erlang . [(0 1 1) ((emacs (24 4)) (ivy-erlang-complete (0 1)) (company (0 9 2))) "company backend based on ivy-erlang-complete" single]) (company-emoji . [(2 5 0) ((cl-lib (0 5)) (company (0 8 0))) "company-mode backend for emoji" tar]) (company-emacs-eclim . [(0 4) ((eclim (0 3)) (company (0 7)) (cl-lib (0 5))) "company-mode backend for eclim" single]) (company-edbi . [(0 1) ((company (0 8 5)) (edbi (0 1 3)) (cl-lib (0 5 0)) (s (1 9 0))) "Edbi backend for company-mode" single]) (company-dict . [(1 2 7) ((emacs (24 4)) (company (0 8 12)) (parent-mode (2 3))) "A backend that emulates ac-source-dictionary" single]) (company-coq . [(1 0) ((company-math (1 0 1)) (company (0 8 12)) (yasnippet (0 9 0 1)) (dash (2 10 0)) (cl-lib (0 5))) "A collection of extensions for Proof General's Coq mode" tar]) (company-cabal . [(0 2 1) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24))) "company-mode cabal backend" tar]) (company-ansible . [(0 7 1) ((emacs (24 4)) (company (0 8 12))) "A company back-end for ansible" tar]) (company-anaconda . [(0 2 0) ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) "Anaconda backend for company-mode" single]) (company . [(0 9 6) ((emacs (24 3))) "Modular text completion framework" tar]) (common-lisp-snippets . [(0 1 2) ((yasnippet (0 8 0))) "Yasnippets for Common Lisp" tar]) (commenter . [(0 5 2) ((emacs (24 4)) (let-alist (1 0 4))) "multiline-comment support package" single]) (comment-tags . [(0 1) ((emacs (24 5)) (pkg-info (0 4))) "Highlight and navigate comment tags like TODO, FIXME, etc" single]) (comment-dwim-2 . [(1 2 2) nil "An all-in-one comment command to rule them all" single]) (commander . [(0 7 0) ((s (1 6 0)) (dash (2 0 0)) (cl-lib (0 3)) (f (0 6 1))) "Emacs command line parser" single]) (colormaps . [(0 1 2) ((emacs (25))) "Hex colormaps" single]) (color-theme-sanityinc-tomorrow . [(1 17) nil "A version of Chris Kempson's various Tomorrow themes" tar]) (color-theme-sanityinc-solarized . [(2 29) nil "A version of Ethan Schoonover's Solarized themes" tar]) (color-theme-modern . [(0 0 2) ((emacs (24))) "Reimplement colortheme with Emacs 24 theme framework." tar]) (color-identifiers-mode . [(1 0 0) ((dash (2 5 0)) (emacs (24))) "Color identifiers based on their names" single]) (coffee-mode . [(0 6 3) ((emacs (24 1)) (cl-lib (0 5))) "Major mode for CoffeeScript code" single]) (codic . [(0 3) ((emacs (24)) (cl-lib (0 5))) "Search Codic (codic.jp) naming dictionaries" tar]) (cnfonts . [(0 9 1) ((emacs (24))) "A simple Chinese fonts config tool" tar]) (cmake-project . [(0 7) nil "Integrates CMake build process with Emacs" single]) (cmake-mode . [(3 12 0) nil "major-mode for editing CMake sources" single]) (cmake-ide . [(0 5) ((emacs (24 1)) (cl-lib (0 5)) (seq (1 11)) (levenshtein (0))) "Calls CMake to find out include paths and other compiler flags" single]) (cm-mode . [(1 6) ((cl-lib (0 5))) "Minor mode for CriticMarkup" single]) (clues-theme . [(1 0 1) ((emacs (24 0))) "an Emacs 24 theme which may well be fully awesome..." single]) (closql . [(0 6 0) ((emacs (25 1)) (emacsql-sqlite (2 0 3))) "store EIEIO objects using EmacSQL" single]) (clojure-snippets . [(1 0 1) ((yasnippet (0 8 0))) "Yasnippets for clojure" tar]) (clojure-quick-repls . [(0 1 0) ((cider (0 8 1)) (dash (2 9 0))) "Quickly create Clojure and ClojureScript repls for a project." single]) (clojure-mode-extra-font-locking . [(5 8 1) ((clojure-mode (3 0))) "Extra font-locking for Clojure mode" single]) (clojure-mode . [(5 8 1) ((emacs (24 4))) "Major mode for Clojure code" single]) (clojure-cheatsheet . [(0 4 0) ((helm (1 7 7)) (cider (0 9 0))) "The Clojure Cheatsheet for Emacs" single]) (clocker . [(0 0 11) ((projectile (0 11 0)) (dash (2 10))) "Note taker and clock-in enforcer" single]) (cljr-helm . [(0 11) ((clj-refactor (0 13 0)) (helm-core (1 7 7)) (cl-lib (0 5))) "Wraps clojure refactor commands with helm" single]) (clj-refactor . [(2 3 1) ((emacs (24 4)) (s (1 8 0)) (seq (2 19)) (yasnippet (0 6 1)) (paredit (24)) (multiple-cursors (1 2 2)) (clojure-mode (5 6 1)) (cider (0 11 0)) (edn (1 1 2)) (inflections (2 3)) (hydra (0 13 2))) "A collection of clojure refactoring functions" tar]) (clips-mode . [(0 7) nil "Major mode for editing CLIPS code and REPL" tar]) (cliphist . [(0 5 5) ((emacs (24 3)) (ivy (0 9 0))) "Read data from clipboard managers at Linux and Mac" tar]) (click-mode . [(0 0 4) ((emacs (24))) "Major mode for the Click Modular Router Project" single]) (cl-lib-highlight . [(1 0 0) ((cl-lib (0 3))) "full cl-lib font-lock highlighting" single]) (cl-format . [(1 1) nil "CL format routine." tar]) (citeproc . [(0 1 1) ((emacs (25)) (dash (2 13 0)) (s (1 12 0)) (f (0 18 0)) (queue (0 2)) (string-inflection (1 0))) "A CSL 1.0.1 Citation Processor" tar]) (circe-notifications . [(1 0) ((emacs (24 4)) (circe (2 3)) (alert (1 2))) "Add desktop notifications to Circe." single]) (circe . [(2 10) ((cl-lib (0 5))) "Client for IRC in Emacs" tar]) (circadian . [(0 3 2) ((emacs (24 4))) "Theme-switching based on daytime" single]) (cil-mode . [(0 4) nil "Common Intermediate Language mode" single]) (cider-eval-sexp-fu . [(1 1) ((emacs (24)) (highlight (0)) (eval-sexp-fu (0 4 0))) "Briefly highlights an evaluated sexps." single]) (cider . [(0 17 0) ((emacs (24 4)) (clojure-mode (5 6 0)) (pkg-info (0 4)) (queue (0 1 1)) (spinner (1 7)) (seq (2 16))) "Clojure Interactive Development Environment that Rocks" tar]) (choice-program . [(0 4) ((emacs (25)) (cl-lib (1 0))) "parameter based program" tar]) (chinese-word-at-point . [(0 2 3) ((cl-lib (0 5))) "Add `chinese-word' thing to `thing-at-point'" single]) (chee . [(0 3 0) ((dash (2 12 1)) (s (1 10 0)) (f (0 18 2))) "Interface to chee using dired and image-dired" tar]) (checkbox . [(0 2 1) ((emacs (24)) (cl-lib (0 5))) "Quick manipulation of textual checkboxes" single]) (cheat-sh . [(1 7) ((emacs (24))) "Interact with cheat.sh" single]) (chatwork . [(0 3) nil "ChatWork client for Emacs" single]) (charmap . [(0 0 1) nil "Unicode table for Emacs" single]) (char-menu . [(0 1 1) ((emacs (24 3)) (avy-menu (0 1))) "Create your own menu for fast insertion of arbitrary symbols" single]) (chapel-mode . [(1 0 0) nil "a CC Mode for Chapel derived from derived-mode-ex.el" single]) (cframe . [(0 1) ((emacs (25)) (buffer-manage (0 6)) (dash (2 13 0))) "customize a frame and fast switch size and positions" single]) (cfengine-code-style . [(3 12 0 2 1) nil "C code style for CFEngine project." single]) (ceylon-mode . [(0 2) ((emacs (24))) "Major mode for editing Ceylon source code" single]) (cerbere . [(0 1 0) ((s (1 9 0)) (f (0 16 0)) (go-mode (20140409)) (pkg-info (0 5))) "Unit testing in Emacs for several programming languages" tar]) (celery . [(0 0 3) ((emacs (24)) (dash-functional (2 11 0)) (s (1 9 0)) (deferred (0 3 2))) "a minor mode to draw stats from celery and more?" single]) (cdnjs . [(0 2 1) ((dash (2 13 0)) (deferred (0 4)) (f (0 17 2)) (pkg-info (0 5))) "A front end for http://cdnjs.com" single]) (cdlatex . [(4 7) nil "Fast input methods for LaTeX environments and math" single]) (cbm . [(0 6) ((cl-lib (0 5))) "Switch to similar buffers." single]) (catmacs . [(0 1 1) nil "Simple CAT interface for Yaesu FT991A" single]) (caskxy . [(0 0 5) ((log4e (0 2 0)) (yaxception (0 1))) "Control Cask in Emacs" single]) (cask-package-toolset . [(0 9 2) ((emacs (24)) (cl-lib (0 3)) (s (1 6 1)) (dash (1 8 0)) (f (0 10 0)) (commander (0 2 0)) (ansi (0 1 0)) (shut-up (0 1 0))) "Toolsettize your package" tar]) (cask-mode . [(0 1) ((emacs (24 3))) "major mode for editing Cask files" single]) (cask . [(0 8 4) ((s (1 8 0)) (dash (2 2 0)) (f (0 16 0)) (epl (0 5)) (shut-up (0 1 0)) (cl-lib (0 3)) (package-build (1 2))) "Cask: Project management for Emacs package development" tar]) (caseformat . [(0 1 0) ((emacs (24)) (cl-lib (0 5)) (dash (2 12 1)) (s (1 10 0))) "Format based letter case converter" single]) (cargo . [(0 4 1) ((emacs (24 3)) (rust-mode (0 2 0))) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar]) (caml . [(4 7 0) nil "OCaml code editing commands for Emacs" tar]) (camcorder . [(0 2) ((emacs (24)) (names (20150000)) (cl-lib (0 5))) "Record screencasts in gif or other formats." single]) (call-graph . [(0 1 0) ((emacs (25 1)) (cl-lib (0 6 1)) (hierarchy (0 7 0)) (tree-mode (1 0 0)) (ivy (0 10 0))) "Library to generate call graph for cpp functions" single]) (calfw-org . [(1 6) nil "calendar view for org-agenda" single]) (calfw-ical . [(1 6) nil "calendar view for ical format" single]) (calfw-howm . [(1 6) nil "calendar view for howm" single]) (calfw-cal . [(1 6) nil "calendar view for emacs diary" single]) (calfw . [(1 6) nil "Calendar view framework on Emacs" single]) (calendar-norway . [(0 9 3) nil "Norwegian calendar" single]) (cake-inflector . [(1 1 1) ((s (1 9 0))) "Lazy porting CakePHP infrector.php to el" single]) (cacoo . [(2 1 2) ((concurrent (0 3 1))) "Minor mode for Cacoo : http://cacoo.com" tar]) (button-lock . [(1 0 2) nil "Clickable text defined by regular expression" single]) (buttercup . [(1 12) nil "Behavior-Driven Emacs Lisp Testing" tar]) (butler . [(0 2 4) ((deferred (3 2)) (json (1 2)) (emacs (24))) "Emacs client for Jenkins" tar]) (bury-successful-compilation . [(0 1) nil "Bury the *compilation* buffer after successful compilation" single]) (bundler . [(1 1 0) ((inf-ruby (2 1))) "Interact with Bundler from Emacs" single]) (build-status . [(0 0 2) ((cl-lib (0 5))) "Mode line build status indicator" single]) (bui . [(1 1 0) ((emacs (24 3)) (dash (2 11 0))) "Buffer interface library" tar]) (bug-reference-github . [(1 0 0) nil "Set `bug-reference-url-format' in Github repos" tar]) (bufshow . [(0 1 0) nil "No description available." single ((:commit . "d8424e412d63dcc721c64fbd2ddd2420a03b4e8b"))]) (buffer-watcher . [(0 1) ((f (0 16 2))) "Makes it easy to run shell scripts per filetype/directory when a buffer is saved." single]) (buffer-utils . [(0 1 0) nil "Buffer-manipulation utility functions" single]) (buffer-move . [(0 6 2) nil "" single]) (buffer-manage . [(0 7) ((emacs (25)) (choice-program (0 3)) (dash (2 13 0))) "manage buffers" tar]) (buffer-flip . [(2 1) nil "Cycle through buffers like Alt-Tab in Windows" single]) (bshell . [(0 3) ((emacs (25)) (buffer-manage (0 5))) "manage and track multiple inferior shells" single]) (browse-url-dwim . [(0 6 8) ((string-utils (0 3 2))) "Context-sensitive external browse URL or Internet search" single]) (browse-kill-ring . [(2 0 0) nil "interactively insert items from kill-ring" single]) (browse-at-remote . [(0 10 0) ((f (0 17 2)) (s (1 9 0)) (cl-lib (0 5))) "Open github/gitlab/bitbucket/stash page from Emacs" single]) (boxquote . [(2 1) ((cl-lib (0 5))) "Quote text with a semi-box." single]) (borg . [(2 0 0) nil "assimilate Emacs packages as Git submodules" tar]) (boon . [(1 0) ((emacs (25 1)) (expand-region (0 10 0)) (dash (2 12 0)) (multiple-cursors (1 3 0))) "Ergonomic Command Mode for Emacs." tar]) (bool-flip . [(1 0 1) ((emacs (24 3))) "flip the boolean under the point" single]) (bongo . [(1 0) nil "play music with Emacs" tar]) (bog . [(1 3 1) ((cl-lib (0 5))) "Extensions for research notes in Org mode" single]) (bnfc . [(0 4) ((emacs (24 3))) "Define context-free grammars for the BNFC tool" single]) (bm . [(201807) nil "Visible bookmarks in buffer." tar]) (birds-of-paradise-plus-theme . [(0 1 1) nil "A brown/orange light-on-dark theme for Emacs 24 (deftheme)." single]) (bing-dict . [(0 2 3) nil "Minimalists' English-Chinese Bing dictionary" single]) (bind-map . [(1 1 1) ((emacs (24 3))) "Bind personal keymaps in multiple locations" single]) (bind-key . [(2 3) nil "A simple way to manage personal keybindings" single]) (binclock . [(1 11) ((cl-lib (0 5))) "Display the current time using a binary clock." single]) (bifocal . [(0 0 3) ((emacs (24 4))) "Split-screen scrolling for comint-mode buffers" single]) (bicycle . [(0 1 0) ((emacs (25 1))) "cycle outline and code visibility" single]) (biblio-core . [(0 2) ((emacs (24 3)) (let-alist (1 0 4)) (seq (1 11)) (dash (2 12 1))) "A framework for looking up and displaying bibliographic entries" single]) (biblio . [(0 2) ((emacs (24 3)) (biblio-core (0 2))) "Browse and import bibliographic references from CrossRef, arXiv, DBLP, HAL, Dissemin, and doi.org" tar]) (better-shell . [(1 2) ((emacs (24 4))) "Better shell management" single]) (better-defaults . [(0 1 3) nil "Fixing weird quirks and poor defaults" single]) (benchstat . [(1 0 0) nil "proper benchmarking made simple" single]) (benchmark-init . [(1 0) nil "Benchmarks Emacs require and load calls" tar]) (beginend . [(2 0 0) ((emacs (24 4))) "Redefine M-< and M-> for some modes" single]) (beeminder . [(1 1 0) ((org (7))) "Emacs interface for Beeminder" tar]) (beacon . [(1 3 4) ((seq (2 14))) "Highlight the cursor whenever the window scrolls" single]) (bbdb2erc . [(0 1 3) ((bbdb (3 0))) "make bbdb show if pal is online with ERC, click i to chat" single]) (bbdb-vcard . [(0 3) nil "vCard import/export for BBDB" tar]) (bbdb- . [(0 0 2) ((bbdb (20140123 1541)) (log4e (0 2 0)) (yaxception (0 1))) "provide interface for more easily search/choice than BBDB." single]) (bbcode-mode . [(2 1 0) nil "Major mode for writing BBCode markup" single]) (bazel-mode . [(1 0 0) ((emacs (24 3))) "A major mode for editing Bazel files" single]) (bash-completion . [(2 1 0) nil "BASH completion for the shell buffer" single]) (base16-theme . [(2 2) nil "Collection of themes built on combinations of 16 base colors" tar]) (banner-comment . [(2 6 2) ((emacs (24 4))) "For producing banner comments." single]) (badwolf-theme . [(1 2) ((emacs (24))) "Bad Wolf color theme" single]) (back-button . [(0 6 6) ((nav-flash (1 0 0)) (smartrep (0 0 3)) (ucs-utils (0 7 2)) (persistent-soft (0 8 8)) (pcache (0 2 3))) "Visual navigation through mark rings" single]) (babel . [(1 4) nil "interface to web translation services such as Babelfish" single]) (avy-zap . [(0 1 4) ((avy (0 2 0))) "Zap to char using `avy'" single]) (avy-migemo . [(0 3 2) ((emacs (24 4)) (avy (0 4 0)) (migemo (1 9))) "avy with migemo" tar]) (avy-menu . [(0 1 1) ((emacs (24 3)) (avy (0 3 0))) "Library providing avy-powered popup menu" single]) (avy . [(0 4 0) ((emacs (24 1)) (cl-lib (0 5))) "tree-based completion" single]) (autothemer . [(0 2 2) ((dash (2 10 0)) (emacs (24)) (cl-lib (0 5))) "Conveniently define themes." single]) (autopair . [(0 6 1) ((cl-lib (0 3))) "Automagically pair braces and quotes like TextMate" single]) (autodisass-llvm-bitcode . [(1 1) nil "Automatically disassemble LLVM bitcode" tar]) (autodisass-java-bytecode . [(1 3) nil "Automatically disassemble Java bytecode" tar]) (auto-yasnippet . [(0 3 0) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single]) (auto-shell-command . [(1 0 2) ((deferred (20130312)) (popwin (20130329))) "Run the shell command asynchronously that you specified when you save the file." single]) (auto-package-update . [(1 6 1) ((emacs (24 4)) (dash (2 1 0))) "Automatically update Emacs packages." single]) (auto-minor-mode . [(20180527 1) ((emacs (24 4))) "Enable minor modes by file name and contents" single]) (auto-indent-mode . [(0 126) nil "Auto indent Minor mode" tar]) (auto-dictionary . [(1 1) nil "automatic dictionary switcher for flyspell" single]) (auto-complete-sage . [(0 0 5) ((auto-complete (1 5 0)) (sage-shell-mode (0 0 8))) "An auto-complete source for sage-shell-mode." single]) (auto-complete-pcmp . [(0 0 2) ((auto-complete (1 4 0)) (log4e (0 2 0)) (yaxception (0 1))) "Provide auto-complete sources using pcomplete results" single]) (auto-complete-nxml . [(0 5 0) ((auto-complete (1 4))) "do completion by auto-complete.el on nXML-mode" single]) (auto-complete-exuberant-ctags . [(0 0 7) ((auto-complete (1 4 0))) "Exuberant ctags auto-complete.el source" single]) (auto-complete-clang-async . [(0 5) nil "Auto Completion source for clang for GNU Emacs" single]) (auto-complete . [(1 5 1) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar]) (auto-compile . [(1 4 3) ((emacs (24 3)) (packed (2 0 0))) "automatically compile Emacs Lisp libraries" single]) (auth-source-pass . [(4 0 1) ((emacs (25))) "Integrate auth-source with password-store" single]) (aurora-config-mode . [(0 0 2) nil "Major mode for Apache Aurora configuration files" single]) (aurel . [(0 9) ((emacs (24 3)) (bui (1 1 0)) (dash (2 11 0))) "Search, get info, vote for and download AUR packages" single]) (auctex-latexmk . [(1 0 2) ((auctex (11 87))) "Add LatexMk support to AUCTeX" single]) (atomic-chrome . [(2 0 0) ((emacs (24 3)) (let-alist (1 0 4)) (websocket (1 4))) "Edit Chrome text area with Emacs using Atomic Chrome" single]) (atom-one-dark-theme . [(0 4 0) nil "Atom One Dark color theme" single]) (async . [(1 9 3) nil "Asynchronous processing in Emacs" tar]) (assess . [(0 4) ((emacs (24 1)) (m-buffer (0 15))) "Test support functions" tar]) (asilea . [(0 2 1) ((emacs (24)) (cl-lib (0 5))) "Find best compiler options using simulated annealing" single]) (arview . [(1 2) nil "extract and view archives in the temporary directory" single]) (artbollocks-mode . [(1 1 2) nil "Improve your writing (especially about art)" single]) (apropospriate-theme . [(0 1 0) nil "A colorful, low-contrast, light & dark theme set for Emacs with a fun name." tar]) (aproject . [(0 3) nil "Basic project framework for Emacs" tar]) (apples-mode . [(0 0 2) nil "Major mode for editing and executing AppleScript code" tar]) (apiwrap . [(0 5) ((emacs (25))) "api-wrapping macros" single]) (apib-mode . [(0 7) ((markdown-mode (2 1))) "Major mode for API Blueprint files" single]) (apache-mode . [(2 1) nil "major mode for editing Apache configuration files" single]) (anzu . [(0 62) ((cl-lib (0 5)) (emacs (24))) "Show number of matches in mode-line while searching" single]) (anyins . [(0 1 1) nil "Insert content at multiple places from shell command or kill-ring" single]) (anti-zenburn-theme . [(2 5 1) nil "Low-contrast Zenburn-inverted theme" single]) (ansible-vault . [(0 3 4) ((emacs (24 3))) "Minor mode for editing ansible vault files" single]) (ansible-doc . [(0 4) ((emacs (24 3))) "Ansible documentation Minor Mode" single]) (ansible . [(0 1 0) ((s (1 9 0)) (f (0 16 2))) "Ansible minor mode" tar]) (ansi . [(0 4 1) ((s (1 6 1)) (dash (1 5 0))) "Turn string into ansi strings" single]) (annoying-arrows-mode . [(0 1 0) nil "Ring the bell if using arrows too much" single]) (annotate . [(0 4 7) nil "annotate files without changing them" single]) (angular-snippets . [(0 2 3) ((s (1 4 0)) (dash (1 2 0))) "Yasnippets for AngularJS" tar]) (angular-mode . [(1 0) nil "No description available." tar]) (android-mode . [(0 5 0) nil "Minor mode for Android application development" single]) (anaphora . [(1 0 4) nil "anaphoric macros providing implicit temp variables" single]) (anaconda-mode . [(0 1 12) ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" single]) (amx . [(3 2) ((emacs (24 4)) (s (0))) "Alternative M-x with extra features." single]) (amd-mode . [(2 8) ((emacs (25)) (projectile (20161008 47)) (s (1 9 0)) (f (0 16 2)) (seq (2 16)) (makey (0 3)) (js2-mode (20140114)) (js2-refactor (0 6 1))) "Minor mode for handling JavaScript AMD module requirements." single]) (all-the-icons-ivy . [(0 1 2) ((emacs (24 4)) (all-the-icons (2 4 0)) (ivy (0 8 0))) "Shows icons while using ivy and counsel" single]) (all-the-icons . [(3 2 0) ((emacs (24 3)) (memoize (1 0 1))) "A library for inserting Developer icons" tar]) (alert . [(1 2) ((gntp (0 1)) (log4e (0 3 0))) "Growl-style notification system for Emacs" single]) (alect-themes . [(0 8) ((emacs (24 0))) "Configurable light, dark and black themes for Emacs 24 or later" tar]) (alda-mode . [(0 2 0) ((emacs (24 0))) "A simple major mode for the musical programming language Alda" single]) (alchemist . [(1 8 2) ((elixir-mode (2 2 5)) (dash (2 11 0)) (emacs (24 4)) (company (0 8 0)) (pkg-info (0 4))) "Elixir tooling integration into Emacs" tar]) (alan-mode . [(1 0 0) ((flycheck (32)) (emacs (25 1))) "Major mode for editing M-industries Alan files" single]) (airline-themes . [(1 7) ((powerline (2 3))) "vim-airline themes for emacs powerline" tar]) (ahungry-theme . [(1 10 0) ((emacs (24))) "Ahungry color theme for Emacs.  Make sure to (load-theme 'ahungry)." single]) (ahk-mode . [(1 5 6) ((emacs (24 3))) "Major mode for editing AHK (AutoHotkey and AutoHotkey_L)" single]) (aggressive-indent . [(1 9 0) ((emacs (24 1)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single]) (ag . [(0 47) ((dash (2 8 0)) (s (1 9 0)) (cl-lib (0 5))) "A front-end for ag ('the silver searcher'), the C ack replacement." single]) (aes . [(0 9) nil "Implementation of AES" single]) (adoc-mode . [(0 6 6) ((markup-faces (1 0 0))) "a major-mode for editing AsciiDoc files in Emacs" single]) (addressbook-bookmark . [(1 0) ((emacs (24))) "An address book based on Standard Emacs bookmarks." single]) (add-node-modules-path . [(1 2 0) nil "Add node_modules to your exec-path" single]) (add-hooks . [(3 1 1) nil "Functions for setting multiple hooks" single]) (adafruit-wisdom . [(0 2 1) ((emacs (25))) "Get/display adafruit.com quotes" single]) (actionscript-mode . [(7 2 2) nil "A simple mode for editing Actionscript 3 files" single]) (ace-window . [(0 9 0) ((avy (0 2 0))) "Quickly switch windows." single]) (ace-popup-menu . [(0 2 1) ((emacs (24 3)) (avy-menu (0 1))) "Replace GUI popup menu with something more efficient" single]) (ace-pinyin . [(0 2 5) ((ace-jump-mode (2 0)) (avy (0 2 0)) (pinyinlib (0 1 0))) "Jump to Chinese characters using ace-jump-mode or avy" single]) (ace-link . [(0 5 0) ((avy (0 4 0))) "Quickly follow links" single]) (ace-jump-zap . [(0 1 2) ((ace-jump-mode (1 0)) (dash (2 10 0))) "Character zapping, `ace-jump-mode` style" single]) (ace-jump-mode . [(2 0) nil "a quick cursor location minor mode for emacs" single]) (ace-jump-helm-line . [(0 5 0) ((avy (0 4 0)) (helm (1 6 3))) "Ace-jump to a candidate in helm window" single]) (ace-jump-buffer . [(0 4 1) ((avy (0 4 0)) (dash (2 4 0))) "fast buffer switching extension to `avy'" single]) (ace-isearch . [(0 1 4) ((ace-jump-mode (2 0)) (avy (0 3)) (helm-swoop (1 4)) (emacs (24))) "A seamless bridge between isearch, ace-jump-mode, avy and helm-swoop" single]) (ace-flyspell . [(0 1 3) ((avy (0 4 0))) "Jump to and correct spelling errors using `ace-jump-mode' and flyspell" single]) (ac-slime . [(0 8) ((auto-complete (1 4)) (slime (2 9)) (cl-lib (0 5))) "An auto-complete source using slime completions" single]) (ac-rtags . [(2 18) ((auto-complete (1 4 0)) (rtags (2 10))) "auto-complete back-end for RTags" single]) (ac-racer . [(0 2) ((emacs (24 3)) (auto-complete (1 5 0)) (racer (0 0 2))) "auto-complete source of racer" single]) (ac-php-core . [(2 0 5) ((emacs (24)) (dash (1)) (php-mode (1)) (xcscope (1)) (s (1)) (f (0 17 0)) (popup (0 5 0))) "gen tags for php" tar]) (ac-php . [(2 0 5) ((ac-php-core (1)) (auto-complete (1 4 0)) (yasnippet (0 8 0))) "auto-completion source for php" single]) (ac-octave . [(0 7) ((auto-complete (1 4 0))) "An auto-complete source for Octave" single]) (ac-mozc . [(0 0 4) ((cl-lib (0 5)) (auto-complete (1 4)) (mozc (0))) "auto-complete sources for Japanese input using Mozc" single]) (ac-ispell . [(0 7) ((auto-complete (1 4)) (cl-lib (0 5))) "ispell completion source for auto-complete" single]) (ac-inf-ruby . [(0 4) ((inf-ruby (2 3 2)) (auto-complete (1 4))) "Enable auto-complete in inf-ruby sessions" single]) (ac-html-csswatcher . [(0 1 7) ((web-completion-data (0 1))) "css/less class/id completion with `ac-html' or `company-web'" single]) (ac-html-bootstrap . [(0 9 3) ((web-completion-data (0 1))) "auto complete bootstrap3/fontawesome classes for `ac-html' and `company-web'" tar]) (ac-html . [(0 31) ((auto-complete (1 4)) (web-completion-data (0 1))) "auto complete source for html tags and attributes" tar]) (ac-helm . [(2 1) ((helm (20130328)) (auto-complete (1 4 0)) (popup (0 5 0))) "Auto Complete with Helm" single]) (ac-haskell-process . [(0 7) ((auto-complete (1 4)) (haskell-mode (13))) "Haskell auto-complete source which uses the current haskell process" single]) (ac-geiser . [(0 1) ((geiser (0 5)) (auto-complete (1 4))) "Auto-complete backend for geiser" tar]) (ac-etags . [(0 6) ((auto-complete (1 4))) "etags/ctags completion source for auto-complete" single]) (ac-emoji . [(0 2) ((auto-complete (1 5 0)) (cl-lib (0 5))) "auto-complete source of Emoji" tar]) (ac-emacs-eclim . [(0 4) ((eclim (0 3)) (auto-complete (1 5))) "auto-complete source for eclim" single]) (ac-dcd . [(0 4) ((auto-complete (1 3 1)) (flycheck-dmd-dub (0 7))) "Auto Completion source for dcd for GNU Emacs" single]) (ac-clang . [(2 1 3) ((emacs (24)) (cl-lib (0 5)) (auto-complete (1 4 0)) (pos-tip (0 4 6)) (yasnippet (0 8 0))) "Auto Completion source by libclang for GNU Emacs" tar]) (ac-cider . [(0 2 3) ((cider (0 8 0)) (auto-complete (1 4)) (cl-lib (0 3))) "Clojure auto-complete sources using CIDER" single]) (ac-capf . [(0 1) ((auto-complete (1 4)) (cl-lib (0 5))) "auto-complete source with completion-at-point" single]) (ac-alchemist . [(0 1) ((auto-complete (1 5 0)) (alchemist (1 3 1)) (cl-lib (0 5))) "auto-complete source for alchemist" single]) (abyss-theme . [(0 7) ((emacs (24))) "A dark theme with contrasting colours." single]) (abc-mode . [(20140225 944) nil "Major mode for editing abc music files" single]) (aa-edit-mode . [(0 0 2) ((emacs (24 3)) (navi2ch (2 0 0))) "Major mode for editing AA(S_JIS Art) and .mlt file" single]) (a . [(0 1 0 -3 4) ((emacs (25))) "Associative data structure functions" single]) (0blayout . [(1 0 2) nil "Layout grouping with ease" single]))
