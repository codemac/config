This is flycheck.info, produced by makeinfo version 5.2 from
flycheck.texi.

This manual is for Flycheck version 0.23-cvs.

Copyright © 2014-2015 Sebastian Wiesner

     Permission is granted to copy, distribute and/or modify this
     documentation under the terms of the GNU Free Documentation
     License, Version 1.3 or any later version published by the Free
     Software Foundation; with no Invariant Sections, no Front-Cover
     Texts, and no Back-Cover Texts.  A copy of the license is included
     in the section entitled “GNU Free Documentation License.”.

     Alternatively, you may copy, distribute and/or modify this
     documentation under the terms of the Creative Commons
     Attribution-ShareAlike 4.0 International Public License.  A copy of
     the license can be obtained at
     <https://creativecommons.org/licenses/by-sa/4.0/legalcode>.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* flycheck: (flycheck.info). On the fly syntax checking for GNU Emacs
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.2.3.


File: flycheck.info,  Node: Top,  Next: Introduction,  Up: (dir)

Flycheck
********

This manual is for Flycheck version 0.23-cvs.

Copyright © 2014-2015 Sebastian Wiesner

     Permission is granted to copy, distribute and/or modify this
     documentation under the terms of the GNU Free Documentation
     License, Version 1.3 or any later version published by the Free
     Software Foundation; with no Invariant Sections, no Front-Cover
     Texts, and no Back-Cover Texts.  A copy of the license is included
     in the section entitled “GNU Free Documentation License.”.

     Alternatively, you may copy, distribute and/or modify this
     documentation under the terms of the Creative Commons
     Attribution-ShareAlike 4.0 International Public License.  A copy of
     the license can be obtained at
     <https://creativecommons.org/licenses/by-sa/4.0/legalcode>.

* Menu:

* Introduction:: 
* Flycheck versus Flymake:: 
* Installation:: 
* Quickstart:: 
* Usage:: 
* Supported languages:: 
* Glossary:: 
* Flycheck releases:: 
* Extending Flycheck:: 
* Flycheck API:: 
* Flycheck ERT API:: 
* Contribution guidelines:: 
* Testing Flycheck:: 
* Writing documentation:: 
* Maintenance tasks:: 
* GNU General Public License:: 
* GNU Free Documentation License:: 
* Index:: 

 — The Detailed Node Listing —

Introduction

* Features:: 
* 3rd party extensions:: 

Flycheck versus Flymake

* Overview:: 
* Detailed review:: 

Detailed review

* Relation to Emacs:: 
* Enabling syntax checking:: 
* Syntax checkers:: 
* Functions as syntax checkers:: 
* Customization of syntax checkers:: 
* Syntax checker selection:: 
* Error levels:: 
* Error identifiers:: 
* Error parsing:: 
* Error message display:: 
* Error list:: 
* Resource consumption:: 
* Unit tests:: 

Syntax checkers

* Built-in syntax checkers:: 
* Definition of new syntax checkers:: 

Customization of syntax checkers

* Executables of syntax checkers:: 

Syntax checker selection

* Custom predicates:: 
* Manual selection:: 
* Multiple syntax checkers per buffer:: 

Resource consumption

* Syntax checking:: 
* Checking for changes:: 

Installation

* Prerequisites:: 
* Package installation:: 
* Setup:: 

Prerequisites

* Emacs:: 
* Operating system:: 
* Syntax checking tools:: 

Package installation

* Manual:: 
* Cask:: 

Quickstart

* Enable Flycheck:: 
* Install some syntax checker tools:: 
* Check syntax in a buffer:: 
* Navigate and list errors:: 
* Explore the menu:: 
* Further reading:: 

Usage

* Enabling syntax checking: Enabling syntax checking<2>. 
* Checking buffers:: 
* Selecting syntax checkers:: 
* Configuring syntax checkers:: 
* Error reporting:: 
* Listing errors:: 
* Copying (killing) errors: Copying killing errors. 
* Navigating and jumping to errors:: 
* Mode line reporting:: 

Configuring syntax checkers

* Syntax checker executables:: 
* Syntax checker options:: 
* Syntax checker configuration files:: 

Supported languages

* Ada:: 
* AsciiDoc:: 
* C/C++:: 
* CFEngine:: 
* Chef:: 
* Coffeescript:: 
* Coq:: 
* CSS:: 
* D:: 
* Elixir:: 
* Emacs Lisp:: 
* Erlang:: 
* ERuby:: 
* Fortran:: 
* Go:: 
* Haml:: 
* Handlebars:: 
* Haskell:: 
* HTML:: 
* Javascript:: 
* JSON:: 
* LESS:: 
* Lua:: 
* Make:: 
* Perl:: 
* PHP:: 
* Puppet:: 
* Python:: 
* R:: 
* Racket:: 
* RPM SPEC:: 
* ReStructuredText:: 
* Ruby:: 
* Rust:: 
* Sass:: 
* Scala:: 
* Scss:: 
* Shell script languages:: 
* Slim:: 
* TeX/LaTeX:: 
* Texinfo:: 
* Verilog:: 
* XML:: 
* YAML:: 

Flycheck releases

* Release announcements:: 
* Changelog:: 

Release announcements

* Flycheck 0.22: Flycheck 0 22. 
* Flycheck 0.21: Flycheck 0 21. 
* Flycheck 0.20: Flycheck 0 20. 
* Flycheck 0.19: Flycheck 0 19. 
* Flycheck 0.18: Flycheck 0 18. 
* Flycheck 0.17: Flycheck 0 17. 
* Flycheck 0.16: Flycheck 0 16. 
* Flycheck 0.15: Flycheck 0 15. 

Flycheck 0.22

* Breaking changes:: 
* Setup: Setup<2>. 
* Language support:: 
* Syntax checking improvements:: 
* Error list improvements:: 
* Generic syntax checkers:: 
* Error IDs:: 
* Unit test library for Flycheck:: 

Language support

* Ada: Ada<2>. 
* C/C++: C/C++<2>. 
* Emacs Lisp: Emacs Lisp<2>. 
* Haskell: Haskell<2>. 
* Fortran: Fortran<2>. 
* Python: Python<2>. 
* Rust: Rust<2>. 
* TeX/LaTeX: TeX/LaTeX<2>. 

Flycheck 0.21

* Breaking changes: Breaking changes<2>. 
* Language support: Language support<2>. 
* Error list changes:: 
* Error navigation and display:: 
* Syntax checker definition and extension:: 
* Obtaining the new release:: 

Language support

* C/C++: C/C++<3>. 
* D: D<2>. 
* Go: Go<2>. 
* HTML: HTML<2>. 
* Less:: 
* Shell scripts:: 

Flycheck 0.20

* Breaking changes: Breaking changes<3>. 
* Language support: Language support<3>. 
* Error list improvements: Error list improvements<2>. 
* User interface improvements:: 
* Miscellaneous new features:: 
* Miscellaneous fixes:: 
* Get it:: 

Language support

* C/C++: C/C++<4>. 
* Rust: Rust<3>. 
* Scala: Scala<2>. 
* Sass/SCSS:: 
* Javascript: Javascript<2>. 
* Ruby: Ruby<2>. 

Flycheck 0.19

* Breaking changes: Breaking changes<4>. 
* Languages:: 
* New features:: 
* Bug fixes:: 
* Misc changes:: 
* Get it: Get it<2>. 

Languages

* C/C++: C/C++<5>. 
* Emacs Lisp: Emacs Lisp<3>. 
* Go: Go<3>. 
* Haskell: Haskell<3>. 
* Rust: Rust<4>. 

Flycheck 0.18

* Breaking changes: Breaking changes<5>. 
* Syntax checkers: Syntax checkers<2>. 
* Bug fixes: Bug fixes<2>. 
* Get it: Get it<3>. 

Flycheck 0.17

* Breaking changes: Breaking changes<6>. 
* New online manual:: 
* Syntax checkers: Syntax checkers<3>. 
* Extending syntax checkers:: 
* Other bug fixes and improvements:: 

Flycheck 0.16

* Breaking changes: Breaking changes<7>. 
* Syntax checkers: Syntax checkers<4>. 
* New features: New features<2>. 
* Improved error list:: 
* Get it: Get it<4>. 

Syntax checkers

* New languages and checkers:: 
* Better Haskell support:: 
* Miscellaneous new options:: 

New features

* Syntax checker executables: Syntax checker executables<2>. 
* Disable syntax checkers easily:: 

Flycheck 0.15

* Breaking changes: Breaking changes<8>. 
* New syntax checkers:: 
* New error list:: 
* C/C++ support:: 
* New info level messages:: 
* Custom error levels:: 
* Other improvements:: 
* Get it: Get it<5>. 

Changelog

* master (in development): master in development. 
* 0.22 (Dec 23, 2014): 0 22 Dec 23 2014. 
* 0.21 (Oct 26, 2014): 0 21 Oct 26 2014. 
* 0.20 (Aug 12, 2014): 0 20 Aug 12 2014. 
* 0.19 (Jun 12, 2014): 0 19 Jun 12 2014. 
* 0.18 (Mar 24, 2014): 0 18 Mar 24 2014. 
* 0.17 (Feb 1, 2014): 0 17 Feb 1 2014. 
* 0.16 (Jan 11, 2014): 0 16 Jan 11 2014. 
* 0.15 (Nov 15, 2013): 0 15 Nov 15 2013. 
* 0.14.1 (Aug 16, 2013): 0 14 1 Aug 16 2013. 
* 0.14 (Aug 15, 2013): 0 14 Aug 15 2013. 
* 0.13 (Jun 28, 2013): 0 13 Jun 28 2013. 
* 0.12 (May 18, 2013): 0 12 May 18 2013. 
* 0.11 (May 01, 2013): 0 11 May 01 2013. 
* 0.10 (Apr 21, 2013): 0 10 Apr 21 2013. 
* 0.9 (Apr 13, 2013): 0 9 Apr 13 2013. 
* 0.8 (Apr 9, 2013): 0 8 Apr 9 2013. 
* 0.7.1 (Feb 23, 2013): 0 7 1 Feb 23 2013. 
* 0.7 (Feb 14, 2013): 0 7 Feb 14 2013. 
* 0.6.1 (Jan 30, 2013): 0 6 1 Jan 30 2013. 
* 0.6 (Jan 29, 2013): 0 6 Jan 29 2013. 
* 0.5 (Dec 28, 2012): 0 5 Dec 28 2012. 
* 0.4 (Nov 21, 2012): 0 4 Nov 21 2012. 
* 0.3 (Nov 21, 2012): 0 3 Nov 21 2012. 
* 0.2 (Oct 25, 2012): 0 2 Oct 25 2012. 
* 0.1 (Oct 11, 2012): 0 1 Oct 11 2012. 

Extending Flycheck

* Defining new syntax checkers:: 
* Advanced syntax checker definitions:: 
* Other ways to extend Flycheck:: 

Defining new syntax checkers

* Finding the right error patterns:: 
* Trying a new syntax checker:: 
* Registering new syntax checkers:: 

Advanced syntax checker definitions

* Parsing structured output format:: 
* Passing options and configuration files to syntax checkers:: 
* Controlling the use of a syntax checker:: 
* Applying more than one syntax checker:: 

Other ways to extend Flycheck

* Use arbitrary functions to check buffers:: 
* Hooking into Flycheck:: 

Hooking into Flycheck

* Status changes:: 
* Error processing:: 
* Error display:: 

Flycheck API

* Syntax checks:: 
* Generic syntax checkers: Generic syntax checkers<2>. 
* Command syntax checkers:: 
* Errors:: 
* Flycheck buffer status:: 
* Utilities:: 

Generic syntax checkers

* Status callback protocol:: 
* Predicates for syntax checkers:: 
* Error filters:: 

Command syntax checkers

* Command arguments:: 
* Options for command syntax checkers:: 
* Configuration files for command syntax checkers:: 
* Error parsing with regular expressions:: 
* Error parsers:: 

Errors

* Error processing: Error processing<2>. 
* Error analysis:: 
* Error levels: Error levels<2>. 

Flycheck ERT API

* Compatibility:: 
* Loading and initializing:: 
* Utilities: Utilities<2>. 
* Defining test cases:: 

Utilities

* Creating temporary buffers:: 
* Scoping resource access:: 
* Accessing test resources:: 
* Obtaining information about the environment:: 

Defining test cases

* Checking results of test cases:: 
* Invoking syntax checkers in test cases:: 
* Writing assertions:: 

Contribution guidelines

* Reporting issues:: 
* Contributing code:: 

Contributing code

* General:: 
* Code style:: 
* Commit messages:: 
* Contributing syntax checkers:: 
* Pull requests:: 

Testing Flycheck

* Test suite layout:: 
* Test running:: 
* Virtual test environment:: 
* Travis CI:: 

Writing documentation

* Build environment setup:: 
* Building HTML and Texinfo:: 
* Verifying references:: 

Maintenance tasks

* Rebuilding the Texinfo:: 
* Rasterized logo files:: 



File: flycheck.info,  Node: Introduction,  Next: Flycheck versus Flymake,  Prev: Top,  Up: Top

1 Introduction
**************

Flycheck is a modern on-the-fly syntax checking extension for GNU Emacs
24, intended as replacement for the older Flymake extension which is
part of GNU Emacs.

It uses various syntax checking and linting tools to automatically check
the contents of buffers while you type, and reports warnings and errors
directly in the buffer, or in an optional error list.

* Menu:

* Features:: 
* 3rd party extensions:: 


File: flycheck.info,  Node: Features,  Next: 3rd party extensions,  Up: Introduction

1.1 Features
============

   - 44 languages with 74 syntax checkers, see *note Supported
     languages: 5.

   - *note Fully automatic, fail-safe, on-the-fly syntax checking in
     background: 6.

   - *note Nice error indication and highlighting: 7.

   - Optional error list popup

   - *note Many customization options: 8.

   - *note A comprehensive manual: 9.

   - *note A simple API to define new syntax checkers: a.

   - A “doesn’t get in your way” guarantee


File: flycheck.info,  Node: 3rd party extensions,  Prev: Features,  Up: Introduction

1.2 3rd party extensions
========================

The following extensions provide additional cool features for Flycheck:

   - flycheck-cask(1) makes Flycheck use Cask packages in Cask(2)
     projects.

   - flycheck-color-mode-line(3) colors the mode line according to the
     Flycheck status.

   - flycheck-d-unittest(4) adds a Flycheck checker to run unit tests
     for D programs on the fly.

   - flycheck-google-cpplint(5) adds a syntax checker for Google’s C++
     style checker.

   - flycheck-haskell(6) improves Haskell support in Flycheck, by
     configuring Flycheck according to the current Cabal project, and
     using Cabal sandbox packages.

   - flycheck-hdevtools(7) adds a Flycheck syntax checker for Haskell
     based on hdevtools(8).

   - flycheck-irony(9) adds a Flycheck syntax checker for C, C++ and
     Objective C using Irony Mode(10).

   - flycheck-ledger(11) adds a syntax checker for the Ledger(12)
     accounting tool.

   - flycheck-mercury(13) adds a Flycheck syntax checker for the Mercury
     Language(14).

   - flycheck-ocaml(15) adds a syntax checker for OCaml.

   - flycheck-pos-tip(16) shows Flycheck error messages in a popup.

   - flycheck-pyflakes(17) adds a Python syntax checker using Pyflakes.

   - flycheck-rust(18) improves Rust support in Flycheck, by configuring
     Flycheck according to Cargo settings and layouts.

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck-cask

   (2) https://github.com/cask/cask

   (3) https://github.com/flycheck/flycheck-color-mode-line

   (4) https://github.com/flycheck/flycheck-d-unittest

   (5) https://github.com/flycheck/flycheck-google-cpplint

   (6) https://github.com/flycheck/flycheck-haskell

   (7) https://github.com/flycheck/flycheck-hdevtools

   (8) https://github.com/bitc/hdevtools/

   (9) https://github.com/Sarcasm/flycheck-irony

   (10) https://github.com/Sarcasm/irony-mode

   (11) https://github.com/purcell/flycheck-ledger

   (12) http://ledger-cli.org/

   (13) https://github.com/flycheck/flycheck-mercury

   (14) http://mercurylang.org/

   (15) https://github.com/flycheck/flycheck-ocaml

   (16) https://github.com/flycheck/flycheck-pos-tip

   (17) https://github.com/Wilfred/flycheck-pyflakes

   (18) https://github.com/flycheck/flycheck-rust


File: flycheck.info,  Node: Flycheck versus Flymake,  Next: Installation,  Prev: Introduction,  Up: Top

2 Flycheck versus Flymake
*************************

This article provides information about Flycheck compares to the
_built-in_ Flymake mode.  It does not consider the improved Flymake
fork(1) or third-party extensions such as flymake-easy(2) or
flymake-cursor(3), but references them at appropriate places.

We aim for this comparison to be neutral and complete, but do not
provide any guarantee for completeness or correctness of the following
information.  Moreover, we consider Flycheck superior to Flymake in all
aspects.  As such, you may find this page biased towards Flycheck.
Please excuse this as well as any factual mistake or lack of
information.  Please suggest improvements.

* Menu:

* Overview:: 
* Detailed review:: 

   ---------- Footnotes ----------

   (1) https://github.com/illusori/emacs-flymake

   (2) https://github.com/purcell/flymake-easy

   (3) http://www.emacswiki.org/emacs/flymake-cursor.el


File: flycheck.info,  Node: Overview,  Next: Detailed review,  Up: Flycheck versus Flymake

2.1 Overview
============

This table intends to give an overview about the differences and
similarities between Flycheck and the default install of Flymake.  It is
not a direct comparision to third-party extensions such as flymake-easy,
flymake-cursor, or forks of Flymake.  For a more comprehensive look
compared to those extensions, please read the details in the main
article and the footnotes.

Please do _not_ only use this table to make your personal judgment, but
also read the detailed review in the following sections, at least with
regards to the features you are interested in.

                                       Flycheck                  Flymake
                                                                 
                                                                 
Supported Emacs versions               24+                       22+
                                                                 
                                                                 
Built-in                               no (1)                    yes
                                                                 
                                                                 
Automatically enabled in supported     yes                       no
languages                                                        

Checks after                           save, newline, change     save, newline, change
                                                                 
                                                                 
Checks in background                   yes                       yes
                                                                 
                                                                 
Automatic syntax checker selection     By major mode and         By file name patterns
                                       custom predicates         (2)
                                                                 
                                                                 
Manual syntax checker selection        yes                       *no*
                                                                 
                                                                 
Multiple syntax checkers per buffer    yes                       *no* (3)
                                                                 
                                                                 
Supported languages                    > 30                      ~5 (4)
                                                                 
                                                                 
Checking remote files via Tramp        no                        partly?
                                                                 
                                                                 
Definition of new syntax checkers      Via a single              By a function
                                       declarative macro         definition and various
                                                                 variables (5)
                                                                 
                                                                 
Functions as syntax checkers           yes                       *no*
                                                                 
                                                                 
Customization of syntax checkers       yes                       no
                                                                 
                                                                 
Error levels                           Errors, warnings,         Errors and warnings (6)
                                       information, and custom   
                                       levels
                                       
                                                                 
Error identifiers                      yes                       no
                                                                 
                                                                 
Error parsing                          Regular expressions, or   Regular expressions
                                       custom error parsers      
                                       (e.g.  XML, JSON, etc.)
                                       
                                                                 
Multiline error messages               yes                       *no* (7)
                                                                 
                                                                 
Error highlighting in the buffer       yes                       yes
                                                                 
                                                                 
Fringe icons for errors                yes                       yes
                                                                 
                                                                 
Error messages display                 Via tooltip and echo      In tooltip (8)
                                       area, fully               
                                       customizable
                                       
                                                                 
List all errors in the buffer          yes                       *no*
                                                                 
                                                                 
Resource consumption                   low                       high (9)
                                                                 
                                                                 
Unit tests                             all syntax checkers,      *none?*
                                       and large parts of the    
                                       underlying processing
                                       

   ---------- Footnotes ----------

   (1) Flycheck is *unlikely to ever become part of Emacs*.

   (2) The 3rd party library flymake-easy
(https://github.com/purcell/flymake-easy) allows to use syntax checkers
per major mode.

   (3) Various 3rd party packages thus use custom shell scripts to call
multiple syntax checking tools at once.

   (4) However, the Flymake page
(http://www.emacswiki.org/emacs/FlyMake) in the EmacsWiki provides
recipes for many other languages, although of varying quality.
Furthermore, the popular ELPA archive MELPA provides many packages which
add more languages to Flymake.  There is also a Flymake fork
(https://github.com/illusori/emacs-flymake), which supports more
languages out of the box, among other fixes and improvements.

   (5) flymake-easy (https://github.com/purcell/flymake-easy) provides a
function to define a new syntax checker, which sets all required
variables at once.

   (6) The Flymake fork (https://github.com/illusori/emacs-flymake) adds
support for info messages.

   (7) flymake-easy (https://github.com/purcell/flymake-easy)
_overrides_ internal functions of Flymake to add support for multiline
error messages.

   (8) The 3rd party library flymake-cursor
(http://www.emacswiki.org/emacs/flymake-cursor.el) shows Flymake error
messages at point in the echo area.

   (9) A third-party Flymake fork
(https://github.com/illusori/emacs-flymake) mostly fixes the performance
and resource consumption issues in Flymake.


File: flycheck.info,  Node: Detailed review,  Prev: Overview,  Up: Flycheck versus Flymake

2.2 Detailed review
===================

* Menu:

* Relation to Emacs:: 
* Enabling syntax checking:: 
* Syntax checkers:: 
* Functions as syntax checkers:: 
* Customization of syntax checkers:: 
* Syntax checker selection:: 
* Error levels:: 
* Error identifiers:: 
* Error parsing:: 
* Error message display:: 
* Error list:: 
* Resource consumption:: 
* Unit tests:: 


File: flycheck.info,  Node: Relation to Emacs,  Next: Enabling syntax checking,  Up: Detailed review

2.2.1 Relation to Emacs
-----------------------

*Flymake* is part of GNU Emacs since GNU Emacs 22.  As such,
contributions to Flymake are subject to the FSF policies on GNU
projects.  Most notably, contributors are required to assign their
copyright to the FSF by signing a contributor agreement.

*Flycheck* is not part of GNU Emacs, and is *unlikely to ever be*.
However, it is free software as well, and publicly developed on the
well-known code hosting platform Github(1).  Contributing to Flycheck
does not require a copyright assignments.

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck


File: flycheck.info,  Node: Enabling syntax checking,  Next: Syntax checkers,  Prev: Relation to Emacs,  Up: Detailed review

2.2.2 Enabling syntax checking
------------------------------

*Flymake* is not enabled automatically for supported languages.  It must
be be enabled for each mode individually and *carefully*, because it
does not deal well with unavailable syntax checker tools.  In a GUI
frame, it signals errors in GUI dialogs.  In a TTY frame, it does not
signal any error at all, but instead silently hangs.  The same occurs,
when a syntax checker tool becomes unavailable after Flymake Mode is
enabled, for instance, because the underlying tool was uninstalled.

The third-party library flymake-easy(1) provides an alternate way to
enable Flymake Mode, which gracefully handles unavailable syntax
checkers.  It does not check whether the tool still exists before a
syntax check, though, and thus does still exposes above behavior, when a
tool becomes unavailable after the mode was enabled.

*Flycheck* provides a global mode (see *note global-flycheck-mode: 15.),
which enables syntax checking in every supported language.  If a syntax
checking tool is not available, Flycheck fails gracefully, does not
enable syntax checking, and just indicates the failure in the mode line.

   ---------- Footnotes ----------

   (1) https://github.com/purcell/flymake-easy


File: flycheck.info,  Node: Syntax checkers,  Next: Functions as syntax checkers,  Prev: Enabling syntax checking,  Up: Detailed review

2.2.3 Syntax checkers
---------------------

* Menu:

* Built-in syntax checkers:: 
* Definition of new syntax checkers:: 


File: flycheck.info,  Node: Built-in syntax checkers,  Next: Definition of new syntax checkers,  Up: Syntax checkers

2.2.3.1 Built-in syntax checkers
................................

*Flymake* supports Java, Makefiles, Perl, PHP, TeX/LaTeX and XML.
Notably, it does _not_ support Emacs Lisp.  A third-party Flymake
fork(1) supports more languages, though.  Furthermore there are many
recipes for other languages on the Flymake page(2) in the EmacsWiki, and
many extension packages for other languages in the popular ELPA archive
MELPA(3).

*Flycheck* provides support for 44 languages (see *note Supported
languages: 5.) with 74 syntax checkers, most of them contributed by the
community.  Notably, Flycheck does _not_ support Java and Makefiles.

   ---------- Footnotes ----------

   (1) https://github.com/illusori/emacs-flymake

   (2) http://www.emacswiki.org/emacs/FlyMake

   (3) http://melpa.org/


File: flycheck.info,  Node: Definition of new syntax checkers,  Prev: Built-in syntax checkers,  Up: Syntax checkers

2.2.3.2 Definition of new syntax checkers
.........................................

*Flymake* does not provide a single function to define a new syntax
checker.  Instead, one has to define an “init” function, which returns
the command, and add this function to ‘flymake-allowed-file-name-masks’.
Additionally, one has to add the error patterns to
‘flymake-err-line-patterns’.  As such, defining a syntax checker is
difficult for users who are not familiar with Emacs Lisp.
flymake-easy(1) provides an easier way to define new syntax checkers,
though.

*Flycheck* provides a single function *note flycheck-define-checker: 19.
to define a new syntax checker.  This function uses a declarative
syntax, which is easy to understand even for users unfamiliar with Emacs
Lisp.  In fact, many syntax checkers in Flycheck were contributed by the
community(2).

For example, the Perl checker in Flymake is defined as follows.

     (defun flymake-perl-init ()
       (let* ((temp-file   (flymake-init-create-temp-buffer-copy
                            'flymake-create-temp-inplace))
              (local-file  (file-relative-name
                            temp-file
                            (file-name-directory buffer-file-name))))
         (list "perl" (list "-wc " local-file))))

     (defcustom flymake-allowed-file-name-masks
       '(;; …
         ("\\.p[ml]\\'" flymake-perl-init)
         ;; …
         ))

     (defvar flymake-err-line-patterns ; regexp file-idx line-idx col-idx (optional) text-idx(optional), match-end to end of string is error text
       (append
        '(;; …
          ;; perl
          ("\\(.*\\) at \\([^ \n]+\\) line \\([0-9]+\\)[,.\n]" 2 3 nil 1)
          ;; …
          )
        ;; …
       ))

Whereas Flycheck’s definition of the same checker looks like this:

     (flycheck-define-checker perl
       "A Perl syntax checker using the Perl interpreter.

     See URL `http://www.perl.org'."
       :command ("perl" "-w" "-c" source)
       :error-patterns
       ((error line-start (minimal-match (message))
               " at " (file-name) " line " line
               (or "." (and ", " (zero-or-more not-newline))) line-end))
       :modes (perl-mode cperl-mode))

   ---------- Footnotes ----------

   (1) https://github.com/purcell/flymake-easy

   (2) 
https://github.com/flycheck/flycheck/issues?labels=checker&milestone=&page=1&state=closed


File: flycheck.info,  Node: Functions as syntax checkers,  Next: Customization of syntax checkers,  Prev: Syntax checkers,  Up: Detailed review

2.2.4 Functions as syntax checkers
----------------------------------

*Flymake* cannot check a buffer with a custom Emacs Lisp function.

*Flycheck* provides the *note flycheck-define-generic-checker: 1b.
function to define a syntax checker based on an arbitrary Emacs Lisp
function.  Flycheck supports synchronous as well as asynchronous
functions, and provides simple callback-based protocol to communicate
the status of syntax checks.  This allows Flycheck to use persistent
background processes for syntax checking.  For instance,
flycheck-ocaml(1) uses a running Merlin(2) process to check OCaml
buffers, which is much easier and faster than invoking the OCaml
compiler.

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck-ocaml

   (2) https://github.com/the-lambda-church/merlin


File: flycheck.info,  Node: Customization of syntax checkers,  Next: Syntax checker selection,  Prev: Functions as syntax checkers,  Up: Detailed review

2.2.5 Customization of syntax checkers
--------------------------------------

*Flymake* does not provide built-in means to customize syntax checkers.
Instead, when defining a new syntax checker, the user needs to declare
customization variables explicitly and explicitly check their value in
the init function.

*Flycheck* provides built-in functions to add customization variables to
syntax checkers and splice the value of these variables into the
argument list of a syntax checking tool.  Many syntax checkers in
Flycheck provide customization variables.  For instance, you can
customize the enabled warnings for C with *note flycheck-clang-warnings:
1d.  Flycheck also tries to automatically find configuration files for
syntax checkers.

* Menu:

* Executables of syntax checkers:: 


File: flycheck.info,  Node: Executables of syntax checkers,  Up: Customization of syntax checkers

2.2.5.1 Executables of syntax checkers
......................................

*Flymake* does not provide built-in means to change the executable of a
syntax checker.

*Flycheck* implicitly defines a variable to set the path of a syntax
checker tool for each defined syntax checker, and provides the
interactive command *note flycheck-set-checker-executable: 1f. to change
the executable used in a buffer.


File: flycheck.info,  Node: Syntax checker selection,  Next: Error levels,  Prev: Customization of syntax checkers,  Up: Detailed review

2.2.6 Syntax checker selection
------------------------------

*Flymake* selects syntax checkers based on file name patterns in
‘flymake-allowed-file-name-masks’.  Effectively, this duplicates the
existing logic Emacs uses to choose the right major mode, but lacks its
flexibility and power.  For instance, Flymake cannot pick a syntax
checker based on the shebang of a file.

*Flycheck* uses the major mode to select a syntax checker.  This reuses
the existing sophisticated logic Emcas uses to choose and configure
major modes.  Flycheck can easily select a Python syntax checker for a
Python script without file extension, but with proper shebang, simply
because Emacs correctly chooses Python Mode for such a file.

* Menu:

* Custom predicates:: 
* Manual selection:: 
* Multiple syntax checkers per buffer:: 


File: flycheck.info,  Node: Custom predicates,  Next: Manual selection,  Up: Syntax checker selection

2.2.6.1 Custom predicates
.........................

*Flymake* does not allow for custom predicates to implement more complex
logic for syntax checker selection.  For instance, Flymake cannot use
different syntax checkers for buffer depending on the value of a local
variable.

However, flymake-easy(1) patches Flymake to allow for custom syntax
checkers per buffer.  This does not happen automatically though.  The
user still needs to explicitly register a syntax checker in a major mode
hook.

*Flycheck* supports custom predicate function.  It uses these to
implement the shell script syntax checkers, for instance.  Emacs uses a
single major mode for various shell script types (e.g.  Bash, Zsh, POSIX
Shell, etc.), so Flycheck additionally uses a custom predicate to look
at the value of the variable ‘sh-shell’ in Sh Mode buffers, to determine
which shell to use for syntax checking.

   ---------- Footnotes ----------

   (1) https://github.com/purcell/flymake-easy


File: flycheck.info,  Node: Manual selection,  Next: Multiple syntax checkers per buffer,  Prev: Custom predicates,  Up: Syntax checker selection

2.2.6.2 Manual selection
........................

*Flymake* does not provide means to manually select a specific syntax
checker, either interactively, or via local variables.

*Flycheck* provides the local variable *note flycheck-checker: 23. to
explicitly use a specific syntax checker for a buffer, and the command
*note flycheck-select-checker: 24. to set this variable interactively.


File: flycheck.info,  Node: Multiple syntax checkers per buffer,  Prev: Manual selection,  Up: Syntax checker selection

2.2.6.3 Multiple syntax checkers per buffer
...........................................

*Flymake* can only use a single syntax checker per buffer.  Effectively,
the user can only use a single tool to check a buffer, for instance
either PHP Mess Detector or PHP CheckStyle.  Third party extensions to
Flycheck work around this limitation by supplying custom shell scripts
to call multiple syntax checking tools at once.

*Flycheck* can easily apply multiple syntax checkers per buffer.  For
instance, Flycheck will check PHP files with PHP CLI first to find
syntax errors, then with PHP MessDetector to additionally find idiomatic
and semantic errors, and eventually with PHP CheckStyle to find
stylistic errors.  The user will see all errors reported by all of these
utilities in the buffer.


File: flycheck.info,  Node: Error levels,  Next: Error identifiers,  Prev: Syntax checker selection,  Up: Detailed review

2.2.7 Error levels
------------------

*Flymake* supports error and warning messages.  The pattern of warning
messages is _hard-coded_ in Emacs 24.3, and only became customizable in
upcoming Emacs 24.4.  The patterns to parse messages are kept separate
from the actual syntax checker.

The third-party Flymake fork(1) also supports info messages, and makes
the pattern of warning messages customizable as well.

*Flycheck* supports error, warning and info messages.  The patterns to
parse messages of different levels are part of the syntax checker
definition, and thus specific to each syntax checker.  Flycheck allows
to define new error levels for use in custom syntax checkers with *note
flycheck-define-error-level: 27.

   ---------- Footnotes ----------

   (1) https://github.com/illusori/emacs-flymake


File: flycheck.info,  Node: Error identifiers,  Next: Error parsing,  Prev: Error levels,  Up: Detailed review

2.2.8 Error identifiers
-----------------------

*Flymake* does not support unique identifiers for different kinds of
errors.

*Flycheck* supports unique identifiers for different kinds of errors, if
a syntax checker provides these.  The identifiers appear in the error
list and in error display, and can be copied independently, for instance
for use in an inline suppression comment, or to search the web for a
particular kind of error.


File: flycheck.info,  Node: Error parsing,  Next: Error message display,  Prev: Error identifiers,  Up: Detailed review

2.2.9 Error parsing
-------------------

*Flymake* parses the output of syntax checker tools with regular
expressions only.  As it splits the output by lines regardless of the
regular expressions, it does not support error messages spanning
multiple lines (such as returned by the Emacs Lisp byte compiler or by
the Glasgow Haskell Compiler).

flymake-easy(1) overrides internal Flymake functions to support
multiline error messages.

*Flycheck* can use regular expressions as well as custom parsing
functions.  By means of such functions, it can parse JSON, XML or other
structured output formats.  Flycheck includes some ready-to-use parsing
functions for well-known output formats, such as Checkstyle XML. By
parsing structured output format, Flycheck can handle arbitrarily
complex error messages.  Also, with regular expressions it uses the
error patterns to split the output into tokens, and thus handles
multiline messages just as well.

   ---------- Footnotes ----------

   (1) https://github.com/purcell/flymake-easy


File: flycheck.info,  Node: Error message display,  Next: Error list,  Prev: Error parsing,  Up: Detailed review

2.2.10 Error message display
----------------------------

In GUI frames, *Flymake* shows error messages in a tool tip, if the user
hovers the mouse over an error location.  It does not provide means to
show error messages in a TTY frame, or with the keyboard only.

The third-party library flymake-cursor(1) shows Flymake error messages
at point in the echo area, by overriding internal Flymake functions.

*Flycheck* shows error message tool tips as well, but also displays
error messages in the echo area, if the point is at an error location.
This feature is fully customizable via *note
flycheck-display-errors-function: 2b.

   ---------- Footnotes ----------

   (1) http://www.emacswiki.org/emacs/flymake-cursor.el


File: flycheck.info,  Node: Error list,  Next: Resource consumption,  Prev: Error message display,  Up: Detailed review

2.2.11 Error list
-----------------

*Flymake* does not provide means to list all errors in the current
buffer.

*Flycheck* can list all errors in the current buffer in a separate
window.  This error list is automatically updated after each syntax
check, and follows the focus.


File: flycheck.info,  Node: Resource consumption,  Next: Unit tests,  Prev: Error list,  Up: Detailed review

2.2.12 Resource consumption
---------------------------

* Menu:

* Syntax checking:: 
* Checking for changes:: 


File: flycheck.info,  Node: Syntax checking,  Next: Checking for changes,  Up: Resource consumption

2.2.12.1 Syntax checking
........................

*Flymake* starts a syntax check after every change, regardless of
whether the buffer is visible in a window or not.  It does not limit the
number of concurrent syntax checks.  As such, Flymake starts many
concurrent syntax checks, if many buffers are changed at the same time
(e.g.  after a VCS revert), which is known to freeze Emacs temporarily.

The third-party Flymake fork(1) limits the number of concurrent syntax
checks.  It does not take care to check visible buffers first, though.

*Flycheck* does not conduct syntax checks in buffers which are not
visible in any window.  Instead it defers syntax checks in such buffers
until after the buffer is visible again.  Hence, Flycheck does only
start as many concurrent syntax checks as there are visible windows in
the current Emacs session.

   ---------- Footnotes ----------

   (1) https://github.com/illusori/emacs-flymake


File: flycheck.info,  Node: Checking for changes,  Prev: Syntax checking,  Up: Resource consumption

2.2.12.2 Checking for changes
.............................

*Flymake* uses a _separate_ timer (in ‘flymake-timer’) to periodically
check for changes in each buffer.  These timers run even if the
corresponding buffers do not change.  This is known to cause
considerable CPU load with many open buffers.

The third-party Flymake fork(1) uses a single global timer to check for
changes.  This greatly reduces the CPU load, but still consumes some
marginal CPU, even if Emacs is idle and not in use currently.

*Flycheck* does not use timers at all to check for changes.  Instead it
registers a handler for Emacs’ built-in ‘after-change-functions’ hook,
which is run after changes to the buffer.  This handler is only invoked
when the buffer actually changed, and starts a one-shot timer to delay
the syntax check until the editing stopped for a short time, to save
resources and avoid checking half-finished editing.

   ---------- Footnotes ----------

   (1) https://github.com/illusori/emacs-flymake


File: flycheck.info,  Node: Unit tests,  Prev: Resource consumption,  Up: Detailed review

2.2.13 Unit tests
-----------------

*Flymake* does not have a test suite at all.

*Flycheck* has unit tests for all built-in syntax checkers, and for
large parts of the underlying machinery and API. Contributed syntax
checkers are required to have test cases.  The tests are continuously
run on Travis CI(1).

   ---------- Footnotes ----------

   (1) https://travis-ci.org/flycheck/flycheck


File: flycheck.info,  Node: Installation,  Next: Quickstart,  Prev: Flycheck versus Flymake,  Up: Top

3 Installation
**************

* Menu:

* Prerequisites:: 
* Package installation:: 
* Setup:: 


File: flycheck.info,  Node: Prerequisites,  Next: Package installation,  Up: Installation

3.1 Prerequisites
=================

* Menu:

* Emacs:: 
* Operating system:: 
* Syntax checking tools:: 


File: flycheck.info,  Node: Emacs,  Next: Operating system,  Up: Prerequisites

3.1.1 Emacs
-----------

Flycheck supports Emacs 24.  It is tested with Emacs 24.3, and Emacs
snapshot builds.  It should work with GNU Emacs 24.1 and 24.2 as well,
but it is not tested against these versions.  If it does not work with
these versions, please report an issue.

     Warning: Flycheck also does not support GNU Emacs 23 and other
     flavors of Emacs (e.g.  XEmacs, Aquamacs, etc.).  Don’t try, it
     will *not* work.


File: flycheck.info,  Node: Operating system,  Next: Syntax checking tools,  Prev: Emacs,  Up: Prerequisites

3.1.2 Operating system
----------------------

Flycheck supports any Unix-like operating system.  It is extensively
tested on Linux and OS X.

     Warning: Flycheck tries to maintain compatibility with Windows, and
     generally works well on Windows.  Pull requests which fix or
     improve Windows compatibility are *very* welcome.

     However, Flycheck does *not* explicitly support Windows.  If there
     are any issues or problems with Windows, *you are on your own*.  We
     can neither answer questions about Windows support, nor can we fix
     Windows-specific issues.


File: flycheck.info,  Node: Syntax checking tools,  Prev: Operating system,  Up: Prerequisites

3.1.3 Syntax checking tools
---------------------------

For almost all supported languages, Flycheck also needs additional
*external* checker programs.  See *note Supported languages: 39. for a
list of supported languages and the corresponding checkers programs, and
use *note flycheck-describe-checker: 3a. to get help about specific
checkers inside Emacs.

For instance, for Python you need either Flake8(1) or Pylint(2), which
can be installed with ‘pip install flake8’ and ‘pip install pylint’
respectively.

Generally you can install the required external checker programs with
the standard package manager of the corresponding programming languages
(e.g.  Rubygems for Ruby, NPM for Javascript).  Many checker programs
are also available in the package repositories of popular Linux
distributions, or as Formula for the OS X package manager Homebrew(3).

   ---------- Footnotes ----------

   (1) https://flake8.readthedocs.org/

   (2) http://www.pylint.org/

   (3) http://brew.sh/


File: flycheck.info,  Node: Package installation,  Next: Setup,  Prev: Prerequisites,  Up: Installation

3.2 Package installation
========================

* Menu:

* Manual:: 
* Cask:: 


File: flycheck.info,  Node: Manual,  Next: Cask,  Up: Package installation

3.2.1 Manual
------------

Install the ELPA package from MELPA(1) or MELPA Stable(2) using ‘M-x
package-install RET flycheck’.

     Warning: Flycheck is available from Marmalade(3) as well, but this
     repository is *not recommended*.  Due to frequent outages the
     package is not guaranteed to be updated regularly.

Neither of these repositories is included in GNU Emacs by default.  You
need to enable these repositories explicitly.  For instance, to add the
MELPA repository, add the following code to ‘init.el’:

     (require 'package)
     (add-to-list 'package-archives
                  '("melpa" . "http://melpa.org/packages/") t)
     (package-initialize)

   ---------- Footnotes ----------

   (1) http://melpa.org

   (2) http://stable.melpa.org

   (3) https://marmalade-repo.org/


File: flycheck.info,  Node: Cask,  Prev: Manual,  Up: Package installation

3.2.2 Cask
----------

If you use *note Cask: 3e, just add the following to your ‘Cask’ file,
and run ‘cask install’:

     (source gnu)
     (source melpa)

     (depends-on "flycheck")


File: flycheck.info,  Node: Setup,  Prev: Package installation,  Up: Installation

3.3 Setup
=========

Use ‘M-x flycheck-mode’ to enable Flycheck in the current buffer, and
‘M-x global-flycheck-mode’ to enable Flycheck for the entire current
Emacs session.

To permanently enable Flycheck, add the following to your ‘init.el’:

     (add-hook 'after-init-hook #'global-flycheck-mode)


File: flycheck.info,  Node: Quickstart,  Next: Usage,  Prev: Installation,  Up: Top

4 Quickstart
************

* Menu:

* Enable Flycheck:: 
* Install some syntax checker tools:: 
* Check syntax in a buffer:: 
* Navigate and list errors:: 
* Explore the menu:: 
* Further reading:: 


File: flycheck.info,  Node: Enable Flycheck,  Next: Install some syntax checker tools,  Up: Quickstart

4.1 Enable Flycheck
===================

Enable Flycheck globally by adding the following to your ‘init.el’, and
restart Emacs:

     (add-hook 'after-init-hook #'global-flycheck-mode)


File: flycheck.info,  Node: Install some syntax checker tools,  Next: Check syntax in a buffer,  Prev: Enable Flycheck,  Up: Quickstart

4.2 Install some syntax checker tools
=====================================

Install some syntax checking tools for the programming or markup
language you are using.  Take a look at the *note list of supported
languages: 5. to check what languages and tools are supported.

For Python:

     $ pip install --user pylint

Or for Ruby:

     $ gem install rubocop ruby-lint

Or for Haskell:

     $ brew install haskell-platform
     $ cabal install hlint

The *note language list: 5. also lists the available options for each
syntax checker.  Take a look at these to tune the syntax checkers to
your needs, and read *note how to use these options: 45.


File: flycheck.info,  Node: Check syntax in a buffer,  Next: Navigate and list errors,  Prev: Install some syntax checker tools,  Up: Quickstart

4.3 Check syntax in a buffer
============================

Run ‘M-x flycheck-verify-setup’ in a buffer to check whether Flycheck is
correctly setup to check the buffer.

If everything is fine Flycheck will now check syntax using these tools,
when you visit a buffer in any of these languages.  Syntax checking
happens *automatically* when you save the buffer or make any changes.
Flycheck highlights errors and warnings in the buffer, indicates them in
the fringe, and reports their numbers in the mode line.

You can also manually check a buffer with ‘C-c ! c’ (*note
flycheck-buffer: 47.).


File: flycheck.info,  Node: Navigate and list errors,  Next: Explore the menu,  Prev: Check syntax in a buffer,  Up: Quickstart

4.4 Navigate and list errors
============================

Use ‘C-c ! n’ (*note flycheck-next-error: 49.) and ‘C-c ! p’ (*note
flycheck-previous-error: 4a.) to navigate between error locations.  If
you keep the point at an error location, Flycheck will show the error
message in the echo area after a short delay.  You can also hover error
locations with the mouse and see the error message in a tooltip.

To get an overview of all errors and warnings in the current buffer,
type ‘C-c ! l’ (*note flycheck-list-errors: 4b.) to pop up a list of all
errors in your current buffer.  The error list updates automatically
when you fix errors or introduce new ones, or when you switch to another
buffer.


File: flycheck.info,  Node: Explore the menu,  Next: Further reading,  Prev: Navigate and list errors,  Up: Quickstart

4.5 Explore the menu
====================

All Flycheck commands are available in the Emacs menu at _Tools ‣ Syntax
Checking_.  Explore this menu to see what features Flycheck has to
offer.

The menu can also be opened by clicking on the mode line lighter of
Flycheck.


File: flycheck.info,  Node: Further reading,  Prev: Explore the menu,  Up: Quickstart

4.6 Further reading
===================

   - *note Usage: 4e. describes all commands and options in detail.

   - *note Supported languages: 39. has a list of all supported
     languages, and the corresponding syntax checker tools and their
     options.


File: flycheck.info,  Node: Usage,  Next: Supported languages,  Prev: Quickstart,  Up: Top

5 Usage
*******

This chapter explains in-depth how to use Flycheck for your daily work.

     Note: All commands in this chapter are documented with their
     standard key prefix ‘C-c !’.  If you do not like this prefix, you
     can change it with *note flycheck-keymap-prefix: 50, but take care
     to remember your custom prefix while reading this chapter.

      -- User Option: flycheck -keymap-prefix

               Variable properties: This variable may be risky if used
               as a file-local variable.

          Prefix for key bindings of Flycheck.

          Changing this variable outside Customize does not have any
          effect.  To change the keymap prefix from Lisp, you need to
          explicitly re-define the prefix key:

              (define-key flycheck-mode-map flycheck-keymap-prefix nil)
              (setq flycheck-keymap-prefix (kbd "C-c f"))
              (define-key flycheck-mode-map flycheck-keymap-prefix
                          flycheck-command-map)

          Please note that Flycheck’s manual documents the default
          keybindings.  Changing this variable is at your own risk.

          This user option was introduced, or its default value was
          changed, in version 0.19 of the flycheck package.

* Menu:

* Enabling syntax checking: Enabling syntax checking<2>. 
* Checking buffers:: 
* Selecting syntax checkers:: 
* Configuring syntax checkers:: 
* Error reporting:: 
* Listing errors:: 
* Copying (killing) errors: Copying killing errors. 
* Navigating and jumping to errors:: 
* Mode line reporting:: 


File: flycheck.info,  Node: Enabling syntax checking<2>,  Next: Checking buffers,  Up: Usage

5.1 Enabling syntax checking
============================

*note global-flycheck-mode: 15. enables syntax checking in all buffers
whenever possible:

 -- Command: M -x global-flycheck-mode

     Toggle Flycheck Mode for *all* live buffers, and for new buffers.

     With Global Flycheck Mode, Flycheck Mode is automatically enabled
     in all buffers, for which a *note suitable syntax checker: 53.
     exists and is enabled.

          Note: Flycheck Mode will *not* be enabled in buffers for
          remote or encrypted files.  The former is flaky and might be
          very slow, and the latter might leak confidential data to
          temporary directories.

          You can still explicitly enable Flycheck Mode in such buffers
          with *note flycheck-mode: 54.  This is *not* recommended
          though.

      -- User Option: global -flycheck-mode

          Whether Flycheck Mode is enabled globally.

To permanently enable syntax checking, either customize *note
global-flycheck-mode: 55. with ‘M-x customize-variable RET
global-flycheck-mode’ and select _Save for Future Sessions_, or add the
following code to your init file:

     (add-hook 'after-init-hook #'global-flycheck-mode)

You can also explicitly enable syntax checking just for the current
buffer with the local minor mode *note flycheck-mode: 54.:

 -- Command: M -x flycheck-mode

     Toggle Flycheck Mode for the current buffer.

      -- User Option: flycheck -mode

          Whether Flycheck Mode is enabled in the current buffer.


File: flycheck.info,  Node: Checking buffers,  Next: Selecting syntax checkers,  Prev: Enabling syntax checking<2>,  Up: Usage

5.2 Checking buffers
====================

When *note flycheck-mode: 54. is enabled, Flycheck automatically checks
a buffer whenever

   - the buffer is saved (e.g.  ‘C-x C-s’),

   - new lines are inserted,

   - or a short time (see *note flycheck-idle-change-delay: 58.) after
     the last change to the buffer.

You can customize this behaviour with the option *note
flycheck-check-syntax-automatically: 59.:

 -- User Option: flycheck -check-syntax-automatically

          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate ‘symbolp’.

     When Flycheck should check syntax automatically.

     This variable is a list of events that may trigger syntax checks.
     The following events are known:

     ‘`save'’
          Check syntax immediately after the buffer was saved.

     ‘`idle-change'’
          Check syntax a short time (see *note ‘flycheck-idle-change-delay’: 58.)
          after the last change to the buffer.

     ‘`new-line'’
          Check syntax immediately after a new line was inserted into
          the buffer.

     ‘`mode-enabled'’
          Check syntax immediately when *note ‘flycheck-mode’: 54. is enabled.

     Flycheck performs a syntax checks only on events, which are
     contained in this list.  For instance, if the value of this
     variable is ‘(mode-enabled save)’, Flycheck will only check if
     the mode is enabled or the buffer was saved, but never after
     changes to the buffer contents.

     If nil, never check syntax automatically.  In this case, use
     *note ‘flycheck-buffer’: 47. to start a syntax check manually.

     This user option was introduced, or its default value was changed,
     in version 0.12 of the flycheck package.

 -- User Option: flycheck -idle-change-delay

          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate ‘numberp’.

     How many seconds to wait before checking syntax automatically.

     After the buffer was changed, Flycheck will wait as many seconds
     as the value of this variable before starting a syntax check.  If
     the buffer is modified during this time, Flycheck will wait
     again.

     This variable has no effect, if ‘`idle-change'’ is not contained in
     *note ‘flycheck-check-syntax-automatically’: 59.

     This user option was introduced, or its default value was changed,
     in version 0.13 of the flycheck package.

You can also always check the current buffer manually:

 -- Command: C -c ! c
 -- Command: M -x flycheck-buffer

     Check syntax in the current buffer.

     The syntax checker used for the syntax check is cached in
     ‘`flycheck-last-checker'’ and re-used for the next check, if
     possible.

     Note: If syntax checking does not work, check your setup:

      -- Command: C -c ! v
      -- Command: M -x flycheck-verify-setup

          Check whether Flycheck can be used in this buffer.

          Display a new buffer listing all syntax checkers that could be
          applicable in the current buffer.  For each syntax checkers,
          possible problems are shown.

During syntax checks, Flycheck generates some temporary files for syntax
checker input and output.  Use *note flycheck-temp-prefix: 5b. to change
the prefix of these temporary files:

 -- User Option: flycheck -temp-prefix

          Variable properties: This variable may be risky if used as a
          file-local variable.

     Prefix for temporary files created by Flycheck.

     This user option was introduced, or its default value was changed,
     in version 0.19 of the flycheck package.


File: flycheck.info,  Node: Selecting syntax checkers,  Next: Configuring syntax checkers,  Prev: Checking buffers,  Up: Usage

5.3 Selecting syntax checkers
=============================

Whenever it checks a buffer, Flycheck selects a *note suitable syntax
checker: 53. from *note flycheck-checkers: 5e.:

 -- User Option: flycheck -checkers

          Variable properties: This variable may be risky if used as a
          file-local variable.

     Syntax checkers available for automatic selection.

     A list of Flycheck syntax checkers to choose from when syntax
     checking a buffer.  Flycheck will automatically select a suitable
     syntax checker from this list, unless *note ‘flycheck-checker’: 23. is set,
     either directly or with *note ‘flycheck-select-checker’: 24.

     You should not need to change this variable normally.  In order
     to disable syntax checkers, please use
     *note ‘flycheck-disabled-checkers’: 5f.  This variable is intended for 3rd
     party extensions to tell Flycheck about new syntax checkers.

     Syntax checkers in this list must be defined with
     *note ‘flycheck-define-checker’: 19.

     An item in this list is a *note registered syntax checker: 60.

To disable a *note registered syntax checker: 60, add it to *note
flycheck-disabled-checkers: 5f.:

 -- User Option: flycheck -disabled-checkers

          Variable properties: Automatically becomes buffer-local when
          set.  This variable is safe as a file local variable if its
          value satisfies the predicate *note flycheck-symbol-list-p:
          61.

     Syntax checkers excluded from automatic selection.

     A list of Flycheck syntax checkers to exclude from automatic
     selection.  Flycheck will never automatically select a syntax
     checker in this list, regardless of the value of
     *note ‘flycheck-checkers’: 5e.

     However, syntax checkers in this list are still available for
     manual selection with *note ‘flycheck-select-checker’: 24.

     Use this variable to disable syntax checkers, instead of removing
     the syntax checkers from *note ‘flycheck-checkers’: 5e.  You may also use
     this option as a file or directory local variable to disable
     specific checkers in individual files and directories
     respectively.

     This user option was introduced, or its default value was changed,
     in version 0.16 of the flycheck package.

A syntax checker in *note flycheck-checkers: 5e. that is *not* in *note
flycheck-disabled-checkers: 5f. is an *note enabled syntax checker: 62.

Flycheck starts to check the current buffer with the first enabled and
suitable syntax checker from *note flycheck-checkers: 5e.  See
‘Languages and syntax checkers’ for a list of all available syntax
checkers.  If there is no enabled and suitable checker for the current,
Flycheck does not check this buffer.  It does *not* signal an error.
Instead a special mode line indicator informs about this state.  See
*note Mode line reporting: 63. for details.

You can also force Flycheck to use a specific syntax checker for the
current buffer with *note flycheck-select-checker: 24.:

 -- Command: C -c ! s
 -- Command: M -x flycheck-select-checker

     Select the syntax checker for the current buffer by setting *note
     flycheck-checker: 23, and run a syntax check with the new syntax
     checker.

     Prompt for a syntax checker and set *note flycheck-checker: 23.

     Any *note syntax checker: 64. can be selected with this command,
     regardless of whether it is enabled.

 -- Command: C -u C-c ! s

 -- Command: C -u M-x flycheck-select-checker

     Deselect the current syntax checker, and run a syntax check with an
     automatically selected syntax checker.

     Set *note flycheck-checker: 23. to ‘nil’.

 -- Function: flycheck -select-checker checker

     Select CHECKER for the current buffer.

     CHECKER is a syntax checker symbol (see *note ‘flycheck-checkers’: 5e.) or
     nil.  In the former case, use CHECKER for the current buffer,
     otherwise deselect the current syntax checker (if any) and use
     automatic checker selection via *note ‘flycheck-checkers’: 5e.

     If called interactively prompt for CHECKER.  With prefix arg
     deselect the current syntax checker and enable automatic
     selection again.

     Set *note ‘flycheck-checker’: 23. to CHECKER and automatically start a new
     syntax check if the syntax checker changed.

     CHECKER will be used, even if it is not contained in
     *note ‘flycheck-checkers’: 5e, or if it is disabled via
     *note ‘flycheck-disabled-checkers’: 5f.

You can change the completion system used by *note
flycheck-select-checker: 24.:

 -- User Option: flycheck -completion-system

     The completion system to use.

     ‘`ido'’
          Use IDO.

          IDO is a built-in alternative completion system, without
          good flex matching and a powerful UI.  You may want to
          install flx-ido (see URL ‘https://github.com/lewang/flx’(1)) to
          improve the flex matching in IDO.

     ‘`grizzl'’
          Use Grizzl.

          Grizzl is an alternative completion system with powerful
          flex matching, but a very limited UI.  See URL
          ‘https://github.com/d11wtq/grizzl’(2).

     nil
          Use the standard unfancy ‘`completing-read'’.

          ‘`completing-read'’ has a very simple and primitive UI, and
          does not offer flex matching.  This is the default setting,
          though, to match Emacs’ defaults.  With this system, you may
          want enable option ‘`icomplete-mode'’ to improve the display
          of completion candidates at least.

     This user option was introduced, or its default value was changed,
     in version 0.17 of the flycheck package.

*note flycheck-select-checker: 24. sets the local variable *note
flycheck-checker: 23. for the current buffer.  You can also set this
variable explicitly, via *note (emacs)File Variables:: or *note
(emacs)Directory Variables::, to enforce a specific syntax checker per
file or per directory:

 -- Variable: flycheck -checker

          Variable properties: Automatically becomes buffer-local when
          set.  This variable is safe as a file local variable if its
          value satisfies the predicate *note
          flycheck-registered-checker-p: 66.

     Syntax checker to use for the current buffer.

     If unset or nil, automatically select a suitable syntax checker
     from *note ‘flycheck-checkers’: 5e. on every syntax check.

     If set to a syntax checker only use this syntax checker and never
     select one from *note ‘flycheck-checkers’: 5e. automatically.  The syntax
     checker is used regardless of whether it is contained in
     *note ‘flycheck-checkers’: 5e. or *note ‘flycheck-disabled-checkers’: 5f.  If the
     syntax checker is unusable in the current buffer an error is
     signaled.

     A syntax checker assigned to this variable must be defined with
     *note ‘flycheck-define-checker’: 19.

     Use the command *note ‘flycheck-select-checker’: 24. to select a syntax
     checker for the current buffer, or set this variable as file
     local variable to always use a specific syntax checker for a
     file.  See Info Node *note (emacs)Specifying File Variables:: for more
     information about file variables.

Like everything else in Emacs, a syntax checker has online
documentation, which you can via with *note flycheck-describe-checker:
3a.:

 -- Command: C -c ! ?
 -- Command: M -x flycheck-describe-checker

     Show the documentation of a syntax checker.

   ---------- Footnotes ----------

   (1) https://github.com/lewang/flx

   (2) https://github.com/d11wtq/grizzl


File: flycheck.info,  Node: Configuring syntax checkers,  Next: Error reporting,  Prev: Selecting syntax checkers,  Up: Usage

5.4 Configuring syntax checkers
===============================

* Menu:

* Syntax checker executables:: 
* Syntax checker options:: 
* Syntax checker configuration files:: 


File: flycheck.info,  Node: Syntax checker executables,  Next: Syntax checker options,  Up: Configuring syntax checkers

5.4.1 Syntax checker executables
--------------------------------

For each syntax checker, there is a buffer-local, customizable variable
‘flycheck-CHECKER-executable’, where CHECKER is the name of the syntax
checker.

The value of this variable is either nil, or a string.  In the former
case, Flycheck uses the default executable from the syntax checker
definition when executing the syntax checker.  In the latter case, it
uses the value of the variable as executable.

Use these variables to override the executable from the definition per
buffer.  For instance, you could use a different Emacs version with the
‘emacs-lisp’ or ‘emacs-lisp-checkdoc’.

You can either set these variables directly in your ‘init.el’, or change
them interactively:

 -- Command: C -c ! e
 -- Command: M -x flycheck-set-checker-executable

     Set the executable of a syntax checker in the current buffer.

     Prompt for a syntax checker and an executable file, and set the
     executable variable of the syntax checker.

 -- Command: C -u C-c ! e

 -- Command: C -u M-x flycheck-set-checker-executable

     Reset the executable of a syntax checker in the current buffer.

     Prompt for a syntax checker and reset its executable to the
     default.


File: flycheck.info,  Node: Syntax checker options,  Next: Syntax checker configuration files,  Prev: Syntax checker executables,  Up: Configuring syntax checkers

5.4.2 Syntax checker options
----------------------------

Some syntax checkers can be configured via options.  See *note Supported
languages: 39. for a complete list of options for each syntax checkers.

All options are customizable via ‘M-x customize-group RET
flycheck-options’, and automatically buffer-local to easily set them in
hooks.

Options are mainly intended to be used by *note extensions: b, and via
File or Directory Local variables.  See *note (emacs)File Variables::
and *note (emacs)Directory Variables:: respectively.


File: flycheck.info,  Node: Syntax checker configuration files,  Prev: Syntax checker options,  Up: Configuring syntax checkers

5.4.3 Syntax checker configuration files
----------------------------------------

Some syntax checkers also read configuration files, denoted by
associated _configuration file variables_.  See *note Supported
languages: 39. of these variables.

All options are customizable via ‘M-x customize-group RET
flycheck-config-files’, and automatically buffer-local to easily set
them in hooks.  You may also set them via File or Directory Local
variables.  See *note (emacs)File Variables:: and *note (emacs)Directory
Variables:: respectively.

When set to a string, Flycheck tries to locate the configuration file
using the functions in *note flycheck-locate-config-file-functions: 6d.
and passes the name of the file to the syntax checker:

 -- User Option: flycheck -locate-config-file-functions

          Variable properties: This variable may be risky if used as a
          file-local variable.

     Functions to locate syntax checker configuration files.

     Each function in this hook must accept two arguments: The value
     of the configuration file variable, and the syntax checker
     symbol.  It must return either a string with an absolute path to
     the configuration file, or nil, if it cannot locate the
     configuration file.

     The functions in this hook are called in order of appearance, until a
     function returns non-nil.  The configuration file returned by that
     function is then given to the syntax checker if it exists.

     This variable is an abnormal hook.  See Info
     node *note (elisp)Hooks::.

With the default value of this variable, configuration files are located
by the following algorithm:

  1. If the configuration file variable contains a path a directory
     separator, expand the path against the buffer’s default directory
     and use the resulting path as configuration file.

  2. If the buffer has a file name, search the buffer’s directory and
     any ancestors thereof for the configuration file.

  3. Eventually attempt to locate the configuration file in the user’s
     home directory.

If any of these steps succeeds, the subsequent steps are not executed.


File: flycheck.info,  Node: Error reporting,  Next: Listing errors,  Prev: Configuring syntax checkers,  Up: Usage

5.5 Error reporting
===================

When a syntax check in the current buffer has finished, Flycheck
highlights the locations of errors and warnings in the buffer according
to *note flycheck-highlighting-mode: 6f, and indicates these locations
in the fringe according to *note flycheck-indication-mode: 70.
Additionally it shows the number of errors and warnings in the mode
line.

     Note: To avoid flooding the buffer with excessive errors, Flycheck
     discards errors and warnings and *disables* the corresponding
     syntax checker subsequently, if the total number of reported errors
     of any level exceeds *note flycheck-checker-error-threshold: 71.:

      -- User Option: flycheck -checker-error-threshold

               Variable properties: This variable may be risky if used
               as a file-local variable.

          Maximum errors allowed per syntax checker.

          The value of this variable is either an integer denoting the
          maximum number of errors per syntax checker and buffer, or nil to
          not limit the errors reported from a syntax checker.

          If this variable is a number and a syntax checker reports more
          errors than the value of this variable, its errors are not
          discarded, and not highlighted in the buffer or available in the
          error list.  The affected syntax checker is also disabled for
          future syntax checks of the buffer.

          This user option was introduced, or its default value was
          changed, in version 0.22 of the flycheck package.

 -- User Option: flycheck -highlighting-mode

          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate ‘symbolp’.

     The highlighting mode for Flycheck errors and warnings.

     The highlighting mode controls how Flycheck highlights errors in
     buffers.  The following modes are known:

     ‘`columns'’
          Highlight the error column.  If the error does not have a column,
          highlight the whole line.

     ‘`symbols'’
          Highlight the symbol at the error column, if there is any,
          otherwise behave like ‘`columns'’.  This is the default.

     ‘`sexps'’
          Highlight the expression at the error column, if there is
          any, otherwise behave like ‘`columns'’.  Note that this mode
          can be *very* slow in some major modes.

     ‘`lines'’
          Highlight the whole line.

     nil
          Do not highlight errors at all.  However, errors will still
          be reported in the mode line and in error message popups,
          and indicated according to *note ‘flycheck-indication-mode’: 70.

     This user option was introduced, or its default value was changed,
     in version 0.14 of the flycheck package.

 -- Face: flycheck -error
 -- Face: flycheck -warning
 -- Face: flycheck -info

     The faces to use to highlight errors, warnings and info messages
     respectively.

          Note: The default faces provided by GNU Emacs are ill-suited
          to highlight errors because these are relatively pale and do
          not specify a background color or underline.  Hence highlights
          are easy to overlook and even *invisible* for white space.

     For best error highlighting customize these faces, or choose a
     color theme that has reasonable Flycheck faces.  The popular
     Solarized(1) and Zenburn(2) themes are known to have good Flycheck
     faces.

 -- User Option: flycheck -indication-mode

          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate ‘symbolp’.

     The indication mode for Flycheck errors and warnings.

     This variable controls how Flycheck indicates errors in buffers.
     May either be ‘`left-fringe'’, ‘`right-fringe'’, or nil.

     If set to ‘`left-fringe'’ or ‘`right-fringe'’, indicate errors and
     warnings via icons in the left and right fringe respectively.

     If set to nil, do not indicate errors and warnings, but just
     highlight them according to *note ‘flycheck-highlighting-mode’: 6f.

 -- Face: flycheck -fringe-error
 -- Face: flycheck -fringe-warning
 -- Face: flycheck -fringe-info

     The faces of fringe indicators for errors, warnings and info
     messages respectively.

If you hover a highlighted error with the mouse, a tooltip with the
top-most error message is shown.  Alternatively, you can move the point
onto an error location to see the error message.  Flycheck displays
errors at point after a short delay:

 -- User Option: flycheck -display-errors-delay

          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate ‘numberp’.

     Delay in seconds before displaying errors at point.

     Use floating point numbers to express fractions of seconds.

     This user option was introduced, or its default value was changed,
     in version 0.15 of the flycheck package.

By default, Flycheck shows the messages and IDs of the errors at point
in the minibuffer, but this behaviour is entirely customizable via the
*note flycheck-display-errors-function: 2b. option:

 -- User Option: flycheck -display-errors-function

          Variable properties: This variable may be risky if used as a
          file-local variable.

     Function to display error messages.

     If set to a function, call the function with the list of errors
     to display as single argument.  Each error is an instance of the
     ‘`flycheck-error'’ struct.

     If set to nil, do not display errors at all.

     Flycheck provides two built-in functions for this option:

      -- Function: flycheck -display-error-messages errors

          Display the messages of ERRORS.

          Concatenate all non-nil messages of ERRORS separated by empty
          lines, and display them with ‘`display-message-or-buffer'’, which
          shows the messages either in the echo area or in a separate
          buffer, depending on the number of lines.  See Info
          node *note (elisp)Displaying Messages:: for more information.

          In the latter case, show messages in
          ‘`flycheck-error-message-buffer'’.

      -- Function: flycheck -display-error-messages-unless-error-list
               errors

          Show messages of ERRORS unless the error list is visible.

          Like *note ‘flycheck-display-error-messages’: 79, but only if the error
          list (see *note ‘flycheck-list-errors’: 4b.) is not visible in any window in
          the current frame.

          See also
..................

          *note Listing errors: 7b.

     See also
.............

     The flycheck-pos-tip(3) extension provides a display function to
     show errors at point in a graphical popup.

     This user option was introduced, or its default value was changed,
     in version 0.13 of the flycheck package.

You can clear all errors in the current buffer with *note
flycheck-clear: 7c.:

 -- Command: C -c ! C
 -- Command: M -x flycheck-clear

     Clear all Flycheck errors and warnings in the current buffer.

     You should not normally need this command, because Flycheck checks
     the buffer periodically anyway.

   ---------- Footnotes ----------

   (1) https://github.com/bbatsov/solarized-emacs

   (2) https://github.com/bbatsov/zenburn-emacs

   (3) https://github.com/flycheck/flycheck-pos-tip


File: flycheck.info,  Node: Listing errors,  Next: Copying killing errors,  Prev: Error reporting,  Up: Usage

5.6 Listing errors
==================

To view all errors in the current buffer, pop up the error list with
*note flycheck-list-errors: 4b.:

 -- Command: C -c ! l
 -- Command: M -x flycheck-list-errors

     List all errors in the current buffer in a separate buffer.

     The error list automatically refreshes after a syntax check, and
     follows the current buffer and window, that is, if you switch to
     another buffer or window, the error list is updated to show the
     errors of the new buffer or window.

Every time the error list refreshes, *note
flycheck-error-list-after-refresh-hook: 7e. is run:

 -- Hook: flycheck -error-list-after-refresh-hook

          Variable properties: This variable may be risky if used as a
          file-local variable.

     Functions to run after the error list was refreshed.

     This hook is run whenever the error list is refreshed.

     This variable is a normal hook.  See Info node *note (elisp)Hooks::.

     This hook was introduced, or its default value was changed, in
     version 0.21 of the flycheck package.

When you move the point in the current buffer while the error list is
visible, all errors on the current line are highlighted in the error
list with *note flycheck-error-list-highlight: 7f.:

 -- Face: flycheck -error-list-highlight

     Flycheck face to highlight errors in the error list.

     This face was introduced, or its default value was changed, in
     version 0.15 of the flycheck package.

You can customize the appearance of the line and column numbers and of
the syntax checker name:

 -- Face: flycheck -error-list-line-number

     Face for line numbers in the error list.

     This face was introduced, or its default value was changed, in
     version 0.16 of the flycheck package.

 -- Face: flycheck -error-list-column-number

     Face for line numbers in the error list.

     This face was introduced, or its default value was changed, in
     version 0.16 of the flycheck package.

 -- Face: flycheck -error-list-checker-name

     Face for the syntax checker name in the error list.

     This face was introduced, or its default value was changed, in
     version 0.21 of the flycheck package.


File: flycheck.info,  Node: Copying killing errors,  Next: Navigating and jumping to errors,  Prev: Listing errors,  Up: Usage

5.7 Copying (killing) errors
============================

Frequently, it’s convenient to not only see the error messages, but to
also copy them into the kill ring:

 -- Command: C -c ! C-w
 -- Command: M -x flycheck-copy-errors-as-kill

     Copy all Flycheck error messages at the current point into kill
     ring.

     Each error message is killed separately, so you can use ‘M-y’ to
     cycle among the killed messages after yanking the first one with
     ‘C-y’.

 -- Command: C -u C-c ! C-w

 -- Command: C -u M-x flycheck-copy-errors-as-kill

     Copy all Flycheck error messages *and their IDs* at the current
     point into kill ring.

 -- Command: M -0 C-c ! C-w

 -- Command: M -0 M-x flycheck-copy-errors-as-kill

     Copy all Flycheck error *IDs* at the current point into kill ring.
     This command is particularly handy to copy an ID in order to add an
     inline suppression comment.


File: flycheck.info,  Node: Navigating and jumping to errors,  Next: Mode line reporting,  Prev: Copying killing errors,  Up: Usage

5.8 Navigating and jumping to errors
====================================

By default, Flycheck integrates into standard error navigation commands
of Emacs: ‘M-g n’ (‘next-error’) and ‘M-g p’ (‘previous-error’) will
navigate between Flycheck warnings and errors in the current buffer.
See *note (emacs)Compilation Mode:: for more information about these
commands.

     Note: *Visible* compilation buffers (e.g.  from ‘M-x compile’, ‘M-x
     grep’, ‘M-x occur’, etc.)  take precedence over Flycheck’s error
     navigation.

If you find this integration annoying and would rather keep ‘M-g n’
confined to compilation buffers, you may disable it by setting *note
flycheck-standard-error-navigation: 88. to nil and re-enabling *note
flycheck-mode: 54. afterwards:

 -- User Option: flycheck -standard-error-navigation

          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate ‘booleanp’.

     Whether to support error navigation with ‘`next-error'’.

     If non-nil, enable navigation of Flycheck errors with
     ‘`next-error'’, ‘`previous-error'’ and ‘`first-error'’.  Otherwise,
     these functions just navigate errors from compilation modes.

     Flycheck error navigation with *note ‘flycheck-next-error’: 49,
     *note ‘flycheck-previous-error’: 4a. and *note ‘flycheck-first-error’: 89. is always
     enabled, regardless of the value of this variable.

     Note that this setting only takes effect when *note ‘flycheck-mode’: 54. is
     enabled.  Changing it will not affect buffers which already have
     *note ‘flycheck-mode’: 54. enabled.

     This user option was introduced, or its default value was changed,
     in version 0.15 of the flycheck package.

Since compilation buffers take precedence, Flycheck provides an
independent set of navigation commands which always navigate Flycheck
errors regardless of compilation buffers or *note
flycheck-standard-error-navigation: 88.:

 -- Command: C -c ! n
 -- Command: M -x flycheck-next-error

     Jump to the next Flycheck error.

     With prefix argument, jump forwards by as many errors as specified
     by the prefix argument, e.g.  ‘M-3 C-c ! n’ will move to the 3rd
     error from the current point.

 -- Command: C -c ! p
 -- Command: M -x flycheck-previous-error

     Jump to the previous Flycheck error.

     With prefix argument, jump backwards by as many errors as specified
     by the prefix argument, e.g.  ‘M-3 C-c ! p’ will move to the 3rd
     previous error from the current point.

 -- Command: M -x flycheck-first-error

     Jump to the first Flycheck error.

     With prefix argument, jump forwards to by as many errors as
     specified by the prefix argument, e.g.  ‘M-3 M-x
     flycheck-first-error’ moves to the 3rd error from the beginning of
     the buffer.

If *note flycheck-standard-error-navigation: 88. is ‘nil’, these
commands are the only way to navigate Flycheck errors.

By default, Flycheck’s error navigation considers all error levels.  You
can specify a threshold for navigation with *note
flycheck-navigation-minimum-level: 8a.:

 -- User Option: flycheck -navigation-minimum-level

          Variable properties: This variable is safe as a file local
          variable if its value satisfies the predicate *note
          flycheck-error-level-p: 8b.

     The minimum level of errors to navigate.

     If set to an error level, only navigate errors whose error level
     is at least as severe as this one.  If nil, navigate all errors.

     This user option was introduced, or its default value was changed,
     in version 0.21 of the flycheck package.


File: flycheck.info,  Node: Mode line reporting,  Prev: Navigating and jumping to errors,  Up: Usage

5.9 Mode line reporting
=======================

Flycheck always indicates its state in the mode line:

‘FlyC’

     There are no errors in the current buffer.

‘FlyC*’

     A syntax check is being performed currently.

‘FlyC:3/4’

     There are three errors and four warnings in the current buffer.

‘FlyC-’

     Automatic syntax checker selection did not find a suitable syntax
     checker.  See *note Selecting syntax checkers: 5d. for more
     information.

‘FlyC!’

     The syntax check failed.  Inspect the ‘*Messages*’ buffer for
     details.

‘FlyC?’

     The syntax check had a dubious result.  The definition of the
     syntax checker may be flawed.  Inspect the ‘*Messages*’ buffer for
     details.

     This indicator should *never* be displayed for built-in syntax
     checkers.  If it is, please report an issue to the Flycheck
     developers, as by *note Reporting issues: 8d.

Change *note flycheck-mode-line: 8e. to customize the mode line
reporting:

 -- User Option: flycheck -mode-line

          Variable properties: This variable may be risky if used as a
          file-local variable.

     Mode line lighter for Flycheck.

     The value of this variable is a mode line template as in
     ‘`mode-line-format'’.  See Info Node *note (elisp)Mode Line Format:: for
     more information.  Note that it should contain a _single_ mode
     line construct only.

     Customize this variable to change how Flycheck reports its status
     in the mode line.  You may use *note ‘flycheck-mode-line-status-text’: 8f.
     to obtain a human-readable status text, including an
     error/warning count.

     You may also assemble your own status text.  The current status
     of Flycheck is available in *note ‘flycheck-last-status-change’: 90.  The
     errors in the current buffer are stored in
     *note ‘flycheck-current-errors’: 91, and the function
     *note ‘flycheck-count-errors’: 92. may be used to obtain the number of
     errors grouped by error level.

     Set this variable to nil to disable the mode line completely.

     This user option was introduced, or its default value was changed,
     in version 0.20 of the flycheck package.

See also
........

The flycheck-color-mode-line(1) extension changes the background colour
of the mode line according to the result of the last syntax check.

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck-color-mode-line


File: flycheck.info,  Node: Supported languages,  Next: Glossary,  Prev: Usage,  Up: Top

6 Supported languages
*********************

Flycheck supports the following 44 languages with 74 syntax checkers.

Each language has one or more syntax checkers, whose names follow a
‘LANGUAGE-TOOL’ convention, where LANGUAGE is the programming language
supported by this syntax checker, and TOOL the specific syntax checker
tool.

There are some 3rd party extensions which add support for more
languages:

   - flycheck-ledger(1) adds a syntax checker for the Ledger(2)
     accounting tool.

   - flycheck-mercury(3) adds a syntax checker for the Mercury(4)
     language.

   - flycheck-ocaml(5) adds a syntax checker for OCaml, using the
     Merlin(6) tool.

* Menu:

* Ada:: 
* AsciiDoc:: 
* C/C++:: 
* CFEngine:: 
* Chef:: 
* Coffeescript:: 
* Coq:: 
* CSS:: 
* D:: 
* Elixir:: 
* Emacs Lisp:: 
* Erlang:: 
* ERuby:: 
* Fortran:: 
* Go:: 
* Haml:: 
* Handlebars:: 
* Haskell:: 
* HTML:: 
* Javascript:: 
* JSON:: 
* LESS:: 
* Lua:: 
* Make:: 
* Perl:: 
* PHP:: 
* Puppet:: 
* Python:: 
* R:: 
* Racket:: 
* RPM SPEC:: 
* ReStructuredText:: 
* Ruby:: 
* Rust:: 
* Sass:: 
* Scala:: 
* Scss:: 
* Shell script languages:: 
* Slim:: 
* TeX/LaTeX:: 
* Texinfo:: 
* Verilog:: 
* XML:: 
* YAML:: 

   ---------- Footnotes ----------

   (1) https://github.com/purcell/flycheck-ledger

   (2) http://ledger-cli.org/

   (3) https://github.com/flycheck/flycheck-mercury

   (4) http://mercurylang.org/

   (5) https://github.com/flycheck/flycheck-ocaml

   (6) https://github.com/the-lambda-church/merlin


File: flycheck.info,  Node: Ada,  Next: AsciiDoc,  Up: Supported languages

6.1 Ada
=======

 -- Flycheck Syntax Checker: ada -gnat

     An Ada syntax checker using GNAT.

     Uses the GNAT compiler from GCC.  See URL
     ‘https://gcc.gnu.org/onlinedocs/gnat_ugn_unw/’(1).

     Options
............

      -- User Option: flycheck -gnat-args

          A list of additional arguments for Symbol(’ada-gnat’).

          The value of this variable is a list of strings with additional
          command line arguments.

          This variable is an option for the syntax checker ‘`ada-gnat'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -gnat-include-path

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of include directories for GNAT.

          The value of this variable is a list of strings, where each
          string is a directory to add to the include path of gcc.
          Relative paths are relative to the file being checked.

          This variable is an option for the syntax checker ‘`ada-gnat'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -gnat-language-standard

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          The language standard to use in GNAT.

          The value of this variable is either a string denoting a language
          standard, or nil, to use the default standard. When non-nil, pass
          the language standard via the ‘`-std'’ option.

          This variable is an option for the syntax checker ‘`ada-gnat'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -gnat-warnings

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of additional Ada warnings to enable in GNAT.

          The value of this variable is a list of strings, where each
          string is the name of a warning category to enable. By default,
          most optional warnings are recommended, as in ‘`-gnata'’.

          Refer to Info Node *note (gnat_ugn_unw)Warning Message Control:: for
          more information about GNAT warnings.

          This variable is an option for the syntax checker ‘`ada-gnat'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

   ---------- Footnotes ----------

   (1) https://gcc.gnu.org/onlinedocs/gnat_ugn_unw/


File: flycheck.info,  Node: AsciiDoc,  Next: C/C++,  Prev: Ada,  Up: Supported languages

6.2 AsciiDoc
============

 -- Flycheck Syntax Checker: asciidoc

     A AsciiDoc syntax checker using the AsciiDoc compiler.

     See URL ‘http://www.methods.co.nz/asciidoc’(1).

   ---------- Footnotes ----------

   (1) http://www.methods.co.nz/asciidoc


File: flycheck.info,  Node: C/C++,  Next: CFEngine,  Prev: AsciiDoc,  Up: Supported languages

6.3 C/C++
=========

 -- Flycheck Syntax Checker: c/c++ -clang

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note c/c++-cppcheck: a1, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A C/C++ syntax checker using Clang.

     See URL ‘http://clang.llvm.org/’(1).

     Options
............

      -- User Option: flycheck -clang-args

          A list of additional arguments for Symbol(’c/c++-clang’).

          The value of this variable is a list of strings with additional
          command line arguments.

          This variable is an option for the syntax checker ‘`c/c++-clang'’.

          This user option was introduced, or its default value was
          changed, in version 0.22 of the flycheck package.

      -- User Option: flycheck -clang-blocks

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Enable blocks in Clang.

          When non-nil, enable blocks in Clang with ‘`-fblocks'’.  See URL
          ‘http://clang.llvm.org/docs/BlockLanguageSpec.html’(2) for more
          information about blocks.

          This variable is an option for the syntax checker ‘`c/c++-clang'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -clang-definitions

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          Additional preprocessor definitions for Clang.

          The value of this variable is a list of strings, where each
          string is an additional definition to pass to Clang, via the ‘`-D'’
          option.

          This variable is an option for the syntax checker ‘`c/c++-clang'’.

          This user option was introduced, or its default value was
          changed, in version 0.15 of the flycheck package.

      -- User Option: flycheck -clang-include-path

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of include directories for Clang.

          The value of this variable is a list of strings, where each
          string is a directory to add to the include path of Clang.
          Relative paths are relative to the file being checked.

          This variable is an option for the syntax checker ‘`c/c++-clang'’.

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.

      -- User Option: flycheck -clang-includes

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of additional include files for Clang.

          The value of this variable is a list of strings, where each
          string is a file to include before syntax checking.  Relative
          paths are relative to the file being checked.

          This variable is an option for the syntax checker ‘`c/c++-clang'’.

          This user option was introduced, or its default value was
          changed, in version 0.15 of the flycheck package.

      -- User Option: flycheck -clang-language-standard

               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local variable
               if its value satisfies the predicate ‘stringp’.

          The language standard to use in Clang.

          The value of this variable is either a string denoting a language
          standard, or nil, to use the default standard.  When non-nil,
          pass the language standard via the ‘`-std'’ option.

          This variable is an option for the syntax checker ‘`c/c++-clang'’.

          This user option was introduced, or its default value was
          changed, in version 0.15 of the flycheck package.

      -- User Option: flycheck -clang-ms-extensions

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to enable Microsoft extensions to C/C++ in Clang.

          When non-nil, enable Microsoft extensions to C/C++ via
          ‘`-fms-extensions'’.

          This variable is an option for the syntax checker ‘`c/c++-clang'’.

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.

      -- User Option: flycheck -clang-no-exceptions

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to disable exceptions in Clang.

          When non-nil, disable exceptions for syntax checks, via
          ‘`-fno-exceptions'’.

          This variable is an option for the syntax checker ‘`c/c++-clang'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -clang-no-rtti

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to disable RTTI in Clang.

          When non-nil, disable RTTI for syntax checks, via ‘`-fno-rtti'’.

          This variable is an option for the syntax checker ‘`c/c++-clang'’.

          This user option was introduced, or its default value was
          changed, in version 0.15 of the flycheck package.

      -- User Option: flycheck -clang-standard-library

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          The standard library to use for Clang.

          The value of this variable is the name of a standard library as
          string, or nil to use the default standard library.

          Refer to the Clang manual at URL
          ‘http://clang.llvm.org/docs/UsersManual.html’(3) for more
          information about the standard library.

          This variable is an option for the syntax checker ‘`c/c++-clang'’.

          This user option was introduced, or its default value was
          changed, in version 0.15 of the flycheck package.

      -- User Option: flycheck -clang-warnings

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of additional warnings to enable in Clang.

          The value of this variable is a list of strings, where each string
          is the name of a warning category to enable.  By default, all
          recommended warnings and some extra warnings are enabled (as by
          ‘`-Wall'’ and ‘`-Wextra'’ respectively).

          Refer to the Clang manual at URL
          ‘http://clang.llvm.org/docs/UsersManual.html’(4) for more
          information about warnings.

          This variable is an option for the syntax checker ‘`c/c++-clang'’.

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.

 -- Flycheck Syntax Checker: c/c++ -gcc

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note c/c++-cppcheck: a1, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A C/C++ syntax checker using GCC.

     Requires GCC 4.8 or newer.  See URL ‘https://gcc.gnu.org/’(5).

     Options
............

      -- User Option: flycheck -gcc-args

          A list of additional arguments for Symbol(’c/c++-gcc’).

          The value of this variable is a list of strings with additional
          command line arguments.

          This variable is an option for the syntax checker ‘`c/c++-gcc'’.

          This user option was introduced, or its default value was
          changed, in version 0.22 of the flycheck package.

      -- User Option: flycheck -gcc-definitions

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          Additional preprocessor definitions for GCC.

          The value of this variable is a list of strings, where each
          string is an additional definition to pass to GCC, via the ‘`-D'’
          option.

          This variable is an option for the syntax checker ‘`c/c++-gcc'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -gcc-include-path

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of include directories for GCC.

          The value of this variable is a list of strings, where each
          string is a directory to add to the include path of gcc.
          Relative paths are relative to the file being checked.

          This variable is an option for the syntax checker ‘`c/c++-gcc'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -gcc-includes

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of additional include files for GCC.

          The value of this variable is a list of strings, where each
          string is a file to include before syntax checking.  Relative
          paths are relative to the file being checked.

          This variable is an option for the syntax checker ‘`c/c++-gcc'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -gcc-language-standard

               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local variable
               if its value satisfies the predicate ‘stringp’.

          The language standard to use in GCC.

          The value of this variable is either a string denoting a language
          standard, or nil, to use the default standard.  When non-nil,
          pass the language standard via the ‘`-std'’ option.

          This variable is an option for the syntax checker ‘`c/c++-gcc'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -gcc-no-exceptions

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to disable exceptions in GCC.

          When non-nil, disable exceptions for syntax checks, via
          ‘`-fno-exceptions'’.

          This variable is an option for the syntax checker ‘`c/c++-gcc'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -gcc-no-rtti

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to disable RTTI in GCC.

          When non-nil, disable RTTI for syntax checks, via ‘`-fno-rtti'’.

          This variable is an option for the syntax checker ‘`c/c++-gcc'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -gcc-openmp

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to enable OpenMP in GCC.

          When non-nil, enable OpenMP for syntax checkers, via
          ‘`-fopenmp'’.

          This variable is an option for the syntax checker ‘`c/c++-gcc'’.

          This user option was introduced, or its default value was
          changed, in version 0.21 of the flycheck package.

      -- User Option: flycheck -gcc-warnings

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of additional warnings to enable in GCC.

          The value of this variable is a list of strings, where each string
          is the name of a warning category to enable.  By default, all
          recommended warnings and some extra warnings are enabled (as by
          ‘`-Wall'’ and ‘`-Wextra'’ respectively).

          Refer to the gcc manual at URL
          ‘https://gcc.gnu.org/onlinedocs/gcc/’(6) for more information about
          warnings.

          This variable is an option for the syntax checker ‘`c/c++-gcc'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

 -- Flycheck Syntax Checker: c/c++ -cppcheck

     A C/C++ checker using cppcheck.

     See URL ‘http://cppcheck.sourceforge.net/’(7).

     Options
............

      -- User Option: flycheck -cppcheck-checks

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          Enabled checks for Cppcheck.

          The value of this variable is a list of strings, where each
          string is the name of an additional check to enable.  By default,
          all coding style checks are enabled.

          See section "Enable message" in the Cppcheck manual at URL
          ‘http://cppcheck.sourceforge.net/manual.pdf’(8), and the
          documentation of the ‘`--enable'’ option for more information,
          including a list of supported checks.

          This variable is an option for the syntax checker ‘`c/c++-cppcheck'’.

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.

      -- User Option: flycheck -cppcheck-inconclusive

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to enable Cppcheck inconclusive checks.

          When non-nil, enable Cppcheck inconclusive checks.  This allows Cppcheck to
          report warnings it’s not certain of, but it may result in false positives.

          This will have no effect when using Cppcheck 1.53 and older.

          This variable is an option for the syntax checker ‘`c/c++-cppcheck'’.

          This user option was introduced, or its default value was
          changed, in version 0.19 of the flycheck package.

See also
........

flycheck-irony(9) adds an alternative syntax checker for C, C++ and
Objective C which uses Irony Mode(10) server to check buffers.

The flycheck-google-cpplint(11) extension adds a syntax checker using
Google’s C++ style checker.

   ---------- Footnotes ----------

   (1) http://clang.llvm.org/

   (2) http://clang.llvm.org/docs/BlockLanguageSpec.html

   (3) http://clang.llvm.org/docs/UsersManual.html

   (4) http://clang.llvm.org/docs/UsersManual.html

   (5) https://gcc.gnu.org/

   (6) https://gcc.gnu.org/onlinedocs/gcc/

   (7) http://cppcheck.sourceforge.net/

   (8) http://cppcheck.sourceforge.net/manual.pdf

   (9) https://github.com/Sarcasm/flycheck-irony

   (10) https://github.com/Sarcasm/irony-mode

   (11) https://github.com/flycheck/flycheck-google-cpplint


File: flycheck.info,  Node: CFEngine,  Next: Chef,  Prev: C/C++,  Up: Supported languages

6.4 CFEngine
============

 -- Flycheck Syntax Checker: cfengine

     A CFEngine syntax checker using cf-promises.

     See URL ‘http://cfengine.com/’(1).

   ---------- Footnotes ----------

   (1) http://cfengine.com/


File: flycheck.info,  Node: Chef,  Next: Coffeescript,  Prev: CFEngine,  Up: Supported languages

6.5 Chef
========

See also
........

Chef(1)

 -- Flycheck Syntax Checker: chef -foodcritic

     A Chef cookbooks syntax checker using Foodcritic.

     See URL ‘http://acrmp.github.io/foodcritic/’(2).

   ---------- Footnotes ----------

   (1) https://www.getchef.com/chef/

   (2) http://acrmp.github.io/foodcritic/


File: flycheck.info,  Node: Coffeescript,  Next: Coq,  Prev: Chef,  Up: Supported languages

6.6 Coffeescript
================

 -- Flycheck Syntax Checker: coffee

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note coffee-coffeelint: c0, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A CoffeeScript syntax checker using coffee.

     See URL ‘http://coffeescript.org/’(1).

 -- Flycheck Syntax Checker: coffee -coffeelint

     A CoffeeScript style checker using coffeelint.

     This syntax checker requires coffeelint 1.0 or newer.

     See URL ‘http://www.coffeelint.org/’(2).

     Configuration file
.......................

      -- User Option: flycheck -coffeelintrc

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          Configuration file for ‘`coffee-coffeelint'’.

   ---------- Footnotes ----------

   (1) http://coffeescript.org/

   (2) http://www.coffeelint.org/


File: flycheck.info,  Node: Coq,  Next: CSS,  Prev: Coffeescript,  Up: Supported languages

6.7 Coq
=======

 -- Flycheck Syntax Checker: coq

     A Coq syntax checker using the Coq compiler.

     See URL ‘http://coq.inria.fr/’(1).

   ---------- Footnotes ----------

   (1) http://coq.inria.fr/


File: flycheck.info,  Node: CSS,  Next: D,  Prev: Coq,  Up: Supported languages

6.8 CSS
=======

 -- Flycheck Syntax Checker: css -csslint

     A CSS syntax and style checker using csslint.

     See URL ‘https://github.com/CSSLint/csslint’(1).

   ---------- Footnotes ----------

   (1) https://github.com/CSSLint/csslint


File: flycheck.info,  Node: D,  Next: Elixir,  Prev: CSS,  Up: Supported languages

6.9 D
=====

 -- Flycheck Syntax Checker: d -dmd

     A D syntax checker using the DMD compiler.

     Requires DMD 2.066 or newer.  See URL ‘http://dlang.org/’(1).

     Options
............

      -- User Option: flycheck -dmd-include-path

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of include directories for dmd.

          The value of this variable is a list of strings, where each
          string is a directory to add to the include path of dmd.
          Relative paths are relative to the file being checked.

          This variable is an option for the syntax checker ‘`d-dmd'’.

          This user option was introduced, or its default value was
          changed, in version 0.18 of the flycheck package.

See also
........

The flycheck-d-unittest(2) extension adds a syntax checker that runs D
unit tests on the fly.

   ---------- Footnotes ----------

   (1) http://dlang.org/

   (2) https://github.com/flycheck/flycheck-d-unittest


File: flycheck.info,  Node: Elixir,  Next: Emacs Lisp,  Prev: D,  Up: Supported languages

6.10 Elixir
===========

 -- Flycheck Syntax Checker: elixir

     An Elixir syntax checker using the Elixir interpreter.

     See URL ‘http://elixir-lang.org/’(1).

   ---------- Footnotes ----------

   (1) http://elixir-lang.org/


File: flycheck.info,  Node: Emacs Lisp,  Next: Erlang,  Prev: Elixir,  Up: Supported languages

6.11 Emacs Lisp
===============

See also
........

Emacs(1), Emacs Lisp reference(2)

 -- Flycheck Syntax Checker: emacs -lisp

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note emacs-lisp-checkdoc: ce.

          The *first* suitable syntax checker is used.

     An Emacs Lisp syntax checker using the Emacs Lisp Byte compiler.

     See Info Node *note (elisp)Byte Compilation::.

     Options
............

      -- User Option: flycheck -emacs-lisp-initialize-packages

               Variable properties: This variable may be risky if used
               as a file-local variable.

          Whether to initialize packages in the Emacs Lisp syntax checker.

          To initialize packages, call ‘`package-initialize'’ before
          byte-compiling the file to check.

          When nil, never initialize packages.  When ‘`auto'’, initialize
          packages only when checking files from ‘`user-emacs-directory'’.
          For any other non-nil value, always initialize packages.

          This variable is an option for the syntax checker ‘`emacs-lisp'’.

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.

      -- User Option: flycheck -emacs-lisp-load-path

               Variable properties: This variable may be risky if used
               as a file-local variable.

          Load path to use in the Emacs Lisp syntax checker.

          When set to ‘`inherit'’, use the ‘`load-path'’ of the current Emacs
          session during syntax checking.

          When set to a list of strings, add each directory in this list to
          the ‘`load-path'’ before invoking the byte compiler.  Relative
          paths in this list are expanded against the ‘`default-directory'’
          of the buffer to check.

          When nil, do not explicitly set the ‘`load-path'’ during syntax
          checking.  The syntax check only uses the built-in ‘`load-path'’ of
          Emacs in this case.

          Note that changing this variable can lead to wrong results of the
          syntax check, e.g. if an unexpected version of a required library
          is used.

          This variable is an option for the syntax checker ‘`emacs-lisp'’.

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.

      -- User Option: flycheck -emacs-lisp-package-user-dir

               Variable properties: This variable may be risky if used
               as a file-local variable.

          Package directory for the Emacs Lisp syntax checker.

          When set to a string, set ‘`package-user-dir'’ to the value of this
          variable before initializing packages.

          This variable has no effect, if
          *note ‘flycheck-emacs-lisp-initialize-packages’: cf. is nil.

          This variable is an option for the syntax checker ‘`emacs-lisp'’.

          This user option was introduced, or its default value was
          changed, in version 0.14 of the flycheck package.

     See also
.............

     With the flycheck-cask(3) extension this syntax checker
     automatically uses packages from Cask(4) projects.

 -- Flycheck Syntax Checker: emacs -lisp-checkdoc

     An Emacs Lisp style checker using CheckDoc.

     The checker runs ‘`checkdoc-current-buffer'’.

     See also
.............

     *note (elisp)Documentation Tips::

   ---------- Footnotes ----------

   (1) http://www.gnu.org/software/emacs/

   (2) 
http://www.gnu.org/software/emacs/manual/html_node/elisp/index.html

   (3) https://github.com/flycheck/flycheck-cask

   (4) https://github.com/cask/cask


File: flycheck.info,  Node: Erlang,  Next: ERuby,  Prev: Emacs Lisp,  Up: Supported languages

6.12 Erlang
===========

 -- Flycheck Syntax Checker: erlang

     An Erlang syntax checker using the Erlang interpreter.

     See URL ‘http://www.erlang.org/’(1).

   ---------- Footnotes ----------

   (1) http://www.erlang.org/


File: flycheck.info,  Node: ERuby,  Next: Fortran,  Prev: Erlang,  Up: Supported languages

6.13 ERuby
==========

 -- Flycheck Syntax Checker: eruby -erubis

     A eRuby syntax checker using the ‘`erubis'’ command.

     See URL ‘http://www.kuwata-lab.com/erubis/’(1).

   ---------- Footnotes ----------

   (1) http://www.kuwata-lab.com/erubis/


File: flycheck.info,  Node: Fortran,  Next: Go,  Prev: ERuby,  Up: Supported languages

6.14 Fortran
============

 -- Flycheck Syntax Checker: fortran -gfortran

     An Fortran syntax checker using GCC.

     Uses GCC’s Fortran compiler gfortran.  See URL
     ‘https://gcc.gnu.org/onlinedocs/gfortran/’(1).

     Options
............

      -- User Option: flycheck -gfortran-args

          A list of additional arguments for Symbol(’fortran-gfortran’).

          The value of this variable is a list of strings with additional
          command line arguments.

          This variable is an option for the syntax checker ‘`fortran-gfortran'’.

          This user option was introduced, or its default value was
          changed, in version 0.22 of the flycheck package.

      -- User Option: flycheck -gfortran-include-path

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of include directories for GCC Fortran.

          The value of this variable is a list of strings, where each
          string is a directory to add to the include path of gcc.
          Relative paths are relative to the file being checked.

          This variable is an option for the syntax checker ‘`fortran-gfortran'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -gfortran-language-standard

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          The language standard to use in GFortran.

          The value of this variable is either a string denoting a language
          standard, or nil, to use the default standard.  When non-nil,
          pass the language standard via the ‘`-std'’ option.

          This variable is an option for the syntax checker ‘`fortran-gfortran'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -gfortran-layout

          The source code layout to use in GFortran.

          The value of this variable is one of the following symbols:

          nil
               Let gfortran determine the layout from the extension

          ‘`free'’
               Use free form layout


          ‘`fixed'’
               Use fixed form layout

          In any other case, an error is signaled.

          This variable is an option for the syntax checker ‘`fortran-gfortran'’.

      -- User Option: flycheck -gfortran-warnings

          A list of warnings for GCC Fortran.

          The value of this variable is a list of strings, where each string
          is the name of a warning category to enable.  By default, all
          recommended warnings and some extra warnings are enabled (as by
          ‘`-Wall'’ and ‘`-Wextra'’ respectively).

          Refer to the gfortran manual at URL
          ‘https://gcc.gnu.org/onlinedocs/gfortran/’(2) for more information
          about warnings

          This variable is an option for the syntax checker ‘`fortran-gfortran'’.

   ---------- Footnotes ----------

   (1) https://gcc.gnu.org/onlinedocs/gfortran/

   (2) https://gcc.gnu.org/onlinedocs/gfortran/


File: flycheck.info,  Node: Go,  Next: Haml,  Prev: Fortran,  Up: Supported languages

6.15 Go
=======

 -- Flycheck Syntax Checker: go -gofmt

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note go-golint: e0, if there are no errors above level
               ‘warning’

            2. *note go-vet: e1, if there are no errors above level
               ‘warning’

            3. *note go-build: e2, if there are no errors above level
               ‘warning’

            4. *note go-test: e3, if there are no errors above level
               ‘warning’

            5. *note go-errcheck: e4, if there are no errors above level
               ‘warning’

          The *first* suitable syntax checker is used.

     A Go syntax and style checker using the gofmt utility.

     See URL ‘http://golang.org/cmd/gofmt/’(1).

 -- Flycheck Syntax Checker: go -golint

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note go-vet: e1.

            2. *note go-build: e2.

            3. *note go-test: e3.

            4. *note go-errcheck: e4.

          The *first* suitable syntax checker is used.

     A Go style checker using Golint.

     See URL ‘https://github.com/golang/lint’(2).

 -- Flycheck Syntax Checker: go -vet

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note go-build: e2.

            2. *note go-test: e3.

            3. *note go-errcheck: e4.

          The *first* suitable syntax checker is used.

     A Go syntax checker using the ‘go tool vet’ command.

     See URL ‘http://golang.org/cmd/go/’(3) and URL
     ‘http://godoc.org/code.google.com/p/go.tools/cmd/vet’(4).

     Options
............

      -- User Option: flycheck -go-vet-print-functions

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A comma-separated list of print-like functions for ‘go tool vet’.

          Go vet will check these functions for format string problems and
          issues, such as a mismatch between the number of formats used,
          and the number of arguments given.

          Each entry is in the form Name:N where N is the zero-based
          argument position of the first argument involved in the print:
          either the format or the first print argument for non-formatted
          prints.  For example, if you have Warn and Warnf functions that
          take an io.Writer as their first argument, like Fprintf,
          -printfuncs=Warn:1,Warnf:1

          This variable is an option for the syntax checker ‘`go-vet'’.

 -- Flycheck Syntax Checker: go -build

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note go-errcheck: e4, if there are no errors above level
               ‘warning’

          The *first* suitable syntax checker is used.

     A Go syntax and type checker using the ‘go build’ command.

     See URL ‘http://golang.org/cmd/go’(5).

 -- Flycheck Syntax Checker: go -test

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note go-errcheck: e4, if there are no errors above level
               ‘warning’

          The *first* suitable syntax checker is used.

     A Go syntax and type checker using the ‘go test’ command.

     See URL ‘http://golang.org/cmd/go’(6).

 -- Flycheck Syntax Checker: go -errcheck

     A Go checker for unchecked errors.

     See URL ‘https://github.com/kisielk/errcheck’(7).

   ---------- Footnotes ----------

   (1) http://golang.org/cmd/gofmt/

   (2) https://github.com/golang/lint

   (3) http://golang.org/cmd/go/

   (4) http://godoc.org/code.google.com/p/go.tools/cmd/vet

   (5) http://golang.org/cmd/go

   (6) http://golang.org/cmd/go

   (7) https://github.com/kisielk/errcheck


File: flycheck.info,  Node: Haml,  Next: Handlebars,  Prev: Go,  Up: Supported languages

6.16 Haml
=========

 -- Flycheck Syntax Checker: haml

     A Haml syntax checker using the Haml compiler.

     See URL ‘http://haml.info’(1).

   ---------- Footnotes ----------

   (1) http://haml.info


File: flycheck.info,  Node: Handlebars,  Next: Haskell,  Prev: Haml,  Up: Supported languages

6.17 Handlebars
===============

 -- Flycheck Syntax Checker: handlebars

     A Handlebars syntax checker using the Handlebars compiler.

     See URL ‘http://handlebarsjs.com/’(1).

   ---------- Footnotes ----------

   (1) http://handlebarsjs.com/


File: flycheck.info,  Node: Haskell,  Next: HTML,  Prev: Handlebars,  Up: Supported languages

6.18 Haskell
============

 -- Flycheck Syntax Checker: haskell -ghc

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note haskell-hlint: ec, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A Haskell syntax and type checker using ghc.

     See URL ‘http://www.haskell.org/ghc/’(1).

     Options
............

      -- User Option: flycheck -ghc-args

          A list of additional arguments for Symbol(’haskell-ghc’).

          The value of this variable is a list of strings with additional
          command line arguments.

          This variable is an option for the syntax checker ‘`haskell-ghc'’.

          This user option was introduced, or its default value was
          changed, in version 0.22 of the flycheck package.

      -- User Option: flycheck -ghc-language-extensions

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          Language extensions for GHC.

          The value of this variable is a list of strings, where each
          string is a Haskell language extension, as in the LANGUAGE
          pragma.  Each extension is enabled via ‘`-X'’.

          This variable is an option for the syntax checker ‘`haskell-ghc'’.

          This user option was introduced, or its default value was
          changed, in version 0.19 of the flycheck package.

      -- User Option: flycheck -ghc-no-user-package-database

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to disable the user package database in GHC.

          When non-nil, disable the user package database in GHC, via
          ‘`-no-user-package-db'’.

          This variable is an option for the syntax checker ‘`haskell-ghc'’.

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.

      -- User Option: flycheck -ghc-package-databases

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          Additional module databases for GHC.

          The value of this variable is a list of strings, where each
          string is a directory of a package database.  Each package
          database is given to GHC via ‘`-package-db'’.

          This variable is an option for the syntax checker ‘`haskell-ghc'’.

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.

      -- User Option: flycheck -ghc-search-path

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          Module search path for GHC.

          The value of this variable is a list of strings, where each
          string is a directory containing Haskell modules.  Each directory
          is added to the GHC search path via ‘`-i'’.

          This variable is an option for the syntax checker ‘`haskell-ghc'’.

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.

     See also
.............

     The flycheck-haskell(2) extension configures this syntax checker
     according to the corresponding Cabal project, and adds Cabal
     sandboxes.

 -- Flycheck Syntax Checker: haskell -hlint

     A Haskell style checker using hlint.

     See URL ‘https://github.com/ndmitchell/hlint’(3).

See also
........

The flycheck-hdevtools(4) extension adds a Haskell syntax checker using
hdevtools(5).

   ---------- Footnotes ----------

   (1) http://www.haskell.org/ghc/

   (2) https://github.com/flycheck/flycheck-haskell

   (3) https://github.com/ndmitchell/hlint

   (4) https://github.com/flycheck/flycheck-hdevtools

   (5) https://github.com/bitc/hdevtools/


File: flycheck.info,  Node: HTML,  Next: Javascript,  Prev: Haskell,  Up: Supported languages

6.19 HTML
=========

 -- Flycheck Syntax Checker: html -tidy

     A HTML syntax and style checker using Tidy.

     See URL ‘https://github.com/w3c/tidy-html5’(1).

     Configuration file
.......................

      -- User Option: flycheck -tidyrc

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          Configuration file for ‘`html-tidy'’.

   ---------- Footnotes ----------

   (1) https://github.com/w3c/tidy-html5


File: flycheck.info,  Node: Javascript,  Next: JSON,  Prev: HTML,  Up: Supported languages

6.20 Javascript
===============

 -- Flycheck Syntax Checker: javascript -jshint

     A JavaScript syntax and style checker using jshint.

     See URL ‘http://www.jshint.com’(1).

     Configuration file
.......................

      -- User Option: flycheck -jshintrc

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          Configuration file for ‘`javascript-jshint'’.

 -- Flycheck Syntax Checker: javascript -eslint

     A JavaScript syntax and style checker using eslint.

     See URL ‘https://github.com/eslint/eslint’(2).

     Options
............

      -- User Option: flycheck -eslint-rulesdir

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          The directory of custom rules for ESLint.

          The value of this variable is either a string containing the path
          to a directory with custom rules, or nil, to not give any custom
          rules to ESLint.

          Refer to the ESLint manual at URL
          ‘https://github.com/eslint/eslint/tree/master/docs/command-line-interface#–rulesdir’(3)
          for more information about the custom directory.

          This variable is an option for the syntax checker ‘`javascript-eslint'’.

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.

     Configuration file
.......................

      -- User Option: flycheck -eslintrc

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          Configuration file for ‘`javascript-eslint'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

 -- Flycheck Syntax Checker: javascript -gjslint

     A JavaScript syntax and style checker using Closure Linter.

     See URL ‘https://developers.google.com/closure/utilities’(4).

     Configuration file
.......................

      -- User Option: flycheck -gjslintrc

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          Configuration file for ‘`javascript-gjslint'’.

   ---------- Footnotes ----------

   (1) http://www.jshint.com

   (2) https://github.com/eslint/eslint

   (3) 
https://github.com/eslint/eslint/tree/master/docs/command-line-interface#–rulesdir

   (4) https://developers.google.com/closure/utilities


File: flycheck.info,  Node: JSON,  Next: LESS,  Prev: Javascript,  Up: Supported languages

6.21 JSON
=========

 -- Flycheck Syntax Checker: json -jsonlint

     A JSON syntax and style checker using jsonlint.

     See URL ‘https://github.com/zaach/jsonlint’(1).

   ---------- Footnotes ----------

   (1) https://github.com/zaach/jsonlint


File: flycheck.info,  Node: LESS,  Next: Lua,  Prev: JSON,  Up: Supported languages

6.22 LESS
=========

 -- Flycheck Syntax Checker: less

     A LESS syntax checker using lessc.

     At least version 1.4 of lessc is required.

     See URL ‘http://lesscss.org’(1).

   ---------- Footnotes ----------

   (1) http://lesscss.org


File: flycheck.info,  Node: Lua,  Next: Make,  Prev: LESS,  Up: Supported languages

6.23 Lua
========

 -- Flycheck Syntax Checker: lua

     A Lua syntax checker using the Lua compiler.

     See URL ‘http://www.lua.org/’(1).

   ---------- Footnotes ----------

   (1) http://www.lua.org/


File: flycheck.info,  Node: Make,  Next: Perl,  Prev: Lua,  Up: Supported languages

6.24 Make
=========

 -- Flycheck Syntax Checker: make

     A Makefile syntax checker using the POSIX compatible Make command.

     See URL ‘http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html’(1).

     See also
.............

     GNU Make(2), NetBSD Make(3), FreeBSD Make(4), OpenBSD Make(5)

   ---------- Footnotes ----------

   (1) 
http://pubs.opengroup.org/onlinepubs/9699919799/utilities/make.html

   (2) http://www.gnu.org/software/make/

   (3) http://netbsd.gw.com/cgi-bin/man-cgi?make++NetBSD-current

   (4) http://www.freebsd.org/cgi/man.cgi?query=make&sektion=1

   (5) http://www.openbsd.org/cgi-bin/man.cgi?query=make


File: flycheck.info,  Node: Perl,  Next: PHP,  Prev: Make,  Up: Supported languages

6.25 Perl
=========

 -- Flycheck Syntax Checker: perl

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note perl-perlcritic: 109.

          The *first* suitable syntax checker is used.

     A Perl syntax checker using the Perl interpreter.

     See URL ‘http://www.perl.org’(1).

 -- Flycheck Syntax Checker: perl -perlcritic

     A Perl syntax checker using Perl::Critic.

     See URL ‘https://metacpan.org/pod/Perl::Critic’(2).

     Options
............

      -- User Option: flycheck -perlcritic-severity

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘integerp’.

          The message severity for Perl Critic.

          The value of this variable is a severity level as integer, for
          the ‘`--severity'’ option to Perl Critic.

          This variable is an option for the syntax checker ‘`perl-perlcritic'’.

          This user option was introduced, or its default value was
          changed, in version 0.18 of the flycheck package.

   ---------- Footnotes ----------

   (1) http://www.perl.org

   (2) https://metacpan.org/pod/Perl::Critic


File: flycheck.info,  Node: PHP,  Next: Puppet,  Prev: Perl,  Up: Supported languages

6.26 PHP
========

 -- Flycheck Syntax Checker: php

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note php-phpmd: 10d, if there are no errors above level
               ‘warning’

            2. *note php-phpcs: 10e, if there are no errors above level
               ‘warning’

          The *first* suitable syntax checker is used.

     A PHP syntax checker using the PHP command line interpreter.

     See URL ‘http://php.net/manual/en/features.commandline.php’(1).

 -- Flycheck Syntax Checker: php -phpmd

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note php-phpcs: 10e.

          The *first* suitable syntax checker is used.

     A PHP style checker using PHP Mess Detector.

     See URL ‘http://phpmd.org/’(2).

     Options
............

      -- User Option: flycheck -phpmd-rulesets

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          The rule sets for PHP Mess Detector.

          Set default rule sets and custom rule set files.

          See section "Using multiple rule sets" in the PHP Mess Detector
          manual at URL ‘http://phpmd.org/documentation/index.html’(3).

          This variable is an option for the syntax checker ‘`php-phpmd'’.

 -- Flycheck Syntax Checker: php -phpcs

     A PHP style checker using PHP_CodeSniffer.

     See URL ‘http://pear.php.net/package/PHP_CodeSniffer/’(4).

     Options
............

      -- User Option: flycheck -phpcs-standard

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          The coding standard for PHP CodeSniffer.

          When nil, use the default standard from the global PHP
          CodeSniffer configuration.  When set to a string, pass the string
          to PHP CodeSniffer which will interpret it as name as a standard,
          or as path to a standard specification.

          This variable is an option for the syntax checker ‘`php-phpcs'’.

   ---------- Footnotes ----------

   (1) http://php.net/manual/en/features.commandline.php

   (2) http://phpmd.org/

   (3) http://phpmd.org/documentation/index.html

   (4) http://pear.php.net/package/PHP_CodeSniffer/


File: flycheck.info,  Node: Puppet,  Next: Python,  Prev: PHP,  Up: Supported languages

6.27 Puppet
===========

 -- Flycheck Syntax Checker: puppet -parser

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note puppet-lint: 113, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A Puppet DSL syntax checker using puppet’s own parser.

     See URL ‘http://puppetlabs.com/’(1).

 -- Flycheck Syntax Checker: puppet -lint

     A Puppet DSL style checker using puppet-lint.

     See URL ‘http://puppet-lint.com/’(2).

   ---------- Footnotes ----------

   (1) http://puppetlabs.com/

   (2) http://puppet-lint.com/


File: flycheck.info,  Node: Python,  Next: R,  Prev: Puppet,  Up: Supported languages

6.28 Python
===========

 -- Flycheck Syntax Checker: python -flake8

     A Python syntax and style checker using Flake8.

     Requires Flake8 2.0 or newer. See URL
     ‘https://pypi.python.org/pypi/flake8’(1).

     Options
............

      -- User Option: flycheck -flake8-error-level-alist

          An alist mapping flake8 error IDs to Flycheck error levels.

          Each item in this list is a cons cell ‘(PATTERN . LEVEL)’ where
          PATTERN is a regular expression matched against the error ID, and
          LEVEL is a Flycheck error level symbol.

          Each PATTERN is matched in the order of appearance in this list
          against the error ID.  If it matches the ID, the level of the
          corresponding error is set to LEVEL.  An error that is not
          matched by any PATTERN defaults to warning level.

          This option exists because flake8 categorises errors by the
          underlying tool that produced them (e.g. F for pyflakes messages,
          E for pep8 messages, etc.).  These categorisations do not map
          directly to Flycheck error levels.  Hence, this option exists to
          allow for a custom mapping.  The default value handles all of the
          built-in tools of flake8, and naming errors from pep8-naming.

          This variable is an option for the syntax checker ‘`python-flake8'’.

          This user option was introduced, or its default value was
          changed, in version 0.22 of the flycheck package.

      -- User Option: flycheck -flake8-maximum-complexity

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘integerp’.

          The maximum McCabe complexity of methods.

          If nil, do not check the complexity of methods.  If set to an
          integer, report any complexity greater than the value of this
          variable as warning.

          If set to an integer, this variable overrules any similar setting
          in the configuration file denoted by *note ‘flycheck-flake8rc’: 118.

          This variable is an option for the syntax checker ‘`python-flake8'’.

      -- User Option: flycheck -flake8-maximum-line-length

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘integerp’.

          The maximum length of lines.

          If set to an integer, the value of this variable denotes the
          maximum length of lines, overruling any similar setting in the
          configuration file denoted by *note ‘flycheck-flake8rc’: 118.  An error will
          be reported for any line longer than the value of this variable.

          If set to nil, use the maximum line length from the configuration
          file denoted by *note ‘flycheck-flake8rc’: 118, or the PEP 8 recommendation
          of 79 characters if there is no configuration with this setting.

          This variable is an option for the syntax checker ‘`python-flake8'’.

     Configuration file
.......................

      -- User Option: flycheck -flake8rc

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          Configuration file for ‘`python-flake8'’.

 -- Flycheck Syntax Checker: python -pylint

     A Python syntax and style checker using Pylint.

     This syntax checker requires Pylint 1.0 or newer.

     See URL ‘http://www.pylint.org/’(2).

     Configuration file
.......................

      -- User Option: flycheck -pylintrc

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          Configuration file for ‘`python-pylint'’.

 -- Flycheck Syntax Checker: python -pycompile

     A Python syntax checker using Python’s builtin compiler.

     See URL ‘https://docs.python.org/3.4/library/py_compile.html’(3).

See also
........

flycheck-pyflakes(4) adds a Python syntax checker using Pyflakes.

   ---------- Footnotes ----------

   (1) https://pypi.python.org/pypi/flake8

   (2) http://www.pylint.org/

   (3) https://docs.python.org/3.4/library/py_compile.html

   (4) https://github.com/Wilfred/flycheck-pyflakes


File: flycheck.info,  Node: R,  Next: Racket,  Prev: Python,  Up: Supported languages

6.29 R
======

 -- Flycheck Syntax Checker: r -lintr

     An R style and syntax checker using the lintr package.

     See URL ‘https://github.com/jimhester/lintr’(1).

     Options
............

      -- User Option: flycheck -lintr-caching

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to enable caching in lintr.

          By default, lintr caches all expressions in a file and re-checks
          only those that have changed.  Setting this option to nil
          disables caching in case there are problems.

          This variable is an option for the syntax checker ‘`r-lintr'’.

          This user option was introduced, or its default value was
          changed, in version 0.23 of the flycheck package.

      -- User Option: flycheck -lintr-linters

               Variable properties: This variable may be risky if used
               as a file-local variable.

          Linters to use with lintr.

          The value of this variable is a string containing an R
          expression, which selects linters for lintr.

          This variable is an option for the syntax checker ‘`r-lintr'’.

          This user option was introduced, or its default value was
          changed, in version 0.23 of the flycheck package.

   ---------- Footnotes ----------

   (1) https://github.com/jimhester/lintr


File: flycheck.info,  Node: Racket,  Next: RPM SPEC,  Prev: R,  Up: Supported languages

6.30 Racket
===========

 -- Flycheck Syntax Checker: racket

     A Racket syntax checker using the Racket compiler.

     See URL ‘http://racket-lang.org/’(1).

   ---------- Footnotes ----------

   (1) http://racket-lang.org/


File: flycheck.info,  Node: RPM SPEC,  Next: ReStructuredText,  Prev: Racket,  Up: Supported languages

6.31 RPM SPEC
=============

 -- Flycheck Syntax Checker: rpm -rpmlint

     A RPM SPEC file syntax checker using rpmlint.

     See URL ‘http://sourceforge.net/projects/rpmlint/’(1).

   ---------- Footnotes ----------

   (1) http://sourceforge.net/projects/rpmlint/


File: flycheck.info,  Node: ReStructuredText,  Next: Ruby,  Prev: RPM SPEC,  Up: Supported languages

6.32 ReStructuredText
=====================

 -- Flycheck Syntax Checker: rst

     A ReStructuredText (RST) syntax checker using Docutils.

     See URL ‘http://docutils.sourceforge.net/’(1).

 -- Flycheck Syntax Checker: rst -sphinx

     A ReStructuredText (RST) syntax checker using Sphinx.

     Requires Sphinx 1.2 or newer.  See URL ‘http://sphinx-doc.org’(2).

     Options
............

      -- User Option: flycheck -sphinx-warn-on-missing-references

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to warn about missing references in Sphinx.

          When non-nil (the default), warn about all missing references in
          Sphinx via ‘`-n'’.

          This variable is an option for the syntax checker ‘`rst-sphinx'’.

          This user option was introduced, or its default value was
          changed, in version 0.17 of the flycheck package.

   ---------- Footnotes ----------

   (1) http://docutils.sourceforge.net/

   (2) http://sphinx-doc.org


File: flycheck.info,  Node: Ruby,  Next: Rust,  Prev: ReStructuredText,  Up: Supported languages

6.33 Ruby
=========

 -- Flycheck Syntax Checker: ruby -rubocop

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note ruby-rubylint: 12c, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A Ruby syntax and style checker using the RuboCop tool.

     See URL ‘http://batsov.com/rubocop/’(1).

     Options
............

      -- User Option: flycheck -rubocop-lint-only

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to only report code issues in Rubocop.

          When non-nil, only report code issues in Rubocop, via ‘`--lint'’.
          Otherwise report style issues as well.

          This variable is an option for the syntax checker ‘`ruby-rubocop'’.

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.

     Configuration file
.......................

      -- User Option: flycheck -rubocoprc

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          Configuration file for ‘`ruby-rubocop'’.

 -- Flycheck Syntax Checker: ruby -rubylint

     A Ruby syntax and code analysis checker using ruby-lint.

     Requires ruby-lint 2.0 or newer.  To use *note ‘flycheck-rubylintrc’: 12f,
     ruby-lint 2.0.2 or newer is required.  See URL
     ‘https://github.com/YorickPeterse/ruby-lint’(2).

     Configuration file
.......................

      -- User Option: flycheck -rubylintrc

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          Configuration file for ‘`ruby-rubylint'’.

               Warning: You need ruby-lint version 2.0.2 or newer to use
               this variable.

 -- Flycheck Syntax Checker: ruby

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note ruby-rubylint: 12c, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A Ruby syntax checker using the standard Ruby interpreter.

     Please note that the output of different Ruby versions and
     implementations varies wildly.  This syntax checker supports
     current versions of MRI and JRuby, but may break when used with
     other implementations or future versions of these
     implementations.

     Please consider using ‘`ruby-rubocop'’ or ‘`ruby-rubylint'’ instead.

     See URL ‘https://www.ruby-lang.org/’(3).

 -- Flycheck Syntax Checker: ruby -jruby

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note ruby-rubylint: 12c, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A Ruby syntax checker using the JRuby interpreter.

     This syntax checker is very primitive, and may break on future
     versions of JRuby.

     Please consider using ‘`ruby-rubocop'’ or ‘`ruby-rubylint'’ instead.

     See URL ‘http://jruby.org/’(4).

   ---------- Footnotes ----------

   (1) http://batsov.com/rubocop/

   (2) https://github.com/YorickPeterse/ruby-lint

   (3) https://www.ruby-lang.org/

   (4) http://jruby.org/


File: flycheck.info,  Node: Rust,  Next: Sass,  Prev: Ruby,  Up: Supported languages

6.34 Rust
=========

 -- Flycheck Syntax Checker: rust

     A Rust syntax checker using Rust compiler.

     This syntax checker needs Rust 0.10 or newer.

     See URL ‘http://www.rust-lang.org’(1).

     Options
............

      -- User Option: flycheck -rust-check-tests

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to check test code in Rust.

          When non-nil, ‘`rustc'’ is passed the ‘`--test'’ flag, which will
          check any code marked with the ‘#[cfg(test)]’ attribute and any
          functions marked with ‘#[test]’. Otherwise, ‘`rustc'’ is not passed
          ‘`--test'’ and test code will not be checked.  Skipping ‘`--test'’ is
          necessary when using ‘#![no_std]’, because compiling the test
          runner requires ‘`std'’.

          This variable is an option for the syntax checker ‘`rust'’.

      -- User Option: flycheck -rust-crate-root

               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local variable
               if its value satisfies the predicate ‘stringp’.

          A path to the crate root for the current buffer.

          The value of this variable is either a string with the path to
          the crate root for the current buffer, or nil if the current buffer
          is a crate.  A relative path is relative to the current buffer.

          If this variable is non nil the current buffer will only be checked
          if it is not modified, i.e. after it has been saved.

          This variable is an option for the syntax checker ‘`rust'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

      -- User Option: flycheck -rust-crate-type

               Variable properties: Automatically becomes buffer-local
               when set.  This variable is safe as a file local variable
               if its value satisfies the predicate ‘stringp’.

          The type of the Rust Crate to check.

          The value of this variable is a string denoting the crate type,
          for the ‘`--crate-type'’ flag.

          This variable is an option for the syntax checker ‘`rust'’.

      -- User Option: flycheck -rust-library-path

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of library directories for Rust.

          The value of this variable is a list of strings, where each
          string is a directory to add to the library path of Rust.
          Relative paths are relative to the file being checked.

          This variable is an option for the syntax checker ‘`rust'’.

          This user option was introduced, or its default value was
          changed, in version 0.18 of the flycheck package.

     See also
.............

     The flycheck-rust(2) extension customizes this syntax checker
     according to the Cargo project layout and settings.

   ---------- Footnotes ----------

   (1) http://www.rust-lang.org

   (2) https://github.com/flycheck/flycheck-rust


File: flycheck.info,  Node: Sass,  Next: Scala,  Prev: Rust,  Up: Supported languages

6.35 Sass
=========

 -- Flycheck Syntax Checker: sass

     A Sass syntax checker using the Sass compiler.

     See URL ‘http://sass-lang.com’(1).

     Options
............

      -- User Option: flycheck -sass-compass

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to enable the Compass CSS framework.

          When non-nil, enable the Compass CSS framework, via ‘`--compass'’.

          This variable is an option for the syntax checker ‘`sass'’.

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.

   ---------- Footnotes ----------

   (1) http://sass-lang.com


File: flycheck.info,  Node: Scala,  Next: Scss,  Prev: Sass,  Up: Supported languages

6.36 Scala
==========

 -- Flycheck Syntax Checker: scala

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note scala-scalastyle: 13e, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A Scala syntax checker using the Scala compiler.

     See URL ‘http://www.scala-lang.org/’(1).

 -- Flycheck Syntax Checker: scala -scalastyle

     A Scala style checker using scalastyle.

     Note that this syntax checker is not used if
     *note ‘flycheck-scalastyle-jar’: 13f. or *note ‘flycheck-scalastylerc’: 140. are nil or
     point to non-existing files.

     See URL ‘http://www.scalastyle.org’(2).

     Options
............

      -- User Option: flycheck -scalastyle-jar

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          The path to the main JAR file of Scalastyle.

          If this option is nil, or points to a non-existing file,
          ‘`scala-scalastyle'’ can not be used.

          This variable is an option for the syntax checker ‘`scala-scalastyle'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

     Configuration file
.......................

      -- User Option: flycheck -scalastylerc

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          Configuration file for ‘`scala-scalastyle'’.

          This user option was introduced, or its default value was
          changed, in version 0.20 of the flycheck package.

   ---------- Footnotes ----------

   (1) http://www.scala-lang.org/

   (2) http://www.scalastyle.org


File: flycheck.info,  Node: Scss,  Next: Shell script languages,  Prev: Scala,  Up: Supported languages

6.37 Scss
=========

 -- Flycheck Syntax Checker: scss

     A SCSS syntax checker using the SCSS compiler.

     See URL ‘http://sass-lang.com’(1).

     Options
............

      -- User Option: flycheck -scss-compass

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘booleanp’.

          Whether to enable the Compass CSS framework.

          When non-nil, enable the Compass CSS framework, via ‘`--compass'’.

          This variable is an option for the syntax checker ‘`scss'’.

          This user option was introduced, or its default value was
          changed, in version 0.16 of the flycheck package.

   ---------- Footnotes ----------

   (1) http://sass-lang.com


File: flycheck.info,  Node: Shell script languages,  Next: Slim,  Prev: Scss,  Up: Supported languages

6.38 Shell script languages
===========================

 -- Flycheck Syntax Checker: sh -bash

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note sh-shellcheck: 146, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A Bash syntax checker using the Bash shell.

     See URL ‘http://www.gnu.org/software/bash/’(1).

 -- Flycheck Syntax Checker: sh -posix-dash

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note sh-shellcheck: 146, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A POSIX Shell syntax checker using the Dash shell.

     See URL ‘http://gondor.apana.org.au/~herbert/dash/’(2).

     See also
.............

     POSIX Shell Command Language(3)

 -- Flycheck Syntax Checker: sh -posix-bash

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note sh-shellcheck: 146, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A POSIX Shell syntax checker using the Bash shell.

     See URL ‘http://www.gnu.org/software/bash/’(4).

     See also
.............

     GNU Bash POSIX Mode(5), POSIX Shell Command Language(6)

 -- Flycheck Syntax Checker: sh -zsh

          Chained syntax checkers: The following syntax checkers are
          *note chained: a0. after this syntax checker:

            1. *note sh-shellcheck: 146, if there are no errors above
               level ‘warning’

          The *first* suitable syntax checker is used.

     A Zsh syntax checker using the Zsh shell.

     See URL ‘http://www.zsh.org/’(7).

 -- Flycheck Syntax Checker: sh -shellcheck

     A shell script syntax and style checker using Shellcheck.

     See URL ‘https://github.com/koalaman/shellcheck/’(8).

     Options
............

      -- User Option: flycheck -shellcheck-excluded-warnings

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate *note
               flycheck-string-list-p: 99.

          A list of excluded warnings for ShellCheck.

          The value of this variable is a list of strings, where each
          string is a warning code to be excluded from ShellCheck reports.
          By default, no warnings are excluded.

          This variable is an option for the syntax checker ‘`sh-shellcheck'’.

          This user option was introduced, or its default value was
          changed, in version 0.21 of the flycheck package.

   ---------- Footnotes ----------

   (1) http://www.gnu.org/software/bash/

   (2) http://gondor.apana.org.au/~herbert/dash/

   (3) 
http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html

   (4) http://www.gnu.org/software/bash/

   (5) 
http://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html#Bash-POSIX-Mode

   (6) 
http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html

   (7) http://www.zsh.org/

   (8) https://github.com/koalaman/shellcheck/


File: flycheck.info,  Node: Slim,  Next: TeX/LaTeX,  Prev: Shell script languages,  Up: Supported languages

6.39 Slim
=========

 -- Flycheck Syntax Checker: slim

     A Slim syntax checker using the Slim compiler.

     See URL ‘http://slim-lang.com’(1).

   ---------- Footnotes ----------

   (1) http://slim-lang.com


File: flycheck.info,  Node: TeX/LaTeX,  Next: Texinfo,  Prev: Slim,  Up: Supported languages

6.40 TeX/LaTeX
==============

See also
........

LaTeX(1), TeX Live(2)

 -- Flycheck Syntax Checker: tex -chktex

     A TeX and LaTeX syntax and style checker using chktex.

     See URL ‘http://www.nongnu.org/chktex/’(3).

     Configuration file
.......................

      -- User Option: flycheck -chktexrc

               Variable properties: This variable is safe as a file
               local variable if its value satisfies the predicate
               ‘stringp’.

          Configuration file for ‘`tex-chktex'’.

 -- Flycheck Syntax Checker: tex -lacheck

     A LaTeX syntax and style checker using lacheck.

     See URL ‘http://www.ctan.org/pkg/lacheck’(4).

   ---------- Footnotes ----------

   (1) http://www.latex-project.org/

   (2) http://www.tug.org/texlive/

   (3) http://www.nongnu.org/chktex/

   (4) http://www.ctan.org/pkg/lacheck


File: flycheck.info,  Node: Texinfo,  Next: Verilog,  Prev: TeX/LaTeX,  Up: Supported languages

6.41 Texinfo
============

 -- Flycheck Syntax Checker: texinfo

     A Texinfo syntax checker using makeinfo.

     See URL ‘http://www.gnu.org/software/texinfo/’(1).

   ---------- Footnotes ----------

   (1) http://www.gnu.org/software/texinfo/


File: flycheck.info,  Node: Verilog,  Next: XML,  Prev: Texinfo,  Up: Supported languages

6.42 Verilog
============

 -- Flycheck Syntax Checker: verilog -verilator

     A Verilog syntax checker using the Verilator Verilog HDL simulator.

     See URL ‘http://www.veripool.org/wiki/verilator’(1).

   ---------- Footnotes ----------

   (1) http://www.veripool.org/wiki/verilator


File: flycheck.info,  Node: XML,  Next: YAML,  Prev: Verilog,  Up: Supported languages

6.43 XML
========

 -- Flycheck Syntax Checker: xml -xmlstarlet

     A XML syntax checker and validator using the xmlstarlet utility.

     See URL ‘http://xmlstar.sourceforge.net/’(1).

 -- Flycheck Syntax Checker: xml -xmllint

     A XML syntax checker and validator using the xmllint utility.

     The xmllint is part of libxml2, see URL
     ‘http://www.xmlsoft.org/’(2).

   ---------- Footnotes ----------

   (1) http://xmlstar.sourceforge.net/

   (2) http://www.xmlsoft.org/


File: flycheck.info,  Node: YAML,  Prev: XML,  Up: Supported languages

6.44 YAML
=========

 -- Flycheck Syntax Checker: yaml -jsyaml

     A YAML syntax checker using JS-YAML.

     See URL ‘https://github.com/nodeca/js-yaml’(1).

 -- Flycheck Syntax Checker: yaml -ruby

     A YAML syntax checker using Ruby’s YAML parser.

     This syntax checker uses the YAML parser from Ruby’s standard
     library.

     See URL ‘http://www.ruby-doc.org/stdlib-2.0.0/libdoc/yaml/rdoc/YAML.html’(2).

   ---------- Footnotes ----------

   (1) https://github.com/nodeca/js-yaml

   (2) http://www.ruby-doc.org/stdlib-2.0.0/libdoc/yaml/rdoc/YAML.html


File: flycheck.info,  Node: Glossary,  Next: Flycheck releases,  Prev: Supported languages,  Up: Top

7 Glossary
**********

syntax checker

     A symbol which is defined as syntax checker with *note
     flycheck-define-checker: 19.

registered syntax checker

     A *note syntax checker: 64. available for automatic selection, i.e.
     that is contained in *note flycheck-checkers: 5e.

disabled syntax checker

     A *note syntax checker: 64. explicitly excluded from available
     selection, i.e.  that is contained in *note
     flycheck-disabled-checkers: 5f.

enabled syntax checker

     A *note registered syntax checker: 60. which is not a *note
     disabled syntax checker: 15f.

suitable syntax checker

     A *note syntax checker: 64. which can be used to check the current
     buffer.  Precisely, a syntax checker which

        - which can be used for the current major mode,

        - and whose predicate succeeds,

        - and whose syntax checker tool exists.

chaining

     In some languages, multiple *note syntax checkers: 64. can be
     applied to a buffer.  In such a case, each syntax checker specifies
     which checkers are to be used after it and when.  The result is a
     “syntax checker chain”, specifying all syntax checkers to be
     applied to the buffer.

     For instance, Haskell buffers are first checked with GHC for syntax
     and type errors, and then with ‘hlint’ for idiomatic and semantic
     mistakes.  Hence, the syntax checker chain consists of *note
     haskell-ghc: eb. and *note haskell-hlint: ec.


File: flycheck.info,  Node: Flycheck releases,  Next: Extending Flycheck,  Prev: Glossary,  Up: Top

8 Flycheck releases
*******************

This document contains the release announcements for Flycheck, and the
complete changelog.

* Menu:

* Release announcements:: 
* Changelog:: 


File: flycheck.info,  Node: Release announcements,  Next: Changelog,  Up: Flycheck releases

8.1 Release announcements
=========================

* Menu:

* Flycheck 0.22: Flycheck 0 22. 
* Flycheck 0.21: Flycheck 0 21. 
* Flycheck 0.20: Flycheck 0 20. 
* Flycheck 0.19: Flycheck 0 19. 
* Flycheck 0.18: Flycheck 0 18. 
* Flycheck 0.17: Flycheck 0 17. 
* Flycheck 0.16: Flycheck 0 16. 
* Flycheck 0.15: Flycheck 0 15. 


File: flycheck.info,  Node: Flycheck 0 22,  Next: Flycheck 0 21,  Up: Release announcements

8.1.1 Flycheck 0.22
-------------------


date: Dec 23, 2014


version: 0.22

Flycheck 0.22 comes with some major new features, most notably generic
syntax checkers and many improvements and bug fixes.  Unfortunately,
some of these changes break backwards compatibility.

This announcement covers the most important changes.  For details,
please refer to the *note Changelog: 165.

* Menu:

* Breaking changes:: 
* Setup: Setup<2>. 
* Language support:: 
* Syntax checking improvements:: 
* Error list improvements:: 
* Generic syntax checkers:: 
* Error IDs:: 
* Unit test library for Flycheck:: 


File: flycheck.info,  Node: Breaking changes,  Next: Setup<2>,  Up: Flycheck 0 22

8.1.1.1 Breaking changes
........................

     Warning: The addition of generic syntax checkers lead to some
     breaking changes to the internals of syntax checker definitions.
     Due to the way macros work in Emacs Lisp *all packages depending on
     Flycheck* must be recompiled after upgrading to Flycheck 0.22!

     We hope that this will be the last breaking change of this kind,
     since the definition of syntax checkers is now wrapped into
     functions, and the *note flycheck-define-checker: 19. macro just
     provides some syntactic sugar for definitions.

Error parsers must explicitly set *note flycheck-error buffer: 167. and
*note flycheck-error checker: 168. of new *note flycheck-error: 169.
objects now.  This is another consequence of generic syntax checkers.

‘flycheck-perlcritic-verbosity’ and ‘flycheck-copy-messages-as-kill’ are
obsolete now, in favour of *note flycheck-perlcritic-severity: 10a. and
*note flycheck-copy-errors-as-kill: 85. respectively.
‘flycheck-google-messages’ has been removed completely.

*note flycheck-select-checker: 24. cannot select disabled syntax
checkers anymore.

Syntax checker options and configuration file variables are not
buffer-local anymore, with some exceptions.  Consequently you can now
use ‘setq’ to set their global value, and you *must* use ‘setq-local’ to
set them locally.  Variables set via file or directory variables are not
affected by this change.


File: flycheck.info,  Node: Setup<2>,  Next: Language support,  Prev: Breaking changes,  Up: Flycheck 0 22

8.1.1.2 Setup
.............

The new *note flycheck-verify-setup: 5a. command provides information
about all applicable syntax checkers, and lists potential problems.  It
is intended to help you uncover issues in your Flycheck setup.


File: flycheck.info,  Node: Language support,  Next: Syntax checking improvements,  Prev: Setup<2>,  Up: Flycheck 0 22

8.1.1.3 Language support
........................

* Menu:

* Ada: Ada<2>. 
* C/C++: C/C++<2>. 
* Emacs Lisp: Emacs Lisp<2>. 
* Haskell: Haskell<2>. 
* Fortran: Fortran<2>. 
* Python: Python<2>. 
* Rust: Rust<2>. 
* TeX/LaTeX: TeX/LaTeX<2>. 


File: flycheck.info,  Node: Ada<2>,  Next: C/C++<2>,  Up: Language support

8.1.1.4 Ada
...........

The new option *note flycheck-gnat-args: 97. allows to pass arbitrary
arguments to *note ada-gnat: 96.


File: flycheck.info,  Node: C/C++<2>,  Next: Emacs Lisp<2>,  Prev: Ada<2>,  Up: Language support

8.1.1.5 C/C++
.............

Flycheck now correctly computes the error level from errors in included
files.  Messages of errors in included files are now discarded to reduce
the verbosity of error reporting.

The new options *note flycheck-clang-args: a2. and *note
flycheck-gcc-args: ad. allow to pass arbitrary arguments to *note
c/c++-clang: 9f. and *note c/c++-gcc: ac. respectively.


File: flycheck.info,  Node: Emacs Lisp<2>,  Next: Haskell<2>,  Prev: C/C++<2>,  Up: Language support

8.1.1.6 Emacs Lisp
..................

The new ‘inherit’ value for *note flycheck-emacs-lisp-load-path: d0.
automates ‘load-path’ inheritance for the *note emacs-lisp: cd. syntax
checker.  If you have the following in your init file

     (setq-default flycheck-emacs-lisp-load-path load-path)

please replace it with:

     (setq flycheck-emacs-lisp-load-path 'inherit)

As a consequence of this change you can now enable ‘load-path’
inheritance via customize.


File: flycheck.info,  Node: Haskell<2>,  Next: Fortran<2>,  Prev: Emacs Lisp<2>,  Up: Language support

8.1.1.7 Haskell
...............

The *note haskell-ghc: eb. syntax checker supports literate Haskell now.

The new option *note flycheck-ghc-args: ed. allows to pass arbitrary
arguments to *note haskell-ghc: eb.


File: flycheck.info,  Node: Fortran<2>,  Next: Python<2>,  Prev: Haskell<2>,  Up: Language support

8.1.1.8 Fortran
...............

The new option *note flycheck-gfortran-args: d9. allows to pass
arbitrary arguments to *note fortran-gfortran: d8.


File: flycheck.info,  Node: Python<2>,  Next: Rust<2>,  Prev: Fortran<2>,  Up: Language support

8.1.1.9 Python
..............

The new syntax checker *note python-pycompile: 11c. uses the built-in
byte compiler of Python to check a buffer for syntax errors.  It is
provided as a last resort for basic syntax checking of Python code, if
neither pylint nor flake8 are installed.

The error levels of *note python-flake8: 115. can now be customized via
*note flycheck-flake8-error-level-alist: 116.  The default value handles
the standard plugins of flake8, and the 3rd party pep8-naming plugin.
You can add custom patterns to this option to add support for other
flake8 plugins.

*note python-pylint: 11a. now has correct error columns.


File: flycheck.info,  Node: Rust<2>,  Next: TeX/LaTeX<2>,  Prev: Python<2>,  Up: Language support

8.1.1.10 Rust
.............

The *note rust: 133. parses help messages to ‘info’-level errors now.


File: flycheck.info,  Node: TeX/LaTeX<2>,  Prev: Rust<2>,  Up: Language support

8.1.1.11 TeX/LaTeX
..................

*note tex-chktex: 14f. now has correct error columns as well.


File: flycheck.info,  Node: Syntax checking improvements,  Next: Error list improvements,  Prev: Language support,  Up: Flycheck 0 22

8.1.1.12 Syntax checking improvements
.....................................

Flycheck now parses errors faster, because it does not longer access the
file system to check the file of each parsed errors, and it protects
against excessive error reporting by automatically disabling syntax
checkers that try to report too many errors.  The threshold is
customizable via the new *note flycheck-checker-error-threshold: 71.
option.


File: flycheck.info,  Node: Error list improvements,  Next: Generic syntax checkers,  Prev: Syntax checking improvements,  Up: Flycheck 0 22

8.1.1.13 Error list improvements
................................

The error list now shows errors IDs for syntax checkers that emit these.

Typing ‘g’ in the error list will re-check the source buffer, and
refresh the error list afterwards.


File: flycheck.info,  Node: Generic syntax checkers,  Next: Error IDs,  Prev: Error list improvements,  Up: Flycheck 0 22

8.1.1.14 Generic syntax checkers
................................

Flycheck now supports “generic” syntax checkers, which call arbitrary
synchronous or asynchronous Emacs Lisp functions to check a buffer.  The
new function *note flycheck-define-generic-checker: 1b. defines a new
generic syntax checker which calls a given function to conduct a syntax
check.

Syntax checkers for external commands are now called “command syntax
checkers”, and implemented as a special kind of generic syntax checkers.
*note flycheck-define-checker: 19. still defines a command syntax
checker.  The new function *note flycheck-define-command-checker: 177.
is a non-macro variant of *note flycheck-define-generic-checker: 1b.


File: flycheck.info,  Node: Error IDs,  Next: Unit test library for Flycheck,  Prev: Generic syntax checkers,  Up: Flycheck 0 22

8.1.1.15 Error IDs
..................

Syntax checkers can now add “IDs” to errors, which shall uniquely
identify a particular kind of error.  These IDs are used by Flycheck and
Flycheck extensions to identify errors, particularly in future
extensions such as error fixers.

The new ‘id’ form for error patterns allows to parse IDs.  Error parsers
and generic syntax checkers can set the *note flycheck-error id: 179.
slot to add IDs.  The *note flycheck-parse-checkstyle: 17a. parser
automatically adds IDs from the ‘source’ attribute of errors.

The new error filters *note flycheck-dequalify-error-ids: 17b. and *note
flycheck-remove-error-ids: 17c. manipulate IDs of parsed errors.  The
former removes qualifications from error IDs, turning ‘Foo.Bar.E1’ into
‘E1’.  The latter completely removes error IDs from parsed errors, for
use in cases where the syntax checker only outputs bogus IDs.

All built-in syntax checkers were updated to parse IDs, if possible.

The error list now shows these IDs, and *note
flycheck-copy-errors-as-kill: 85. can put them into the kill ring.


File: flycheck.info,  Node: Unit test library for Flycheck,  Prev: Error IDs,  Up: Flycheck 0 22

8.1.1.16 Unit test library for Flycheck
.......................................

The new library ‘flycheck-ert’ provides assertions and utilities to
write unit tests for Flycheck syntax checkers.  The library is part of
all Flycheck packages.

3rd party extensions may use this library to write test cases for their
syntax checkers.  *note Flycheck ERT API: 17e. documents the interface
of this library.


File: flycheck.info,  Node: Flycheck 0 21,  Next: Flycheck 0 20,  Prev: Flycheck 0 22,  Up: Release announcements

8.1.2 Flycheck 0.21
-------------------


date: Oct 26, 2014


version: 0.21

Flycheck 0.21 is out, with new syntax checkers, many new options,
improvements and bug fixes, and some important breaking changes.

This announcement covers the most important changes.  For details,
please refer to the *note Changelog: 165.

* Menu:

* Breaking changes: Breaking changes<2>. 
* Language support: Language support<2>. 
* Error list changes:: 
* Error navigation and display:: 
* Syntax checker definition and extension:: 
* Obtaining the new release:: 


File: flycheck.info,  Node: Breaking changes<2>,  Next: Language support<2>,  Up: Flycheck 0 21

8.1.2.1 Breaking changes
........................

     Warning: The value of the ‘:next-checkers’ property changed in a
     backwards-incompatible way.  The custom symbols ‘no-errors’ and
     ‘warnings-only’ are gone.  Instead the first item of each cons cell
     is the _maximum permissible error level_ now.  For instance,
     ‘:next-checkers ((no-errors . foo))’ now becomes ‘:next-checkers
     ((warning . foo))’.  Please update all your syntax checker
     definitions accordingly.

The *note html-tidy: f4. syntax checker does not check Web Mode buffers
anymore, because will frequently contain strictly invalid HTML.

The *note d-dmd: c7. syntax checker requires DMD 2.066 or newer now, to
add columns to error locations.

The error list highlights all errors at the current line now.
Highlighting of errors at point, i.e.  the
‘flycheck-error-list-highlight-at-point’ face and related functionality,
was removed, because it would frequently cause odd and confusing
highlighting.


File: flycheck.info,  Node: Language support<2>,  Next: Error list changes,  Prev: Breaking changes<2>,  Up: Flycheck 0 21

8.1.2.2 Language support
........................

Flycheck now supports the Coq proof language and RPM spec files with the
new syntax checkers *note coq: c3. and *note rpm-rpmlint: 125.
respectively.

* Menu:

* C/C++: C/C++<3>. 
* D: D<2>. 
* Go: Go<2>. 
* HTML: HTML<2>. 
* Less:: 
* Shell scripts:: 


File: flycheck.info,  Node: C/C++<3>,  Next: D<2>,  Up: Language support<2>

8.1.2.3 C/C++
.............

The new *note flycheck-gcc-openmp: b4. enables OpenMP for the *note
c/c++-gcc: ac. checker to suppress warnings about OpenMP pragmas.

The *note c/c++-gcc: ac. expands templates during syntax checks now.

The *note c/c++-clang: 9f. syntax checker now handles empty messages
from ‘#error’ and ‘#warning’ pragmas correctly.


File: flycheck.info,  Node: D<2>,  Next: Go<2>,  Prev: C/C++<3>,  Up: Language support<2>

8.1.2.4 D
.........

The *note d-dmd: c7. syntax checker reports columns now, making error
locations more precise.  This requires DMD 2.066.  Support for earlier
DMD versions was dropped.


File: flycheck.info,  Node: Go<2>,  Next: HTML<2>,  Prev: D<2>,  Up: Language support<2>

8.1.2.5 Go
..........

*note go-errcheck: e4. now handles packages correctly, fixing many
faulty warnings.


File: flycheck.info,  Node: HTML<2>,  Next: Less,  Prev: Go<2>,  Up: Language support<2>

8.1.2.6 HTML
............

*note html-tidy: f4. does not check Web Mode buffers anymore.


File: flycheck.info,  Node: Less,  Next: Shell scripts,  Prev: HTML<2>,  Up: Language support<2>

8.1.2.7 Less
............

*note less: 101. now correctly resolves relative paths in ‘data-uri’.


File: flycheck.info,  Node: Shell scripts,  Prev: Less,  Up: Language support<2>

8.1.2.8 Shell scripts
.....................

The new *note flycheck-shellcheck-excluded-warnings: 14a. allows to
exclude specific warnings from reports of the *note sh-shellcheck: 146.
checker.

In a related change, *note sh-shellcheck: 146. now includes the warning
code into all reported errors, which makes it easier to set *note
flycheck-shellcheck-excluded-warnings: 14a. accordingly.


File: flycheck.info,  Node: Error list changes,  Next: Error navigation and display,  Prev: Language support<2>,  Up: Flycheck 0 21

8.1.2.9 Error list changes
..........................

The error list at *note flycheck-list-errors: 4b. was refined and fixed:

   - Mouse support is restored: You can now click onto error messages
     again, to navigate to the error source.

   - When navigating inside the error list with ‘n’ or ‘p’, the error
     list does not randomly alter the point position anymore.

   - The syntax checker name now appears in a separate column.  The
     appearance of this column can be customized with new face :face:
     ‘flycheck-error-list-checker-name’.

   - Errors can be sorted by syntax checker name and message now.

   - The new hook *note flycheck-error-list-after-refresh-hook: 7e. now
     runs every time the error list was refreshed.

   - The error list does not highlight errors at point separately
     anymore, to avoid confusing highlighting.


File: flycheck.info,  Node: Error navigation and display,  Next: Syntax checker definition and extension,  Prev: Error list changes,  Up: Flycheck 0 21

8.1.2.10 Error navigation and display
.....................................

The new option *note flycheck-navigation-minimum-level: 8a. allows to
skip errors of specific error levels in error navigation, i.e.  ‘M-g n’
or ‘C-c ! n’.  Errors of levels below the value of this new option are
still shown in the buffer and in the error list, but they are skipped in
any of the navigation commands.

The new function *note
flycheck-display-error-messages-unless-error-list: 7a. shows messages of
the errors at point in the echo area, but only if the error list is
_not_ visible.  Use this function for *note
flycheck-display-errors-function: 2b. to make use of this feature.


File: flycheck.info,  Node: Syntax checker definition and extension,  Next: Obtaining the new release,  Prev: Error navigation and display,  Up: Flycheck 0 21

8.1.2.11 Syntax checker definition and extension
................................................

The ‘:next-checkers’ property requires a maximum permissible error level
now.  The custom predicates ‘no-errors’ and ‘warnings-only’ are gone.

Syntax checker definitions can use the new ‘null-device’ symbol to add
the name of the system null device (e.g.  ‘/dev/null’ on Unix, ‘NUL’ on
Windows) to the syntax checker arguments.  Typically, this would be used
to ignore files generated by the syntax checker.  See the definition of
the *note c/c++-gcc: ac. syntax checker for an example.

The new function *note flycheck-add-mode: 18c. adds major modes to
existing syntax checkers, by extending the ‘:modes’ property.


File: flycheck.info,  Node: Obtaining the new release,  Prev: Syntax checker definition and extension,  Up: Flycheck 0 21

8.1.2.12 Obtaining the new release
..................................

Follow the *note installation instructions: 33.  If you already have
Flycheck installed, just update it from ‘M-x list-packages’.


File: flycheck.info,  Node: Flycheck 0 20,  Next: Flycheck 0 19,  Prev: Flycheck 0 21,  Up: Release announcements

8.1.3 Flycheck 0.20
-------------------


date: Aug 12, 2014


version: 0.20

Flycheck 0.20 is out, with new syntax checkers, many new options,
improvements and bug fixes, and some important breaking changes.

This announcement covers the most important changes.  For details,
please refer to the *note Changelog: 165.

* Menu:

* Breaking changes: Breaking changes<3>. 
* Language support: Language support<3>. 
* Error list improvements: Error list improvements<2>. 
* User interface improvements:: 
* Miscellaneous new features:: 
* Miscellaneous fixes:: 
* Get it:: 


File: flycheck.info,  Node: Breaking changes<3>,  Next: Language support<3>,  Up: Flycheck 0 20

8.1.3.1 Breaking changes
........................

     Warning: The internals of syntax checker definitions changed in a
     backwards-incompatible way.  Due to the way macros work in Emacs
     Lisp *all packages depending on Flycheck* must be recompiled after
     upgrading to Flycheck 0.20!

Furthermore, the special meaning of a trailing equals sign in ‘(config
…)’ and ‘(config-file …)’ is removed.  Syntax checker definitions now
need to explicitly specify a function to concatenate the option and its
arguments.  ‘(option "--foo=" foo)’ now becomes ‘(option "--foo=" foo
concat)’.

As a consequence of this change, the position of the ‘filter’ in
‘(option …)’ changed.  The ‘filter’ is now in the *forth* element.
Hence, ‘(option "--foo" foo flycheck-option-int)’ now becomes ‘(option
"--foo" foo nil flycheck-option-int)’.


File: flycheck.info,  Node: Language support<3>,  Next: Error list improvements<2>,  Prev: Breaking changes<3>,  Up: Flycheck 0 20

8.1.3.2 Language support
........................

Flycheck now supports Ada and Fortran with *note ada-gnat: 96. and *note
fortran-gfortran: d8. respectively.

* Menu:

* C/C++: C/C++<4>. 
* Rust: Rust<3>. 
* Scala: Scala<2>. 
* Sass/SCSS:: 
* Javascript: Javascript<2>. 
* Ruby: Ruby<2>. 


File: flycheck.info,  Node: C/C++<4>,  Next: Rust<3>,  Up: Language support<3>

8.1.3.3 C/C++
.............

C/C++ can now be checked with GCC (*note c/c++-gcc: ac.) as an
alternative to Clang.  GCC supports the same options as Clang, with the
exception of *note flycheck-clang-blocks: a3.

The Clang syntax checker now supports the Clang block syntax with the
new option *note flycheck-clang-blocks: a3, and allows to disable
exceptions with *note flycheck-clang-no-exceptions: a9.

Furthermore, temporary files for the Clang syntax checker are now
created in the system temporary directory.


File: flycheck.info,  Node: Rust<3>,  Next: Scala<2>,  Prev: C/C++<4>,  Up: Language support<3>

8.1.3.4 Rust
............

Support for Rust creates is greatly improved.  You can now specify the
type of crate to check with ‘flycheck-rust-crate-type’, and the root
file of the crate with ‘flycheck-rust-crate-root’.  The former avoids
redundant warnings due to unused code, and the latter helps to resolve
relative module references.

Flycheck also parses info messages from Rust now.


File: flycheck.info,  Node: Scala<2>,  Next: Sass/SCSS,  Prev: Rust<3>,  Up: Language support<3>

8.1.3.5 Scala
.............

Flycheck now supports Scalastyle(1) with *note scala-scalastyle: 13e.

   ---------- Footnotes ----------

   (1) http://www.scalastyle.org/


File: flycheck.info,  Node: Sass/SCSS,  Next: Javascript<2>,  Prev: Scala<2>,  Up: Language support<3>

8.1.3.6 Sass/SCSS
.................

*note sass: 13a. and *note scss: 142. now use a temporary directory for
their cache and do not clutter the source directory anymore.


File: flycheck.info,  Node: Javascript<2>,  Next: Ruby<2>,  Prev: Sass/SCSS,  Up: Language support<3>

8.1.3.7 Javascript
..................

*note flycheck-eslintrc: fb. is now ‘nil’ by default.  ESLint(1) will
now find its configuration file by itself, which enables configuration
cascading.  See Configuring ESLint(2) for more information.

   ---------- Footnotes ----------

   (1) http://eslint.org/

   (2) http://eslint.org/docs/configuring/


File: flycheck.info,  Node: Ruby<2>,  Prev: Javascript<2>,  Up: Language support<3>

8.1.3.8 Ruby
............

*note ruby-rubylint: 12c. now supports configuration files with *note
flycheck-rubylintrc: 12f.  This requires ruby-lint 2.0.2 or newer.


File: flycheck.info,  Node: Error list improvements<2>,  Next: User interface improvements,  Prev: Language support<3>,  Up: Flycheck 0 20

8.1.3.9 Error list improvements
...............................

The error list (*note flycheck-list-errors: 4b.) got a bunch of
improvements:

   - Errors can now be sorted by error level and by error location,
     either by clicking on the headers of ‘line’ and ‘level’
     respectively, or by pressing ‘S’ when the point is on the text of
     the corresponding column.

   - Pressing ‘RET’ on any error in the error list now jumps immediately
     to the error location.

   - ‘n’ and ‘p’ now move by errors instead by lines, even with
     multi-line error messages, and display the error location in
     another window while navigating.


File: flycheck.info,  Node: User interface improvements,  Next: Miscellaneous new features,  Prev: Error list improvements<2>,  Up: Flycheck 0 20

8.1.3.10 User interface improvements
....................................

The mode line indicator of Flycheck is now customizable with *note
flycheck-mode-line: 8e, which is a mode line template (see *note
(elisp)Mode Line Format::).  The mode line of the error list buffer is
customizable as well, with ‘flycheck-error-list-mode-line’.

The Flycheck menu at _Tools -> Syntax Checking_ was improved.  It now
provides an item to toggle Flycheck Mode in the current buffer.  Items
that are not available currently are now disabled.  The menu is also
shown on the mode line indicator now.

*note flycheck-compile: 19c. now prompts for a syntax checker to use,
defaulting to the last used for the current buffer.

When Flycheck asks for a syntax checker in the minibuffer, it now
presents a reasonable default.


File: flycheck.info,  Node: Miscellaneous new features,  Next: Miscellaneous fixes,  Prev: User interface improvements,  Up: Flycheck 0 20

8.1.3.11 Miscellaneous new features
...................................

The new hook *note flycheck-status-changed-functions: 19e. lets
extensions and customization react on any status change in Flycheck.

Error levels defined with ‘flycheck-define-error-level’ can now have a
numeric severity used for sorting, with ‘:severity’.


File: flycheck.info,  Node: Miscellaneous fixes,  Next: Get it,  Prev: Miscellaneous new features,  Up: Flycheck 0 20

8.1.3.12 Miscellaneous fixes
............................

Flycheck now properly unloads with ‘unload-feature’.

The *note emacs-lisp: cd. checker does not longer choke when
‘package-initialize’ signals an error.


File: flycheck.info,  Node: Get it,  Prev: Miscellaneous fixes,  Up: Flycheck 0 20

8.1.3.13 Get it
...............

Follow the *note installation instructions: 33.  If you already have
Flycheck installed, just update it from ‘M-x list-packages’.


File: flycheck.info,  Node: Flycheck 0 19,  Next: Flycheck 0 18,  Prev: Flycheck 0 20,  Up: Release announcements

8.1.4 Flycheck 0.19
-------------------


date: Jun 12, 2014


version: 0.19

We are pleased to announce the release of Flycheck 0.19.

* Menu:

* Breaking changes: Breaking changes<4>. 
* Languages:: 
* New features:: 
* Bug fixes:: 
* Misc changes:: 
* Get it: Get it<2>. 


File: flycheck.info,  Node: Breaking changes<4>,  Next: Languages,  Up: Flycheck 0 19

8.1.4.1 Breaking changes
........................

*note ruby-rubylint: 12c. requires Ruby Lint 2.0 or newer, due to some
breaking changes in the command line interface of Ruby Lint.


File: flycheck.info,  Node: Languages,  Next: New features,  Prev: Breaking changes<4>,  Up: Flycheck 0 19

8.1.4.2 Languages
.................

* Menu:

* C/C++: C/C++<5>. 
* Emacs Lisp: Emacs Lisp<3>. 
* Go: Go<3>. 
* Haskell: Haskell<3>. 
* Rust: Rust<4>. 


File: flycheck.info,  Node: C/C++<5>,  Next: Emacs Lisp<3>,  Up: Languages

8.1.4.3 C/C++
.............

The new *note flycheck-cppcheck-inconclusive: b7. enables *note
c/c++-cppcheck: a1. tests that might yield false positives.

When reporting errors in included files, *note c/c++-clang: 9f. now
includes the error messages in the faulty include file in the error
message on the affected ‘#include’ statement.


File: flycheck.info,  Node: Emacs Lisp<3>,  Next: Go<3>,  Prev: C/C++<5>,  Up: Languages

8.1.4.4 Emacs Lisp
..................

Flycheck now removes redundant whitespace in the error messages reported
by the *note emacs-lisp: cd. syntax checker.


File: flycheck.info,  Node: Go<3>,  Next: Haskell<3>,  Prev: Emacs Lisp<3>,  Up: Languages

8.1.4.5 Go
..........

Go code is now checked for unhandled error return values with the new
*note go-errcheck: e4. syntax checker.

Flycheck does not longer signal errors in Go Mode, when the ‘go’
executable is not available.


File: flycheck.info,  Node: Haskell<3>,  Next: Rust<4>,  Prev: Go<3>,  Up: Languages

8.1.4.6 Haskell
...............

Flycheck now dedents the error messages reported by *note haskell-ghc:
eb, and properly checks Haskell files without extensions.


File: flycheck.info,  Node: Rust<4>,  Prev: Haskell<3>,  Up: Languages

8.1.4.7 Rust
............

*note rust: 133. has a new *note flycheck-rust-check-tests: 134. option,
to disable syntax checking of test code.


File: flycheck.info,  Node: New features,  Next: Bug fixes,  Prev: Languages,  Up: Flycheck 0 19

8.1.4.8 New features
....................

Syntax checkers may now use the ‘:error-filter’ argument to *note
flycheck-define-checker: 19. to apply a function to all errors after
parsing.  The function is given the list of parsed errors, and shall
return the list of errors that Flycheck is to use as the result of the
syntax checker.  It may modify the list and all error objects therein
in-place.

The new option *note flycheck-keymap-prefix: 50. lets you change the
prefix key used by Flycheck.  The default is still ‘C-c !’.

     Warning: The Flycheck manual assumes that you are using the default
     prefix key.  You are encouraged to leave the prefix key unchanged,
     and instead add your own custom bindings to the Flycheck key map:

          (eval-after-load 'flycheck
            '(define-key flycheck-mode-map (kbd "<f8>") #'flycheck-list-errors))

Likewise, you now can configure the prefix of in-place temporary files
created by Flycheck with *note flycheck-temp-prefix: 5b.

     Warning: Changing the prefix may break syntax checkers.  In doubt,
     stick to the default prefix.


File: flycheck.info,  Node: Bug fixes,  Next: Misc changes,  Prev: New features,  Up: Flycheck 0 19

8.1.4.9 Bug fixes
.................

Flycheck now correctly kills running process and removes the temporary
files when stopping a syntax check or killing the buffer.

Also, Flycheck does not long warn if a syntax checker only reports
errors for other files.


File: flycheck.info,  Node: Misc changes,  Next: Get it<2>,  Prev: Bug fixes,  Up: Flycheck 0 19

8.1.4.10 Misc changes
.....................

Flycheck now has an official logo, and its own mail address.  You can
see both on the Github profile(1) of the Flycheck project.

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/


File: flycheck.info,  Node: Get it<2>,  Prev: Misc changes,  Up: Flycheck 0 19

8.1.4.11 Get it
...............

See *note Installation: 31.


File: flycheck.info,  Node: Flycheck 0 18,  Next: Flycheck 0 17,  Prev: Flycheck 0 19,  Up: Release announcements

8.1.5 Flycheck 0.18
-------------------


date: Mar 24, 2014


version: 0.18

Today, we release Flycheck 0.18.

It’s quite some time since the last release, but there are not many big
changes, as Flycheck becomes more and more mature, and slowly approaches
a 1.0 release.

* Menu:

* Breaking changes: Breaking changes<5>. 
* Syntax checkers: Syntax checkers<2>. 
* Bug fixes: Bug fixes<2>. 
* Get it: Get it<3>. 


File: flycheck.info,  Node: Breaking changes<5>,  Next: Syntax checkers<2>,  Up: Flycheck 0 18

8.1.5.1 Breaking changes
........................

There are some small breaking changes.  Most notably, the naming
conventions of various shell script syntax checkers were changed.  All
of them now use the prefix ‘sh-’, and the former ‘sh-’ checkers now have
the prefix ‘sh-posix-’.  This affects their executable variables as
well.

Furthermore, the version requirements for some syntax checker tools
changed:

   - *note rust: 133. needs upcoming Rust 0.10 now, because Flycheck
     followed backwards-incompatible upstream changes in the ‘rustc’
     options.

   - *note rst-sphinx: 128. needs Sphinx 1.2 now, because Flycheck uses
     a special writer now, which is not present in previous releases.


File: flycheck.info,  Node: Syntax checkers<2>,  Next: Bug fixes<2>,  Prev: Breaking changes<5>,  Up: Flycheck 0 18

8.1.5.2 Syntax checkers
.......................

Flycheck can now check BSD Makefile with BSD Make as well.  The *note
make: 105. syntax checker does not use GNU Make specific options
anymore, and will work with any POSIX compatible variant of Make.

Go syntax checking got a major update with new syntax checkers based on
Golint(1) (*note go-golint: e0.) and ‘go tool vet’ (*note go-vet: e1.).
Go now has one of the most complete and powerful syntax checker chains
in Flycheck.

Support for Perl and for shell scripts was greatly improved by
introducing two new syntax checkers:

   - *note perl-perlcritic: 109. checks Perl with the powerful
     Perl-Critic(2) tool.

   - *note sh-shellcheck: 146. checks Shell scripts with the awesome
     Shellcheck(3) tool, which finds all sorts of idiomatic and
     semantics mistakes in shell scripts of various shell languages, and
     will greatly improve your shell scripting.

D users can now tell *note d-dmd: c7. about include directories with the
new option *note flycheck-dmd-include-path: c8.  Likewise, Rust users
can use *note flycheck-rust-library-path: 137. now.

   ---------- Footnotes ----------

   (1) https://github.com/golang/lint

   (2) https://metacpan.org/pod/Perl::Critic

   (3) https://github.com/koalaman/shellcheck


File: flycheck.info,  Node: Bug fixes<2>,  Next: Get it<3>,  Prev: Syntax checkers<2>,  Up: Flycheck 0 18

8.1.5.3 Bug fixes
.................

As always, a good deal of bugs and issues was fixed:

   - *note puppet-lint: 113. includes the name of the corresponding
     check in the error message now.

   - *note rst: 127. handles ‘.. include::’ directives with relative
     file names now.

   - *note rst-sphinx: 128. will no longer choke if the document being
     checked contains custom nodes without ‘text’ writers.

   - *note rust: 133. will not longer emit pointless warnings about
     missing ‘main’ functions in library creates.

   - Various error parsing problems were corrected in *note c/c++-clang:
     9f, *note go-build: e2. and *note go-test: e3.


File: flycheck.info,  Node: Get it<3>,  Prev: Bug fixes<2>,  Up: Flycheck 0 18

8.1.5.4 Get it
..............

See *note Installation: 31.


File: flycheck.info,  Node: Flycheck 0 17,  Next: Flycheck 0 16,  Prev: Flycheck 0 18,  Up: Release announcements

8.1.6 Flycheck 0.17
-------------------


date: Feb 1, 2014


version: 0.17

Flycheck 0.17 was released today.  Though it’s just about two weeks
since the last release, there are quite some changes.

* Menu:

* Breaking changes: Breaking changes<6>. 
* New online manual:: 
* Syntax checkers: Syntax checkers<3>. 
* Extending syntax checkers:: 
* Other bug fixes and improvements:: 


File: flycheck.info,  Node: Breaking changes<6>,  Next: New online manual,  Up: Flycheck 0 17

8.1.6.1 Breaking changes
........................

The default value of *note flycheck-completion-system: 65. was changed
to ‘nil’, i.e.  Flycheck now uses plain ‘completing-read’ as default
completion system.  To restore the previous default (i.e.  IDO),
customize it with ‘M-x customize-variable RET
flycheck-completion-system’ or add the following to your ‘init.el’:

     (eval-after-load 'flycheck '(setq flycheck-completion-system 'ido))

Also, *note flycheck-count-errors: 92. was changed to count errors of
all levels.  It returns an alist mapping error levels to the amount of
errors of that level.


File: flycheck.info,  Node: New online manual,  Next: Syntax checkers<3>,  Prev: Breaking changes<6>,  Up: Flycheck 0 17

8.1.6.2 New online manual
.........................

The most notable change is the new online documentation at
‘http://flycheck.readthedocs.org’, which replaces the old online manual
at ‘http://flycheck.github.io’.  The latter now redirects to the former.

The new manual is written with Sphinx(1) instead of Texinfo(2).  The
underlying markup is ReStructuredText(3), which is simpler, less
cluttered, and more powerful than the TeX dialect of Texinfo(4).  It is
also more popular, as nowadays Sphinx has become a standard tool among
Python developers, and is also increasingly used with other languages as
well.  For instance, the LLVM documentation(5) is written in Sphinx.

Besides providing a better HTML documentation, we hope that the new
manual lowers the barrier to external contributors and increases the
amount of contributions to the documentation.

The documentation is now automatically re-build after each push to the
Github repository, so that ‘http://flycheck.readthedocs.org/en/latest’
now always hosts the up to date documentation.  Besides, there are
separate sites for each versioned release of Flycheck.  For instance,
‘http://flycheck.readthedocs.org/en/0.17’ now hosts the documentation of
Flycheck 0.17 now.

Beyond the manual itself, the new documentation now also includes the
release notes, which were previously hosted at
‘http://www.lunaryorn.com’, and the *note comparison with Flymake: d,
which was previously hosted at the Github Wiki of Flycheck.  The Github
Wiki is disabled now, to make all documentation available from a single
place.

Unfortunately, the Info manual included in the Flycheck ELPA packages is
somewhat inferior now, because there is some idiomatic gap between
Sphinx and Texinfo.  It’s still usable, though, and we hope to overcome
the most striking shortcomings over the time.

   ---------- Footnotes ----------

   (1) http://sphinx-doc.org

   (2) http://www.gnu.org/software/texinfo/

   (3) http://docutils.sourceforge.net/rst.html

   (4) http://www.gnu.org/software/texinfo/

   (5) http://llvm.org/docs/


File: flycheck.info,  Node: Syntax checkers<3>,  Next: Extending syntax checkers,  Prev: New online manual,  Up: Flycheck 0 17

8.1.6.3 Syntax checkers
.......................

Flycheck can now check GNU Makefiles (see [GH-321](1)) with the new
‘make-gmake’ syntax checker.

The *note rust: 133. syntax checker now uses ‘--no-trans’ to check for
more than just syntax errors.  For instance, it will report unused
variables now.

As part of the transition to the new manual, Flycheck now provides a
syntax checker for Sphinx documents (*note rst-sphinx: 128.).  The *note
rst: 127. syntax checker does not check documents within a Sphinx
project anymore, do avoid false positives from Sphinx-specific markup.

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/321


File: flycheck.info,  Node: Extending syntax checkers,  Next: Other bug fixes and improvements,  Prev: Syntax checkers<3>,  Up: Flycheck 0 17

8.1.6.4 Extending syntax checkers
.................................


File: flycheck.info,  Node: Other bug fixes and improvements,  Prev: Extending syntax checkers,  Up: Flycheck 0 17

8.1.6.5 Other bug fixes and improvements
........................................

   - Flycheck does not longer attach syntax checker processes to the
     buffer anymore, improving compatibility with Tabbar Mode
     ([GH-298](1)).

   - The *note emacs-lisp: cd. and *note emacs-lisp-checkdoc: ce. syntax
     checkers do not visit the file being checked anymore, to avoid
     unintended side effects from unsafe local variables, etc.
     ([GH-319](2))

   - When a buffer changes while being checked, Flycheck immediately
     re-checks the buffer after the check finished, to avoid outdated
     errors ([GH-301](3)).

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/298

   (2) https://github.com/flycheck/flycheck/issues/319

   (3) https://github.com/flycheck/flycheck/issues/301


File: flycheck.info,  Node: Flycheck 0 16,  Next: Flycheck 0 15,  Prev: Flycheck 0 17,  Up: Release announcements

8.1.7 Flycheck 0.16
-------------------


date: Jan 12, 2014


version: 0.16

Time for a new release of Flycheck, the modern syntax-checking extension
for Emacs:

In two months since the last release, Flycheck got a bunch of new syntax
checkers, a brand-new error list, and the ability to override the
executables of syntax checkers.

Let’s go through the list of important changes.  For a detailed list,
please read the *note Changelog: 165.

* Menu:

* Breaking changes: Breaking changes<7>. 
* Syntax checkers: Syntax checkers<4>. 
* New features: New features<2>. 
* Improved error list:: 
* Get it: Get it<4>. 


File: flycheck.info,  Node: Breaking changes<7>,  Next: Syntax checkers<4>,  Up: Flycheck 0 16

8.1.7.1 Breaking changes
........................

   - The Hdevtools syntax checker was removed from Flycheck into a
     separate package flycheck-hdevtools(1) due to various issues
     ([GH-275](2)).

   - Support for coffeelint 0.x is dropped.

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck-hdevtools

   (2) https://github.com/flycheck/flycheck/issues/275


File: flycheck.info,  Node: Syntax checkers<4>,  Next: New features<2>,  Prev: Breaking changes<7>,  Up: Flycheck 0 16

8.1.7.2 Syntax checkers
.......................

* Menu:

* New languages and checkers:: 
* Better Haskell support:: 
* Miscellaneous new options:: 


File: flycheck.info,  Node: New languages and checkers,  Next: Better Haskell support,  Up: Syntax checkers<4>

8.1.7.3 New languages and checkers
..................................

Flycheck supports _eight_ new languages: AsciiDoc(1), Cfengine(2),
Chef(3) recipes, ERuby(4), Handlebars(5), Racket(6), Texinfo(7), and
Verilog(8).  Additionally, there are a new syntax checker for Javascript
(eslint(9)), Ruby (ruby-lint(10)), and YAML (js-yaml(11)).

   ---------- Footnotes ----------

   (1) http://asciidoc.org/

   (2) http://cfengine.com/

   (3) https://www.getchef.com/

   (4) http://www.kuwata-lab.com/erubis/

   (5) http://handlebarsjs.com/

   (6) http://racket-lang.org/

   (7) https://www.gnu.org/software/texinfo

   (8) https://en.wikipedia.org/wiki/Verilog

   (9) https://github.com/eslint/eslint

   (10) https://github.com/YorickPeterse/ruby-lint

   (11) https://github.com/nodeca/js-yaml


File: flycheck.info,  Node: Better Haskell support,  Next: Miscellaneous new options,  Prev: New languages and checkers,  Up: Syntax checkers<4>

8.1.7.4 Better Haskell support
..............................

Despite the aforementioned removal of Hdevtools, Haskell support made a
leap forward.  The GHC syntax checker resolves local imports properly
now, and has new options to change the search path and the package
databases.

The brand-new flycheck-haskell(1) extension makes use of these variables
to configure the syntax checker properly in Cabal projects.  The
extensions adds all source directories of a Cabal project to the GHC
search path, and enables the package database of the project’s Cabal
sandbox.

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck-haskell


File: flycheck.info,  Node: Miscellaneous new options,  Prev: Better Haskell support,  Up: Syntax checkers<4>

8.1.7.5 Miscellaneous new options
.................................

   - The SASS and SCSS syntax checkers support the Compass framework
     now, via *note flycheck-sass-compass: 13b. and *note
     flycheck-scss-compass: 143. respectively.

   - Clang can enable Microsoft C/C++ extensions now, via *note
     flycheck-clang-ms-extensions: a8.

   - Rubocop can inhibit all style hints via the new *note
     flycheck-rubocop-lint-only: 12d.


File: flycheck.info,  Node: New features<2>,  Next: Improved error list,  Prev: Syntax checkers<4>,  Up: Flycheck 0 16

8.1.7.6 New features
....................

* Menu:

* Syntax checker executables: Syntax checker executables<2>. 
* Disable syntax checkers easily:: 


File: flycheck.info,  Node: Syntax checker executables<2>,  Next: Disable syntax checkers easily,  Up: New features<2>

8.1.7.7 Syntax checker executables
..................................

You can now override the executables of syntax checkers.  See *note
Syntax checker executables: 69. for details.


File: flycheck.info,  Node: Disable syntax checkers easily,  Prev: Syntax checker executables<2>,  Up: New features<2>

8.1.7.8 Disable syntax checkers easily
......................................

Flycheck as a new customization options *note
flycheck-disabled-checkers: 5f, to easily disable syntax checkers.

Previously, you needed to remove syntax checkers from *note
flycheck-checkers: 5e. to disable them, either via the Customization
interface, or by custom Emacs Lisp:

     (setq flycheck-checkers (delq 'emacs-lisp-checkdoc flycheck-checkers))

With the new variable, there is no need for this convoluted code
anymore.  Instead, just set the variable:

     (setq flycheck-disabled-checkers '(emacs-lisp-checkdoc))

Even better, you can easily use this variable in file or directory
variables.  For instance, you can use ‘M-x add-file-local-variable RET
flycheck-disabled-checkers RET (emacs-lisp-checkdoc)’ in your ‘init.el’
to disable Checkdoc warnings while editing your ‘init.el’.


File: flycheck.info,  Node: Improved error list,  Next: Get it<4>,  Prev: New features<2>,  Up: Flycheck 0 16

8.1.7.9 Improved error list
...........................

This release continues the improvements to the error list started in the
last release.  The error list is now based on Tabulated List Mode (see
[GH-230](1)), to address a number of issues in the old Compile
Mode-based error list (e.g.  misleading commands and menu items such as
“Recompile”).

The new error list, which you can see in the screenshot above, fixes
these issues, and has an improved visual appearance.  The columns are
aligned now, and the superfluous file name is omitted.

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/230


File: flycheck.info,  Node: Get it<4>,  Prev: Improved error list,  Up: Flycheck 0 16

8.1.7.10 Get it
...............

See *note Installation: 31.


File: flycheck.info,  Node: Flycheck 0 15,  Prev: Flycheck 0 16,  Up: Release announcements

8.1.8 Flycheck 0.15
-------------------


date: Nov 15, 2013


version: 0.15

I have the honour and pleasure to announce a new release of Flycheck,
the modern syntax-checking extension for Emacs.

It is three months since the last release, so this release brings quite
a lot of changes.  For a complete list of all changes, please read the
complete list of *note Changelog: 165.  This article will just cover the
most important changes.

* Menu:

* Breaking changes: Breaking changes<8>. 
* New syntax checkers:: 
* New error list:: 
* C/C++ support:: 
* New info level messages:: 
* Custom error levels:: 
* Other improvements:: 
* Get it: Get it<5>. 


File: flycheck.info,  Node: Breaking changes<8>,  Next: New syntax checkers,  Up: Flycheck 0 15

8.1.8.1 Breaking changes
........................

This release introduces three breaking changes.  Two of these are
related to the *note new-error-list: 1d0.:

     Warning: ‘flycheck-display-errors-in-list’ is gone.  If you had
     previously set *note flycheck-display-errors-function: 2b. to this
     function, *remove* this setting from your configuration.

Besides, ‘flycheck-list-errors’ does not take a prefix argument anymore.
It cannot list errors at point any longer.

The third breaking change is the removal of ‘flycheck-declare-checker’,
which was obsolete already since the last release.  Unless you have
custom syntax checkers not yet ported to *note flycheck-define-checker:
19, this won’t affect you in any way.  I am not aware of any 3rd party
extension which still uses ‘flycheck-declare-checker’.


File: flycheck.info,  Node: New syntax checkers,  Next: New error list,  Prev: Breaking changes<8>,  Up: Flycheck 0 15

8.1.8.2 New syntax checkers
...........................

Two new languages made it into this release: YAML (using the YAML parser
from the Ruby standard library) and Slim(1).

Additionally there are new syntax checkers for Javascript and PHP.
Flycheck can check Javascript with Google’s Closure Linter(2), in place
of Jshint.  For PHP, Flycheck now uses the PHP Mess Detector(3) to check
for semantic errors, in _addition_ to a syntax checks with PHP CLI and a
style checks with PHP CodeSniffer.

   ---------- Footnotes ----------

   (1) http://slim-lang.com

   (2) https://code.google.com/p/closure-linter/

   (3) http://phpmd.org/


File: flycheck.info,  Node: New error list,  Next: C/C++ support,  Prev: New syntax checkers,  Up: Flycheck 0 15

8.1.8.3 New error list
......................

The error list at ‘C-c ! l’ has been redesigned.

It is no longer a static list filled once by ‘C-c ! l’.  Instead, it
automatically updates after each syntax check, and follows the current
window, i.e.  if you switch to another window, the error list is updated
to show the errors of the corresponding buffer.

Furthermore, the error list highlights the errors at point and at the
current line.  If you move the point to an error location, the error
list automatically scrolls to the corresponding error, and highlights it
with the new ‘flycheck-error-list-highlight-at-point’ face.
Additionally, it highlights all other errors at the current line with
the new *note flycheck-error-list-highlight: 7f. face.


File: flycheck.info,  Node: C/C++ support,  Next: New info level messages,  Prev: New error list,  Up: Flycheck 0 15

8.1.8.4 C/C++ support
.....................

The *note c/c++-clang: 9f. syntax checker for C and C++ got a bunch of
new options:

   - Set additional preprocessor definitions for syntax checking with
     *note flycheck-clang-definitions: a4, corresponding to the ‘-D’
     option for ‘clang’.

   - Include additional headers or files during syntax checking with
     *note flycheck-clang-includes: a6, corresponding to the ‘-include’
     option for ‘clang’.

   - Choose the language standard, e.g.  C++98 or C++11, with *note
     flycheck-clang-language-standard: a7, corresponding to the ‘-std’
     option for ‘clang’.

   - Disable RTTI during syntax checking with *note
     flycheck-clang-no-rtti: aa, corresponding to the ‘-fno-rtti’ option
     for ‘clang’.  In current Clang versions, however, this does not
     cause errors or warnings when using RTTI.

   - Choose the standard library for syntax checking with *note
     flycheck-clang-standard-library: ab, corresponding to the ‘-stdlib’
     option for ‘clang’.  Currently, Clang supports ‘libstdc++’ for the
     good old GNU standard library, and ‘libc++’ for the modern Libc++
     from the LLVM project.

Besides, the Clang syntax checker was changed to correctly handle local
include files, e.g.  ‘#include "foo.h"’.


File: flycheck.info,  Node: New info level messages,  Next: Custom error levels,  Prev: C/C++ support,  Up: Flycheck 0 15

8.1.8.5 New ‘info’ level messages
.................................

In addition to the ‘warning’ and ‘error’ levels, Flycheck now has a new
‘info’ level, which is intended for informational messages which provide
additional information about a specific location in the source code.
With this new level, the semantics of error levels is as follows:

‘error’

     Definite errors which must be fixed for the source code to work
     correctly

‘warning’

     Potential errors and issues, which can be ignored, but still
     deserve to be fixed

‘info’

     Additional information about a specific source code location, which
     does not indicate an error or issue, but is still worth noting

Some syntax checkers were changed to use this new level for messages,
which do not really fit into the ‘warning’ level:

   - *note c/c++-clang: 9f. for ‘note:’ messages

   - *note python-flake8: 115. for PEP8 naming issues emitted by the
     ‘pep8-naming’ plugin

   - *note python-pylint: 11a. for convention level messages, e.g.
     naming issues, etc.

The new level is already supported by the popular Solarized(1) and
Zenburn(2) themes.

   ---------- Footnotes ----------

   (1) https://github.com/bbatsov/solarized-emacs

   (2) https://github.com/bbatsov/zenburn-emacs


File: flycheck.info,  Node: Custom error levels,  Next: Other improvements,  Prev: New info level messages,  Up: Flycheck 0 15

8.1.8.6 Custom error levels
...........................

The new ‘info’ level is backed by a generic mechanism to define new
error levels, using the new function *note flycheck-define-error-level:
27.  For instance, the ‘warning’ level is now defined as follows:

     (flycheck-define-error-level 'warning
       :overlay-category 'flycheck-warning-overlay
       :fringe-bitmap 'question-mark
       :fringe-face 'flycheck-fringe-warning)

A error level consists of a category for overlays, which defines the
appearance and priority of overlays for this level, and bitmap and face
for fringe indicators.

After defining an error level, you can use it the error patterns of a
syntax checker as usual.


File: flycheck.info,  Node: Other improvements,  Next: Get it<5>,  Prev: Custom error levels,  Up: Flycheck 0 15

8.1.8.7 Other improvements
..........................

Beside these important changes, there are also a number of smaller
improvements:

   - Flycheck does not longer check encrypted files for obvious reasons.

   - The *note emacs-lisp-checkdoc: ce. syntax checker does not check
     ‘.dir-locals.el’ anymore.

   - *note python-pylint: 11a. now parses error columns from the output
     of ‘pylint’.

   - Spurious “flawed definition” warnings in *note lua: 103, *note rst:
     127. and *note go-build: e2. were fixed.

   - *note c/c++-cppcheck: a1. output now parses correctly when using
     the pure Emacs Lisp XML parser in ‘xml.el’.

          Note: Nonetheless, you are advised to use Emacs with ‘libxml’
          support.  Most Linux distributions ship Emacs packages with
          ‘libxml’ support, but if you are building your own, or use a
          source-based distribution such as Gentoo, take care to enable
          ‘libxml’ for Emacs.


File: flycheck.info,  Node: Get it<5>,  Prev: Other improvements,  Up: Flycheck 0 15

8.1.8.8 Get it
..............

See *note Installation: 31.


File: flycheck.info,  Node: Changelog,  Prev: Release announcements,  Up: Flycheck releases

8.2 Changelog
=============

* Menu:

* master (in development): master in development. 
* 0.22 (Dec 23, 2014): 0 22 Dec 23 2014. 
* 0.21 (Oct 26, 2014): 0 21 Oct 26 2014. 
* 0.20 (Aug 12, 2014): 0 20 Aug 12 2014. 
* 0.19 (Jun 12, 2014): 0 19 Jun 12 2014. 
* 0.18 (Mar 24, 2014): 0 18 Mar 24 2014. 
* 0.17 (Feb 1, 2014): 0 17 Feb 1 2014. 
* 0.16 (Jan 11, 2014): 0 16 Jan 11 2014. 
* 0.15 (Nov 15, 2013): 0 15 Nov 15 2013. 
* 0.14.1 (Aug 16, 2013): 0 14 1 Aug 16 2013. 
* 0.14 (Aug 15, 2013): 0 14 Aug 15 2013. 
* 0.13 (Jun 28, 2013): 0 13 Jun 28 2013. 
* 0.12 (May 18, 2013): 0 12 May 18 2013. 
* 0.11 (May 01, 2013): 0 11 May 01 2013. 
* 0.10 (Apr 21, 2013): 0 10 Apr 21 2013. 
* 0.9 (Apr 13, 2013): 0 9 Apr 13 2013. 
* 0.8 (Apr 9, 2013): 0 8 Apr 9 2013. 
* 0.7.1 (Feb 23, 2013): 0 7 1 Feb 23 2013. 
* 0.7 (Feb 14, 2013): 0 7 Feb 14 2013. 
* 0.6.1 (Jan 30, 2013): 0 6 1 Jan 30 2013. 
* 0.6 (Jan 29, 2013): 0 6 Jan 29 2013. 
* 0.5 (Dec 28, 2012): 0 5 Dec 28 2012. 
* 0.4 (Nov 21, 2012): 0 4 Nov 21 2012. 
* 0.3 (Nov 21, 2012): 0 3 Nov 21 2012. 
* 0.2 (Oct 25, 2012): 0 2 Oct 25 2012. 
* 0.1 (Oct 11, 2012): 0 1 Oct 11 2012. 


File: flycheck.info,  Node: master in development,  Next: 0 22 Dec 23 2014,  Up: Changelog

8.2.1 master (in development)
-----------------------------

   - New syntax checkers:

        - R with ‘lintr’ [GH-512](1)

   - Improvements:

        - ‘chef-foodcritic’ handles relative paths correctly now
          [GH-556](2)

   - Bug fixes:

        - Cache last used syntax checker only when actually checking the
          buffer [GH-559](3)

        - Fix void variable error when trying to use ‘flycheck-compile’
          with a non-command checker [GH-563](4)

        - Fix faulty mode line reporting [GH-564](5)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/512

   (2) https://github.com/flycheck/flycheck/issues/556

   (3) https://github.com/flycheck/flycheck/issues/559

   (4) https://github.com/flycheck/flycheck/issues/563

   (5) https://github.com/flycheck/flycheck/issues/564


File: flycheck.info,  Node: 0 22 Dec 23 2014,  Next: 0 21 Oct 26 2014,  Prev: master in development,  Up: Changelog

8.2.2 0.22 (Dec 23, 2014)
-------------------------

   - *Breaking changes*:

        - Never allow use of disabled checkers anymore, even with
          ‘flycheck-select-checker’

        - Error parsers *must* set the ‘:buffer’ and ‘:checker’ slots of
          ‘flycheck-error’ now

        - The internals of syntax checker definitions have changed
          again.  *All packages depending on Flycheck must be
          recompiled!*  [GH-524](1)

        - ‘flycheck-error-list-refresh’ is not an interactive command
          anymore

        - Replace ‘flycheck-perlcritic-verbosity’ with
          ‘flycheck-perlcritic-severity’

        - Replace ‘flycheck-copy-messages-as-kill’ with
          ‘flycheck-copy-errors-as-kill’ [GH-529](2)

        - Remove ‘flycheck-google-messages’ command

        - Options and config file variables are not buffer-local anymore
          [GH-546](3)

   - New syntax checkers:

        - Python with ‘py_compile’ [GH-484](4)

   - New features:

        - ‘flycheck-ert.el’ library to write unit tests for Flycheck
          extensions

        - Add ‘flycheck-define-generic-checker’ to define syntax
          checkers over arbitrary Emacs Lisp functions [GH-169](5)
          [GH-524](6)

        - Add ‘flycheck-define-command-checker’ as non-macro variant of
          ‘flycheck-define-checker’ [GH-524](7)

        - Add support for IDs of errors [GH-529](8)

        - Add special ‘id’ sexp to parse error ids with
          ‘:error-patterns’ [GH-529](9)

        - Parse error IDs from Checkstyle XML [GH-259](10)

        - ‘flycheck-copy-errors-as-kill’ can put error ids into kill
          ring now [GH-529](11)

        - Parse error IDs from many error checkers [GH-259](12)

        - Verify Flycheck setup in a buffer with ‘flycheck-verify-setup’
          [GH-338](13)

        - Add options for arbitrary arguments to some syntax checkers
          [GH-542](14)

        - Add ‘flycheck-flake8-error-level-alist’ to customize error
          levels from flake8 [GH-454](15)

   - Improvements:

        - Automatically disable syntax checkers that report too many
          errors [GH-476](16)

        - Reduce filesystem access when parsing errors to improve
          parsing speed

        - Add explicit ‘load-path’ inheritance to
          ‘flycheck-emacs-lisp-load-path’, via new ‘inherit’ value
          [GH-511](17)

        - Parse help messages from ‘rustc’ [GH-517](18)

        - ‘g’ in the error list checks the source buffer again
          [GH-532](19)

        - ‘haskell-ghc’ supports literate Haskell now [GH-535](20)

   - Bug fixes:

        - Properly parse notes in ‘sh-shellcheck’ [GH-508](21)

        - Fix shell quoting in ‘flycheck-compile’ [GH-522](22)
          [GH-523](23)

        - Fix faulty properties of customize options which broke
          ‘customize-changed’ and related functions

        - Fix use deprecated option in ‘coffee-coffeelint’

        - Fix error columns of ‘python-pylint’ and ‘tex-chktex’
          [GH-536](24)

        - Correctly compute error level of errors on included files in
          ‘c/c++-clang’ and ‘c/c++-gcc’ [GH-451](25)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/524

   (2) https://github.com/flycheck/flycheck/issues/529

   (3) https://github.com/flycheck/flycheck/issues/546

   (4) https://github.com/flycheck/flycheck/issues/484

   (5) https://github.com/flycheck/flycheck/issues/169

   (6) https://github.com/flycheck/flycheck/issues/524

   (7) https://github.com/flycheck/flycheck/issues/524

   (8) https://github.com/flycheck/flycheck/issues/529

   (9) https://github.com/flycheck/flycheck/issues/529

   (10) https://github.com/flycheck/flycheck/issues/259

   (11) https://github.com/flycheck/flycheck/issues/529

   (12) https://github.com/flycheck/flycheck/issues/259

   (13) https://github.com/flycheck/flycheck/issues/338

   (14) https://github.com/flycheck/flycheck/issues/542

   (15) https://github.com/flycheck/flycheck/issues/454

   (16) https://github.com/flycheck/flycheck/issues/476

   (17) https://github.com/flycheck/flycheck/issues/511

   (18) https://github.com/flycheck/flycheck/issues/517

   (19) https://github.com/flycheck/flycheck/issues/532

   (20) https://github.com/flycheck/flycheck/issues/535

   (21) https://github.com/flycheck/flycheck/issues/508

   (22) https://github.com/flycheck/flycheck/issues/522

   (23) https://github.com/flycheck/flycheck/issues/523

   (24) https://github.com/flycheck/flycheck/issues/536

   (25) https://github.com/flycheck/flycheck/issues/451


File: flycheck.info,  Node: 0 21 Oct 26 2014,  Next: 0 20 Aug 12 2014,  Prev: 0 22 Dec 23 2014,  Up: Changelog

8.2.3 0.21 (Oct 26, 2014)
-------------------------

   - *Breaking changes*:

        - ‘html-tidy’ is not enabled in Web Mode anymore [GH-464](1)

        - ‘d-dmd’ now requires DMD 2.066 or newer [GH-460](2)

        - ‘:next-checkers’ now requires the maximum permissible level
          instead of a custom predicate [GH-472](3)

        - Remove ‘flycheck-error-list-highlight-at-point’ face and
          related functionality [GH-490](4)

   - New syntax checkers:

        - Coq

        - RPM spec files with ‘rpmlint’ [GH-480](5) [GH-481](6)

   - New features:

        - Add ‘null-device’ symbol for syntax checker commands

        - Add ‘flycheck-display-error-messages-unless-error-list’ for
          ‘flycheck-error-display-function’

        - Add ‘flycheck-error-list-after-refresh-hook’ to run after the
          error list refreshes

        - Add ‘flycheck-navigation-minimum-level’ to restrict error
          levels available for navigation [GH-398](7) [GH-485](8)

        - The error list can be sorted by message and syntax checker
          name now [GH-500](9)

        - Add ‘flycheck-error-list-checker-name’ face to customize the
          appearance of the syntax checker name in the error list
          [GH-500](10)

        - Add ‘flycheck-shellcheck-excluded-warnings’ to exclude
          warnings from ShellCheck reports [GH-499](11)

        - Add ‘flycheck-add-mode’ to add a new major mode to a syntax
          checker [GH-506](12)

        - Add ‘flycheck-gcc-openmp’ to enable OpenMP for GCC in C/C++
          [GH-507](13)

   - Improvements:

        - Improve GCC syntax checking by expanding templates
          [GH-459](14)

        - ‘d-dmd’ reports errors with columns now [GH-460](15)

        - Remove Projectile-based config file search [GH-461](16)

        - Do not change point when navigating in the error list
          [GH-487](17)

        - ShellCheck warnings now include the corresponding warning code

   - Bug fixes:

        - Expand ‘default-directory’ before using it, to handle
          abbreviated paths gracefully [GH-434](18)

        - Restore mouse support in the error list [GH-468](19)

        - ‘less’ now correctly resolves relative paths in ‘data-uri’
          [GH-471](20)

        - ‘go-errcheck’ now properly uses package names as syntax
          checker arguments

        - ‘c/c++-clang’ now handles empty error messages [GH-497](21)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/464

   (2) https://github.com/flycheck/flycheck/issues/460

   (3) https://github.com/flycheck/flycheck/issues/472

   (4) https://github.com/flycheck/flycheck/issues/490

   (5) https://github.com/flycheck/flycheck/issues/480

   (6) https://github.com/flycheck/flycheck/issues/481

   (7) https://github.com/flycheck/flycheck/issues/398

   (8) https://github.com/flycheck/flycheck/issues/485

   (9) https://github.com/flycheck/flycheck/issues/500

   (10) https://github.com/flycheck/flycheck/issues/500

   (11) https://github.com/flycheck/flycheck/issues/499

   (12) https://github.com/flycheck/flycheck/issues/506

   (13) https://github.com/flycheck/flycheck/issues/507

   (14) https://github.com/flycheck/flycheck/issues/459

   (15) https://github.com/flycheck/flycheck/issues/460

   (16) https://github.com/flycheck/flycheck/issues/461

   (17) https://github.com/flycheck/flycheck/issues/487

   (18) https://github.com/flycheck/flycheck/issues/434

   (19) https://github.com/flycheck/flycheck/issues/468

   (20) https://github.com/flycheck/flycheck/issues/471

   (21) https://github.com/flycheck/flycheck/issues/497


File: flycheck.info,  Node: 0 20 Aug 12 2014,  Next: 0 19 Jun 12 2014,  Prev: 0 21 Oct 26 2014,  Up: Changelog

8.2.4 0.20 (Aug 12, 2014)
-------------------------

   - *Breaking changes*:

        - The internal names of syntax checker properties changed.  *All
          packages depending on Flycheck must be recompiled!*

        - ‘flycheck-substitute-argument’ always returns a list now

        - The special meaning of a trailing ‘=’ in ‘(option …)’ and
          ‘(config-file …)’ is removed.  Both arguments must now
          explicitly specify ‘concat’ to prepend the option as string.

   - New syntax checkers:

        - C/C++ with GCC [GH-408](1)

        - Scala with scalastyle [GH-425](2)

        - Fortran with GFortran [GH-414](3) [GH-450](4)

        - Ada with GNAT [GH-414](5) [GH-457](6)

   - New features:

        - Add ‘flycheck-clang-no-exceptions’ and
          ‘flycheck-gcc-no-exceptions’ to flag exceptions as errors in
          C++ [GH-412](7)

        - Add ‘flycheck-rust-crate-root’ to resolve inter-crate
          references in ‘rust’ [GH-417](8)

        - Add ‘flycheck-clang-blocks’ to enable the block syntax in
          Clang [GH-420](9)

        - ‘read-flycheck-checker’ now accepts a default value

        - Add ‘flycheck-status-changed-functions’ to react on status
          changes

        - Make the mode line lighter of Flycheck customizable with
          ‘flycheck-mode-line’

        - Add ‘flycheck-rubylintrc’ to support configuration files for
          ‘ruby-rubylint’ [GH-424](10)

        - Add ‘flycheck-rust-crate-type’ to make the Crate type
          customizable [GH-446](11)

        - The mode line of the error list is now customizable with
          ‘flycheck-error-list-mode-line’ [GH-454](12)

        - Pressing ‘n’ or ‘p’ in the error list now shows the error at
          point in a separate window [GH-452](13) [GH-454](14)

        - Pressing ‘RET’ in the error list now jumps to the error at
          point [GH-454](15)

        - The error list can now be sorted by error level by clicking on
          the corresponding list header, or by pressing ‘S’ with point
          on the column text [GH-454](16)

        - Error levels defined with ‘flycheck-define-error-level’ can
          now have a numeric severity used for sorting [GH-454](17)

   - Improvements:

        - Use proper temporary files in ‘python-flake8’ [GH-421](18)

        - Demote errors from ‘package-initialize’ in the ‘emacs-lisp’
          checker [GH-423](19)

        - ‘flycheck-select-checker’ now uses the last used syntax
          checker as default when reading from minibuffer

        - ‘flycheck-compile’ now prompts for the syntax checker to run
          as ‘compile’ command [GH-428](20)

        - The ‘rust’ syntax checker shows info messages now [GH-439](21)

        - The ‘sass’ and ‘scss’ syntax checkers now use a temporary
          directory for their cache [GH-443](22) [GH-454](23)

        - Change the default of ‘flycheck-eslintrc’ to ‘nil’
          [GH-447](24)

        - Show the menu on the mode line lighter [GH-365](25)

        - Greatly improve Flycheck’s menu

        - ‘n’ and ‘p’ now navigate the error list by errors, not by
          lines [GH-452](26) [GH-444](27)

        - ‘c/c++-clang’ does not use in-place temporary files anymore
          [GH-456](28)

   - Bug fixes:

        - Properly support ‘unload-feature’ now

   - Other changes:

        - Remove dependencies on f.el and s.el

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/408

   (2) https://github.com/flycheck/flycheck/issues/425

   (3) https://github.com/flycheck/flycheck/issues/414

   (4) https://github.com/flycheck/flycheck/issues/450

   (5) https://github.com/flycheck/flycheck/issues/414

   (6) https://github.com/flycheck/flycheck/issues/457

   (7) https://github.com/flycheck/flycheck/issues/412

   (8) https://github.com/flycheck/flycheck/issues/417

   (9) https://github.com/flycheck/flycheck/issues/420

   (10) https://github.com/flycheck/flycheck/issues/424

   (11) https://github.com/flycheck/flycheck/issues/446

   (12) https://github.com/flycheck/flycheck/issues/454

   (13) https://github.com/flycheck/flycheck/issues/452

   (14) https://github.com/flycheck/flycheck/issues/454

   (15) https://github.com/flycheck/flycheck/issues/454

   (16) https://github.com/flycheck/flycheck/issues/454

   (17) https://github.com/flycheck/flycheck/issues/454

   (18) https://github.com/flycheck/flycheck/issues/421

   (19) https://github.com/flycheck/flycheck/issues/423

   (20) https://github.com/flycheck/flycheck/issues/428

   (21) https://github.com/flycheck/flycheck/issues/439

   (22) https://github.com/flycheck/flycheck/issues/443

   (23) https://github.com/flycheck/flycheck/issues/454

   (24) https://github.com/flycheck/flycheck/issues/447

   (25) https://github.com/flycheck/flycheck/issues/365

   (26) https://github.com/flycheck/flycheck/issues/452

   (27) https://github.com/flycheck/flycheck/issues/444

   (28) https://github.com/flycheck/flycheck/issues/456


File: flycheck.info,  Node: 0 19 Jun 12 2014,  Next: 0 18 Mar 24 2014,  Prev: 0 20 Aug 12 2014,  Up: Changelog

8.2.5 0.19 (Jun 12, 2014)
-------------------------

   - Flycheck now has an official logo [GH-331](1)

   - *Breaking changes*:

        - The ‘ruby-rubylint’ syntax checker now requires Ruby Lint 2.0
          or newer.  [GH-405](2)

   - New syntax checkers:

        - Go with ‘errcheck’ [GH-393](3)

   - New features:

        - Add ‘flycheck-keymap-prefix’ to change the prefix key for
          Flycheck keybindings [GH-381](4)

        - Make the prefix of Flycheck’s temporary files customizable
          with ‘flycheck-temp-prefix’ [GH-387](5)

        - Add ‘:error-filter’ property for syntax checkers to apply a
          custom function to modify or filter errors after parsing
          [GH-397](6)

        - Add ‘flycheck-rust-check-tests’ to disable syntax checking of
          test code in Rust [GH-406](7)

        - Add ‘flycheck-cppcheck-inconclusive’ to enable cppcheck tests
          that might give false positives [GH-407](8)

   - Improvements:

        - Collapse redundant whitespace in messages from ‘emacs-lisp’
          [GH-397](9)

        - Dedent messages from ‘haskell-ghc’ [GH-397](10)

        - Fold errors in included files into the error messages of the
          corresponding include in ‘c/c++-clang’ [GH-397](11)

        - The ‘ruby-rubylint’ syntax checker now supports ruby-lint 2.0
          and newer [GH-405](12)

   - Bug fixes:

        - When stopping Flycheck, correctly kill running processes and
          cleanup their temporary files [GH-334](13)

        - Do not choke on files without extensions in ‘haskell-ghc’

        - Fix spurious warning when a syntax checker reports errors, but
          not for the file being checked [GH-391](14)

        - Do not signal errors in Go Mode, when ‘go’ is not available

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/331

   (2) https://github.com/flycheck/flycheck/issues/405

   (3) https://github.com/flycheck/flycheck/issues/393

   (4) https://github.com/flycheck/flycheck/issues/381

   (5) https://github.com/flycheck/flycheck/issues/387

   (6) https://github.com/flycheck/flycheck/issues/397

   (7) https://github.com/flycheck/flycheck/issues/406

   (8) https://github.com/flycheck/flycheck/issues/407

   (9) https://github.com/flycheck/flycheck/issues/397

   (10) https://github.com/flycheck/flycheck/issues/397

   (11) https://github.com/flycheck/flycheck/issues/397

   (12) https://github.com/flycheck/flycheck/issues/405

   (13) https://github.com/flycheck/flycheck/issues/334

   (14) https://github.com/flycheck/flycheck/issues/391


File: flycheck.info,  Node: 0 18 Mar 24 2014,  Next: 0 17 Feb 1 2014,  Prev: 0 19 Jun 12 2014,  Up: Changelog

8.2.6 0.18 (Mar 24, 2014)
-------------------------

   - *Breaking changes*:

        - The POSIX script syntax checkers ‘sh-bash’ and ‘sh-dash’ were
          renamed to ‘sh-posix-bash’ and ‘sh-posix-dash’ respectively.
          The ‘bash’ and ‘zsh’ syntax checkers were renamed to ‘sh-bash’
          and ‘sh-zsh’ respectively.  Thus, all shell script syntax
          checkers now live in the ‘sh-’ prefix.

        - ‘rst-sphinx’ requires Sphinx 1.2 or newer now.

        - ‘rustc’ requires Rust 0.10 (not yet released at the time of
          writing) or newer now [GH-353](1)

   - New syntax checkers:

        - Perl with Perl Critic [GH-88](2)

        - Replace GNU Make with POSIX Make [GH-322](3)

        - Shellcheck [GH-267](4)

        - Go with ‘golint’ [GH-328](5)

        - Go with ‘go tool vet’ [GH-329](6)

   - New features:

        - Add ‘flycheck-rust-library-path’ to specify library locations
          for ‘rust’

        - Add ‘flycheck-dmd-include-path’ to change the include path of
          ‘d-dmd’ [GH-344](7)

   - Improvements:

        - ‘flycheck-parse-checkstyle’ supports ‘info’ level messages now

        - Correctly parse multiline error messages of ‘go-build’ and
          ‘go-test’

        - ‘rst-sphinx’ supports custom nodes without explicit writer
          support now, by using the ‘pseudoxml’ builder.

        - Avoid warnings about missing main functions in ‘rust’

        - Properly resolve relative filenames in ‘.. include::’
          directives in ‘rst’

        - Use ‘--unix_mode’ option in ‘javascript-gjslint’ to get the
          file name [GH-348](8)

        - Puppet Lint messages now include the name of the corresponding
          check

        - ‘rustc’ supports upcoming Rust 0.10 now [GH-353](9)

        - Flycheck now handles Clang errors from included files
          [GH-367](10)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/353

   (2) https://github.com/flycheck/flycheck/issues/88

   (3) https://github.com/flycheck/flycheck/issues/322

   (4) https://github.com/flycheck/flycheck/issues/267

   (5) https://github.com/flycheck/flycheck/issues/328

   (6) https://github.com/flycheck/flycheck/issues/329

   (7) https://github.com/flycheck/flycheck/issues/344

   (8) https://github.com/flycheck/flycheck/issues/348

   (9) https://github.com/flycheck/flycheck/issues/353

   (10) https://github.com/flycheck/flycheck/issues/367


File: flycheck.info,  Node: 0 17 Feb 1 2014,  Next: 0 16 Jan 11 2014,  Prev: 0 18 Mar 24 2014,  Up: Changelog

8.2.7 0.17 (Feb 1, 2014)
------------------------

   - The manual was ported to Sphinx(1) and is now located at
     ‘http://flycheck.readthedocs.org’ [GH-274](2)

   - *Breaking changes*:

        - The default ‘flycheck-completion-system’ was changed to nil,
          i.e.  the built-in ‘completing-read’, for compliance with
          Emacs’ defaults.  To restore the previous behaviour, add
          ‘(eval-after-load 'flycheck '(setq flycheck-completion-system
          'ido))’ to your ‘init.el’.

        - ‘flycheck-count-errors’ counts errors of all levels now, and
          returns an alist mapping error symbols to error counts.

   - New syntax checkers:

        - RST (ReStructuredText) using Sphinx

        - GNU Make [GH-321](3)

   - New features:

        - Extend syntax checkers with ‘flycheck-add-next-checkers’
          [GH-266](4)

   - Improvements:

        - Immediately re-check the buffer when it was changed during a
          syntax check [GH-301](5)

        - Do not defer syntax checker after idle change timeout
          [GH-305](6)

        - Do not use the generic ‘rst’ syntax checker in Sphinx projects
          anymore, to avoid false positives by Sphinx-only markup

        - Check for more than just syntax errors in ‘rust’ [GH-314](7)

        - ‘chef-foodcritic’ supports ‘enh-ruby-mode’ now

   - Bug fixes

        - Do not attach syntax checker processes to the buffer anymore
          [GH-298](8)

        - Do not visit the file to check in ‘emacs-lisp’ and
          ‘emacs-lisp-checkdoc’ to avoid unintended side effects
          [GH-319](9)

   ---------- Footnotes ----------

   (1) http://sphinx-doc.org

   (2) https://github.com/flycheck/flycheck/issues/274

   (3) https://github.com/flycheck/flycheck/issues/321

   (4) https://github.com/flycheck/flycheck/issues/266

   (5) https://github.com/flycheck/flycheck/issues/301

   (6) https://github.com/flycheck/flycheck/issues/305

   (7) https://github.com/flycheck/flycheck/issues/314

   (8) https://github.com/flycheck/flycheck/issues/298

   (9) https://github.com/flycheck/flycheck/issues/319


File: flycheck.info,  Node: 0 16 Jan 11 2014,  Next: 0 15 Nov 15 2013,  Prev: 0 17 Feb 1 2014,  Up: Changelog

8.2.8 0.16 (Jan 11, 2014)
-------------------------

   - *Breaking changes*:

        - Argument substitution is no longer performed on syntax checker
          executables.  The executable must be a string.

        - Split out ‘haskell-hdevtools’ into a separate package.  See
          flycheck-hdevtools(1) [GH-275](2)

        - Drop support for coffeelint 0.x

        - The error list is reimplemented on top of Tabulated List Mode.
          This greatly changes the appearance and behaviour of the error
          list [GH-230](3)

   - New syntax checkers:

        - Ruby with ‘ruby-lint’ [GH-250](4)

        - Handlebars [GH-270](5)

        - YAML with ‘yaml-jsyaml’ [GH-253](6)

        - Chef recipes with ‘foodcritic’ [GH-255](7)

        - AsciiDoc [GH-276](8)

        - CFEngine [GH-271](9)

        - Racket [GH-277](10)

        - Texinfo

        - Verilog [GH-296](11)

        - Javascript with ‘eslint’ [GH-291](12)

        - ERuby [GH-285](13)

   - New features:

        - Define variables to override the executables of syntax
          checkers [GH-272](14)

        - Interactively set the executable of a syntax checker with
          ‘flycheck-set-checker-executable’ [GH-272](15)

        - Disable syntax checkers easily with
          ‘flycheck-disabled-checkers’ [GH-269](16)

        - Add support for the Compass CSS framework in the ‘sass’ and
          ‘scss’ checkers, with ‘flycheck-sass-compass’ and
          ‘flycheck-scss-compass’ respectively [GH-268](17)

        - Disable style checks in ‘ruby-rubocop’ with
          ‘flycheck-rubocop-lint-only’ [GH-287](18)

        - Add support for Microsoft extensions in ‘c/c++-clang’ via
          ‘flycheck-clang-ms-extensions’ [GH-283](19)

        - New faces ‘flycheck-error-list-info’,
          ‘flycheck-error-list-warning’, ‘flycheck-error-list-error’,
          ‘flycheck-error-list-line-number’ and
          ‘flycheck-error-list-column-number’ [GH-230](20)

        - Add ‘flycheck-ghc-no-user-package-database’ to disable the
          user package database for ‘haskell-ghc’

        - Add ‘flycheck-ghc-package-databases’ to add additional package
          databases to ‘haskell-ghc’

        - Add ‘flycheck-ghc-search-path’ to add additional directories
          to the search path of ‘haskell-ghc’

   - Improvements:

        - Demote Rubocop convention messages to ‘info’ level

        - Stop Flycheck before the buffer is reverted [GH-282](21)

        - Properly resolve local module imports in ‘haskell-ghc’

   - Bug fixes:

        - Make relative imports work with ‘python-pylint’ [GH-280](22)

        - Fix parsing of errors in ‘scss’ and ‘sass’

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck-hdevtools

   (2) https://github.com/flycheck/flycheck/issues/275

   (3) https://github.com/flycheck/flycheck/issues/230

   (4) https://github.com/flycheck/flycheck/issues/250

   (5) https://github.com/flycheck/flycheck/issues/270

   (6) https://github.com/flycheck/flycheck/issues/253

   (7) https://github.com/flycheck/flycheck/issues/255

   (8) https://github.com/flycheck/flycheck/issues/276

   (9) https://github.com/flycheck/flycheck/issues/271

   (10) https://github.com/flycheck/flycheck/issues/277

   (11) https://github.com/flycheck/flycheck/issues/296

   (12) https://github.com/flycheck/flycheck/issues/291

   (13) https://github.com/flycheck/flycheck/issues/285

   (14) https://github.com/flycheck/flycheck/issues/272

   (15) https://github.com/flycheck/flycheck/issues/272

   (16) https://github.com/flycheck/flycheck/issues/269

   (17) https://github.com/flycheck/flycheck/issues/268

   (18) https://github.com/flycheck/flycheck/issues/287

   (19) https://github.com/flycheck/flycheck/issues/283

   (20) https://github.com/flycheck/flycheck/issues/230

   (21) https://github.com/flycheck/flycheck/issues/282

   (22) https://github.com/flycheck/flycheck/issues/280


File: flycheck.info,  Node: 0 15 Nov 15 2013,  Next: 0 14 1 Aug 16 2013,  Prev: 0 16 Jan 11 2014,  Up: Changelog

8.2.9 0.15 (Nov 15, 2013)
-------------------------

   - Flycheck has a new home at ‘https://github.com/flycheck/flycheck’,
     the online manual moved to ‘http://flycheck.github.io’.

   - *Breaking changes*:

        - Do not add the current directory to the ‘emacs-lisp’ syntax
          checker load path

        - ‘flycheck-list-errors’ cannot list errors at point anymore.
          It does not accept a prefix argument anymore, and takes zero
          arguments now [GH-214](1)

        - ‘flycheck-display-errors-in-list’ is gone.  The error list
          automatically highlights the error at point now [GH-214](2)

        - Remove obsolete ‘flycheck-declare-checker’

   - New syntax checkers:

        - YAML [GH-236](3)

        - Javascript with ‘gjslint’ [GH-245](4)

        - Slim [GH-246](5)

        - PHP using ‘phpmd’ [GH-249](6)

   - New features:

        - Support IDO or Grizzl(7) as completion systems for
          ‘flycheck-select-checker’ at ‘C-c ! s’

        - Disable standard error navigation with
          ‘flycheck-standard-error-navigation’ [GH-202](8)

        - Add ‘flycheck-clang-language-standard’ to choose the language
          standard for C/C++ syntax checking [GH-207](9)

        - Add ‘flycheck-clang-definitions’ to set additional definitions
          for C/C++ syntax checking [GH-207](10)

        - Add ‘flycheck-clang-no-rtti’ to disable RTTI for C/C++ syntax
          checking [GH-207](11)

        - Add new option cell ‘option-flag’ for boolean flags in syntax
          checker commands

        - Add ‘flycheck-clang-includes’ to include additional files for
          C/C++ syntax checking [GH-207](12)

        - Add configuration file variable ‘flycheck-pylintrc’ for Pylint

        - New faces ‘flycheck-error-list-highlight-at-point’ and
          ‘flycheck-error-list-highlight’ to highlight the errors at
          point and at the current line respectively in the error list
          [GH-214](13)

        - The error list now automatically updates to show the errors of
          the current buffer [GH-214](14)

        - Define new error levels with ‘flycheck-define-error-level’
          [GH-212](15)

        - Add ‘flycheck-clang-standard-library’ to choose the standard
          library for C/C++ syntax checking [GH-234](16)

        - Customize the delay for displaying errors via
          ‘flycheck-display-errors-delay’ [GH-243](17)

        - Add ‘info’ level for informational annotations by syntax
          checkers [GH-215](18)

        - Add a new symbol ‘temporary-file-name’ to pass temporary file
          names to syntax checkers [GH-259](19)

   - Improvements:

        - The error list now refreshes automatically after each syntax
          check [GH-214](20)

        - The errors at point are now automatically highlighted in the
          error list [GH-214](21)

        - ‘emacs-lisp-checkdoc’ does not longer check ‘.dir-locals.el’
          files

        - Do not automatically check syntax in encrypted files
          [GH-222](22)

        - Parse notes from ‘c/c++-clang’ into info level messages
          [GH-215](23)

        - Parse convention warnings from ‘pylint’ to info level
          [GH-204](24)

        - Demote naming warnings from ‘python-flake8’ to info level
          [GH-215](25)

        - Support ‘enh-ruby-mode’ in Ruby syntax checkers [GH-256](26)

        - Parse columns from ‘python-pylint’ errors

        - Do not compress temporary files for syntax checks if the
          original file was compressed

   - Bug fixes:

        - Find local includes in the Clang syntax checker [GH-225](27)

        - Do not emit spurious flawed definition warning in the ‘rst’
          syntax checker

        - Handle abbreviated file names in ‘luac’ output, by simply
          ignoring them [GH-251](28)

        - Correctly redirect the output binary of the ‘go-build’ syntax
          checker [GH-259](29)

        - Fix Cppcheck parsing with the built-in Emacs XML parser
          [GH-263](30)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/214

   (2) https://github.com/flycheck/flycheck/issues/214

   (3) https://github.com/flycheck/flycheck/issues/236

   (4) https://github.com/flycheck/flycheck/issues/245

   (5) https://github.com/flycheck/flycheck/issues/246

   (6) https://github.com/flycheck/flycheck/issues/249

   (7) https://github.com/d11wtq/grizzl

   (8) https://github.com/flycheck/flycheck/issues/202

   (9) https://github.com/flycheck/flycheck/issues/207

   (10) https://github.com/flycheck/flycheck/issues/207

   (11) https://github.com/flycheck/flycheck/issues/207

   (12) https://github.com/flycheck/flycheck/issues/207

   (13) https://github.com/flycheck/flycheck/issues/214

   (14) https://github.com/flycheck/flycheck/issues/214

   (15) https://github.com/flycheck/flycheck/issues/212

   (16) https://github.com/flycheck/flycheck/issues/234

   (17) https://github.com/flycheck/flycheck/issues/243

   (18) https://github.com/flycheck/flycheck/issues/215

   (19) https://github.com/flycheck/flycheck/issues/259

   (20) https://github.com/flycheck/flycheck/issues/214

   (21) https://github.com/flycheck/flycheck/issues/214

   (22) https://github.com/flycheck/flycheck/issues/222

   (23) https://github.com/flycheck/flycheck/issues/215

   (24) https://github.com/flycheck/flycheck/issues/204

   (25) https://github.com/flycheck/flycheck/issues/215

   (26) https://github.com/flycheck/flycheck/issues/256

   (27) https://github.com/flycheck/flycheck/issues/225

   (28) https://github.com/flycheck/flycheck/issues/251

   (29) https://github.com/flycheck/flycheck/issues/259

   (30) https://github.com/flycheck/flycheck/issues/263


File: flycheck.info,  Node: 0 14 1 Aug 16 2013,  Next: 0 14 Aug 15 2013,  Prev: 0 15 Nov 15 2013,  Up: Changelog

8.2.10 0.14.1 (Aug 16, 2013)
----------------------------

   - Bug fixes:

        - Add a missing dependency [GH-194](1)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/194


File: flycheck.info,  Node: 0 14 Aug 15 2013,  Next: 0 13 Jun 28 2013,  Prev: 0 14 1 Aug 16 2013,  Up: Changelog

8.2.11 0.14 (Aug 15, 2013)
--------------------------

   - *Breaking changes*:

        - Introduce ‘flycheck-define-checker’ and obsolete
          ‘flycheck-declare-checker’ [GH-163](1)

        - Remove the obsolete ‘flycheck-error-face’ and
          ‘flycheck-warning-face’

        - Do not initialize packages by default in ‘emacs-lisp’ syntax
          checker for non-configuration files [GH-176](2)

        - Change the default ‘flycheck-highlighting-mode’ to ‘symbols’
          [GH-179](3)

        - Drop support for Pylint 0.x in ‘python-pylint’ [GH-184](4)

   - New features:

        - List errors at point only with prefix arg to
          ‘flycheck-list-errors’ [GH-166](5)

        - Add new display function ‘flycheck-display-errors-in-list’ to
          display errors at point in the error list [GH-166](6)

        - New ‘option-list’ argument cell to pass option lists to a
          syntax checker

        - New ‘flycheck-emacs-lisp-load-path’ option to customize the
          ‘load-path’ used by the ‘emacs-lisp’ syntax checker
          [GH-174](7)

        - New ‘flycheck-emacs-lisp-initialize-packages’ option to
          initialize packages in the ‘emacs-lisp’ syntax checker
          [GH-176](8)

        - New ‘flycheck-emacs-lisp-package-user-dir’ option to configure
          the package directory for the ‘emacs-lisp’ syntax checker
          [GH-176](9)

        - New option filter ‘flycheck-option-comma-separated-list’ for
          options with comma separated lists as values

        - New highlighting mode ‘symbols’ to highlight the symbol
          pointed to by an error [GH-179](10)

   - New syntax checkers:

        - LESS [GH-160](11)

        - Haskell with ‘ghc’, ‘hdevtools’ and ‘hlint’ [GH-162](12)

        - C/C++ with ‘cppcheck’ [GH-170](13)

        - C/C++ with ‘clang’ [GH-172](14)

        - CoffeeScript with ‘coffee’

        - XML with ‘xmllint’ [GH-180](15)

        - D with ‘dmd’ [GH-167](16)

   - Improvements:

        - Support Web Mode in ‘html-tidy’ syntax checker [GH-157](17)

        - Support Rubocop 0.9 and drop support for older Rubocop
          releases [GH-159](18)

        - Include the message ID in error messages from ‘python-pylint’

   - Bug fixes:

        - Fix warnings about flawed definitions in ‘emacs-lisp’ and
          ‘emacs-lisp-checkdoc’, caused by faulty formatting of sexps

        - Refresh error lists when pressing ‘g’ [GH-166](19)

        - Do not obscure active minibuffer input when displaying errors
          in the echo area [GH-175](20)

        - Fix universal prefix argument for ‘flycheck-next-error’ at
          ‘C-c ! n’

        - Correctly parse output of ‘coffeelint’ 0.5.7 [GH-192](21)

        - Correctly parse output of ‘pylint’ 1.0 [GH-184](22)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/163

   (2) https://github.com/flycheck/flycheck/issues/176

   (3) https://github.com/flycheck/flycheck/issues/179

   (4) https://github.com/flycheck/flycheck/issues/184

   (5) https://github.com/flycheck/flycheck/issues/166

   (6) https://github.com/flycheck/flycheck/issues/166

   (7) https://github.com/flycheck/flycheck/issues/174

   (8) https://github.com/flycheck/flycheck/issues/176

   (9) https://github.com/flycheck/flycheck/issues/176

   (10) https://github.com/flycheck/flycheck/issues/179

   (11) https://github.com/flycheck/flycheck/issues/160

   (12) https://github.com/flycheck/flycheck/issues/162

   (13) https://github.com/flycheck/flycheck/issues/170

   (14) https://github.com/flycheck/flycheck/issues/172

   (15) https://github.com/flycheck/flycheck/issues/180

   (16) https://github.com/flycheck/flycheck/issues/167

   (17) https://github.com/flycheck/flycheck/issues/157

   (18) https://github.com/flycheck/flycheck/issues/159

   (19) https://github.com/flycheck/flycheck/issues/166

   (20) https://github.com/flycheck/flycheck/issues/175

   (21) https://github.com/flycheck/flycheck/issues/192

   (22) https://github.com/flycheck/flycheck/issues/184


File: flycheck.info,  Node: 0 13 Jun 28 2013,  Next: 0 12 May 18 2013,  Prev: 0 14 Aug 15 2013,  Up: Changelog

8.2.12 0.13 (Jun 28, 2013)
--------------------------

   - *Breaking changes*:

        - Obsolete ‘flycheck-warning-face’ and ‘flycheck-error-face’ in
          favor ‘flycheck-warning’ and ‘flycheck-error’ respectively

        - Obsolete ‘:predicate’ forms in favor of ‘:predicate’ functions

        - ‘flycheck-def-config-file-var’ does not automatically mark
          variables as safe anymore

   - New features:

        - Make fringe indicator faces customizable independently with
          ‘flycheck-fringe-error’ and ‘flycheck-fringe-warning’

        - Improve the default faces by using underlines instead of
          foreground colors, if possible

        - Customizable error processing with
          ‘flycheck-process-error-functions’ [GH-141](1)

        - Make the delay before starting a syntax check customizable via
          ‘flycheck-idle-change-delay’ [GH-144](2)

        - Make display of errors under point customizable via
          ‘flycheck-display-errors-function’ [GH-156](3)

   - Improvements

        - Always highlight errors on top of warnings now

        - Do not trigger syntax checks in the middle of commands
          [GH-141](4)

        - Add the current directory to load path in the ‘emacs-lisp’
          syntax checker

        - Do not longer use the ‘emacs-lisp-checkdoc’ syntax checker in
          Scratch buffers

        - Do not flush temporary files onto disk [GH-149](5)

        - Syntax checkers may have error patterns and error parser now

        - Predicate forms are now wrapped into functions and compiled
          into functions during byte compilation

        - Copy each message separately in
          ‘flycheck-copy-messages-as-kill’

        - Mark some customizable variables as safe for file variable
          usage, most notably ‘flycheck-indication-mode’,
          ‘flycheck-highlighting-mode’ and ‘flycheck-idle-change-delay’.

   - Bug fixes:

        - Fix error when searching for a configuration file outside a
          Projectile project

        - Do not start a syntax check before the ‘flycheck-mode-hook’
          was run

        - Do not start automatic syntax checks if Flycheck Mode is
          disabled

        - Defer the initial syntax check until after the current
          interactive command [GH-143](6)

        - Correctly clean up information about running processes

        - Fix compatibility with Emacs 24.2 and earlier [GH-150](7)

        - Fix version information on Emacs trunk builds

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/141

   (2) https://github.com/flycheck/flycheck/issues/144

   (3) https://github.com/flycheck/flycheck/issues/156

   (4) https://github.com/flycheck/flycheck/issues/141

   (5) https://github.com/flycheck/flycheck/issues/149

   (6) https://github.com/flycheck/flycheck/issues/143

   (7) https://github.com/flycheck/flycheck/issues/150


File: flycheck.info,  Node: 0 12 May 18 2013,  Next: 0 11 May 01 2013,  Prev: 0 13 Jun 28 2013,  Up: Changelog

8.2.13 0.12 (May 18, 2013)
--------------------------

   - New syntax checkers:

        - Ruby using ‘jruby’ [GH-136](1)

        - Puppet [GH-138](2)

   - New features:

        - Highlight error expressions by default, with the new ‘sexps’
          highlighting mode

        - Automatically check syntax some time after the last change in
          the buffer [GH-140](3)

        - Add ‘flycheck-version’ to determine the installed Flycheck
          version

        - Add ‘flycheck-list-errors’, mapped to ‘C-c ! l’, to list all
          errors in a separate buffer

   - Improvements:

        - Defer syntax checks while a buffer is reverted, to avoid race
          conditions

   - Bug fixes:

        - Correctly parse syntax errors from JRuby [GH-136](4)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/136

   (2) https://github.com/flycheck/flycheck/issues/138

   (3) https://github.com/flycheck/flycheck/issues/140

   (4) https://github.com/flycheck/flycheck/issues/136


File: flycheck.info,  Node: 0 11 May 01 2013,  Next: 0 10 Apr 21 2013,  Prev: 0 12 May 18 2013,  Up: Changelog

8.2.14 0.11 (May 01, 2013)
--------------------------

   - New syntax checkers:

        - Scala [GH-124](1)

   - New features:

        - Customizable error indication with control of the fringe side,
          via ‘flycheck-indication-mode’

        - Customizable automatic syntax checking, via
          ‘flycheck-check-syntax-automatically’ [GH-128](2)

        - Customizable configuration file search, via
          ‘flycheck-locate-config-file-functions’ [GH-133](3)

        - Find configuration files in Projectile(4) projects

        - Add ‘flycheck-before-syntax-check-hook’ and
          ‘flycheck-syntax-check-failed-hook’

   - Improvements:

        - The ‘ruby’ syntax checker now differentiates warnings from
          errors [GH-123](5)

        - Faces are now in a separate customization group

   - Bug fixes:

        - Add missing customization group for syntax checker options

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/124

   (2) https://github.com/flycheck/flycheck/issues/128

   (3) https://github.com/flycheck/flycheck/issues/133

   (4) https://github.com/bbatsov/projectile

   (5) https://github.com/flycheck/flycheck/issues/123


File: flycheck.info,  Node: 0 10 Apr 21 2013,  Next: 0 9 Apr 13 2013,  Prev: 0 11 May 01 2013,  Up: Changelog

8.2.15 0.10 (Apr 21, 2013)
--------------------------

   - Flycheck uses ‘cl-lib’ now.  This library is built-in as of GNU
     Emacs 24.3.  For earlier releases of GNU Emacs 24 an additional
     compatibility library will be installed from GNU ELPA.

   - New syntax checkers:

        - POSIX Shell script using ‘bash’ [GH-112](1)

        - Ruby using ‘rubocop’ [GH-113](2)

        - Elixir [GH-108](3)

        - Erlang [GH-122](4)

   - Removed syntax checkers:

        - Python using Pyflakes.  Use the superior Flake8 syntax checker
          [GH-115](5)

   - New features:

        - Add ‘flycheck-copy-messages-as-kill’, mapped to ‘C-c ! C-w’,
          to copy all error messages under point into kill ring

        - Add ‘flycheck-google-messages’, mapped to ‘C-c ! /’, to google
          for error messages under point.  Needs the Google This(6)
          library

        - Syntax checkers can redirect output to a temporary directory
          now using the ‘temporary-directory’ argument symbol

   - Improvements:

        - Call option filters for ‘nil’ values, too

        - Improve error parsing in Bash syntax checker [GH-112](7)

        - Error navigation does not cross restrictions in narrowed
          buffers anymore

        - Try to preserve the non-directory part of the buffer’s file
          name when substituting the ‘source’ symbol [GH-99](8)

   - Bug fixes:

        - Fix error highlighting and navigation in narrowed buffers

        - Use a hopefully more reliable way to parse output of PHP
          CodeSniffer [GH-118](9)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/112

   (2) https://github.com/flycheck/flycheck/issues/113

   (3) https://github.com/flycheck/flycheck/issues/108

   (4) https://github.com/flycheck/flycheck/issues/122

   (5) https://github.com/flycheck/flycheck/issues/115

   (6) https://github.com/Bruce-Connor/emacs-google-this

   (7) https://github.com/flycheck/flycheck/issues/112

   (8) https://github.com/flycheck/flycheck/issues/99

   (9) https://github.com/flycheck/flycheck/issues/118


File: flycheck.info,  Node: 0 9 Apr 13 2013,  Next: 0 8 Apr 9 2013,  Prev: 0 10 Apr 21 2013,  Up: Changelog

8.2.16 0.9 (Apr 13, 2013)
-------------------------

   - New syntax checkers:

        - SCSS using ‘scss’ [GH-103](1)

        - RST (ReStructuredText) using Docutils

        - Go using ‘go build’ and ‘go test’ [GH-107](2)

   - Improvements:

        - Quit the error message window when navigating away from error
          locations

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/103

   (2) https://github.com/flycheck/flycheck/issues/107


File: flycheck.info,  Node: 0 8 Apr 9 2013,  Next: 0 7 1 Feb 23 2013,  Prev: 0 9 Apr 13 2013,  Up: Changelog

8.2.17 0.8 (Apr 9, 2013)
------------------------

   - New syntax checkers:

        - Go using ‘gofmt’ [GH-91](1)

        - Rust using ‘rustc’ [GH-101](2)

   - New features:

        - Add a global Flycheck mode.  ‘(global-flycheck-mode)’ is now
          the recommended way to enable Flycheck [GH-29](3)

        - Add support for syntax checker options [GH-72](4)

        - Add option for the coding standard used by the ‘php-phpcs’
          syntax checker

        - Add options for the maximum McCabe complexity and the maximum
          line length to ‘python-flake8’

   - Improvements:

        - Support McCabe warnings in ‘python-flake8’

        - Support warnings from ‘flake8’ 2

        - Show long error messages in a popup buffer [GH-94](5)

        - Show all error messages at point [GH-96](6)

        - Add support for naming warings from ‘flake8’ 2 [GH-98](7)

        - Flycheck mode is not longer enabled for buffers whose names
          start with a space

        - Improve highlighting to reduce screen flickering [GH-100](8)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/91

   (2) https://github.com/flycheck/flycheck/issues/101

   (3) https://github.com/flycheck/flycheck/issues/29

   (4) https://github.com/flycheck/flycheck/issues/72

   (5) https://github.com/flycheck/flycheck/issues/94

   (6) https://github.com/flycheck/flycheck/issues/96

   (7) https://github.com/flycheck/flycheck/issues/98

   (8) https://github.com/flycheck/flycheck/issues/100


File: flycheck.info,  Node: 0 7 1 Feb 23 2013,  Next: 0 7 Feb 14 2013,  Prev: 0 8 Apr 9 2013,  Up: Changelog

8.2.18 0.7.1 (Feb 23, 2013)
---------------------------

   - Bug fixes:

        - Do not signal errors from ‘flycheck-mode’ [GH-87](1)

        - Correctly fall back to ‘$HOME’ when searching configuration
          files

        - Correctly ascend to parent directory when searching
          configuration files

   - API changes:

        - Rename ‘config’ cell to ‘config-file’

        - Allow to pass the result of ‘config-file’ cells as single
          argument

        - Add support for evaluating Lisp forms in syntax checker
          commands [GH-86](2)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/87

   (2) https://github.com/flycheck/flycheck/issues/86


File: flycheck.info,  Node: 0 7 Feb 14 2013,  Next: 0 6 1 Jan 30 2013,  Prev: 0 7 1 Feb 23 2013,  Up: Changelog

8.2.19 0.7 (Feb 14, 2013)
-------------------------

   - New features:

        - Navigate to source of syntax checker declarations from syntax
          checker help

        - Add online Info manual [GH-60](1)

   - Improvements:

        - Use pipes instead of TTYs to read output from syntax checkers

        - Defer syntax checks for invisible buffers [GH-80](2)

        - Immediately display error messages after error navigation
          [GH-62](3)

   - Bug fixes:

        - Never select deleted buffers

        - Do not let the debugger interfere with necessary cleanup
          actions

        - Do not attempt to parse empty XML trees [GH-78](4)

        - Fix infinite recursion on Windows [GH-81](5)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/60

   (2) https://github.com/flycheck/flycheck/issues/80

   (3) https://github.com/flycheck/flycheck/issues/62

   (4) https://github.com/flycheck/flycheck/issues/78

   (5) https://github.com/flycheck/flycheck/issues/81


File: flycheck.info,  Node: 0 6 1 Jan 30 2013,  Next: 0 6 Jan 29 2013,  Prev: 0 7 Feb 14 2013,  Up: Changelog

8.2.20 0.6.1 (Jan 30, 2013)
---------------------------

   - Fix package dependencies


File: flycheck.info,  Node: 0 6 Jan 29 2013,  Next: 0 5 Dec 28 2012,  Prev: 0 6 1 Jan 30 2013,  Up: Changelog

8.2.21 0.6 (Jan 29, 2013)
-------------------------

   - New syntax checkers:

        - Emacs Lisp with ‘checkdoc-current-buffer’ [GH-53](1)

        - PHP with PHP CodeSniffer [GH-72](2)

   - Removed syntax checkers:

        - Javascript with ‘jsl’

   - New features:

        - Error navigation with ‘next-error’ and ‘previous-error’
          [GH-26](3)

        - Fringe icons instead of error indicators [GH-33](4)

        - Menu entry for Flycheck [GH-59](5)

        - Customizable error highlighting, taking the column number into
          account [GH-35](6)

        - Configuration files for syntax checkers

        - Add configuration file support to the syntax checkers
          ‘coffee-coffeelint’, ‘html-tidy’, ‘javascript-jshint’,
          ‘pyton-flake8’ and ‘tex-chktex’

        - Allow to compile a buffer with a syntax checker for testing
          purposes [GH-58](7)

        - Use multiple syntax checkers during a syntax check [GH-31](8)

        - Add dedicated help for syntax checkers [GH-52](9)

   - Improvements:

        - Match error patterns in order of declaration [GH-55](10)

   - Bug fixes:

        - Inherit highlighting faces from built-in faces [GH-24](11)

        - Correct error patterns of the HTML syntax checker [GH-36](12)

        - Detect syntax errors in the ‘python-flake8’ syntax checker
          [GH-42](13)

        - Fix various regressions after introducing unit tests

        - Inhibit syntax checking during package installation
          [GH-45](14)

        - Disable syntax checking in Tramp buffers [GH-54](15)

        - Preserve whitespace in error messages [GH-65](16)

   - API changes:

        - Replace syntax checker variables with syntax checker
          declarations [GH-41](17)

        - Support parsing errors with arbitrary functions instead of
          error patterns [GH-38](18)

        - Add an error parser for Checkstyle-like XML output [GH-38](19)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/53

   (2) https://github.com/flycheck/flycheck/issues/72

   (3) https://github.com/flycheck/flycheck/issues/26

   (4) https://github.com/flycheck/flycheck/issues/33

   (5) https://github.com/flycheck/flycheck/issues/59

   (6) https://github.com/flycheck/flycheck/issues/35

   (7) https://github.com/flycheck/flycheck/issues/58

   (8) https://github.com/flycheck/flycheck/issues/31

   (9) https://github.com/flycheck/flycheck/issues/52

   (10) https://github.com/flycheck/flycheck/issues/55

   (11) https://github.com/flycheck/flycheck/issues/24

   (12) https://github.com/flycheck/flycheck/issues/36

   (13) https://github.com/flycheck/flycheck/issues/42

   (14) https://github.com/flycheck/flycheck/issues/45

   (15) https://github.com/flycheck/flycheck/issues/54

   (16) https://github.com/flycheck/flycheck/issues/65

   (17) https://github.com/flycheck/flycheck/issues/41

   (18) https://github.com/flycheck/flycheck/issues/38

   (19) https://github.com/flycheck/flycheck/issues/38


File: flycheck.info,  Node: 0 5 Dec 28 2012,  Next: 0 4 Nov 21 2012,  Prev: 0 6 Jan 29 2013,  Up: Changelog

8.2.22 0.5 (Dec 28, 2012)
-------------------------

   - New syntax checkers:

        - SASS [GH-15](1)

        - Perl [GH-21](2)

        - XML

        - Lua [GH-30](3)

   - New features:

        - Support manual buffer-local selection of syntax checker
          [GH-25](4)

        - Add customizable error indicators [GH-28](5)

        - Echo error messages at point without 3rd-party libraries like
          flymake-cursor [GH-27](6)

   - Improvements:

        - Remember the last automatically selected syntax checker
          [GH-24](7)

   - Bug fixes:

        - Fix syntax checking of buffers without backing files
          [GH-19](8)

   - API changes:

        - Replace underlying Flymake API with a custom syntax checking
          implementation [GH-15](9)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/15

   (2) https://github.com/flycheck/flycheck/issues/21

   (3) https://github.com/flycheck/flycheck/issues/30

   (4) https://github.com/flycheck/flycheck/issues/25

   (5) https://github.com/flycheck/flycheck/issues/28

   (6) https://github.com/flycheck/flycheck/issues/27

   (7) https://github.com/flycheck/flycheck/issues/24

   (8) https://github.com/flycheck/flycheck/issues/19

   (9) https://github.com/flycheck/flycheck/issues/15


File: flycheck.info,  Node: 0 4 Nov 21 2012,  Next: 0 3 Nov 21 2012,  Prev: 0 5 Dec 28 2012,  Up: Changelog

8.2.23 0.4 (Nov 21, 2012)
-------------------------

   - Rename the project to Flycheck [GH-5](1)

   - New syntax checkers

        - HAML [GH-9](2)

        - CSS [GH-9](3)

        - Javascript with ‘jsl’ [GH-9](4)

        - Javascript with ‘jshint’ [GH-16](5)

        - JSON [GH-12](6)

        - LaTeX with ‘lacheck’

   - Bug fixes:

        - Fix type error when checking compressed Emacs Lisp [GH-10](7)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/5

   (2) https://github.com/flycheck/flycheck/issues/9

   (3) https://github.com/flycheck/flycheck/issues/9

   (4) https://github.com/flycheck/flycheck/issues/9

   (5) https://github.com/flycheck/flycheck/issues/16

   (6) https://github.com/flycheck/flycheck/issues/12

   (7) https://github.com/flycheck/flycheck/issues/10


File: flycheck.info,  Node: 0 3 Nov 21 2012,  Next: 0 2 Oct 25 2012,  Prev: 0 4 Nov 21 2012,  Up: Changelog

8.2.24 0.3 (Nov 21, 2012)
-------------------------

   - Replace ‘flymake-mode’ with a custom syntax checking minor mode
     [GH-4](1)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/4


File: flycheck.info,  Node: 0 2 Oct 25 2012,  Next: 0 1 Oct 11 2012,  Prev: 0 3 Nov 21 2012,  Up: Changelog

8.2.25 0.2 (Oct 25, 2012)
-------------------------

   - New syntax checkers:

        - PHP

   - API changes:

        - Simplify syntax checker declarations [GH-2](1)

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck/issues/2


File: flycheck.info,  Node: 0 1 Oct 11 2012,  Prev: 0 2 Oct 25 2012,  Up: Changelog

8.2.26 0.1 (Oct 11, 2012)
-------------------------

Initial release as flymake-checkers

   - New syntax checkers:

        - TeX/LaTeX

        - Shell scripts

        - Python

        - Ruby

        - Coffeescript

        - Emacs Lisp


File: flycheck.info,  Node: Extending Flycheck,  Next: Flycheck API,  Prev: Flycheck releases,  Up: Top

9 Extending Flycheck
********************

This chapter explains how to add new syntax checkers and how to extend
built-in syntax checkers, by example.  For a detailed reference on the
involved types, functions and macros, please refer to the *note Flycheck
API: 1fc.

     Note: If you define a new syntax checker or have an extension to a
     built-in syntax checker, please report it to Flycheck (see *note
     Reporting issues: 8d.), so that we can consider it for inclusion to
     make it available to all other users of Flycheck.

     If you would like to contribute your extension or your new syntax
     checker to Flycheck as a patch or pull request, please see *note
     Contributing code: 1fd. and *note Contributing syntax checkers:
     1fe.

* Menu:

* Defining new syntax checkers:: 
* Advanced syntax checker definitions:: 
* Other ways to extend Flycheck:: 


File: flycheck.info,  Node: Defining new syntax checkers,  Next: Advanced syntax checker definitions,  Up: Extending Flycheck

9.1 Defining new syntax checkers
================================

Flycheck provides the macro *note flycheck-define-checker: 19. to define
a new syntax checker.  The following example defines a simple syntax
checker for the popular Pylint(1) tool for Python:

     (flycheck-define-checker python-pylint
       "A Python syntax and style checker using Pylint.

     See URL `http://www.pylint.org/'."
       :command ("pylint"
                 "--msg-template" "{path}:{line}:{column}:{C}:{msg} ({msg_id})"
                 source)
       :error-patterns
       ((error line-start (file-name) ":" line ":" column ":"
               (or "E" "F") ":" (message) line-end)
        (warning line-start (file-name) ":" line ":" column ":"
                 (or "W" "R") ":" (message) line-end)
        (info line-start (file-name) ":" line ":" column ":"
              "C:" (message) line-end))
       :modes python-mode)

The first argument to *note flycheck-define-checker: 19. is the _name_
of a syntax checker, by which we can refer to this particular syntax
checker.

Next comes the _docstring_, which should provide a bit of information
about the syntax checker.  It’s a good idea to provide a link to the
homepage of the syntax checker tool here.  You can view this docstring
in Emacs with *note flycheck-describe-checker: 3a. or ‘C-c ! ?’, e.g.
‘C-c ! ? texinfo’.

Eventually we specify the _properties_ of the new syntax checker.  These
properties tell Flycheck when to use your new syntax checker, how to run
it, and how to parse its output:

   - The ‘:command’ specifies the command Flycheck should run to check
     the buffer.  It’s a simple list containing the executable and its
     arguments.

     In our example we first the ‘--msg-template’ option to Pylint to
     configure a comprehensive and parseable output format.

     Then we use the “special” ‘source’ argument to pass the contents of
     the buffer as input file to ‘pylint’.  Whenever it sees the
     ‘source’ argument, Flycheck creates a temporary file, fills it with
     the current contents of the buffer and passes that file to the
     syntax checker.  This allows to check the real contents of a buffer
     even if the buffer is not saved to disk.

   - The ‘:error-patterns’ tell Flycheck how to parse the output of the
     command in order to obtain error locations.  Each pattern has a
     _level_, followed by ‘rx’ forms which specify a regular expression
     to find an error in the output of the command.

     Flycheck understands three error levels by default: ‘error’ is for
     critical errors that absolutely require the user’s attention (e.g.
     syntax errors), ‘warning’ is for issues that can be ignored, but
     should not (e.g.  unused variables), and ‘info’ is for other
     messages that provide information about the buffer, but do not
     immediately require action from the user.

     See also
.............

     *note flycheck-define-error-level: 27.; to define custom error
     levels

     Flycheck provides special ‘rx’ forms to extract the relevant
     information from each error:

        - The ‘(file-name)’ and ‘(message)’ forms match a sequence of
          any character save new line as file name and message of the
          error.  Both optionally accept further ‘rx’ forms, to specify
          an alternative regular expression to match the file name or
          the message, for instance to parse multi-line error messages.

        - The ‘line’ and ‘column’ forms match a sequence of one or more
          digits as line and column respectively of the error.

     See also
.............

     *note flycheck-rx-to-string: 200.; for a list of all special ‘rx’
     forms provided by Flycheck and their reference

   - The ‘:modes’ property denotes the major modes, in which Flycheck
     may use this syntax checker.  JSHint checks Javascript, so the
     ‘:modes’ of our example specifies Emacs’ builtin Javascript Mode,
     and the popular 3rd-party JS2 Mode.

See also
........

*note flycheck-substitute-argument: 201.; for a complete list of all
special arguments

* Menu:

* Finding the right error patterns:: 
* Trying a new syntax checker:: 
* Registering new syntax checkers:: 

   ---------- Footnotes ----------

   (1) http://www.pylint.org/


File: flycheck.info,  Node: Finding the right error patterns,  Next: Trying a new syntax checker,  Up: Defining new syntax checkers

9.1.1 Finding the right error patterns
--------------------------------------

Finding the right error patterns is the hardest part of a syntax checker
definition.  For a first version, you just run the tool on a file, look
at its output and write a regular expression to match it.  ‘M-x shell’
comes handy here.

However, as you start to debug and refine your patterns, this quickly
becomes cumbersome.  Flycheck provides an easier way to test a syntax
checker: Evaluate the syntax checker definition with ‘C-M-x’ and run
*note flycheck-compile: 19c.

 -- Command: C -c ! C-c
 -- Command: M -x flycheck-compile

     Run a syntax checker on the current buffer in a fresh Compilation
     Mode buffer.  Prompt for a syntax checker to run.

This command runs the command like a normal syntax check would do, but
instead of highlighting errors within the buffer it shows a new buffer
in Compilation Mode, which contains the entire output of the command and
highlights everything that matches a pattern.

Sometimes however an output format doesn’t lend itself to error
patterns.  In this case, you need to write a more sophisticated parser
yourself.  See *note Parsing structured output format: 204. for more
information.


File: flycheck.info,  Node: Trying a new syntax checker,  Next: Registering new syntax checkers,  Prev: Finding the right error patterns,  Up: Defining new syntax checkers

9.1.2 Trying a new syntax checker
---------------------------------

After evaluating a syntax checker definition you can try whether it
works for normal syntax checks by selecting it manually with ‘C-c ! s’
(*note flycheck-select-checker: 24.).  If anything breaks, you can
unselect the syntax checker again with ‘C-u C-c ! s’ and fix the error
without further affecting Flycheck.

Once you have confirmed that your new syntax checker works flawlessly,
you can make it available for automatic syntax checking by registering
it.


File: flycheck.info,  Node: Registering new syntax checkers,  Prev: Trying a new syntax checker,  Up: Defining new syntax checkers

9.1.3 Registering new syntax checkers
-------------------------------------

To register a new syntax checker for automatic syntax checking, just add
it to *note flycheck-checkers: 5e.:

     (add-to-list 'flycheck-checkers 'flycheck-jshint)

Flycheck will try all syntax checkers in this variable when checking a
buffer automatically, and check the buffer with the first syntax checker
in this list whose ‘:modes’ contains the current major mode.

     Note: Do *not* use *note flycheck-checker: 23. and *note
     flycheck-select-checker: 24. to enable your own syntax checker in
     Flycheck extensions.  They are reserved for *user customization*.

     Specifically, please do *not* provide a hook function which selects
     the syntax checker explicitly by assigning to *note
     flycheck-checker: 23. or by calling *note flycheck-select-checker:
     24.  In other words, this is *bad*:

          (defun enable-my-new-syntax-checker ()
            (setq flycheck-checker 'my-new-syntax-checker)
            (flycheck-buffer))

          (add-hook 'my-major-mode-hook #'enable-my-new-syntax-checker)

     This circumvents the entire automatic selection of Flycheck, and
     prevents the user from effectively customizing Flycheck.

     Instead, just register your syntax checker in *note
     flycheck-checkers: 5e. and let Flycheck automatically pick the best
     syntax checker.  In other words, this is *good*:

          (add-to-list 'flycheck-checkers 'my-new-syntax-checker)


File: flycheck.info,  Node: Advanced syntax checker definitions,  Next: Other ways to extend Flycheck,  Prev: Defining new syntax checkers,  Up: Extending Flycheck

9.2 Advanced syntax checker definitions
=======================================

* Menu:

* Parsing structured output format:: 
* Passing options and configuration files to syntax checkers:: 
* Controlling the use of a syntax checker:: 
* Applying more than one syntax checker:: 


File: flycheck.info,  Node: Parsing structured output format,  Next: Passing options and configuration files to syntax checkers,  Up: Advanced syntax checker definitions

9.2.1 Parsing structured output format
--------------------------------------

If your syntax checker tool offers some structured output format as
alternative to human-readable free text, you can use an ‘:error-parser’
function instead of writing an error pattern.  For instance, JSHint(1)
offers the widely spread Checkstyle XML output format which Flycheck
supports out of the box:

     (flycheck-define-checker javascript-jshint
       "A JavaScript syntax and style checker using jshint.

     See URL `http://www.jshint.com'."
       :command ("jshint" "--checkstyle-reporter" source)
       :error-parser flycheck-parse-checkstyle
       :modes (js-mode js2-mode js3-mode))

As you can see, there are no patterns in this definition.  Instead
Flycheck calls the function *note flycheck-parse-checkstyle: 17a. to
parse the output.  This function parses the XML to extract the errors.
It’s built-in into Flycheck, so if your tool supports Checkstyle XML,
error parsing comes *for free* in Flycheck.

See also
........

*note Error parsers: 20a.; for more information about error parsers

   ---------- Footnotes ----------

   (1) http://www.jshint.com/


File: flycheck.info,  Node: Passing options and configuration files to syntax checkers,  Next: Controlling the use of a syntax checker,  Prev: Parsing structured output format,  Up: Advanced syntax checker definitions

9.2.2 Passing options and configuration files to syntax checkers
----------------------------------------------------------------

Many linting tools provide a rich set of options to configure their
analysis.  Flycheck makes it to define proper Emacs options and map them
to options of commands.

For instance, the Rubocop(1) tool checks Ruby for semantic and stylistic
issues.  Since style is mainly a matter of taste, it has a special
linting mode in which all stylistic checks are disabled (error patterns
omitted for readability):

     (flycheck-define-checker ruby-rubocop
       "A Ruby syntax and style checker using the RuboCop tool.

     See URL `http://batsov.com/rubocop/'."
       :command ("rubocop" "--format" "emacs"
                 (option-flag "--lint" flycheck-rubocop-lint-only)
                 source)
       :error-patterns ...
       :modes (ruby-mode))

Note the special ‘option-flag’ argument, which splices the value of the
boolean Emacs option ‘flycheck-rubocop-lint-only’ into the command: If
the variable is non-nil, Flycheck adds the ‘--lint’ option to the final
command line, other Flycheck omits the entire argument.

Flycheck also supports other special ‘option-’ arguments for plain
values or lists of values.

See also
........

flycheck-substitute-argument; for a list of all special ‘option-’
arguments

Flycheck also provides a convenience macro *note
flycheck-def-option-var: 20d. to declare these options:

     (flycheck-def-option-var flycheck-rubocop-lint-only nil ruby-rubocop
       "Whether to only report code issues in Rubocop.

     When non-nil, only report code issues in Rubocop, via `--lint'.
     Otherwise report style issues as well."
       :safe #'booleanp
       :type 'boolean)

Essentially, this macro is just a wrapper around the built-in
‘defcustom’, which additionally keeps track of the syntax checker the
option belongs to, and adds the option to the appropriate custom group.
You can pass arbitrary custom keywords to this macro as we did in this
example: ‘:type’ marks this option as boolean flag, and ‘:safe’ allows
the use as file-local variable, if the value is boolean.

By a similar mechanism you can also pass paths to configuration files to
a syntax checker tool.  The aforementioned Pylint(2) reads a
configuration file for instance:

     (flycheck-define-checker python-pylint
       "A Python syntax and style checker using Pylint.

     This syntax checker requires Pylint 1.0 or newer.

     See URL `http://www.pylint.org/'."
       ;; -r n disables the scoring report
       :command ("pylint" "-r" "n"
                 "--msg-template" "{path}:{line}:{column}:{C}:{msg} ({msg_id})"
                 (config-file "--rcfile" flycheck-pylintrc)
                 source)
       :error-patterns ...
       :modes python-mode)

The special ‘config-file’ argument passes a configuration file from
‘flycheck-pylintrc’ to ‘pylint’, if the value of the variable is
non-nil.

Flycheck provides a sophisticated logic to find an appropriate
configuration file.  See *note Syntax checker configuration files: 6b.
and *note Configuration files for command syntax checkers: 20e. for
details.

   ---------- Footnotes ----------

   (1) https://github.com/bbatsov/rubocop

   (2) http://www.pylint.org/


File: flycheck.info,  Node: Controlling the use of a syntax checker,  Next: Applying more than one syntax checker,  Prev: Passing options and configuration files to syntax checkers,  Up: Advanced syntax checker definitions

9.2.3 Controlling the use of a syntax checker
---------------------------------------------

If you need more control about when a syntax checker is used for syntax
checking, you can supply a custom ‘:predicate’ function.  Consider the
following syntax checker for Zsh scripts in Sh Mode:

     (flycheck-define-checker sh-zsh
       "A Zsh syntax checker using the Zsh shell.

     See URL `http://www.zsh.org/'."
       :command ("zsh" "-n" "-d" "-f" source)
       :error-patterns
       ((error line-start (file-name) ":" line ": " (message) line-end))
       :modes sh-mode
       :predicate (lambda () (eq sh-shell 'zsh)))

Sh Mode also supports Bash and other shells besides Zsh, so we
additionally provide a ‘:predicate’ that checks whether the current
buffer has the right shell.

You can even omit ‘:modes’ and only use a predicate to determine whether
a syntax checker is applicable for the current buffer.


File: flycheck.info,  Node: Applying more than one syntax checker,  Prev: Controlling the use of a syntax checker,  Up: Advanced syntax checker definitions

9.2.4 Applying more than one syntax checker
-------------------------------------------

Frequently, we would like to use multiple syntax checkers in a buffer.
For instance, we might want to check the syntax of a script with
‘sh-zsh’ from the previous section, and then use Shellcheck(1) to check
for questionable code such as unquoted variable expansions, if there are
no syntax errors.  Flycheck supports this scenario by _chaining_ syntax
checkers.

Suppose we defined a syntax checker for Shellcheck called
‘sh-shellcheck’ as follows:

     (flycheck-define-checker sh-shellcheck
       "A shell script syntax and style checker using Shellcheck.

     See URL `https://github.com/koalaman/shellcheck/'."
       :command ("shellcheck" "-f" "checkstyle"
                 "-s" (eval (symbol-name sh-shell))
                 source)
       :modes sh-mode
       :error-parser flycheck-parse-checkstyle)

     Note: Note how we use the special ‘eval’ argument to put the result
     of an arbitrary Emacs Lisp expression into the command line of
     ‘shellcheck’, in order to tell Shellcheck what shell the script is
     written for.

We can now arrange for this syntax checker to be used after ‘sh-zsh’
with *note flycheck-add-next-checker: 212.:

     (flycheck-add-next-checker 'sh-zsh '(warning . sh-shellcheck))

The first item of the cons cell in the second argument is the _maximum
error level_ in the buffer, for which ‘sh-shellcheck’ is still
applicable.  With ‘warning’ Flycheck will run ‘sh-shellcheck’ after
‘sh-zsh’ if there are ‘warning’ or ‘info’ level errors from ‘sh-zsh’,
but not if there are any errors with level ‘error’, such as syntax
errors.

Flycheck will only use a chained syntax checker if it is registered in
*note flycheck-checkers: 5e, so we need to *note register our new syntax
checker: 206.:

     (add-to-list 'flycheck-checkers 'sh-shellcheck 'append)

Note that unlike before we *append* the new syntax checker at the end of
‘flycheck-checkers’.  This ensures that Flycheck does not try
‘sh-shellcheck’ _before_ ‘sh-zsh’.

     Warning: Make sure to append chained syntax checkers to *note
     flycheck-checkers: 5e.

     Flycheck tries all syntax checkers in this list in *order of
     appearance*, so if you add your new chained syntax checker at the
     beginning, it will likely be used right away, before any prior
     syntax checkers.

You also can specify chained syntax checkers directly in *note
flycheck-define-checker: 19. with the ‘:next-checkers’ property.
Instead of calling *note flycheck-add-next-checker: 212, we could also
have added this property to the definition of ‘sh-zsh’:

     (flycheck-define-checker sh-zsh
       "A Zsh syntax checker using the Zsh shell.

     See URL `http://www.zsh.org/'."
       :command ("zsh" "-n" "-d" "-f" source)
       :error-patterns ...
       :modes sh-mode
       :predicate (lambda () (eq sh-shell 'zsh))
       :next-checkers ((warning . sh-shellcheck)))

     Note: If you control the definition of both syntax checkers, this
     style is *preferable* to *note flycheck-add-next-checker: 212.  Use
     this function only if you cannot change the definition of the prior
     syntax checker.

   ---------- Footnotes ----------

   (1) https://github.com/koalaman/shellcheck/


File: flycheck.info,  Node: Other ways to extend Flycheck,  Prev: Advanced syntax checker definitions,  Up: Extending Flycheck

9.3 Other ways to extend Flycheck
=================================

* Menu:

* Use arbitrary functions to check buffers:: 
* Hooking into Flycheck:: 


File: flycheck.info,  Node: Use arbitrary functions to check buffers,  Next: Hooking into Flycheck,  Up: Other ways to extend Flycheck

9.3.1 Use arbitrary functions to check buffers
----------------------------------------------

Beyond commands, Flycheck also supports arbitrary functions as syntax
checkers with *note flycheck-define-generic-checker: 1b.


File: flycheck.info,  Node: Hooking into Flycheck,  Prev: Use arbitrary functions to check buffers,  Up: Other ways to extend Flycheck

9.3.2 Hooking into Flycheck
---------------------------

Flycheck has a rich hook interface which you can use for your own
extensions.

* Menu:

* Status changes:: 
* Error processing:: 
* Error display:: 


File: flycheck.info,  Node: Status changes,  Next: Error processing,  Up: Hooking into Flycheck

9.3.2.1 Status changes
......................

*note flycheck-before-syntax-check-hook: 218. and
‘flycheck-after-syntax-check-hook’ run before and after syntax checks,
and let you update your Emacs instance according to Flycheck’s state.
For instance, flycheck-color-mode-line(1) uses these hooks to colour
your mode-line according to the result of the last syntax check.
Additionally, *note flycheck-status-changed-functions: 19e. runs on
every single status change of Flycheck, and provides a fine-grained
reporting about what Flycheck is currently doing.

   ---------- Footnotes ----------

   (1) https://github.com/flycheck/flycheck-color-mode-line


File: flycheck.info,  Node: Error processing,  Next: Error display,  Prev: Status changes,  Up: Hooking into Flycheck

9.3.2.2 Error processing
........................

The functions in *note flycheck-process-error-functions: 21a. are used
to process new errors reported by a Flycheck syntax checker.  Add to
this hook to get informed about each error reported in a Flycheck
buffer.  In fact, Flycheck uses this hook itself: The standard value
*note flycheck-add-overlay: 21b. is responsible for adding error
highlighting to the buffer.  As a consequence, you can *entirely opt
out* from highlighting with a custom hook.

