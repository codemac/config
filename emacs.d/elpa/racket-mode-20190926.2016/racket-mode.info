This is racket-mode.info, produced by makeinfo version 6.5 from
racket-mode.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Racket Mode: (racket-mode). Edit and REPL major modes for Racket lang.
END-INFO-DIR-ENTRY


File: racket-mode.info,  Node: Top,  Next: Introduction,  Up: (dir)

Racket Mode
***********

* Menu:

* Introduction::
* Install::
* Configure::
* Reference::
* Commands::
* Variables::
* Faces::

— The Detailed Node Listing —

Install

* Configure Emacs to use MELPA::
* Install Racket Mode::
* Minimal Racket::
* Uninstall::
* Update::

Configure

* Key bindings::
* Font-lock (syntax highlighting)::
* Completion::
* paredit::
* smartparens::
* eldoc::
* Start faster::
* Unicode input method::

Commands

* Run::
* Test::
* Eval::
* Visit::
* Learn::
* Edit::
* Macro expand::
* Other::

Run

* racket-run::
* racket-repl::
* racket-racket::
* racket-profile::
* racket-profile-mode::
* racket-logger::
* racket-logger-mode::
* racket-debug-mode::

Test

* racket-test::
* racket-raco-test::

Eval

* racket-send-region::
* racket-send-definition::
* racket-send-last-sexp::

Visit

* racket-visit-definition::
* racket-visit-module::
* racket-unvisit::
* racket-open-require-path::
* racket-find-collection::

Learn

* racket-describe::
* racket-doc::

Edit

* racket-insert-lambda::
* racket-fold-all-tests::
* racket-unfold-all-tests::
* racket-tidy-requires::
* racket-trim-requires::
* racket-base-requires::
* racket-indent-line::
* racket-smart-open-bracket::
* racket-insert-closing::
* racket-cycle-paren-shapes::
* racket-backward-up-list::
* racket-check-syntax-mode::
* racket-unicode-input-method-enable::
* racket-align::
* racket-unalign::
* racket-complete-at-point::

Macro expand

* racket-stepper-mode::
* racket-expand-file::
* racket-expand-region::
* racket-expand-definition::
* racket-expand-last-sexp::

Other

* racket-mode-start-faster::
Variables

* General variables::
* REPL variables::
* Other variables::
* Experimental debugger variables::

General variables

* racket-program::
* racket-command-port::
* racket-command-startup::
* racket-command-timeout::
* racket-memory-limit::
* racket-error-context::
* racket-retry-as-skeleton::
* racket-user-command-line-arguments::
* racket-path-from-emacs-to-racket-function::
* racket-path-from-racket-to-emacs-function::

REPL variables

* racket-history-filter-regexp::
* racket-images-inline::
* racket-images-keep-last::
* racket-images-system-viewer::
* racket-pretty-print::

Other variables

* racket-indent-curly-as-sequence::
* racket-indent-sequence-depth::
* racket-pretty-lambda::
* racket-smart-open-bracket-enable::
* racket-logger-config::

Experimental debugger variables

* racket-debuggable-files::
Faces

* All::

All

* racket-keyword-argument-face::
* racket-selfeval-face::
* racket-here-string-face::
* racket-check-syntax-def-face::
* racket-check-syntax-use-face::
* racket-logger-config-face::
* racket-logger-topic-face::
* racket-logger-fatal-face::
* racket-logger-error-face::
* racket-logger-warning-face::
* racket-logger-info-face::
* racket-logger-debug-face::


File: racket-mode.info,  Node: Introduction,  Next: Install,  Prev: Top,  Up: Top

1 Introduction
**************

The Racket Mode (https://www.racket-mode.com/) package consists of a
variety of Emacs major and minor modes, including:

   • ‘racket-mode’: A major mode for editing ‘.rkt’ files.

   • ‘racket-repl-mode’: A major mode for a Racket REPL. This uses a
     “back end server” written in Racket, which is responsible for
     running files and implementing commands that cannot be implemented
     in Emacs Lisp.(1)

   • Modes to support specific features, such as:
        • *note racket-logger-mode::
        • *note racket-profile-mode::
        • *note racket-check-syntax-mode::
        • *note racket-debug-mode::

   For code, issues, and pull requests, see the Git repo
(https://github.com/greghendershott/racket-mode).

   ---------- Footnotes ----------

   (1) Racket Mode’s Racket code is also delivered as part of the Emacs
package — _not_ as a Racket package.  Delivering both Emacs and Racket
code in one Emacs package simplifies installation and updates.  The main
drawback is that the Racket code is not automatically byte-compiled, as
would normally be done by ‘raco pkg install’.  To address this: *Note
racket-mode-start-faster::.


File: racket-mode.info,  Node: Install,  Next: Configure,  Prev: Introduction,  Up: Top

2 Install
*********

The recommended way to use Racket Mode is to install the package from
MELPA (https://melpa.org/).
* Menu:

* Configure Emacs to use MELPA::
* Install Racket Mode::
* Minimal Racket::
* Uninstall::
* Update::


File: racket-mode.info,  Node: Configure Emacs to use MELPA,  Next: Install Racket Mode,  Up: Install

2.1 Configure Emacs to use MELPA
================================

To use MELPA:

   • Add the following to your ~/.emacs or ~/.emacs.d/init.el:

     (require 'package)
     (add-to-list 'package-archives
     	      '("melpa" . "https://melpa.org/packages/")
     	      t)

   • Restart Emacs.

   • Type ‘M-x’ ‘package-refresh-contents’ ‘RET’ .


File: racket-mode.info,  Node: Install Racket Mode,  Next: Minimal Racket,  Prev: Configure Emacs to use MELPA,  Up: Install

2.2 Install Racket Mode
=======================

When Emacs is configured to use MELPA, simply type ‘M-x’ package-install
‘RET’ racket-mode ‘RET’ .


File: racket-mode.info,  Node: Minimal Racket,  Next: Uninstall,  Prev: Install Racket Mode,  Up: Install

2.3 Minimal Racket
==================

If you have installed the minimal Racket distribution (for example by
using the homebrew formula
(https://github.com/Homebrew/homebrew-core/blob/master/Formula/minimal-racket.rb))
Racket Mode needs some additional packages (like ‘errortrace’ and
‘macro-debugger’).  A simple way to get all these packages is to install
the ‘drracket’ Racket package.  In a command shell:

     raco pkg install drracket


File: racket-mode.info,  Node: Uninstall,  Next: Update,  Prev: Minimal Racket,  Up: Install

2.4 Uninstall
=============

To uninstall Racket Mode, simply type ‘M-x’ ‘package-delete’ ‘RET’
‘racket-mode’ ‘RET’ .

   You should probably also exit and restart Emacs.


File: racket-mode.info,  Node: Update,  Prev: Uninstall,  Up: Install

2.5 Update
==========

Be aware that updating an Emacs package doesn’t necessarily fully update
Emacs’ state.  (One example symptom: an “invalid function” error
message.)

   After updating the package, you might need to restart Emacs.

   In some cases, you might even need to:

  1. Uninstall Racket Mode.

  2. Exit and restart Emacs.

  3. Install Racket Mode.


File: racket-mode.info,  Node: Configure,  Next: Reference,  Prev: Install,  Up: Top

3 Configure
***********

Although Racket Mode can be customized with many *note Variables::,
there is only one that you might _need_ to set: *note racket-program::.
This is the name or pathname of the Racket executable.  It defaults to
‘Racket.exe’ on Windows else ‘racket’.

   On Windows or Linux, this default will probably work for you.

   On macOS, downloading Racket doesn’t add its ‘bin’ directory to your
‘PATH’.  Even after you add it, GUI Emacs doesn’t automatically use your
path (unless you use the handy exec-path-from-shell
(https://melpa.org/#/exec-path-from-shell) package).  Therefore you
might want to set ‘racket-program’ to a full pathname like
‘/usr/racket/bin/racket’.

   You can ‘setq’ this directly in your Emacs init file (~/.emacs or
~/.emacs.d/init.el), or, use ‘M-x’ ‘customize’, as you prefer.
* Menu:

* Key bindings::
* Font-lock (syntax highlighting)::
* Completion::
* paredit::
* smartparens::
* eldoc::
* Start faster::
* Unicode input method::


File: racket-mode.info,  Node: Key bindings,  Next: Font-lock (syntax highlighting),  Up: Configure

3.1 Key bindings
================

To customize things like key bindings, you can use ‘racket-mode-hook’ in
your Emacs init file to modify ‘racket-mode-map’.  For example, although
‘C-c C-c’ is bound by default to the ‘racket-run’ command, let’s say you
wanted ‘F5’ to be an additional binding:

     (add-hook 'racket-mode-hook
     	  (lambda ()
     	    (define-key racket-mode-map (kbd "<f5>") 'racket-run)))

   Likewise for ‘racket-repl-mode-hook’ and ‘racket-repl-mode-map’.


File: racket-mode.info,  Node: Font-lock (syntax highlighting),  Next: Completion,  Prev: Key bindings,  Up: Configure

3.2 Font-lock (syntax highlighting)
===================================

Font-lock (as Emacs calls syntax highlighting) can be controlled using
the variable ‘font-lock-maximum-decoration’, which defaults to ‘t’
(maximum).  You can set it to a number, where ‘0’ is the lowest level.
You can even supply an association list to specify different values for
different major modes.

   Historically you might choose a lower level for speed.  These days
you might do so because you prefer a simpler appearance.

   Racket Mode supports four, increasing levels of font-lock:

   • ‘0’: Just strings, comments, and ‘#lang’.
   • ‘1’: ‘#:keyword’ and self-evaluating literals like numbers, quoted
     symbols (including symbols with spaces delimited by ‘|’
     characters), and ‘#rx’ and ‘#px’ regular expressions.
   • ‘2’: Identifiers in ‘define’-like and ‘let’-like forms.
   • ‘3’: Identifiers provided by ‘racket’, ‘typed/racket’,
     ‘racket/syntax’, and ‘syntax/parse’.  (This level effectively
     treats Racket as a language, instead of a language for making
     languages.).


File: racket-mode.info,  Node: Completion,  Next: paredit,  Prev: Font-lock (syntax highlighting),  Up: Configure

3.3 Completion
==============

In Emacs, a major mode may supply a “completion-at-point function”.
This function is used by manual completion commands like
‘complete-symbol’ (bound by default to ‘C-M-i’ ), as well as by
auto-completion packages like ‘company-mode’.

   Racket Mode supplies such a function, which draws on all identifiers
_currently defined in the Racket namespace_.

   Of course that means there must exist some Racket namespace.  When
you first visit a ‘.rkt’ file, you need to ‘C-c C-c’ to *note
racket-run::.  That makes the namespace match the file, and makes its
identifiers available to Racket Mode.  (Otherwise, as a fallback, Racket
Mode uses the same list of identifiers for which it has defined *note
Font-lock (syntax highlighting)::.)

   Similarly, after you change the file, including its ‘require’ forms,
you’ll need to ‘C-c C-c’ again to make the resulting set of identifiers
available for completion.

   To have ‘TAB’ do completion as well as indent, add the following to
your Emacs init file:

     (setq tab-always-indent 'complete)

   This changes the behavior of Emacs’ standard
‘indent-for-tab-command’, to which ‘TAB’ is bound by default in
‘racket-mode’ and ‘racket-repl-mode’.


File: racket-mode.info,  Node: paredit,  Next: smartparens,  Prev: Completion,  Up: Configure

3.4 paredit
===========

If you use paredit (https://melpa.org/#/paredit), you might want to add
keybindings to ‘paredit-mode-map’:

   • Bind the curly brace keys to ‘paredit-open-curly’ and
     ‘paredit-close-curly’.

   • Bind whatever keys you prefer for ‘paredit-wrap-square’ and
     ‘paredit-wrap-curly’.

   For example, with ‘use-package’ (https://melpa.org/#/use-package):

     (use-package paredit
       :ensure t
       :config
       (dolist (m '(emacs-lisp-mode-hook
     	       racket-mode-hook
     	       racket-repl-mode-hook))
         (add-hook m #'paredit-mode))
       (bind-keys :map paredit-mode-map
     	     ("{"   . paredit-open-curly)
     	     ("}"   . paredit-close-curly))
       (unless terminal-frame
         (bind-keys :map paredit-mode-map
     	       ("M-[" . paredit-wrap-square)
     	       ("M-{" . paredit-wrap-curly))))


File: racket-mode.info,  Node: smartparens,  Next: eldoc,  Prev: paredit,  Up: Configure

3.5 smartparens
===============

If instead of paredit you prefer smartparens
(https://melpa.org/#/smartparens), you can use the default configuration
it provides for Lisp modes generally and for Racket Mode specifically:

     (require 'smartparens-config)


File: racket-mode.info,  Node: eldoc,  Next: Start faster,  Prev: smartparens,  Up: Configure

3.6 eldoc
=========

By default Racket Mode sets ‘eldoc-documentation-function’ to ‘nil’ — no
‘eldoc-mode’ support.  You may set it to ‘racket-eldoc-function’ in a
‘racket-mode-hook’ if you really want to use ‘eldoc-mode’ with Racket.
But it is not a very satisfying experience because Racket is not a very
“eldoc-friendly” language.  Although Racket Mode attempts to discover
argument lists, contracts, or types this doesn’t work in many common
cases:

   • Many Racket primitives are defined in ‘#%kernel’ or ‘#%runtime’.
     There’s no easy way to determine their argument lists.  Most do not
     ‘provide’ a contract.

   • Many of the interesting Racket forms are syntax (macros) not
     functions.  There’s no easy way to determine their “argument
     lists”.

   A more satisfying experience is to use *note racket-describe:: or
*note racket-doc::.


File: racket-mode.info,  Node: Start faster,  Next: Unicode input method,  Prev: eldoc,  Up: Configure

3.7 Start faster
================

You can use *note racket-mode-start-faster:: to make the Racket REPL
start faster.


File: racket-mode.info,  Node: Unicode input method,  Prev: Start faster,  Up: Configure

3.8 Unicode input method
========================

An optional Emacs input method, ‘racket-unicode’, lets you easily type
various Unicode symbols that might be useful when writing Racket code.

   To automatically enable the ‘racket-unicode’ input method in
‘racket-mode’ and ‘racket-repl-mode’ buffers, put the following code in
your Emacs init file:

     (add-hook 'racket-mode-hook      #'racket-unicode-input-method-enable)
     (add-hook 'racket-repl-mode-hook #'racket-unicode-input-method-enable)

   *Note racket-unicode-input-method-enable::.

   *Note racket-insert-lambda::.


File: racket-mode.info,  Node: Reference,  Next: Commands,  Prev: Configure,  Up: Top

4 Reference
***********

The following sections are generated from the doc strings for each
command, variable, or face.  (As a result, some of the formatting might
not be quite as nice or correct as the previous sections.)

   You can also view these by using the normal Emacs help mechanism:

   • ‘C-h f’ and enter the name of a command.
   • ‘C-h v’ and enter the name of a variable.


File: racket-mode.info,  Node: Commands,  Next: Variables,  Prev: Reference,  Up: Top

5 Commands
**********

* Menu:

* Run::
* Test::
* Eval::
* Visit::
* Learn::
* Edit::
* Macro expand::
* Other::


File: racket-mode.info,  Node: Run,  Next: Test,  Up: Commands

5.1 Run
=======

* Menu:

* racket-run::
* racket-repl::
* racket-racket::
* racket-profile::
* racket-profile-mode::
* racket-logger::
* racket-logger-mode::
* racket-debug-mode::


File: racket-mode.info,  Node: racket-run,  Next: racket-repl,  Up: Run

5.1.1 racket-run
----------------

‘C-c C-k’ or ‘C-c C-c’

   Save and evaluate the buffer in REPL.

   With one C-u prefix, uses errortrace for improved stack traces.
Otherwise follows the *note racket-error-context:: setting.

   With two C-u prefixes, instruments code for step debugging.  See
*note racket-debug-mode:: and the variable *note
racket-debuggable-files::.

   If point is within a Racket module form, the REPL “enters” that
submodule (uses its language info and namespace).

   When you run again, the file is evaluated from scratch — the
custodian releases resources like threads and the evaluation environment
is reset to the contents of the file.  In other words, like DrRacket,
this provides the predictability of a “static” baseline, plus the
ability to explore interactively using the REPL.

   See also ‘racket-run-and-switch-to-repl’, which is even more like
DrRacket’s Run because it selects the REPL window (gives it the focus),
too.

   When *note racket-retry-as-skeleton:: is true, if your source file
has an error, a “skeleton” of your file is evaluated to get identifiers
from module languages, require forms, and definitions.  That way, things
like completion and *note racket-describe:: are more likely to work
while you edit the file to fix the error.  If not even the “skeleton”
evaluation succeeds, you’ll have only identifiers provided by
racket/base, until you fix the error and run again.

   Output in the Racket REPL buffer that describes a file and position
is automatically “linkified”.  Examples of such text include:

   • Racket error messages.
   • rackunit test failure location messages.
   • print representation of path objects.

   To visit these locations, move point there and press RET or mouse
click.  Or, use the standard ‘next-error’ and ‘previous-error’ commands.


File: racket-mode.info,  Node: racket-repl,  Next: racket-racket,  Prev: racket-run,  Up: Run

5.1.2 racket-repl
-----------------

‘C-c C-z’

   Show the Racket REPL buffer in some window.

   If NOSELECT is not nil, does not also select the REPL window.

   *IMPORTANT*

   The main, intended use of Racket Mode’s REPL is that you ‘find-file’
some specific .rkt file, then *note racket-run:: it.  The REPL will then
match that file.  Also, various Racket Mode features will work, such as
completion, visiting definitions, and so on.

   If the REPL isn’t running, and you want to start it for no file in
particular?  Then you could use this command.  But the resulting REPL
will have a minimal “#lang racket/base” namespace.  You could enter
"(require racket)" if you want the equivalent of “#lang racket”.  You
could also "(require racket/enter)" if you want things like “enter!”.
But in some sense you’d be “using it wrong”.  If you really don’t want
to use Racket Mode’s REPL as intended, then you might as well use a
plain Emacs shell buffer to run command-line Racket.


File: racket-mode.info,  Node: racket-racket,  Next: racket-profile,  Prev: racket-repl,  Up: Run

5.1.3 racket-racket
-------------------

‘<C-M-f5>’

   Do “racket <file>” in a shell buffer.


File: racket-mode.info,  Node: racket-profile,  Next: racket-profile-mode,  Prev: racket-racket,  Up: Run

5.1.4 racket-profile
--------------------

‘C-c C-o’

   Runs with profiling instrumentation and shows results.

   Results are presented in a *note racket-profile-mode:: buffer, which
also lets you quickly view the source code.

   You may evaluate expressions in the REPL. They are also profiled.
Use ‘racket--profile-refresh’ to see the updated results.  (In other
words a possible workflow is: *note racket-profile:: a .rkt file, call
one its functions in the REPL, and refresh the profile results.)

   Caveat: Only source files are instrumented.  You may need to delete
compiled/*.zo files.


File: racket-mode.info,  Node: racket-profile-mode,  Next: racket-logger,  Prev: racket-profile,  Up: Run

5.1.5 racket-profile-mode
-------------------------

‘M-x’ ‘racket-profile-mode’ ‘RET’

   Major mode for results of *note racket-profile::.

Key                                             Binding
‘,’                                             ‘racket--profile-sort’
‘RET’                                           ‘racket--profile-visit’
‘z’                                             ‘racket--profile-show-zero’
‘p’                                             ‘racket--profile-prev’
‘n’                                             ‘racket--profile-next’
‘g’                                             ‘racket--profile-refresh’
‘q’                                             ‘racket--profile-quit’

   In addition to any hooks its parent mode ‘special-mode’ might have
run, this mode runs the hook ‘racket-profile-mode-hook’, as the final
step during initialization.


File: racket-mode.info,  Node: racket-logger,  Next: racket-logger-mode,  Prev: racket-profile-mode,  Up: Run

5.1.6 racket-logger
-------------------

‘C-c C-l’

   Create the *note racket-logger-mode:: buffer and connect to logger
output.

   If the ‘racket-repl-mode’ buffer is displayed in a window, split that
window and put the logger in the bottom window.  Otherwise, use
‘pop-to-buffer’.


File: racket-mode.info,  Node: racket-logger-mode,  Next: racket-debug-mode,  Prev: racket-logger,  Up: Run

5.1.7 racket-logger-mode
------------------------

‘M-x’ ‘racket-logger-mode’ ‘RET’

   Major mode for Racket logger output.

   The customization variable *note racket-logger-config:: determines
the levels for topics.  During a session you may change topic levels
using ‘racket-logger-topic-level’.

   For more information see:
<https://docs.racket-lang.org/reference/logging.html>

Key                                                     Binding
‘C-c C-z’                                               *note racket-repl::
‘x’                                                     ‘racket-logger-exit’
‘g’                                                     ‘racket-logger-clear’
‘p’                                                     ‘racket-logger-previous-item’
‘n’                                                     ‘racket-logger-next-item’
‘w’                                                     ‘toggle-truncate-lines’
‘l’                                                     ‘racket-logger-topic-level’

   In addition to any hooks its parent mode ‘special-mode’ might have
run, this mode runs the hook ‘racket-logger-mode-hook’, as the final
step during initialization.


File: racket-mode.info,  Node: racket-debug-mode,  Prev: racket-logger-mode,  Up: Run

5.1.8 racket-debug-mode
-----------------------

‘M-x’ ‘racket-debug-mode’ ‘RET’

   Minor mode for debug breaks.

   This feature is **EXPERIMENTAL**!!! It is likely to have significant
limitations and bugs.  You are welcome to open an issue to provide
feedback.  Please understand that this feature might never be improved –
it might even be removed someday if it turns out to have too little
value and/or too much cost.

   How to debug:

  1. “Instrument” code for step debugging.  You can instrument entire
     files, and also individual functions.

     a.  Entire Files

     Choose *note racket-run:: with two prefixes – C-u C-u C-c C-c.  The
     file will be instrumented for step debugging before it is run.
     Also instrumented are files determined by the variable *note
     racket-debuggable-files::.

     The run will break at the first breakable position.

     Tip: After you run to completion and return to a normal REPL
     prompt, the code remains instrumented.  You may enter expressions
     that evaluate instrumented code and it will break so you can step
     debug again.

     b.  Function Definitions

     Put point in a function ‘define’ form and C-u C-M-x to “instrument”
     the function for step debugging.  Then in the REPL, enter an
     expression that causes the instrumented function to be run,
     directly or indirectly.

     You can instrument any number of functions.

     You can even instrument while stopped at a break.  For example, to
     instrument a function you are about to call, so you can “step into”
     it:

        • M-.  a.k.a.  *note racket-visit-definition::.
        • C-u C-M-x to instrument the definition.
        • M-, a.k.a.  *note racket-unvisit::.
        • Continue stepping.
     Limitation: Instrumenting a function ~require~d from another module
     won’t redefine that function.  Instead, it attempts to define an
     instrumented function of the same name, in the module the REPL is
     inside.  The define will fail if it needs definitions visible only
     in that other module.  In that case you’ll probably need to use
     entire-file instrumentation as described above.

  2. When a break occurs, the ‘racket-repl-mode’ prompt changes.  In
     this debug REPL, local variables are available for you to use and
     even to ‘set!’.

     Also, in the ‘racket-mode’ buffer where the break is located, *note
     racket-debug-mode:: is enabled.  This minor mode makes the buffer
     read-only, provides visual feedback – about the break position,
     local variable values, and result values – and provides shortcut
     keys:

Key                                             Binding
‘?’                                             ‘racket-debug-help’
‘h’                                             ‘racket-debug-run-to-here’
‘p’                                             ‘racket-debug-prev-breakable’
‘n’                                             ‘racket-debug-next-breakable’
‘c’                                             ‘racket-debug-continue’
‘u’                                             ‘racket-debug-step-out’
‘o’                                             ‘racket-debug-step-over’
‘SPC’                                           ‘racket-debug-step’


File: racket-mode.info,  Node: Test,  Next: Eval,  Prev: Run,  Up: Commands

5.2 Test
========

* Menu:

* racket-test::
* racket-raco-test::


File: racket-mode.info,  Node: racket-test,  Next: racket-raco-test,  Up: Test

5.2.1 racket-test
-----------------

‘<C-f5>’ or ‘C-c C-t’

   Run the “test” submodule.

   With prefix, runs with coverage instrumentation and highlights
uncovered code.

   Put your tests in a “test” submodule.  For example:

     (module+ test
       (require rackunit)
       (check-true #t))

   Any rackunit test failure messages show the location.  You may use
‘next-error’ to jump to the location of each failing test.

   See also:
   • *note racket-fold-all-tests::
   • *note racket-unfold-all-tests::


File: racket-mode.info,  Node: racket-raco-test,  Prev: racket-test,  Up: Test

5.2.2 racket-raco-test
----------------------

‘M-x’ ‘racket-raco-test’ ‘RET’

   Do “raco test -x <file>” in a shell buffer to run the “test”
submodule.


File: racket-mode.info,  Node: Eval,  Next: Visit,  Prev: Test,  Up: Commands

5.3 Eval
========

* Menu:

* racket-send-region::
* racket-send-definition::
* racket-send-last-sexp::


File: racket-mode.info,  Node: racket-send-region,  Next: racket-send-definition,  Up: Eval

5.3.1 racket-send-region
------------------------

‘C-c C-r’

   Send the current region (if any) to the Racket REPL.


File: racket-mode.info,  Node: racket-send-definition,  Next: racket-send-last-sexp,  Prev: racket-send-region,  Up: Eval

5.3.2 racket-send-definition
----------------------------

‘C-M-x’

   Send the current definition to the Racket REPL.


File: racket-mode.info,  Node: racket-send-last-sexp,  Prev: racket-send-definition,  Up: Eval

5.3.3 racket-send-last-sexp
---------------------------

‘C-x C-e’

   Send the previous sexp to the Racket REPL.

   When the previous sexp is a sexp comment the sexp itself is sent,
without the #; prefix.


File: racket-mode.info,  Node: Visit,  Next: Learn,  Prev: Eval,  Up: Commands

5.4 Visit
=========

* Menu:

* racket-visit-definition::
* racket-visit-module::
* racket-unvisit::
* racket-open-require-path::
* racket-find-collection::


File: racket-mode.info,  Node: racket-visit-definition,  Next: racket-visit-module,  Up: Visit

5.4.1 racket-visit-definition
-----------------------------

‘M-.’

   Visit definition of identifier at point.

   If there is no identifier at point, prompt for it.

   With a prefix, always prompt for the identifier.

   Use *note racket-unvisit:: to return.

   Please keep in mind the following limitations:

   • Only finds symbols defined in the current namespace.  You may need
     to *note racket-run:: the current buffer, first.

   • Only visits the definition of module-level identifiers – things for
     which Racket’s “identifier-binding” function returns information.
     This does NOT include things such as local (nested) function
     definitions or “racket/class” member functions.  To find those in
     the same file, you’ll need to use a normal Emacs text search
     function like ‘isearch-forward’.

   • If the definition is found in Racket’s “#%kernel” module, it will
     tell you so but won’t visit the definition site.


File: racket-mode.info,  Node: racket-visit-module,  Next: racket-unvisit,  Prev: racket-visit-definition,  Up: Visit

5.4.2 racket-visit-module
-------------------------

‘C-M-.’

   Visit definition of module at point, e.g.  net/url or “file.rkt”.

   If there is no module at point, prompt for it.

   With a prefix, always prompt for the module.

   Use *note racket-unvisit:: to return.

   See also: *note racket-find-collection::.


File: racket-mode.info,  Node: racket-unvisit,  Next: racket-open-require-path,  Prev: racket-visit-module,  Up: Visit

5.4.3 racket-unvisit
--------------------

‘M-,’

   Return from previous *note racket-visit-definition:: or *note
racket-visit-module::.


File: racket-mode.info,  Node: racket-open-require-path,  Next: racket-find-collection,  Prev: racket-unvisit,  Up: Visit

5.4.4 racket-open-require-path
------------------------------

‘C-c C-x C-f’

   Like Dr Racket’s Open Require Path.

   Type (or delete) characters that are part of a module path name.
“Fuzzy” matches appear.  For example try typing “t/t/r”.

   Choices are displayed in a vertical list.  The current choice is at
the top, marked with “->”.

   • C-n and C-p move among the choices.
   • RET on a directory adds its contents to the choices.
   • RET on a file exits doing ‘find-file’.
   • C-g aborts.

   Note: This requires Racket 6.1.1.6 or newer.  Otherwise it won’t
error, it will just never return any matches.


File: racket-mode.info,  Node: racket-find-collection,  Prev: racket-open-require-path,  Up: Visit

5.4.5 racket-find-collection
----------------------------

‘M-x’ ‘racket-find-collection’ ‘RET’

   Given a collection name, try to find its directory and files.

   Takes a collection name from point (or, with a prefix, prompts you).

   If only one directory is found, ‘ido-find-file-in-dir’ lets you pick
a file there.

   If more than one directory is found, ‘ido-completing-read’ lets you
pick one, then ‘ido-find-file-in-dir’ lets you pick a file there.

   Note: This requires the ‘raco-find-collection’ package to be
installed.  To install it, in ‘shell’ enter:

   raco pkg install raco-find-collection

   Tip: This works best with ‘ido-enable-flex-matching’ set to t.  Also
handy is the ‘flx-ido’ package from MELPA.

   See also: *note racket-visit-module:: and *note
racket-open-require-path::.


File: racket-mode.info,  Node: Learn,  Next: Edit,  Prev: Visit,  Up: Commands

5.5 Learn
=========

* Menu:

* racket-describe::
* racket-doc::


File: racket-mode.info,  Node: racket-describe,  Next: racket-doc,  Up: Learn

5.5.1 racket-describe
---------------------

‘C-c C-.’

   Describe the identifier at point in a ‘*Racket Describe*’ buffer.

   The intent is to give a quick reminder or introduction to something,
regardless of whether it has installed documentation – and to do so
within Emacs, without switching to a web browser.

   This buffer is also displayed when you use ‘company-mode’ and press
F1 or C-h in its pop up completion list.

   • If the identifier has installed Racket documentation, then a
     simplified version of the HTML is presented in the buffer,
     including the “blue box”, documentation prose, and examples.

   • Otherwise, if the identifier is a function, then its signature is
     displayed, for example ‘(name arg-1-name arg-2-name)’.  If it has a
     contract or a Typed Racket type, that is also displayed.

   You can quit the buffer by pressing q.  Also, at the bottom of the
buffer are Emacs buttons – which you may navigate among using TAB, and
activate using RET – for *note racket-visit-definition:: and *note
racket-doc::.


File: racket-mode.info,  Node: racket-doc,  Prev: racket-describe,  Up: Learn

5.5.2 racket-doc
----------------

‘C-c C-d’

   View documentation of the identifier or string at point.

   Uses the default external web browser.

   If point is an identifier required in the current namespace that has
help, opens the web browser directly at that help topic.  (i.e.  Uses
the identifier variant of racket/help.)

   Otherwise, opens the ‘search for a term’ page, where you can choose
among multiple possibilities.  (i.e.  Uses the string variant of
racket/help.)

   With a C-u prefix, prompts for the identifier or quoted string,
instead of looking at point.


File: racket-mode.info,  Node: Edit,  Next: Macro expand,  Prev: Learn,  Up: Commands

5.6 Edit
========

* Menu:

* racket-insert-lambda::
* racket-fold-all-tests::
* racket-unfold-all-tests::
* racket-tidy-requires::
* racket-trim-requires::
* racket-base-requires::
* racket-indent-line::
* racket-smart-open-bracket::
* racket-insert-closing::
* racket-cycle-paren-shapes::
* racket-backward-up-list::
* racket-check-syntax-mode::
* racket-unicode-input-method-enable::
* racket-align::
* racket-unalign::
* racket-complete-at-point::


File: racket-mode.info,  Node: racket-insert-lambda,  Next: racket-fold-all-tests,  Up: Edit

5.6.1 racket-insert-lambda
--------------------------

‘C-M-y’

   Insert λ.

   To insert Unicode symbols generally, see *note
racket-unicode-input-method-enable::.


File: racket-mode.info,  Node: racket-fold-all-tests,  Next: racket-unfold-all-tests,  Prev: racket-insert-lambda,  Up: Edit

5.6.2 racket-fold-all-tests
---------------------------

‘C-c C-f’

   Fold (hide) all test submodules.


File: racket-mode.info,  Node: racket-unfold-all-tests,  Next: racket-tidy-requires,  Prev: racket-fold-all-tests,  Up: Edit

5.6.3 racket-unfold-all-tests
-----------------------------

‘C-c C-u’

   Unfold (show) all test submodules.


File: racket-mode.info,  Node: racket-tidy-requires,  Next: racket-trim-requires,  Prev: racket-unfold-all-tests,  Up: Edit

5.6.4 racket-tidy-requires
--------------------------

‘M-x’ ‘racket-tidy-requires’ ‘RET’

   Make a single top-level “require” form, modules sorted, one per line.

   All top-level require forms are combined into a single form.  Within
that form:

   • A single subform is used for each phase level, sorted in this
     order: for-syntax, for-template, for-label, for-meta, and plain
     (phase 0).

        • Within each level subform, the modules are sorted:

             • Collection path modules – sorted alphabetically.

             • Subforms such as only-in.

             • Quoted relative requires – sorted alphabetically.

   At most one module is listed per line.

   Note: This only works for requires at the top level of a source file
using #lang.  It does NOT work for require forms inside module forms.

   See also: *note racket-trim-requires:: and *note
racket-base-requires::.


File: racket-mode.info,  Node: racket-trim-requires,  Next: racket-base-requires,  Prev: racket-tidy-requires,  Up: Edit

5.6.5 racket-trim-requires
--------------------------

‘M-x’ ‘racket-trim-requires’ ‘RET’

   Like *note racket-tidy-requires:: but also deletes unnecessary
requires.

   Note: This only works when the source file can be evaluated with no
errors.

   Note: This only works for requires at the top level of a source file
using #lang.  It does NOT work for require forms inside module forms.
Furthermore, it is not smart about module+ or module* forms – it might
delete top level requires that are actually needed by such submodules.

   See also: *note racket-base-requires::.


File: racket-mode.info,  Node: racket-base-requires,  Next: racket-indent-line,  Prev: racket-trim-requires,  Up: Edit

5.6.6 racket-base-requires
--------------------------

‘M-x’ ‘racket-base-requires’ ‘RET’

   Change from “#lang racket” to “#lang racket/base”.

   Adds explicit requires for imports that are provided by “racket” but
not by “racket/base”.

   This is a recommended optimization for Racket applications.  Avoiding
loading all of “racket” can reduce load time and memory footprint.

   Also, as does *note racket-trim-requires::, this removes unneeded
modules and tidies everything into a single, sorted require form.

   Note: This only works when the source file can be evaluated with no
errors.

   Note: This only works for requires at the top level of a source file
using #lang.  It does NOT work for require forms inside module forms.
Furthermore, it is not smart about module+ or module* forms – it might
delete top level requires that are actually needed by such submodules.

   Note: Currently this only helps change “#lang racket” to “#lang
racket/base”.  It does not help with other similar conversions, such as
changing “#lang typed/racket” to “#lang typed/racket/base”.


File: racket-mode.info,  Node: racket-indent-line,  Next: racket-smart-open-bracket,  Prev: racket-base-requires,  Up: Edit

5.6.7 racket-indent-line
------------------------

‘M-x’ ‘racket-indent-line’ ‘RET’

   Indent current line as Racket code.

   This behaves like ‘lisp-indent-line’, except that whole-line comments
are treated the same regardless of whether they start with single or
double semicolons.

   • Automatically indents forms that start with ‘begin’ in the usual
     way that ‘begin’ is indented.

   • Automatically indents forms that start with ‘def’ or ‘with-’ in the
     usual way that ‘define’ is indented.

   • Has rules for many specific standard Racket forms.

   To extend, use your Emacs init file to

   (put SYMBOL ‘racket-indent-function INDENT)

   where ‘SYMBOL’ is the name of the Racket form (e.g.  ~’test-case~)
and ‘INDENT’ is an integer or the symbol ~’defun~.  When ‘INDENT’ is an
integer, the meaning is the same as for ‘lisp-indent-function’ and
‘scheme-indent-function’: Indent the first ‘n’ arguments specially and
then indent any further arguments like a body.

   For example in your ‘.emacs’ file you could use:

   (put ‘test-case ‘racket-indent-function 1)

   to change the indent of ‘test-case’ from this:

   (test-case foo blah blah)

   to this:

   (test-case foo blah blah)

   If ‘racket-indent-function’ has no property for a symbol,
‘scheme-indent-function’ is also considered (although the with-x indents
defined by ‘scheme-mode’ are ignored).  This is only to help people who
may have extensive ‘scheme-indent-function’ settings, particularly in
the form of file or dir local variables.  Otherwise prefer
‘racket-indent-function’.


File: racket-mode.info,  Node: racket-smart-open-bracket,  Next: racket-insert-closing,  Prev: racket-indent-line,  Up: Edit

5.6.8 racket-smart-open-bracket
-------------------------------

‘M-x’ ‘racket-smart-open-bracket’ ‘RET’

   Automatically insert a ‘(’ or a ‘[’ as appropriate.

   Behaves like the “Automatically adjust opening square brackets”
feature in Dr.  Racket:

   By default, inserts a ‘(’.  Inserts a ‘[’ in the following cases:

   • ‘let’-like bindings – forms with ‘let’ in the name as well as
     things like ‘parameterize’, ‘with-handlers’, and ‘with-syntax’.

   • ‘case’, ‘cond’, ‘match’, ‘syntax-case’, ‘syntax-parse’, and
     ‘syntax-rules’ clauses.

   • ‘for’-like bindings and ‘for/fold’ accumulators.

   • ‘class’ declaration syntax, such as ‘init’ and ‘inherit’.

   When the previous s-expression in a sequence is a compound
expression, uses the same kind of delimiter.

   To use, bind the ‘[’ key to *note racket-smart-open-bracket:: in
‘racket-mode-map’ and/or ‘racket-repl-mode-map’.

   To force insert ‘[’, use ‘quoted-insert’.

   Combined with *note racket-insert-closing:: this means that you can
press the unshifted ‘[’ and ‘]’ keys to get whatever delimiters follow
the Racket conventions for these forms.  When something like
‘electric-pair-mode’ or ‘paredit-mode’ is active, you need not even
press ‘]’.


File: racket-mode.info,  Node: racket-insert-closing,  Next: racket-cycle-paren-shapes,  Prev: racket-smart-open-bracket,  Up: Edit

5.6.9 racket-insert-closing
---------------------------

‘M-x’ ‘racket-insert-closing’ ‘RET’

   Insert a matching closing delimiter.

   With a prefix, insert the typed character as-is.

   If you want to use this, in your Emacs init file you can bind ")",
"]", and “}" keys to *note racket-insert-closing::.

   This is handy if you’re not yet using something like ‘paredit-mode’,
‘smartparens-mode’, ‘parinfer-mode’, or simply ‘electric-pair-mode’
added in Emacs 24.5.


File: racket-mode.info,  Node: racket-cycle-paren-shapes,  Next: racket-backward-up-list,  Prev: racket-insert-closing,  Up: Edit

5.6.10 racket-cycle-paren-shapes
--------------------------------

‘C-c C-p’

   Cycle the sexpr among () [] {}.


File: racket-mode.info,  Node: racket-backward-up-list,  Next: racket-check-syntax-mode,  Prev: racket-cycle-paren-shapes,  Up: Edit

5.6.11 racket-backward-up-list
------------------------------

‘C-M-u’

   Like ‘backward-up-list’ but works when point is in a string or
comment.

   Typically you should not use this command in Emacs Lisp – especially
not repeatedly.  Instead, initially use
‘racket--escape-string-or-comment’ to move to the start of a string or
comment, if any, then use normal ‘backward-up-list’ repeatedly.


File: racket-mode.info,  Node: racket-check-syntax-mode,  Next: racket-unicode-input-method-enable,  Prev: racket-backward-up-list,  Up: Edit

5.6.12 racket-check-syntax-mode
-------------------------------

‘M-x’ ‘racket-check-syntax-mode’ ‘RET’

   Analyze the buffer and annotate with information.

   The buffer becomes read-only until you exit this minor mode.  However
you may navigate the usual ways.  When point is on a definition or use,
related items are highlighted and information is displayed in the echo
area.  You may also use special commands to navigate among the
definition and its uses.

Key                                             Binding
‘r’                                             ‘racket-check-syntax-mode-rename’
‘p’                                             ‘racket-check-syntax-mode-goto-prev-use’
‘n’                                             ‘racket-check-syntax-mode-goto-next-use’
‘.’                                             ‘racket-check-syntax-mode-goto-def’
‘k’                                             ‘racket-check-syntax-mode-goto-prev-def’
‘TAB’                                           ‘racket-check-syntax-mode-goto-next-def’
‘j’                                             ‘racket-check-syntax-mode-goto-next-def’
‘h’                                             ‘racket-check-syntax-mode-help’
‘q’                                             ‘racket-check-syntax-mode-quit’


File: racket-mode.info,  Node: racket-unicode-input-method-enable,  Next: racket-align,  Prev: racket-check-syntax-mode,  Up: Edit

5.6.13 racket-unicode-input-method-enable
-----------------------------------------

‘M-x’ ‘racket-unicode-input-method-enable’ ‘RET’

   Set input method to racket-unicode.

   The racket-unicode input method lets you easily type various Unicode
symbols that might be useful when writing Racket code.

   To automatically enable the racket-unicode input method in
racket-mode and racket-repl-mode buffers, put the following code in your
Emacs init file:

     (add-hook 'racket-mode-hook #'racket-unicode-input-method-enable)
     (add-hook 'racket-repl-mode-hook #'racket-unicode-input-method-enable)

   To temporarily enable this input method for a single buffer you can
use “M-x racket-unicode-input-method-enable”.

   Use the standard Emacs key C-\ to toggle the input method.

   When the racket-unicode input method is active, you can for example
type “All” and it is immediately replaced with “∀”.  A few other
examples:

omega       ω
x_1         x₁
x^1         x¹
A           𝔸
test–>>E    test–>>∃ (racket/redex)
vdash       ⊢

   To see a table of all key sequences use “M-x describe-input-method
<RET> racket-unicode”.

   If you want to add your own mappings to the “racket-unicode” input
method, you may add code like the following example in your Emacs init
file:

     ;; Either (require 'racket-mode) here, or, if you use
     ;; use-package, put the code below in the :config section.
     (with-temp-buffer
       (racket-unicode-input-method-enable)
       (set-input-method "racket-unicode")
       (let ((quail-current-package (assoc "racket-unicode"
     				      quail-package-alist)))
         (quail-define-rules ((append . t))
     			("^o" ["ᵒ"]))))

   If you don’t like the highlighting of partially matching tokens you
can turn it off by setting ‘input-method-highlight-flag’ to nil.


File: racket-mode.info,  Node: racket-align,  Next: racket-unalign,  Prev: racket-unicode-input-method-enable,  Up: Edit

5.6.14 racket-align
-------------------

‘M-x’ ‘racket-align’ ‘RET’

   Align values in the same column.

   Useful for binding forms like “let” and “parameterize”, conditionals
like “cond” and “match”, association lists, and any series of couples
like the arguments to “hash”.

   Before choosing this command, put point on the first of a series of
“couples”.  A couple is:

   • A list of two or more sexprs: "[sexpr val sexpr ...]".
   • Two sexprs: “sexpr val”.

   Each “val” moves to the same column and is ‘prog-indent-sexp’-ed (in
case it is a multi-line form).

   For example with point on the "[" before “a”:

     Before             After

     (let ([a 12]       (let ([a   12]
           [bar 23])          [bar 23])
       ....)              ....)

     '([a . 12]         '([a   . 12]
       [bar . 23])        [bar . 23])

     (cond [a? #t]      (cond [a?   #t]
           [b? (f x           [b?   (f x
     	     y)]                  y)]
           [else #f])         [else #f])

   Or with point on the quote before “a”:

     (list 'a 12        (list 'a   12
           'bar 23)           'bar 23)

   If more than one couple is on the same line, none are aligned,
because it is unclear where the value column should be.  For example the
following form will not change; *note racket-align:: will display an
error message:

     (let ([a 0][b 1]
           [c 2])       error; unchanged
       ....)

   When a couple’s sexprs start on different lines, that couple is
ignored.  Other, single-line couples in the series are aligned as usual.
For example:

     (let ([foo         (let ([foo
            0]                 0]
           [bar 1]            [bar 1]
           [x 2])             [x   2])
       ....)              ....)

   See also: *note racket-unalign::.


File: racket-mode.info,  Node: racket-unalign,  Next: racket-complete-at-point,  Prev: racket-align,  Up: Edit

5.6.15 racket-unalign
---------------------

‘M-x’ ‘racket-unalign’ ‘RET’

   The opposite of *note racket-align::.

   Effectively does M-x ‘just-one-space’ and ‘prog-indent-sexp’ for each
couple’s value.


File: racket-mode.info,  Node: racket-complete-at-point,  Prev: racket-unalign,  Up: Edit

5.6.16 racket-complete-at-point
-------------------------------

Default value for the variable ‘completion-at-point-functions’.

   Completion candidates are drawn from the namespace symbols resulting
from the most recent *note racket-run:: of each .rkt file.  If a file
has never been run, candidates default to values also used for font-lock
– an assortment of symbols from common Racket modules such as ‘racket’,
‘typed/racket’, and ‘syntax/parse’.

   Returns extra :company-doc-buffer and :company-location properties
for use by the ‘company-mode’ backend ‘company-capf’ – but not
:company-docsig, because it is frequently impossible to supply this
quickly enough or at all.


File: racket-mode.info,  Node: Macro expand,  Next: Other,  Prev: Edit,  Up: Commands

5.7 Macro expand
================

* Menu:

* racket-stepper-mode::
* racket-expand-file::
* racket-expand-region::
* racket-expand-definition::
* racket-expand-last-sexp::


File: racket-mode.info,  Node: racket-stepper-mode,  Next: racket-expand-file,  Up: Macro expand

5.7.1 racket-stepper-mode
-------------------------

‘M-x’ ‘racket-stepper-mode’ ‘RET’

   Major mode for Racket stepper output.

   Used by the commands *note racket-expand-file::, *note
racket-expand-definition::, *note racket-expand-region::, and *note
racket-expand-last-sexp::.

Key                                             Binding
‘k’                                             ‘racket-stepper-previous-item’
‘p’                                             ‘racket-stepper-previous-item’
‘j’                                             ‘racket-stepper-next-item’
‘n’                                             ‘racket-stepper-next-item’
‘RET’                                           ‘racket-stepper-step’

   In addition to any hooks its parent mode ‘special-mode’ might have
run, this mode runs the hook ‘racket-stepper-mode-hook’, as the final
step during initialization.


File: racket-mode.info,  Node: racket-expand-file,  Next: racket-expand-region,  Prev: racket-stepper-mode,  Up: Macro expand

5.7.2 racket-expand-file
------------------------

‘C-c C-e f’

   Expand the ‘racket-mode’ buffer’s file in *note
racket-stepper-mode::.

   Uses the ‘macro-debugger’ package to do the expansion.

   You do need to *note racket-run:: the file first; the namespace
active in the REPL is not used.

   If the file is non-trivial and/or is not compiled to a .zo bytecode
file, then it might take many seconds before the original form is
displayed and you can start stepping.

   With a prefix, also expands syntax from racket/base – which can
result in very many expansion steps.


File: racket-mode.info,  Node: racket-expand-region,  Next: racket-expand-definition,  Prev: racket-expand-file,  Up: Macro expand

5.7.3 racket-expand-region
--------------------------

‘C-c C-e r’

   Expand the active region using *note racket-stepper-mode::.

   Uses Racket’s ‘expand-once’ in the namespace from the most recent
*note racket-run::.


File: racket-mode.info,  Node: racket-expand-definition,  Next: racket-expand-last-sexp,  Prev: racket-expand-region,  Up: Macro expand

5.7.4 racket-expand-definition
------------------------------

‘C-c C-e x’

   Expand the definition around point using *note racket-stepper-mode::.

   Uses Racket’s ‘expand-once’ in the namespace from the most recent
*note racket-run::.


File: racket-mode.info,  Node: racket-expand-last-sexp,  Prev: racket-expand-definition,  Up: Macro expand

5.7.5 racket-expand-last-sexp
-----------------------------

‘C-c C-e e’

   Expand the sexp before point using *note racket-stepper-mode::.

   Uses Racket’s ‘expand-once’ in the namespace from the most recent
*note racket-run::.


File: racket-mode.info,  Node: Other,  Prev: Macro expand,  Up: Commands

5.8 Other
=========

* Menu:

* racket-mode-start-faster::


File: racket-mode.info,  Node: racket-mode-start-faster,  Up: Other

5.8.1 racket-mode-start-faster
------------------------------

‘M-x’ ‘racket-mode-start-faster’ ‘RET’

   Compile Racket Mode’s .rkt files for faster startup.

   Racket Mode is implemented as an Emacs Lisp “front end” that talks to
a Racket process “back end”.  Because Racket Mode is delivered as an
Emacs package instead of a Racket package, installing it does not do the
‘raco setup’ that is normally done for Racket packages.

   This command will do a ‘raco make’ of Racket Mode’s .rkt files,
creating bytecode files in ‘compiled/’ subdirectories.  As a result,
when a *note racket-run:: or *note racket-repl:: command must start the
Racket process, it will start faster.

   If you run this command, ever, you should run it again after:

   • Installing an updated version of Racket Mode.  Otherwise, you might
     lose some of the speed-up.

   • Installing a new version of Racket and/or changing the value of the
     variable *note racket-program::.  Otherwise, you might get an error
     message due to the bytecode being different versions.


File: racket-mode.info,  Node: Variables,  Next: Faces,  Prev: Commands,  Up: Top

6 Variables
***********

* Menu:

* General variables::
* REPL variables::
* Other variables::
* Experimental debugger variables::


File: racket-mode.info,  Node: General variables,  Next: REPL variables,  Up: Variables

6.1 General variables
=====================

* Menu:

* racket-program::
* racket-command-port::
* racket-command-startup::
* racket-command-timeout::
* racket-memory-limit::
* racket-error-context::
* racket-retry-as-skeleton::
* racket-user-command-line-arguments::
* racket-path-from-emacs-to-racket-function::
* racket-path-from-racket-to-emacs-function::


File: racket-mode.info,  Node: racket-program,  Next: racket-command-port,  Up: General variables

6.1.1 racket-program
--------------------

Pathname of the racket executable.


File: racket-mode.info,  Node: racket-command-port,  Next: racket-command-startup,  Prev: racket-program,  Up: General variables

6.1.2 racket-command-port
-------------------------

Port number for Racket REPL command server.


File: racket-mode.info,  Node: racket-command-startup,  Next: racket-command-timeout,  Prev: racket-command-port,  Up: General variables

6.1.3 racket-command-startup
----------------------------

What to do when the REPL and command server aren’t available to send a
command.

   • nil: Show an error message explaining that you might need to start
     or restart the Racket REPL.

   • positive number: Automatically try to start the REPL and wait that
     number of seconds for command server to become available.


File: racket-mode.info,  Node: racket-command-timeout,  Next: racket-memory-limit,  Prev: racket-command-startup,  Up: General variables

6.1.4 racket-command-timeout
----------------------------

How many seconds to wait for Racket REPL command server responses.


File: racket-mode.info,  Node: racket-memory-limit,  Next: racket-error-context,  Prev: racket-command-timeout,  Up: General variables

6.1.5 racket-memory-limit
-------------------------

Terminate the Racket process if memory use exceeds this value in MB.
Changes to this value take effect upon the next *note racket-run::.  A
value of 0 means no limit.

   Caveat: This uses Racket’s ‘custodian-limit-memory’, which does not
enforce the limit exactly.  Instead, the program will be terminated upon
the first garbage collection where memory exceeds the limit (maybe by a
significant amount).


File: racket-mode.info,  Node: racket-error-context,  Next: racket-retry-as-skeleton,  Prev: racket-memory-limit,  Up: General variables

6.1.6 racket-error-context
--------------------------

The level of context used for *note racket-run:: error stack traces.

   Each level improves stack trace information, but causes your program
to run more slowly.

   • ‘low corresponds to ‘compile-context-preservation-enabled’ ‘#f’.

   • ‘medium corresponds to ‘compile-context-preservation-enabled’ ‘#t’,
     which disables some optimizations like inlining.

   • ‘high corresponds to ‘compile-context-preservation-enabled’ ‘#t’
     and to use of ‘errortrace’, which heavily instruments your code and
     therefore may be significantly slower.

   Tip: Regardless of this setting, you can enable ‘high errortrace for
a specific *note racket-run:: using a C-u prefix.  This lets you
normally run with a faster setting, and temporarily re-run to get a
more-helpful error message.


File: racket-mode.info,  Node: racket-retry-as-skeleton,  Next: racket-user-command-line-arguments,  Prev: racket-error-context,  Up: General variables

6.1.7 racket-retry-as-skeleton
------------------------------

Retry a “skeleton” of files with errors, for identifier names?

   When true: If your source file has an error, a “skeleton” of your
file is evaluated to get identifiers from module languages, ‘require’
forms, and definitions.  That way, things like completion and *note
racket-describe:: are more likely to work while you edit the file to fix
the error.

   Otherwise, you’ll have only identifiers provided by ‘racket/base’,
until you fix the error and run again.

   You might want to disable this if you work with files that take a
very long time to expand — because this feature needs to expand again
when there is an error.


File: racket-mode.info,  Node: racket-user-command-line-arguments,  Next: racket-path-from-emacs-to-racket-function,  Prev: racket-retry-as-skeleton,  Up: General variables

6.1.8 racket-user-command-line-arguments
----------------------------------------

List of command-line arguments to supply to your Racket program.

   Accessible in your Racket program in the usual way — the parameter
‘current-command-line-arguments’ and friends.

   This is an Emacs buffer-local variable — convenient to set as a file
local variable.  For example at the end of your .rkt file:

     ;; Local Variables:
     ;; racket-user-command-line-arguments: ("-f" "bar")
     ;; End:

   Set this way, the value must be an *unquoted* list of strings.  For
example:

     ("-f" "bar")

   The following values will _not_ work:

     '("-f" "bar")
     (list "-f" "bar")


File: racket-mode.info,  Node: racket-path-from-emacs-to-racket-function,  Next: racket-path-from-racket-to-emacs-function,  Prev: racket-user-command-line-arguments,  Up: General variables

6.1.9 racket-path-from-emacs-to-racket-function
-----------------------------------------------

A function used to transform Emacs Lisp pathnames before supplying to
the Racket back end.

   If you run Emacs on Windows Subsystem for Linux, and want to run
Racket programs using Windows Racket.exe rather than Linux racket, you
can set this to ‘racket-wsl-to-windows’.  In that case you probably also
want to customize the “reverse”: *note
racket-path-from-racket-to-emacs-function::.


File: racket-mode.info,  Node: racket-path-from-racket-to-emacs-function,  Prev: racket-path-from-emacs-to-racket-function,  Up: General variables

6.1.10 racket-path-from-racket-to-emacs-function
------------------------------------------------

A function used to transform pathnames supplied by the Racket back end
before using them in Emacs.

   The default on Windows replaces back with forward slashes.  The
default elsewhere is ‘identity’.

   If you run Emacs on Windows Subsystem for Linux, and want to run
Racket programs using Windows Racket.exe rather than Linux racket, you
can set this to ‘racket-windows-to-wsl’.  In that case you probably also
want to customize the “reverse”: *note
racket-path-from-emacs-to-racket-function::.


File: racket-mode.info,  Node: REPL variables,  Next: Other variables,  Prev: General variables,  Up: Variables

6.2 REPL variables
==================

* Menu:

* racket-history-filter-regexp::
* racket-images-inline::
* racket-images-keep-last::
* racket-images-system-viewer::
* racket-pretty-print::


File: racket-mode.info,  Node: racket-history-filter-regexp,  Next: racket-images-inline,  Up: REPL variables

6.2.1 racket-history-filter-regexp
----------------------------------

Input matching this regexp are not saved on the history list.  Defaults
to a regexp ignoring all inputs of 0, 1, or 2 letters.


File: racket-mode.info,  Node: racket-images-inline,  Next: racket-images-keep-last,  Prev: racket-history-filter-regexp,  Up: REPL variables

6.2.2 racket-images-inline
--------------------------

Whether to display inline images in the REPL.


File: racket-mode.info,  Node: racket-images-keep-last,  Next: racket-images-system-viewer,  Prev: racket-images-inline,  Up: REPL variables

6.2.3 racket-images-keep-last
-----------------------------

How many images to keep in the image cache.


File: racket-mode.info,  Node: racket-images-system-viewer,  Next: racket-pretty-print,  Prev: racket-images-keep-last,  Up: REPL variables

6.2.4 racket-images-system-viewer
---------------------------------

Which system image viewer program to invoke upon M-x
‘racket-view-last-image’.


File: racket-mode.info,  Node: racket-pretty-print,  Prev: racket-images-system-viewer,  Up: REPL variables

6.2.5 racket-pretty-print
-------------------------

Use pretty-print instead of print in REPL.


File: racket-mode.info,  Node: Other variables,  Next: Experimental debugger variables,  Prev: REPL variables,  Up: Variables

6.3 Other variables
===================

* Menu:

* racket-indent-curly-as-sequence::
* racket-indent-sequence-depth::
* racket-pretty-lambda::
* racket-smart-open-bracket-enable::
* racket-logger-config::


File: racket-mode.info,  Node: racket-indent-curly-as-sequence,  Next: racket-indent-sequence-depth,  Up: Other variables

6.3.1 racket-indent-curly-as-sequence
-------------------------------------

Indent ‘{}’ with items aligned with the head item?  This is indirectly
disabled if *note racket-indent-sequence-depth:: is 0.  This is safe to
set as a file-local variable.


File: racket-mode.info,  Node: racket-indent-sequence-depth,  Next: racket-pretty-lambda,  Prev: racket-indent-curly-as-sequence,  Up: Other variables

6.3.2 racket-indent-sequence-depth
----------------------------------

To what depth should *note racket-indent-line:: search.  This affects
the indentation of forms like ’() ‘() #() – and {} if *note
racket-indent-curly-as-sequence:: is t — but not #’() #‘() ,() ,@().  A
zero value disables, giving the normal indent behavior of DrRacket or
Emacs ‘lisp-mode’ derived modes like ‘scheme-mode’.  Setting this to a
high value can make indentation noticeably slower.  This is safe to set
as a file-local variable.


File: racket-mode.info,  Node: racket-pretty-lambda,  Next: racket-smart-open-bracket-enable,  Prev: racket-indent-sequence-depth,  Up: Other variables

6.3.3 racket-pretty-lambda
--------------------------

Display lambda keywords using λ.  This is DEPRECATED. Instead use
‘prettify-symbols-mode’ in newer verisons of Emacs, or, use *note
racket-insert-lambda:: to insert actual λ characters.


File: racket-mode.info,  Node: racket-smart-open-bracket-enable,  Next: racket-logger-config,  Prev: racket-pretty-lambda,  Up: Other variables

6.3.4 racket-smart-open-bracket-enable
--------------------------------------

This variable is obsolete and has no effect.

   Instead of using this variable, you may bind the ‘[’ key to the *note
racket-smart-open-bracket:: command in the ‘racket-mode-map’ and/or
‘racket-repl-mode-map’ keymaps.


File: racket-mode.info,  Node: racket-logger-config,  Prev: racket-smart-open-bracket-enable,  Up: Other variables

6.3.5 racket-logger-config
--------------------------

Configuration of *note racket-logger-mode:: topics and levels

   The topic ‘* respresents the default level used for topics not
assigned a level.  Otherwise, the topic symbols are the same as used by
Racket’s ‘define-logger’.

   The levels are those used by Racket’s logging system: ‘debug, ‘info,
‘warning, ‘error, ‘fatal.

   For more information see:
<https://docs.racket-lang.org/reference/logging.html>

   The default value sets some known “noisy” topics to be one level
quieter.  That way you can set the ‘* topic to a level like ‘debug and
not get overhwelmed by these noisy topics.


File: racket-mode.info,  Node: Experimental debugger variables,  Prev: Other variables,  Up: Variables

6.4 Experimental debugger variables
===================================

* Menu:

* racket-debuggable-files::


File: racket-mode.info,  Node: racket-debuggable-files,  Up: Experimental debugger variables

6.4.1 racket-debuggable-files
-----------------------------

Used to tell *note racket-run:: what files may be instrumented for
debugging.  Must be a list of strings that are pathnames, such as from
‘racket--buffer-file-name’, -or-, a function that returns such a list
given the pathname of the file being run.  If any path strings are
relative, they are made absolute using ‘expand-file-name’ with the
directory of the file being run.  The symbol ‘run-file may be supplied
in the list; it will be replaced with the pathname of the file being
run.  Safe to set as a file-local variable.


File: racket-mode.info,  Node: Faces,  Prev: Variables,  Up: Top

7 Faces
*******

* Menu:

* All::


File: racket-mode.info,  Node: All,  Up: Faces

7.1 All
=======

* Menu:

* racket-keyword-argument-face::
* racket-selfeval-face::
* racket-here-string-face::
* racket-check-syntax-def-face::
* racket-check-syntax-use-face::
* racket-logger-config-face::
* racket-logger-topic-face::
* racket-logger-fatal-face::
* racket-logger-error-face::
* racket-logger-warning-face::
* racket-logger-info-face::
* racket-logger-debug-face::


File: racket-mode.info,  Node: racket-keyword-argument-face,  Next: racket-selfeval-face,  Up: All

7.1.1 racket-keyword-argument-face
----------------------------------

Face for ‘#:keyword’ arguments.


File: racket-mode.info,  Node: racket-selfeval-face,  Next: racket-here-string-face,  Prev: racket-keyword-argument-face,  Up: All

7.1.2 racket-selfeval-face
--------------------------

Face for self-evaluating expressions like numbers, symbols, strings.


File: racket-mode.info,  Node: racket-here-string-face,  Next: racket-check-syntax-def-face,  Prev: racket-selfeval-face,  Up: All

7.1.3 racket-here-string-face
-----------------------------

Face for here strings.


File: racket-mode.info,  Node: racket-check-syntax-def-face,  Next: racket-check-syntax-use-face,  Prev: racket-here-string-face,  Up: All

7.1.4 racket-check-syntax-def-face
----------------------------------

Face *note racket-check-syntax-mode:: uses to highlight definitions.


File: racket-mode.info,  Node: racket-check-syntax-use-face,  Next: racket-logger-config-face,  Prev: racket-check-syntax-def-face,  Up: All

7.1.5 racket-check-syntax-use-face
----------------------------------

Face *note racket-check-syntax-mode:: uses to highlight uses.


File: racket-mode.info,  Node: racket-logger-config-face,  Next: racket-logger-topic-face,  Prev: racket-check-syntax-use-face,  Up: All

7.1.6 racket-logger-config-face
-------------------------------

Face for *note racket-logger-mode:: configuration.


File: racket-mode.info,  Node: racket-logger-topic-face,  Next: racket-logger-fatal-face,  Prev: racket-logger-config-face,  Up: All

7.1.7 racket-logger-topic-face
------------------------------

Face for *note racket-logger-mode:: topics.


File: racket-mode.info,  Node: racket-logger-fatal-face,  Next: racket-logger-error-face,  Prev: racket-logger-topic-face,  Up: All

7.1.8 racket-logger-fatal-face
------------------------------

Face for *note racket-logger-mode:: fatal level.


File: racket-mode.info,  Node: racket-logger-error-face,  Next: racket-logger-warning-face,  Prev: racket-logger-fatal-face,  Up: All

7.1.9 racket-logger-error-face
------------------------------

Face for *note racket-logger-mode:: error level.


File: racket-mode.info,  Node: racket-logger-warning-face,  Next: racket-logger-info-face,  Prev: racket-logger-error-face,  Up: All

7.1.10 racket-logger-warning-face
---------------------------------

Face for *note racket-logger-mode:: warning level.


File: racket-mode.info,  Node: racket-logger-info-face,  Next: racket-logger-debug-face,  Prev: racket-logger-warning-face,  Up: All

7.1.11 racket-logger-info-face
------------------------------

Face for *note racket-logger-mode:: info level.


File: racket-mode.info,  Node: racket-logger-debug-face,  Prev: racket-logger-info-face,  Up: All

7.1.12 racket-logger-debug-face
-------------------------------

Face for *note racket-logger-mode:: debug level.



Tag Table:
Node: Top220
Node: Introduction3104
Ref: Introduction-Footnote-14012
Node: Install4407
Node: Configure Emacs to use MELPA4728
Node: Install Racket Mode5201
Node: Minimal Racket5490
Node: Uninstall6054
Node: Update6342
Node: Configure6789
Node: Key bindings7900
Node: Font-lock (syntax highlighting)8517
Node: Completion9801
Node: paredit11198
Node: smartparens12195
Node: eldoc12546
Node: Start faster13560
Node: Unicode input method13785
Node: Reference14481
Node: Commands14970
Node: Run15174
Node: racket-run15422
Node: racket-repl17374
Node: racket-racket18487
Node: racket-profile18691
Node: racket-profile-mode19406
Node: racket-logger20465
Node: racket-logger-mode20876
Node: racket-debug-mode22244
Node: Test25719
Node: racket-test25864
Node: racket-raco-test26485
Node: Eval26742
Node: racket-send-region26928
Node: racket-send-definition27146
Node: racket-send-last-sexp27395
Node: Visit27705
Node: racket-visit-definition27945
Node: racket-visit-module29032
Node: racket-unvisit29481
Node: racket-open-require-path29746
Node: racket-find-collection30522
Node: Learn31473
Node: racket-describe31621
Node: racket-doc32789
Node: Edit33459
Node: racket-insert-lambda34001
Node: racket-fold-all-tests34269
Node: racket-unfold-all-tests34506
Node: racket-tidy-requires34749
Node: racket-trim-requires35806
Node: racket-base-requires36521
Node: racket-indent-line37776
Node: racket-smart-open-bracket39578
Node: racket-insert-closing41082
Node: racket-cycle-paren-shapes41722
Node: racket-backward-up-list41973
Node: racket-check-syntax-mode42523
Node: racket-unicode-input-method-enable44044
Node: racket-align46055
Node: racket-unalign48033
Node: racket-complete-at-point48376
Node: Macro expand49179
Node: racket-stepper-mode49442
Node: racket-expand-file50490
Node: racket-expand-region51214
Node: racket-expand-definition51580
Node: racket-expand-last-sexp51969
Node: Other52321
Node: racket-mode-start-faster52457
Node: Variables53625
Node: General variables53842
Node: racket-program54294
Node: racket-command-port54474
Node: racket-command-startup54704
Node: racket-command-timeout55232
Node: racket-memory-limit55499
Node: racket-error-context56102
Node: racket-retry-as-skeleton57123
Node: racket-user-command-line-arguments57991
Node: racket-path-from-emacs-to-racket-function58854
Node: racket-path-from-racket-to-emacs-function59541
Node: REPL variables60300
Node: racket-history-filter-regexp60606
Node: racket-images-inline60918
Node: racket-images-keep-last61165
Node: racket-images-system-viewer61415
Node: racket-pretty-print61711
Node: Other variables61919
Node: racket-indent-curly-as-sequence62255
Node: racket-indent-sequence-depth62635
Node: racket-pretty-lambda63322
Node: racket-smart-open-bracket-enable63725
Node: racket-logger-config64183
Node: Experimental debugger variables64978
Node: racket-debuggable-files65195
Node: Faces65889
Node: All65992
Node: racket-keyword-argument-face66426
Node: racket-selfeval-face66636
Node: racket-here-string-face66895
Node: racket-check-syntax-def-face67114
Node: racket-check-syntax-use-face67397
Node: racket-logger-config-face67675
Node: racket-logger-topic-face67932
Node: racket-logger-fatal-face68176
Node: racket-logger-error-face68424
Node: racket-logger-warning-face68674
Node: racket-logger-info-face68931
Node: racket-logger-debug-face69179

End Tag Table


Local Variables:
coding: utf-8
End:
